
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db0  08009db0  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db8  08009db8  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009e34  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009ed4  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004dd8  200001b4  08009f74  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004f8c  08009f74  00024f8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a08e  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c49  00000000  00000000  0004a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f88  00000000  00000000  0004eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001da0  00000000  00000000  00050e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c41a  00000000  00000000  00052be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025f95  00000000  00000000  0007f002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114104  00000000  00000000  000a4f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b909b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008974  00000000  00000000  001b90ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009cd8 	.word	0x08009cd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009cd8 	.word	0x08009cd8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]

}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200001d4 	.word	0x200001d4

08000564 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
  if (aRxBuffer[1] == send_temp_h || aRxBuffer[1] == send_temp_nh){
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	2be3      	cmp	r3, #227	; 0xe3
 8000578:	d003      	beq.n	8000582 <HAL_I2C_SlaveRxCpltCallback+0x1e>
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 800057c:	785b      	ldrb	r3, [r3, #1]
 800057e:	2bf3      	cmp	r3, #243	; 0xf3
 8000580:	d11f      	bne.n	80005c2 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	  uint8_t crc_val = HAL_CRC_Calculate(&hcrc, &temperature, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	492c      	ldr	r1, [pc, #176]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000586:	482d      	ldr	r0, [pc, #180]	; (800063c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000588:	f001 fbde 	bl	8001d48 <HAL_CRC_Calculate>
 800058c:	4603      	mov	r3, r0
 800058e:	73bb      	strb	r3, [r7, #14]
	  aTxBuffer[0] = (temperature>>8) && 0xFF;
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf14      	ite	ne
 800059a:	2301      	movne	r3, #1
 800059c:	2300      	moveq	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005a4:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = temperature && 0xFF;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf14      	ite	ne
 80005ae:	2301      	movne	r3, #1
 80005b0:	2300      	moveq	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005b8:	705a      	strb	r2, [r3, #1]
	  aTxBuffer[2] = crc_val;
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	7093      	strb	r3, [r2, #2]
  if (aRxBuffer[1] == send_temp_h || aRxBuffer[1] == send_temp_nh){
 80005c0:	e026      	b.n	8000610 <HAL_I2C_SlaveRxCpltCallback+0xac>
  }
  else if (aRxBuffer[1] == send_hum_h || aRxBuffer[1] == send_hum_nh){
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2be5      	cmp	r3, #229	; 0xe5
 80005c8:	d003      	beq.n	80005d2 <HAL_I2C_SlaveRxCpltCallback+0x6e>
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2bf5      	cmp	r3, #245	; 0xf5
 80005d0:	d11e      	bne.n	8000610 <HAL_I2C_SlaveRxCpltCallback+0xac>
	  uint8_t crc_val = HAL_CRC_Calculate(&hcrc, &humidity, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	491b      	ldr	r1, [pc, #108]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 80005d8:	f001 fbb6 	bl	8001d48 <HAL_CRC_Calculate>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]
	  aTxBuffer[0] = (humidity>>8) && 0xFF;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 80005f4:	701a      	strb	r2, [r3, #0]
	  aTxBuffer[1] = humidity && 0xFF;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf14      	ite	ne
 80005fe:	2301      	movne	r3, #1
 8000600:	2300      	moveq	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000608:	705a      	strb	r2, [r3, #1]
	  aTxBuffer[2] = crc_val;
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	7093      	strb	r3, [r2, #2]
  }
  aRxBuffer[0]=0x00;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 800061e:	2200      	movs	r2, #0
 8000620:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000624:	2200      	movs	r2, #0
 8000626:	70da      	strb	r2, [r3, #3]
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001d4 	.word	0x200001d4
 8000634:	20000504 	.word	0x20000504
 8000638:	200001d8 	.word	0x200001d8
 800063c:	20000508 	.word	0x20000508
 8000640:	20000500 	.word	0x20000500
 8000644:	200001dc 	.word	0x200001dc

08000648 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <HAL_I2C_AddrCallback+0x58>)
 800065c:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_I2C_AddrCallback+0x58>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00c      	beq.n	8000680 <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066a:	2203      	movs	r2, #3
 800066c:	490d      	ldr	r1, [pc, #52]	; (80006a4 <HAL_I2C_AddrCallback+0x5c>)
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <HAL_I2C_AddrCallback+0x60>)
 8000670:	f002 fb90 	bl	8002d94 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 800067a:	f000 fc5b 	bl	8000f34 <Error_Handler>
    Error_Handler();
  }

  }

}
 800067e:	e00b      	b.n	8000698 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000684:	2203      	movs	r2, #3
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <HAL_I2C_AddrCallback+0x64>)
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <HAL_I2C_AddrCallback+0x60>)
 800068a:	f002 fc35 	bl	8002ef8 <HAL_I2C_Slave_Seq_Receive_IT>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 8000694:	f000 fc4e 	bl	8000f34 <Error_Handler>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200001d0 	.word	0x200001d0
 80006a4:	20000500 	.word	0x20000500
 80006a8:	20000304 	.word	0x20000304
 80006ac:	20000504 	.word	0x20000504

080006b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f002 fd92 	bl	80031f6 <HAL_I2C_GetError>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d001      	beq.n	80006dc <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80006d8:	f000 fc2c 	bl	8000f34 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f001 f89b 	bl	8001822 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_i2c_buffer();
 80006ec:	f000 fc28 	bl	8000f40 <init_i2c_buffer>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f82a 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 faca 	bl	8000c8c <MX_GPIO_Init>
  MX_CAN1_Init();
 80006f8:	f000 f896 	bl	8000828 <MX_CAN1_Init>
  MX_DAC_Init();
 80006fc:	f000 f8f4 	bl	80008e8 <MX_DAC_Init>
  MX_ETH_Init();
 8000700:	f000 f91c 	bl	800093c <MX_ETH_Init>
  MX_I2C1_Init();
 8000704:	f000 f968 	bl	80009d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000708:	f000 f9a6 	bl	8000a58 <MX_SPI1_Init>
  MX_SPI3_Init();
 800070c:	f000 f9de 	bl	8000acc <MX_SPI3_Init>
  MX_TIM1_Init();
 8000710:	f000 fa16 	bl	8000b40 <MX_TIM1_Init>
  MX_UART7_Init();
 8000714:	f000 fa8a 	bl	8000c2c <MX_UART7_Init>
  MX_CRC_Init();
 8000718:	f000 f8ba 	bl	8000890 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  init_i2c_listen();
 800071c:	f000 fc30 	bl	8000f80 <init_i2c_listen>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000720:	f006 fbe4 	bl	8006eec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <main+0x58>)
 8000726:	2100      	movs	r1, #0
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <main+0x5c>)
 800072a:	f006 fc49 	bl	8006fc0 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <main+0x60>)
 8000732:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000734:	f006 fc0e 	bl	8006f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x54>
 800073a:	bf00      	nop
 800073c:	08009d14 	.word	0x08009d14
 8000740:	08000f01 	.word	0x08000f01
 8000744:	200004f4 	.word	0x200004f4

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f009 f9f4 	bl	8009b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <SystemClock_Config+0xd8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <SystemClock_Config+0xd8>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SystemClock_Config+0xd8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <SystemClock_Config+0xdc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a25      	ldr	r2, [pc, #148]	; (8000824 <SystemClock_Config+0xdc>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xdc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b4:	2308      	movs	r3, #8
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fe59 	bl	8004484 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 fbac 	bl	8000f34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007dc:	f003 fe02 	bl	80043e4 <HAL_PWREx_EnableOverDrive>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007e6:	f000 fba5 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2103      	movs	r1, #3
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f8ea 	bl	80049e0 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000812:	f000 fb8f 	bl	8000f34 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_CAN1_Init+0x60>)
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_CAN1_Init+0x64>)
 8000830:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_CAN1_Init+0x60>)
 8000834:	2210      	movs	r2, #16
 8000836:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_CAN1_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_CAN1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_CAN1_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_CAN1_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CAN1_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CAN1_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CAN1_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CAN1_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CAN1_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CAN1_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CAN1_Init+0x60>)
 8000876:	f001 f825 	bl	80018c4 <HAL_CAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fb58 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000218 	.word	0x20000218
 800088c:	40006400 	.word	0x40006400

08000890 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_CRC_Init+0x50>)
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_CRC_Init+0x54>)
 8000898:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_CRC_Init+0x50>)
 800089c:	2201      	movs	r2, #1
 800089e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_CRC_Init+0x50>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 305;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_CRC_Init+0x50>)
 80008a8:	f240 1231 	movw	r2, #305	; 0x131
 80008ac:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_CRC_Init+0x50>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_CRC_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_CRC_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_CRC_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CRC_Init+0x50>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_CRC_Init+0x50>)
 80008ce:	f001 f9d7 	bl	8001c80 <HAL_CRC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 fb2c 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000508 	.word	0x20000508
 80008e4:	40023000 	.word	0x40023000

080008e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_DAC_Init+0x4c>)
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_DAC_Init+0x50>)
 80008fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_DAC_Init+0x4c>)
 80008fe:	f001 fbbd 	bl	800207c <HAL_DAC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000908:	f000 fb14 	bl	8000f34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_DAC_Init+0x4c>)
 800091c:	f001 fc34 	bl	8002188 <HAL_DAC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000926:	f000 fb05 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000240 	.word	0x20000240
 8000938:	40007400 	.word	0x40007400

0800093c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_ETH_Init+0x84>)
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <MX_ETH_Init+0x88>)
 8000944:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_ETH_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_ETH_Init+0x8c>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_ETH_Init+0x8c>)
 8000954:	22e1      	movs	r2, #225	; 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_ETH_Init+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_ETH_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_ETH_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_ETH_Init+0x84>)
 800096c:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <MX_ETH_Init+0x8c>)
 800096e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_ETH_Init+0x84>)
 8000972:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000976:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_ETH_Init+0x84>)
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <MX_ETH_Init+0x90>)
 800097c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_ETH_Init+0x84>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_ETH_Init+0x94>)
 8000982:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_ETH_Init+0x84>)
 8000986:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800098a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_ETH_Init+0x84>)
 800098e:	f001 fc85 	bl	800229c <HAL_ETH_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 facc 	bl	8000f34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800099c:	2238      	movs	r2, #56	; 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_ETH_Init+0x98>)
 80009a2:	f009 f8cf 	bl	8009b44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_ETH_Init+0x98>)
 80009a8:	2221      	movs	r2, #33	; 0x21
 80009aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_ETH_Init+0x98>)
 80009ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_ETH_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000254 	.word	0x20000254
 80009c4:	40028000 	.word	0x40028000
 80009c8:	200004f8 	.word	0x200004f8
 80009cc:	20000114 	.word	0x20000114
 80009d0:	20000074 	.word	0x20000074
 80009d4:	200001e0 	.word	0x200001e0

080009d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C1_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x7c>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a14:	f002 f92e 	bl	8002c74 <HAL_I2C_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a1e:	f000 fa89 	bl	8000f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a26:	f003 fc45 	bl	80042b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 fa80 	bl	8000f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a38:	f003 fc87 	bl	800434a <HAL_I2CEx_ConfigDigitalFilter>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a42:	f000 fa77 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000304 	.word	0x20000304
 8000a50:	40005400 	.word	0x40005400
 8000a54:	20303e5d 	.word	0x20303e5d

08000a58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <MX_SPI1_Init+0x70>)
 8000a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_SPI1_Init+0x6c>)
 8000ab2:	f004 fe15 	bl	80056e0 <HAL_SPI_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000abc:	f000 fa3a 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000358 	.word	0x20000358
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <MX_SPI3_Init+0x70>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000ae6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_SPI3_Init+0x6c>)
 8000b26:	f004 fddb 	bl	80056e0 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000b30:	f000 fa00 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200003bc 	.word	0x200003bc
 8000b3c:	40003c00 	.word	0x40003c00

08000b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <MX_TIM1_Init+0xe8>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b98:	4822      	ldr	r0, [pc, #136]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000b9a:	f004 fe4c 	bl	8005836 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000ba4:	f000 f9c6 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481b      	ldr	r0, [pc, #108]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000bb6:	f005 f929 	bl	8005e0c <HAL_TIM_ConfigClockSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000bc0:	f000 f9b8 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000bc4:	4817      	ldr	r0, [pc, #92]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000bc6:	f004 ff05 	bl	80059d4 <HAL_TIM_IC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bd0:	f000 f9b0 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480f      	ldr	r0, [pc, #60]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000be8:	f005 fc66 	bl	80064b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000bf2:	f000 f99f 	bl	8000f34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_TIM1_Init+0xe4>)
 8000c0e:	f005 f861 	bl	8005cd4 <HAL_TIM_IC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000c18:	f000 f98c 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000420 	.word	0x20000420
 8000c28:	40010000 	.word	0x40010000

08000c2c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_UART7_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_UART7_Init+0x58>)
 8000c70:	f005 fcce 	bl	8006610 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f95b 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000046c 	.word	0x2000046c
 8000c88:	40007800 	.word	0x40007800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	4b8f      	ldr	r3, [pc, #572]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a8e      	ldr	r2, [pc, #568]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b8c      	ldr	r3, [pc, #560]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b89      	ldr	r3, [pc, #548]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a88      	ldr	r2, [pc, #544]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b86      	ldr	r3, [pc, #536]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd2:	4b83      	ldr	r3, [pc, #524]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b7d      	ldr	r3, [pc, #500]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a7c      	ldr	r2, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b7a      	ldr	r3, [pc, #488]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b77      	ldr	r3, [pc, #476]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a76      	ldr	r2, [pc, #472]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1a:	4b71      	ldr	r3, [pc, #452]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a70      	ldr	r2, [pc, #448]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b6e      	ldr	r3, [pc, #440]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b6b      	ldr	r3, [pc, #428]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a6a      	ldr	r2, [pc, #424]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b68      	ldr	r3, [pc, #416]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	4865      	ldr	r0, [pc, #404]	; (8000ee4 <MX_GPIO_Init+0x258>)
 8000d50:	f001 ff76 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000d54:	2200      	movs	r2, #0
 8000d56:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000d5a:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <MX_GPIO_Init+0x25c>)
 8000d5c:	f001 ff70 	bl	8002c40 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	210c      	movs	r1, #12
 8000d64:	4861      	ldr	r0, [pc, #388]	; (8000eec <MX_GPIO_Init+0x260>)
 8000d66:	f001 ff6b 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000d70:	485f      	ldr	r0, [pc, #380]	; (8000ef0 <MX_GPIO_Init+0x264>)
 8000d72:	f001 ff65 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7c:	485d      	ldr	r0, [pc, #372]	; (8000ef4 <MX_GPIO_Init+0x268>)
 8000d7e:	f001 ff5f 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2174      	movs	r1, #116	; 0x74
 8000d86:	485c      	ldr	r0, [pc, #368]	; (8000ef8 <MX_GPIO_Init+0x26c>)
 8000d88:	f001 ff5a 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000d8c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4856      	ldr	r0, [pc, #344]	; (8000efc <MX_GPIO_Init+0x270>)
 8000da2:	f001 fda1 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000da6:	f248 0305 	movw	r3, #32773	; 0x8005
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	484e      	ldr	r0, [pc, #312]	; (8000ef4 <MX_GPIO_Init+0x268>)
 8000dbc:	f001 fd94 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4843      	ldr	r0, [pc, #268]	; (8000ee4 <MX_GPIO_Init+0x258>)
 8000dd8:	f001 fd86 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4840      	ldr	r0, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x264>)
 8000df0:	f001 fd7a 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4838      	ldr	r0, [pc, #224]	; (8000ee8 <MX_GPIO_Init+0x25c>)
 8000e08:	f001 fd6e 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000e0c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e12:	2311      	movs	r3, #17
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <MX_GPIO_Init+0x25c>)
 8000e26:	f001 fd5f 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e2e:	2311      	movs	r3, #17
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_GPIO_Init+0x260>)
 8000e42:	f001 fd51 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e46:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4824      	ldr	r0, [pc, #144]	; (8000ef0 <MX_GPIO_Init+0x264>)
 8000e60:	f001 fd42 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <MX_GPIO_Init+0x268>)
 8000e7e:	f001 fd33 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000e82:	2304      	movs	r3, #4
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <MX_GPIO_Init+0x26c>)
 8000e9a:	f001 fd25 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000e9e:	2370      	movs	r3, #112	; 0x70
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea2:	2311      	movs	r3, #17
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <MX_GPIO_Init+0x26c>)
 8000eb6:	f001 fd17 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_GPIO_Init+0x25c>)
 8000ed2:	f001 fd09 	bl	80028e8 <HAL_GPIO_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000

08000f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 f8ff 	bl	800710c <osDelay>
 8000f0e:	e7fb      	b.n	8000f08 <StartDefaultTask+0x8>

08000f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f22:	f000 fc8b 	bl	800183c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <init_i2c_buffer>:


CRC_HandleTypeDef hcrc;


void init_i2c_buffer(){
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	aRxBuffer[0]=0x00;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <init_i2c_buffer+0x38>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1]=0x00;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <init_i2c_buffer+0x38>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2]=0x00;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <init_i2c_buffer+0x38>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3]=0x00;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <init_i2c_buffer+0x38>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	70da      	strb	r2, [r3, #3]
	aTxBuffer[0]=0x00;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <init_i2c_buffer+0x3c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]=0x00;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <init_i2c_buffer+0x3c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]=0x00;
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <init_i2c_buffer+0x3c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	709a      	strb	r2, [r3, #2]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000504 	.word	0x20000504
 8000f7c:	20000500 	.word	0x20000500

08000f80 <init_i2c_listen>:

void init_i2c_listen(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <init_i2c_listen+0x18>)
 8000f86:	f002 f869 	bl	800305c <HAL_I2C_EnableListen_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <init_i2c_listen+0x14>
	    {
	      /* Transfer error in reception process */
	      Error_Handler();
 8000f90:	f7ff ffd0 	bl	8000f34 <Error_Handler>
	    }
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000304 	.word	0x20000304

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 fe27 	bl	8001c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_CAN_MspInit+0x7c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d127      	bne.n	800105e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_CAN_MspInit+0x80>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_CAN_MspInit+0x80>)
 8001014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_CAN_MspInit+0x80>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_CAN_MspInit+0x80>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_CAN_MspInit+0x80>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_CAN_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 800103e:	2303      	movs	r3, #3
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800104e:	2309      	movs	r3, #9
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_CAN_MspInit+0x84>)
 800105a:	f001 fc45 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40006400 	.word	0x40006400
 800106c:	40023800 	.word	0x40023800
 8001070:	40020c00 	.word	0x40020c00

08001074 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_CRC_MspInit+0x38>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_CRC_MspInit+0x3c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_CRC_MspInit+0x3c>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_CRC_MspInit+0x3c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023000 	.word	0x40023000
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_DAC_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_DAC_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8001106:	2310      	movs	r3, #16
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_DAC_MspInit+0x8c>)
 800111a:	f001 fbe5 	bl	80028e8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	2036      	movs	r0, #54	; 0x36
 8001124:	f000 fd82 	bl	8001c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001128:	2036      	movs	r0, #54	; 0x36
 800112a:	f000 fd9b 	bl	8001c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40007400 	.word	0x40007400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_ETH_MspInit+0x158>)
 8001162:	4293      	cmp	r3, r2
 8001164:	f040 8096 	bne.w	8001294 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 800116e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 8001186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a40      	ldr	r2, [pc, #256]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 800119e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a3a      	ldr	r2, [pc, #232]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 80011fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001210:	2332      	movs	r3, #50	; 0x32
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001220:	230b      	movs	r3, #11
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	481e      	ldr	r0, [pc, #120]	; (80012a4 <HAL_ETH_MspInit+0x160>)
 800122c:	f001 fb5c 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001230:	2386      	movs	r3, #134	; 0x86
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001240:	230b      	movs	r3, #11
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4817      	ldr	r0, [pc, #92]	; (80012a8 <HAL_ETH_MspInit+0x164>)
 800124c:	f001 fb4c 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001262:	230b      	movs	r3, #11
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	480f      	ldr	r0, [pc, #60]	; (80012ac <HAL_ETH_MspInit+0x168>)
 800126e:	f001 fb3b 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001272:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001284:	230b      	movs	r3, #11
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <HAL_ETH_MspInit+0x16c>)
 8001290:	f001 fb2a 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40028000 	.word	0x40028000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40021800 	.word	0x40021800

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ae      	sub	sp, #184	; 0xb8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2290      	movs	r2, #144	; 0x90
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fc35 	bl	8009b44 <memset>
  if(hi2c->Instance==I2C1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <HAL_I2C_MspInit+0xd4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d14c      	bne.n	800137e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fdcc 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012fe:	f7ff fe19 	bl	8000f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_I2C_MspInit+0xd8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_I2C_MspInit+0xd8>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_I2C_MspInit+0xd8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001322:	2312      	movs	r3, #18
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800133e:	4619      	mov	r1, r3
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <HAL_I2C_MspInit+0xdc>)
 8001342:	f001 fad1 	bl	80028e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_I2C_MspInit+0xd8>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_I2C_MspInit+0xd8>)
 800134c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_I2C_MspInit+0xd8>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	201f      	movs	r0, #31
 8001364:	f000 fc62 	bl	8001c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001368:	201f      	movs	r0, #31
 800136a:	f000 fc7b 	bl	8001c64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2020      	movs	r0, #32
 8001374:	f000 fc5a 	bl	8001c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001378:	2020      	movs	r0, #32
 800137a:	f000 fc73 	bl	8001c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	37b8      	adds	r7, #184	; 0xb8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40005400 	.word	0x40005400
 800138c:	40023800 	.word	0x40023800
 8001390:	40020400 	.word	0x40020400

08001394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_SPI_MspInit+0x148>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d144      	bne.n	8001440 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140e:	2305      	movs	r3, #5
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4832      	ldr	r0, [pc, #200]	; (80014e4 <HAL_SPI_MspInit+0x150>)
 800141a:	f001 fa65 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141e:	2308      	movs	r3, #8
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142e:	2305      	movs	r3, #5
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	482b      	ldr	r0, [pc, #172]	; (80014e8 <HAL_SPI_MspInit+0x154>)
 800143a:	f001 fa55 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800143e:	e049      	b.n	80014d4 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_SPI_MspInit+0x158>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d144      	bne.n	80014d4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_SPI_MspInit+0x14c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001492:	2304      	movs	r3, #4
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80014a2:	2307      	movs	r3, #7
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <HAL_SPI_MspInit+0x154>)
 80014ae:	f001 fa1b 	bl	80028e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014c4:	2306      	movs	r3, #6
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4808      	ldr	r0, [pc, #32]	; (80014f0 <HAL_SPI_MspInit+0x15c>)
 80014d0:	f001 fa0a 	bl	80028e8 <HAL_GPIO_Init>
}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40003c00 	.word	0x40003c00
 80014f0:	40020800 	.word	0x40020800

080014f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_TIM_Base_MspInit+0x7c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d128      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_TIM_Base_MspInit+0x80>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001558:	2301      	movs	r3, #1
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_TIM_Base_MspInit+0x84>)
 8001564:	f001 f9c0 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40010000 	.word	0x40010000
 8001574:	40023800 	.word	0x40023800
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ae      	sub	sp, #184	; 0xb8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2290      	movs	r2, #144	; 0x90
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f008 fad1 	bl	8009b44 <memset>
  if(huart->Instance==UART7)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_UART_MspInit+0xb4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d13c      	bne.n	8001626 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fc68 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015c6:	f7ff fcb5 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80015fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001614:	2308      	movs	r3, #8
 8001616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_UART_MspInit+0xbc>)
 8001622:	f001 f961 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	37b8      	adds	r7, #184	; 0xb8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40007800 	.word	0x40007800
 8001634:	40023800 	.word	0x40023800
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_InitTick+0xe0>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_InitTick+0xe0>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_InitTick+0xe0>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fbdc 	bl	8004e2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167e:	f003 fbad 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8001682:	6378      	str	r0, [r7, #52]	; 0x34
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001686:	f003 fba9 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 800168a:	4603      	mov	r3, r0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	4a23      	ldr	r2, [pc, #140]	; (8001720 <HAL_InitTick+0xe4>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3b01      	subs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_InitTick+0xe8>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_InitTick+0xec>)
 80016a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_InitTick+0xe8>)
 80016a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_InitTick+0xe8>)
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_InitTick+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_InitTick+0xe8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_InitTick+0xe8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016c4:	4817      	ldr	r0, [pc, #92]	; (8001724 <HAL_InitTick+0xe8>)
 80016c6:	f004 f8b6 	bl	8005836 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11b      	bne.n	8001710 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <HAL_InitTick+0xe8>)
 80016da:	f004 f903 	bl	80058e4 <HAL_TIM_Base_Start_IT>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ec:	2036      	movs	r0, #54	; 0x36
 80016ee:	f000 fab9 	bl	8001c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d808      	bhi.n	800170a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2036      	movs	r0, #54	; 0x36
 80016fe:	f000 fa95 	bl	8001c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_InitTick+0xf0>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e002      	b.n	8001710 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001714:	4618      	mov	r0, r3
 8001716:	3738      	adds	r7, #56	; 0x38
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	431bde83 	.word	0x431bde83
 8001724:	2000052c 	.word	0x2000052c
 8001728:	40001000 	.word	0x40001000
 800172c:	20000004 	.word	0x20000004

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <I2C1_EV_IRQHandler+0x10>)
 8001762:	f001 fc9b 	bl	800309c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000304 	.word	0x20000304

08001770 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <I2C1_ER_IRQHandler+0x10>)
 8001776:	f001 fcab 	bl	80030d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000304 	.word	0x20000304

08001784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <TIM6_DAC_IRQHandler+0x20>)
 800178a:	791b      	ldrb	r3, [r3, #4]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <TIM6_DAC_IRQHandler+0x20>)
 8001794:	f000 fc94 	bl	80020c0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <TIM6_DAC_IRQHandler+0x24>)
 800179a:	f004 f97c 	bl	8005a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000240 	.word	0x20000240
 80017a8:	2000052c 	.word	0x2000052c

080017ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fa:	f7ff ffd7 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f008 f96d 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7fe ff6f 	bl	80006e4 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001814:	08009dc0 	.word	0x08009dc0
  ldr r2, =_sbss
 8001818:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 800181c:	20004f8c 	.word	0x20004f8c

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>

08001822 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001826:	2003      	movs	r0, #3
 8001828:	f000 f9f5 	bl	8001c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182c:	200f      	movs	r0, #15
 800182e:	f7ff ff05 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001832:	f7ff fbb3 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	20000578 	.word	0x20000578

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000578 	.word	0x20000578

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008

080018c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0ed      	b.n	8001ab2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fb82 	bl	8000fec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff ffb4 	bl	8001864 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fe:	e012      	b.n	8001926 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001900:	f7ff ffb0 	bl	8001864 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d90b      	bls.n	8001926 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2205      	movs	r2, #5
 800191e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0c5      	b.n	8001ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0e5      	beq.n	8001900 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0202 	bic.w	r2, r2, #2
 8001942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001944:	f7ff ff8e 	bl	8001864 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800194a:	e012      	b.n	8001972 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800194c:	f7ff ff8a 	bl	8001864 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b0a      	cmp	r3, #10
 8001958:	d90b      	bls.n	8001972 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2205      	movs	r2, #5
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e09f      	b.n	8001ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e5      	bne.n	800194c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e1b      	ldrb	r3, [r3, #24]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e007      	b.n	80019aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7e5b      	ldrb	r3, [r3, #25]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e9b      	ldrb	r3, [r3, #26]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0220 	bic.w	r2, r2, #32
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7edb      	ldrb	r3, [r3, #27]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0210 	bic.w	r2, r2, #16
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7f1b      	ldrb	r3, [r3, #28]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0208 	orr.w	r2, r2, #8
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0208 	bic.w	r2, r2, #8
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7f5b      	ldrb	r3, [r3, #29]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0204 	orr.w	r2, r2, #4
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	ea42 0103 	orr.w	r1, r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff4c 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3e:	f7ff ff61 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	6978      	ldr	r0, [r7, #20]
 8001c4a:	f7ff ffb1 	bl	8001bb0 <NVIC_EncodePriority>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff80 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff54 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e054      	b.n	8001d3c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f5b      	ldrb	r3, [r3, #29]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff f9e6 	bl	8001074 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <HAL_CRC_Init+0xc4>)
 8001cbc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0218 	bic.w	r2, r2, #24
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	e00c      	b.n	8001cea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f948 	bl	8001f70 <HAL_CRCEx_Polynomial_Set>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e028      	b.n	8001d3c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	e004      	b.n	8001d08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6912      	ldr	r2, [r2, #16]
 8001d06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	04c11db7 	.word	0x04c11db7

08001d48 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d006      	beq.n	8001d84 <HAL_CRC_Calculate+0x3c>
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d829      	bhi.n	8001dce <HAL_CRC_Calculate+0x86>
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d019      	beq.n	8001db2 <HAL_CRC_Calculate+0x6a>
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d01e      	beq.n	8001dc0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001d82:	e024      	b.n	8001dce <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e00a      	b.n	8001da0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	441a      	add	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3f0      	bcc.n	8001d8a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e00e      	b.n	8001dd0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f812 	bl	8001de0 <CRC_Handle_8>
 8001dbc:	6138      	str	r0, [r7, #16]
      break;
 8001dbe:	e007      	b.n	8001dd0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f899 	bl	8001efc <CRC_Handle_16>
 8001dca:	6138      	str	r0, [r7, #16]
      break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_CRC_Calculate+0x88>
      break;
 8001dce:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001dd6:	693b      	ldr	r3, [r7, #16]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	e023      	b.n	8001e3a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	3301      	adds	r3, #1
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	440b      	add	r3, r1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e0c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001e1c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3303      	adds	r3, #3
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	440b      	add	r3, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001e30:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3301      	adds	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3d6      	bcc.n	8001df2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04d      	beq.n	8001eea <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	4413      	add	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d116      	bne.n	8001ea0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3301      	adds	r3, #1
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	440b      	add	r3, r1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	8b7a      	ldrh	r2, [r7, #26]
 8001e9e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d11f      	bne.n	8001eea <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	8b7a      	ldrh	r2, [r7, #26]
 8001ed6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3724      	adds	r7, #36	; 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e013      	b.n	8001f36 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	440b      	add	r3, r1
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3e6      	bcc.n	8001f0e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	4413      	add	r3, r2
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f80:	231f      	movs	r3, #31
 8001f82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f84:	bf00      	nop
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	613a      	str	r2, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b18      	cmp	r3, #24
 8001fa8:	d846      	bhi.n	8002038 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001faa:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	0800203f 	.word	0x0800203f
 8001fb4:	08002039 	.word	0x08002039
 8001fb8:	08002039 	.word	0x08002039
 8001fbc:	08002039 	.word	0x08002039
 8001fc0:	08002039 	.word	0x08002039
 8001fc4:	08002039 	.word	0x08002039
 8001fc8:	08002039 	.word	0x08002039
 8001fcc:	08002039 	.word	0x08002039
 8001fd0:	0800202d 	.word	0x0800202d
 8001fd4:	08002039 	.word	0x08002039
 8001fd8:	08002039 	.word	0x08002039
 8001fdc:	08002039 	.word	0x08002039
 8001fe0:	08002039 	.word	0x08002039
 8001fe4:	08002039 	.word	0x08002039
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	08002039 	.word	0x08002039
 8001ff0:	08002021 	.word	0x08002021
 8001ff4:	08002039 	.word	0x08002039
 8001ff8:	08002039 	.word	0x08002039
 8001ffc:	08002039 	.word	0x08002039
 8002000:	08002039 	.word	0x08002039
 8002004:	08002039 	.word	0x08002039
 8002008:	08002039 	.word	0x08002039
 800200c:	08002039 	.word	0x08002039
 8002010:	08002015 	.word	0x08002015
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d913      	bls.n	8002042 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800201e:	e010      	b.n	8002042 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b07      	cmp	r3, #7
 8002024:	d90f      	bls.n	8002046 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800202a:	e00c      	b.n	8002046 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	d90b      	bls.n	800204a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002036:	e008      	b.n	800204a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	75fb      	strb	r3, [r7, #23]
      break;
 800203c:	e006      	b.n	800204c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800203e:	bf00      	nop
 8002040:	e004      	b.n	800204c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800204a:	bf00      	nop
  }
  if (status == HAL_OK)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 0118 	bic.w	r1, r3, #24
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002070:	4618      	mov	r0, r3
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e014      	b.n	80020b8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff f808 	bl	80010b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	d120      	bne.n	800211a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e6:	d118      	bne.n	800211a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002112:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f82d 	bl	8002174 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002128:	d120      	bne.n	800216c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002138:	d118      	bne.n	800216c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002164:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f85d 	bl	8002226 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	795b      	ldrb	r3, [r3, #5]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_DAC_ConfigChannel+0x18>
 800219c:	2302      	movs	r3, #2
 800219e:	e03c      	b.n	800221a <HAL_DAC_ConfigChannel+0x92>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4013      	ands	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	22c0      	movs	r2, #192	; 0xc0
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d004      	beq.n	8002258 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e00c      	b.n	8002272 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2205      	movs	r2, #5
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228c:	b2db      	uxtb	r3, r3
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06a      	b.n	8002384 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2223      	movs	r2, #35	; 0x23
 80022bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe ff3f 	bl	8001144 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ETH_Init+0xf0>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_ETH_Init+0xf0>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_ETH_Init+0xf0>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_ETH_Init+0xf4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_ETH_Init+0xf4>)
 80022e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_ETH_Init+0xf4>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_ETH_Init+0xf4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_ETH_Init+0xf4>)
 80022fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff faa6 	bl	8001864 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800231a:	e011      	b.n	8002340 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800231c:	f7ff faa2 	bl	8001864 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d909      	bls.n	8002340 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	22e0      	movs	r2, #224	; 0xe0
 8002338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e021      	b.n	8002384 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e4      	bne.n	800231c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f958 	bl	8002608 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9ff 	bl	800275c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa55 	bl	800280e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9bd 	bl	80026ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2210      	movs	r2, #16
 800237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800

08002394 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <ETH_SetMACConfig+0x15c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	7c1b      	ldrb	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <ETH_SetMACConfig+0x28>
 80023b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ba:	e000      	b.n	80023be <ETH_SetMACConfig+0x2a>
 80023bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7c5b      	ldrb	r3, [r3, #17]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetMACConfig+0x38>
 80023c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ca:	e000      	b.n	80023ce <ETH_SetMACConfig+0x3a>
 80023cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7fdb      	ldrb	r3, [r3, #31]
 80023da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	7f92      	ldrb	r2, [r2, #30]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d102      	bne.n	80023f2 <ETH_SetMACConfig+0x5e>
 80023ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x60>
 80023f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800240a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d102      	bne.n	800241c <ETH_SetMACConfig+0x88>
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	e000      	b.n	800241e <ETH_SetMACConfig+0x8a>
 800241c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7bdb      	ldrb	r3, [r3, #15]
 8002424:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002426:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002436:	4313      	orrs	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fa14 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	f64f 7341 	movw	r3, #65345	; 0xff41
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800247a:	2a00      	cmp	r2, #0
 800247c:	d101      	bne.n	8002482 <ETH_SetMACConfig+0xee>
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	e000      	b.n	8002484 <ETH_SetMACConfig+0xf0>
 8002482:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002484:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002492:	2a01      	cmp	r2, #1
 8002494:	d101      	bne.n	800249a <ETH_SetMACConfig+0x106>
 8002496:	2208      	movs	r2, #8
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0x108>
 800249a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800249c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024a4:	2a01      	cmp	r2, #1
 80024a6:	d101      	bne.n	80024ac <ETH_SetMACConfig+0x118>
 80024a8:	2204      	movs	r2, #4
 80024aa:	e000      	b.n	80024ae <ETH_SetMACConfig+0x11a>
 80024ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024b6:	2a01      	cmp	r2, #1
 80024b8:	d101      	bne.n	80024be <ETH_SetMACConfig+0x12a>
 80024ba:	2202      	movs	r2, #2
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x12c>
 80024be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff f9cf 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	ff20810f 	.word	0xff20810f

080024f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <ETH_SetDMAConfig+0x110>)
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7b1b      	ldrb	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <ETH_SetDMAConfig+0x2c>
 800251a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800251e:	e000      	b.n	8002522 <ETH_SetDMAConfig+0x2e>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7b5b      	ldrb	r3, [r3, #13]
 8002526:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002528:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	7f52      	ldrb	r2, [r2, #29]
 800252e:	2a00      	cmp	r2, #0
 8002530:	d102      	bne.n	8002538 <ETH_SetDMAConfig+0x44>
 8002532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002536:	e000      	b.n	800253a <ETH_SetDMAConfig+0x46>
 8002538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800253a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7b9b      	ldrb	r3, [r3, #14]
 8002540:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002542:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002548:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7f1b      	ldrb	r3, [r3, #28]
 800254e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f9b      	ldrb	r3, [r3, #30]
 8002556:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002558:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800255e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002566:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002568:	4313      	orrs	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff f976 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff f947 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	f8de3f23 	.word	0xf8de3f23

08002608 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0a6      	sub	sp, #152	; 0x98
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002644:	2300      	movs	r3, #0
 8002646:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800264e:	2300      	movs	r3, #0
 8002650:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800266a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002674:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800267c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fe86 	bl	8002394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002688:	2301      	movs	r3, #1
 800268a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800268c:	2301      	movs	r3, #1
 800268e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002696:	2301      	movs	r3, #1
 8002698:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff08 	bl	80024f4 <ETH_SetDMAConfig>
}
 80026e4:	bf00      	nop
 80026e6:	3798      	adds	r7, #152	; 0x98
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3305      	adds	r3, #5
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	3204      	adds	r2, #4
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <ETH_MACAddressConfig+0x68>)
 800270e:	4413      	add	r3, r2
 8002710:	461a      	mov	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3303      	adds	r3, #3
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	061a      	lsls	r2, r3, #24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3302      	adds	r3, #2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	4313      	orrs	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <ETH_MACAddressConfig+0x6c>)
 800273e:	4413      	add	r3, r2
 8002740:	461a      	mov	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40028040 	.word	0x40028040
 8002758:	40028044 	.word	0x40028044

0800275c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e03e      	b.n	80027e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	3206      	adds	r2, #6
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d80c      	bhi.n	80027cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e004      	b.n	80027d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d9bd      	bls.n	800276a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	611a      	str	r2, [r3, #16]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e046      	b.n	80028aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6919      	ldr	r1, [r3, #16]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002858:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002860:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	3212      	adds	r2, #18
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d80c      	bhi.n	800289a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	e004      	b.n	80028a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d9b5      	bls.n	800281c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	60da      	str	r2, [r3, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e175      	b.n	8002bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8164 	bne.w	8002bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x56>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80be 	beq.w	8002bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a65      	ldr	r2, [pc, #404]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a8a:	4a61      	ldr	r2, [pc, #388]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d037      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002afe:	2309      	movs	r3, #9
 8002b00:	e012      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b02:	230a      	movs	r3, #10
 8002b04:	e010      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae86 	bls.w	8002908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40022400 	.word	0x40022400
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fb0a 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d104      	bne.n	8002d0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_I2C_Init+0x11c>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69d9      	ldr	r1, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	02008000 	.word	0x02008000

08002d94 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002db0:	2b28      	cmp	r3, #40	; 0x28
 8002db2:	f040 8098 	bne.w	8002ee6 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e08c      	b.n	8002ee8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002dce:	f248 0101 	movw	r1, #32769	; 0x8001
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f001 fa10 	bl	80041f8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e080      	b.n	8002ee8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b2a      	cmp	r3, #42	; 0x2a
 8002df8:	d12a      	bne.n	8002e50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f001 f9fb 	bl	80041f8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e10:	d11e      	bne.n	8002e50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e20:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d012      	beq.n	8002e50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002e30:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f9ff 	bl	800223a <HAL_DMA_Abort_IT>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2229      	movs	r2, #41	; 0x29
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e74:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002ed8:	f248 0101 	movw	r1, #32769	; 0x8001
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f001 f921 	bl	8004124 <I2C_Enable_IRQ>

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	08004083 	.word	0x08004083
 8002ef4:	0800320f 	.word	0x0800320f

08002ef8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f14:	2b28      	cmp	r3, #40	; 0x28
 8002f16:	f040 8098 	bne.w	800304a <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08c      	b.n	800304c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f32:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f001 f95e 	bl	80041f8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e080      	b.n	800304c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b29      	cmp	r3, #41	; 0x29
 8002f5c:	d12a      	bne.n	8002fb4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f001 f949 	bl	80041f8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f74:	d11e      	bne.n	8002fb4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f84:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f94d 	bl	800223a <HAL_DMA_Abort_IT>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	222a      	movs	r2, #42	; 0x2a
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b08      	cmp	r3, #8
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2208      	movs	r2, #8
 8003032:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800303c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f001 f86f 	bl	8004124 <I2C_Enable_IRQ>

    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08004083 	.word	0x08004083
 8003058:	0800320f 	.word	0x0800320f

0800305c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	d10d      	bne.n	800308c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2228      	movs	r2, #40	; 0x28
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_I2C_EnableListen_IT+0x3c>)
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800307e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f001 f84e 	bl	8004124 <I2C_Enable_IRQ>

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	0800320f 	.word	0x0800320f

0800309c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
  }
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	09db      	lsrs	r3, r3, #7
 80030f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003114:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	0a9b      	lsrs	r3, r3, #10
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	09db      	lsrs	r3, r3, #7
 8003126:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f043 0208 	orr.w	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003142:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	0a5b      	lsrs	r3, r3, #9
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	09db      	lsrs	r3, r3, #7
 8003154:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0202 	orr.w	r2, r3, #2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 030b 	and.w	r3, r3, #11
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fe61 	bl	8003e4c <I2C_ITError>
  }
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <I2C_Slave_ISR_IT+0x24>
 800322e:	2302      	movs	r3, #2
 8003230:	e0ec      	b.n	800340c <I2C_Slave_ISR_IT+0x1fe>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fc99 	bl	8003b8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04d      	beq.n	8003302 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800326e:	2b00      	cmp	r3, #0
 8003270:	d047      	beq.n	8003302 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d128      	bne.n	80032ce <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b28      	cmp	r3, #40	; 0x28
 8003286:	d108      	bne.n	800329a <I2C_Slave_ISR_IT+0x8c>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328e:	d104      	bne.n	800329a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003290:	6939      	ldr	r1, [r7, #16]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fd84 	bl	8003da0 <I2C_ITListenCplt>
 8003298:	e032      	b.n	8003300 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b29      	cmp	r3, #41	; 0x29
 80032a4:	d10e      	bne.n	80032c4 <I2C_Slave_ISR_IT+0xb6>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ac:	d00a      	beq.n	80032c4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2210      	movs	r2, #16
 80032b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 febf 	bl	800403a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fb3d 	bl	800393c <I2C_ITSlaveSeqCplt>
 80032c2:	e01d      	b.n	8003300 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2210      	movs	r2, #16
 80032ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80032cc:	e096      	b.n	80033fc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <I2C_Slave_ISR_IT+0xe4>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ee:	f040 8085 	bne.w	80033fc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fda7 	bl	8003e4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80032fe:	e07d      	b.n	80033fc <I2C_Slave_ISR_IT+0x1ee>
 8003300:	e07c      	b.n	80033fc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d030      	beq.n	8003370 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02a      	beq.n	8003370 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d14f      	bne.n	8003400 <I2C_Slave_ISR_IT+0x1f2>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003366:	d04b      	beq.n	8003400 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fae7 	bl	800393c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800336e:	e047      	b.n	8003400 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	08db      	lsrs	r3, r3, #3
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa15 	bl	80037ba <I2C_ITAddrCplt>
 8003390:	e037      	b.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d031      	beq.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02b      	beq.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d018      	beq.n	80033e6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80033e4:	e00d      	b.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d002      	beq.n	80033f4 <I2C_Slave_ISR_IT+0x1e6>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 faa1 	bl	800393c <I2C_ITSlaveSeqCplt>
 80033fa:	e002      	b.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003400:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <I2C_Master_ISR_DMA+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e0e1      	b.n	80035f2 <I2C_Master_ISR_DMA+0x1de>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800344a:	2b00      	cmp	r3, #0
 800344c:	d011      	beq.n	8003472 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003462:	2120      	movs	r1, #32
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fe5d 	bl	8004124 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fde5 	bl	800403a <I2C_Flush_TXDR>
 8003470:	e0ba      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	09db      	lsrs	r3, r3, #7
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d072      	beq.n	8003564 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06c      	beq.n	8003564 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d04e      	beq.n	8003542 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2bff      	cmp	r3, #255	; 0xff
 80034ba:	d906      	bls.n	80034ca <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80034c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e010      	b.n	80034ec <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034dc:	d003      	beq.n	80034e6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e002      	b.n	80034ec <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80034e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ea:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8a79      	ldrh	r1, [r7, #18]
 80034f4:	2300      	movs	r3, #0
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fde0 	bl	80040c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b22      	cmp	r3, #34	; 0x22
 800351c:	d108      	bne.n	8003530 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800352c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800352e:	e05b      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003540:	e052      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003550:	d003      	beq.n	800355a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f9b5 	bl	80038c2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003558:	e046      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc75 	bl	8003e4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003562:	e041      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d029      	beq.n	80035c4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d119      	bne.n	80035ba <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003594:	d027      	beq.n	80035e6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800359e:	d108      	bne.n	80035b2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80035b0:	e019      	b.n	80035e6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f985 	bl	80038c2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80035b8:	e015      	b.n	80035e6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fc45 	bl	8003e4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80035c2:	e010      	b.n	80035e6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa0a 	bl	80039f8 <I2C_ITMasterCplt>
 80035e4:	e000      	b.n	80035e8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80035e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b088      	sub	sp, #32
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <I2C_Slave_ISR_DMA+0x24>
 800361a:	2302      	movs	r3, #2
 800361c:	e0c9      	b.n	80037b2 <I2C_Slave_ISR_DMA+0x1b8>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 faa3 	bl	8003b8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 809a 	beq.w	8003788 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8093 	beq.w	8003788 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0b9b      	lsrs	r3, r3, #14
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0bdb      	lsrs	r3, r3, #15
 8003672:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d07f      	beq.n	800377a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0bdb      	lsrs	r3, r3, #15
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800369a:	2301      	movs	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0b9b      	lsrs	r3, r3, #14
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d128      	bne.n	800371a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d108      	bne.n	80036e6 <I2C_Slave_ISR_DMA+0xec>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d104      	bne.n	80036e6 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fb5e 	bl	8003da0 <I2C_ITListenCplt>
 80036e4:	e048      	b.n	8003778 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b29      	cmp	r3, #41	; 0x29
 80036f0:	d10e      	bne.n	8003710 <I2C_Slave_ISR_DMA+0x116>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f8:	d00a      	beq.n	8003710 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fc99 	bl	800403a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f917 	bl	800393c <I2C_ITSlaveSeqCplt>
 800370e:	e033      	b.n	8003778 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003718:	e034      	b.n	8003784 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2210      	movs	r2, #16
 8003720:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003734:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <I2C_Slave_ISR_DMA+0x14a>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003742:	d11f      	bne.n	8003784 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b21      	cmp	r3, #33	; 0x21
 8003748:	d002      	beq.n	8003750 <I2C_Slave_ISR_DMA+0x156>
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	2b29      	cmp	r3, #41	; 0x29
 800374e:	d103      	bne.n	8003758 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2221      	movs	r2, #33	; 0x21
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
 8003756:	e008      	b.n	800376a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b22      	cmp	r3, #34	; 0x22
 800375c:	d002      	beq.n	8003764 <I2C_Slave_ISR_DMA+0x16a>
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b2a      	cmp	r3, #42	; 0x2a
 8003762:	d102      	bne.n	800376a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2222      	movs	r2, #34	; 0x22
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4619      	mov	r1, r3
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fb6b 	bl	8003e4c <I2C_ITError>
      if (treatdmanack == 1U)
 8003776:	e005      	b.n	8003784 <I2C_Slave_ISR_DMA+0x18a>
 8003778:	e004      	b.n	8003784 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003782:	e011      	b.n	80037a8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003784:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003786:	e00f      	b.n	80037a8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f809 	bl	80037ba <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037d0:	2b28      	cmp	r3, #40	; 0x28
 80037d2:	d16a      	bne.n	80038aa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037f2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003800:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800380e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d138      	bne.n	800388a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	09db      	lsrs	r3, r3, #7
 800381c:	b29a      	uxth	r2, r3
 800381e:	89bb      	ldrh	r3, [r7, #12]
 8003820:	4053      	eors	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	f003 0306 	and.w	r3, r3, #6
 8003828:	2b00      	cmp	r3, #0
 800382a:	d11c      	bne.n	8003866 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800382c:	897b      	ldrh	r3, [r7, #10]
 800382e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b02      	cmp	r3, #2
 8003840:	d13b      	bne.n	80038ba <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2208      	movs	r2, #8
 800384e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003858:	89ba      	ldrh	r2, [r7, #12]
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fc fef2 	bl	8000648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003864:	e029      	b.n	80038ba <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003866:	893b      	ldrh	r3, [r7, #8]
 8003868:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800386a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fcc2 	bl	80041f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800387c:	89ba      	ldrh	r2, [r7, #12]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc fee0 	bl	8000648 <HAL_I2C_AddrCallback>
}
 8003888:	e017      	b.n	80038ba <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800388a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fcb2 	bl	80041f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800389c:	89ba      	ldrh	r2, [r7, #12]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fc fed0 	bl	8000648 <HAL_I2C_AddrCallback>
}
 80038a8:	e007      	b.n	80038ba <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d115      	bne.n	800390a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2211      	movs	r2, #17
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038f2:	2101      	movs	r1, #1
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fc7f 	bl	80041f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff fc45 	bl	8003192 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003908:	e014      	b.n	8003934 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2212      	movs	r2, #18
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800391e:	2102      	movs	r1, #2
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fc69 	bl	80041f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fc39 	bl	80031a6 <HAL_I2C_MasterRxCpltCallback>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0b9b      	lsrs	r3, r3, #14
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e00d      	b.n	800398e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	0bdb      	lsrs	r3, r3, #15
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b29      	cmp	r3, #41	; 0x29
 8003998:	d112      	bne.n	80039c0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2228      	movs	r2, #40	; 0x28
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039a8:	2101      	movs	r1, #1
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fc24 	bl	80041f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fc fdc3 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039be:	e017      	b.n	80039f0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ca:	d111      	bne.n	80039f0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2228      	movs	r2, #40	; 0x28
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2222      	movs	r2, #34	; 0x22
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039da:	2102      	movs	r1, #2
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fc0b 	bl	80041f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fc fdba 	bl	8000564 <HAL_I2C_SlaveRxCpltCallback>
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d107      	bne.n	8003a2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fbeb 	bl	80041f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2211      	movs	r2, #17
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	e00c      	b.n	8003a44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b22      	cmp	r3, #34	; 0x22
 8003a34:	d106      	bne.n	8003a44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a36:	2102      	movs	r1, #2
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fbdd 	bl	80041f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2212      	movs	r2, #18
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <I2C_ITMasterCplt+0x18c>)
 8003a50:	400b      	ands	r3, r1
 8003a52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4a      	ldr	r2, [pc, #296]	; (8003b88 <I2C_ITMasterCplt+0x190>)
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2210      	movs	r2, #16
 8003a72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b60      	cmp	r3, #96	; 0x60
 8003a8a:	d10b      	bne.n	8003aa4 <I2C_ITMasterCplt+0xac>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fac8 	bl	800403a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d002      	beq.n	8003ac2 <I2C_ITMasterCplt+0xca>
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9bf 	bl	8003e4c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ace:	e054      	b.n	8003b7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b21      	cmp	r3, #33	; 0x21
 8003ada:	d124      	bne.n	8003b26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10b      	bne.n	8003b0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fb57 	bl	80031ba <HAL_I2C_MemTxCpltCallback>
}
 8003b0c:	e035      	b.n	8003b7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fb37 	bl	8003192 <HAL_I2C_MasterTxCpltCallback>
}
 8003b24:	e029      	b.n	8003b7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b22      	cmp	r3, #34	; 0x22
 8003b30:	d123      	bne.n	8003b7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d10b      	bne.n	8003b64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fb36 	bl	80031ce <HAL_I2C_MemRxCpltCallback>
}
 8003b62:	e00a      	b.n	8003b7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fb16 	bl	80031a6 <HAL_I2C_MasterRxCpltCallback>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	fe00e800 	.word	0xfe00e800
 8003b88:	ffff0000 	.word	0xffff0000

08003b8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b21      	cmp	r3, #33	; 0x21
 8003bb6:	d002      	beq.n	8003bbe <I2C_ITSlaveCplt+0x32>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b29      	cmp	r3, #41	; 0x29
 8003bbc:	d108      	bne.n	8003bd0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bbe:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fb18 	bl	80041f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2221      	movs	r2, #33	; 0x21
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bce:	e00d      	b.n	8003bec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b22      	cmp	r3, #34	; 0x22
 8003bd4:	d002      	beq.n	8003bdc <I2C_ITSlaveCplt+0x50>
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bda:	d107      	bne.n	8003bec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bdc:	f248 0102 	movw	r1, #32770	; 0x8002
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb09 	bl	80041f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2222      	movs	r2, #34	; 0x22
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <I2C_ITSlaveCplt+0x20c>)
 8003c08:	400b      	ands	r3, r1
 8003c0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fa14 	bl	800403a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	0b9b      	lsrs	r3, r3, #14
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d013      	beq.n	8003c46 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c44:	e018      	b.n	8003c78 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	0bdb      	lsrs	r3, r3, #15
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d012      	beq.n	8003c78 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d010      	beq.n	8003d14 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8a7 	bl	8003e4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b28      	cmp	r3, #40	; 0x28
 8003d08:	d141      	bne.n	8003d8e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f847 	bl	8003da0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d12:	e03c      	b.n	8003d8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d1c:	d014      	beq.n	8003d48 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fe0c 	bl	800393c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <I2C_ITSlaveCplt+0x210>)
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fc fcb5 	bl	80006b0 <HAL_I2C_ListenCpltCallback>
}
 8003d46:	e022      	b.n	8003d8e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b22      	cmp	r3, #34	; 0x22
 8003d52:	d10e      	bne.n	8003d72 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fbfa 	bl	8000564 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d70:	e00d      	b.n	8003d8e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fc fbdb 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	fe00e800 	.word	0xfe00e800
 8003d9c:	ffff0000 	.word	0xffff0000

08003da0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <I2C_ITListenCplt+0xa8>)
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d022      	beq.n	8003e1e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e1e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9e8 	bl	80041f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fc fc39 	bl	80006b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	ffff0000 	.word	0xffff0000

08003e4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <I2C_ITError+0x194>)
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d005      	beq.n	8003e90 <I2C_ITError+0x44>
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b29      	cmp	r3, #41	; 0x29
 8003e88:	d002      	beq.n	8003e90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e8e:	d10b      	bne.n	8003ea8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e90:	2103      	movs	r1, #3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9b0 	bl	80041f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2228      	movs	r2, #40	; 0x28
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a50      	ldr	r2, [pc, #320]	; (8003fe4 <I2C_ITError+0x198>)
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	e011      	b.n	8003ecc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ea8:	f248 0103 	movw	r1, #32771	; 0x8003
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9a3 	bl	80041f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b60      	cmp	r3, #96	; 0x60
 8003ebc:	d003      	beq.n	8003ec6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d039      	beq.n	8003f4e <I2C_ITError+0x102>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b11      	cmp	r3, #17
 8003ede:	d002      	beq.n	8003ee6 <I2C_ITError+0x9a>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b21      	cmp	r3, #33	; 0x21
 8003ee4:	d133      	bne.n	8003f4e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef4:	d107      	bne.n	8003f06 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe f9b7 	bl	800227e <HAL_DMA_GetState>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d017      	beq.n	8003f46 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	4a33      	ldr	r2, [pc, #204]	; (8003fe8 <I2C_ITError+0x19c>)
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f985 	bl	800223a <HAL_DMA_Abort_IT>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d04d      	beq.n	8003fd2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f40:	4610      	mov	r0, r2
 8003f42:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f44:	e045      	b.n	8003fd2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f850 	bl	8003fec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f4c:	e041      	b.n	8003fd2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d039      	beq.n	8003fca <I2C_ITError+0x17e>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d002      	beq.n	8003f62 <I2C_ITError+0x116>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b22      	cmp	r3, #34	; 0x22
 8003f60:	d133      	bne.n	8003fca <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	d107      	bne.n	8003f82 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f979 	bl	800227e <HAL_DMA_GetState>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d017      	beq.n	8003fc2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <I2C_ITError+0x19c>)
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe f947 	bl	800223a <HAL_DMA_Abort_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d011      	beq.n	8003fd6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc0:	e009      	b.n	8003fd6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f812 	bl	8003fec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc8:	e005      	b.n	8003fd6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f80e 	bl	8003fec <I2C_TreatErrorCallback>
  }
}
 8003fd0:	e002      	b.n	8003fd8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd6:	bf00      	nop
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	ffff0000 	.word	0xffff0000
 8003fe4:	0800320f 	.word	0x0800320f
 8003fe8:	08004083 	.word	0x08004083

08003fec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b60      	cmp	r3, #96	; 0x60
 8003ffe:	d10e      	bne.n	800401e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff f8e3 	bl	80031e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800401c:	e009      	b.n	8004032 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fb49 	bl	80006c4 <HAL_I2C_ErrorCallback>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d103      	bne.n	8004058 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d007      	beq.n	8004076 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	619a      	str	r2, [r3, #24]
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	2200      	movs	r2, #0
 800409e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ff9b 	bl	8003fec <I2C_TreatErrorCallback>
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	4613      	mov	r3, r2
 80040d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d8:	7a7b      	ldrb	r3, [r7, #9]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	0d5b      	lsrs	r3, r3, #21
 80040fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <I2C_TransferConfig+0x60>)
 8004100:	430b      	orrs	r3, r1
 8004102:	43db      	mvns	r3, r3
 8004104:	ea02 0103 	and.w	r1, r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	03ff63ff 	.word	0x03ff63ff

08004124 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <I2C_Enable_IRQ+0xcc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004142:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <I2C_Enable_IRQ+0xd0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d11d      	bne.n	8004184 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	da03      	bge.n	8004158 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004156:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d103      	bne.n	8004166 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004164:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	2b20      	cmp	r3, #32
 800416a:	d103      	bne.n	8004174 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004172:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d12c      	bne.n	80041d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004180:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004182:	e027      	b.n	80041d4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da03      	bge.n	8004194 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004192:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80041a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80041b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d103      	bne.n	80041c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80041c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041c6:	887b      	ldrh	r3, [r7, #2]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d103      	bne.n	80041d4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	08003415 	.word	0x08003415
 80041f4:	080035fb 	.word	0x080035fb

080041f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00f      	beq.n	8004232 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004218:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004226:	2b28      	cmp	r3, #40	; 0x28
 8004228:	d003      	beq.n	8004232 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004230:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00f      	beq.n	800425c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004242:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004250:	2b28      	cmp	r3, #40	; 0x28
 8004252:	d003      	beq.n	800425c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800425a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800425c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004260:	2b00      	cmp	r3, #0
 8004262:	da03      	bge.n	800426c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800426a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	2b10      	cmp	r3, #16
 8004270:	d103      	bne.n	800427a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	2b20      	cmp	r3, #32
 800427e:	d103      	bne.n	8004288 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d103      	bne.n	8004296 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004294:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	43da      	mvns	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d138      	bne.n	800433c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e032      	b.n	800433e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004306:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	d139      	bne.n	80043d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800436a:	2302      	movs	r3, #2
 800436c:	e033      	b.n	80043d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800439c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a22      	ldr	r2, [pc, #136]	; (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <HAL_PWREx_EnableOverDrive+0x98>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004412:	f7fd fa27 	bl	8001864 <HAL_GetTick>
 8004416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004418:	e009      	b.n	800442e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800441a:	f7fd fa23 	bl	8001864 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004428:	d901      	bls.n	800442e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e022      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443a:	d1ee      	bne.n	800441a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800443c:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004448:	f7fd fa0c 	bl	8001864 <HAL_GetTick>
 800444c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800444e:	e009      	b.n	8004464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004450:	f7fd fa08 	bl	8001864 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800445e:	d901      	bls.n	8004464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e007      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004470:	d1ee      	bne.n	8004450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000

08004484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e29b      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8087 	beq.w	80045b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044a8:	4b96      	ldr	r3, [pc, #600]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d00c      	beq.n	80044ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b4:	4b93      	ldr	r3, [pc, #588]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d112      	bne.n	80044e6 <HAL_RCC_OscConfig+0x62>
 80044c0:	4b90      	ldr	r3, [pc, #576]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ce:	4b8d      	ldr	r3, [pc, #564]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x130>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d168      	bne.n	80045b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e275      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x7a>
 80044f0:	4b84      	ldr	r3, [pc, #528]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a83      	ldr	r2, [pc, #524]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x9c>
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b7c      	ldr	r3, [pc, #496]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7b      	ldr	r2, [pc, #492]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0xc0>
 800452a:	4b76      	ldr	r3, [pc, #472]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a75      	ldr	r2, [pc, #468]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b73      	ldr	r3, [pc, #460]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a72      	ldr	r2, [pc, #456]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0xd8>
 8004544:	4b6f      	ldr	r3, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800454a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b6c      	ldr	r3, [pc, #432]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6b      	ldr	r2, [pc, #428]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd f97e 	bl	8001864 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fd f97a 	bl	8001864 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e229      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd f96a 	bl	8001864 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd f966 	bl	8001864 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e215      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	4b57      	ldr	r3, [pc, #348]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x110>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d069      	beq.n	8004696 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c2:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b4d      	ldr	r3, [pc, #308]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d11c      	bne.n	8004614 <HAL_RCC_OscConfig+0x190>
 80045da:	4b4a      	ldr	r3, [pc, #296]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x17a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1e9      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	493d      	ldr	r1, [pc, #244]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e040      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d023      	beq.n	8004664 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a38      	ldr	r2, [pc, #224]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f91c 	bl	8001864 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd f918 	bl	8001864 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1c7      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4929      	ldr	r1, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
 8004662:	e018      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f8f8 	bl	8001864 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fd f8f4 	bl	8001864 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1a3      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d038      	beq.n	8004714 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd f8d5 	bl	8001864 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fd f8d1 	bl	8001864 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e180      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x23a>
 80046dc:	e01a      	b.n	8004714 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	4a08      	ldr	r2, [pc, #32]	; (8004704 <HAL_RCC_OscConfig+0x280>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd f8bb 	bl	8001864 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fd f8b7 	bl	8001864 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d903      	bls.n	8004708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e166      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
 8004704:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004708:	4b92      	ldr	r3, [pc, #584]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1ee      	bne.n	80046f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a4 	beq.w	800486a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b89      	ldr	r3, [pc, #548]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	4a88      	ldr	r2, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	; 0x40
 800473a:	4b86      	ldr	r3, [pc, #536]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	4b83      	ldr	r3, [pc, #524]	; (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004756:	4b80      	ldr	r3, [pc, #512]	; (8004958 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7f      	ldr	r2, [pc, #508]	; (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fd f87f 	bl	8001864 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd f87b 	bl	8001864 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e12a      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477c:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x31a>
 8004790:	4b70      	ldr	r3, [pc, #448]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a6f      	ldr	r2, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	e02d      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x33c>
 80047a6:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a6a      	ldr	r2, [pc, #424]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a67      	ldr	r2, [pc, #412]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x35e>
 80047c8:	4b62      	ldr	r3, [pc, #392]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a61      	ldr	r2, [pc, #388]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	4b5f      	ldr	r3, [pc, #380]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a5e      	ldr	r2, [pc, #376]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
 80047e2:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a5b      	ldr	r2, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fd f82f 	bl	8001864 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd f82b 	bl	8001864 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0d8      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b4c      	ldr	r3, [pc, #304]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x386>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd f819 	bl	8001864 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fd f815 	bl	8001864 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0c2      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80ae 	beq.w	80049d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004874:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d06d      	beq.n	800495c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d14b      	bne.n	8004920 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b32      	ldr	r3, [pc, #200]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a31      	ldr	r2, [pc, #196]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc ffe6 	bl	8001864 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fc ffe2 	bl	8001864 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e091      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	491b      	ldr	r1, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fc ffb4 	bl	8001864 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fc ffb0 	bl	8001864 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e05f      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x47c>
 800491e:	e057      	b.n	80049d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0b      	ldr	r2, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fc ff9a 	bl	8001864 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fc ff96 	bl	8001864 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e045      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_OscConfig+0x4d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x4b0>
 8004952:	e03d      	b.n	80049d0 <HAL_RCC_OscConfig+0x54c>
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800495c:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <HAL_RCC_OscConfig+0x558>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d030      	beq.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d129      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d122      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d119      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d10f      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0d0      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049f8:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d910      	bls.n	8004a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b67      	ldr	r3, [pc, #412]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 020f 	bic.w	r2, r3, #15
 8004a0e:	4965      	ldr	r1, [pc, #404]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0b8      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a40:	4b59      	ldr	r3, [pc, #356]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a58      	ldr	r2, [pc, #352]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a52      	ldr	r2, [pc, #328]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b50      	ldr	r3, [pc, #320]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	494d      	ldr	r1, [pc, #308]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d040      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d115      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e07f      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa2:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e073      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06b      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac2:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f023 0203 	bic.w	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4936      	ldr	r1, [pc, #216]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fec6 	bl	8001864 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fc fec2 	bl	8001864 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e053      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 020c 	and.w	r2, r3, #12
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1eb      	bne.n	8004adc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d210      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 020f 	bic.w	r2, r3, #15
 8004b1a:	4922      	ldr	r1, [pc, #136]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e032      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4916      	ldr	r1, [pc, #88]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	490e      	ldr	r1, [pc, #56]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b72:	f000 f821 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	490a      	ldr	r1, [pc, #40]	; (8004bac <HAL_RCC_ClockConfig+0x1cc>)
 8004b84:	5ccb      	ldrb	r3, [r1, r3]
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_RCC_ClockConfig+0x1d4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fd52 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023c00 	.word	0x40023c00
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08009d38 	.word	0x08009d38
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b094      	sub	sp, #80	; 0x50
 8004bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc8:	2300      	movs	r3, #0
 8004bca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd0:	4b79      	ldr	r3, [pc, #484]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d00d      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	f200 80e1 	bhi.w	8004da4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x34>
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bea:	e0db      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b73      	ldr	r3, [pc, #460]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf0:	e0db      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf2:	4b73      	ldr	r3, [pc, #460]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf6:	e0d8      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf8:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c02:	4b6d      	ldr	r3, [pc, #436]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d063      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	2200      	movs	r2, #0
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3c:	0150      	lsls	r0, r2, #5
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4621      	mov	r1, r4
 8004c44:	1a51      	subs	r1, r2, r1
 8004c46:	6139      	str	r1, [r7, #16]
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	018b      	lsls	r3, r1, #6
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c66:	4651      	mov	r1, sl
 8004c68:	018a      	lsls	r2, r1, #6
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c70:	4659      	mov	r1, fp
 8004c72:	eb63 0901 	sbc.w	r9, r3, r1
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	4699      	mov	r9, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	eb18 0303 	adds.w	r3, r8, r3
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	462b      	mov	r3, r5
 8004c98:	eb49 0303 	adc.w	r3, r9, r3
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004caa:	4629      	mov	r1, r5
 8004cac:	024b      	lsls	r3, r1, #9
 8004cae:	4621      	mov	r1, r4
 8004cb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	024a      	lsls	r2, r1, #9
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cc8:	f7fb faba 	bl	8000240 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	e058      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
 8004cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d02:	0150      	lsls	r0, r2, #5
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d28:	ebb2 040a 	subs.w	r4, r2, sl
 8004d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	00eb      	lsls	r3, r5, #3
 8004d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3e:	00e2      	lsls	r2, r4, #3
 8004d40:	4614      	mov	r4, r2
 8004d42:	461d      	mov	r5, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	18e3      	adds	r3, r4, r3
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	eb45 0303 	adc.w	r3, r5, r3
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	028b      	lsls	r3, r1, #10
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d68:	4621      	mov	r1, r4
 8004d6a:	028a      	lsls	r2, r1, #10
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	61fa      	str	r2, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	f7fb fa60 	bl	8000240 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	3301      	adds	r3, #1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004da2:	e002      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8004da6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3750      	adds	r7, #80	; 0x50
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004de0:	f7ff fff0 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0a9b      	lsrs	r3, r3, #10
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	; (8004e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	08009d48 	.word	0x08009d48

08004e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e08:	f7ff ffdc 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0b5b      	lsrs	r3, r3, #13
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	08009d48 	.word	0x08009d48

08004e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	220f      	movs	r2, #15
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0203 	and.w	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_GetClockConfig+0x5c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	08db      	lsrs	r3, r3, #3
 8004e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <HAL_RCC_GetClockConfig+0x60>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40023c00 	.word	0x40023c00

08004e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d012      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ec2:	6093      	str	r3, [r2, #8]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	4964      	ldr	r1, [pc, #400]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eea:	4b5d      	ldr	r3, [pc, #372]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	4959      	ldr	r1, [pc, #356]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	494a      	ldr	r1, [pc, #296]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f44:	d101      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 808b 	beq.w	800508a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f74:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	4a39      	ldr	r2, [pc, #228]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fc fc64 	bl	8001864 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa0:	f7fc fc60 	bl	8001864 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e38f      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fbe:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d035      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d02e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fdc:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d114      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc fc28 	bl	8001864 <HAL_GetTick>
 8005014:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005016:	e00a      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fc fc24 	bl	8001864 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e351      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ee      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005046:	d111      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005056:	400b      	ands	r3, r1
 8005058:	4901      	ldr	r1, [pc, #4]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
 800505e:	e00b      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005060:	40023800 	.word	0x40023800
 8005064:	40007000 	.word	0x40007000
 8005068:	0ffffcff 	.word	0x0ffffcff
 800506c:	4bac      	ldr	r3, [pc, #688]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4aab      	ldr	r2, [pc, #684]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005072:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005076:	6093      	str	r3, [r2, #8]
 8005078:	4ba9      	ldr	r3, [pc, #676]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005084:	49a6      	ldr	r1, [pc, #664]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005086:	4313      	orrs	r3, r2
 8005088:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005096:	4ba2      	ldr	r3, [pc, #648]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509c:	4aa0      	ldr	r2, [pc, #640]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050a6:	4b9e      	ldr	r3, [pc, #632]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	499b      	ldr	r1, [pc, #620]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c4:	4b96      	ldr	r3, [pc, #600]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d2:	4993      	ldr	r1, [pc, #588]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050e6:	4b8e      	ldr	r3, [pc, #568]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050f4:	498a      	ldr	r1, [pc, #552]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005108:	4b85      	ldr	r3, [pc, #532]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005116:	4982      	ldr	r1, [pc, #520]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800512a:	4b7d      	ldr	r3, [pc, #500]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4979      	ldr	r1, [pc, #484]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800514c:	4b74      	ldr	r3, [pc, #464]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	4971      	ldr	r1, [pc, #452]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800516e:	4b6c      	ldr	r3, [pc, #432]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f023 020c 	bic.w	r2, r3, #12
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517c:	4968      	ldr	r1, [pc, #416]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005190:	4b63      	ldr	r3, [pc, #396]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	4960      	ldr	r1, [pc, #384]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051b2:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c0:	4957      	ldr	r1, [pc, #348]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051d4:	4b52      	ldr	r3, [pc, #328]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	494f      	ldr	r1, [pc, #316]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	4946      	ldr	r1, [pc, #280]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005218:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	493e      	ldr	r1, [pc, #248]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	4935      	ldr	r1, [pc, #212]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800525c:	4b30      	ldr	r3, [pc, #192]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526a:	492d      	ldr	r1, [pc, #180]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800527e:	4b28      	ldr	r3, [pc, #160]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528c:	4924      	ldr	r1, [pc, #144]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529c:	d101      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800529e:	2301      	movs	r3, #1
 80052a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052cc:	4914      	ldr	r1, [pc, #80]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f0:	490b      	ldr	r1, [pc, #44]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	4902      	ldr	r1, [pc, #8]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005330:	4b8a      	ldr	r3, [pc, #552]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	4986      	ldr	r1, [pc, #536]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005364:	497d      	ldr	r1, [pc, #500]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d006      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80d6 	beq.w	800552c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005380:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a75      	ldr	r2, [pc, #468]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800538a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fc fa6a 	bl	8001864 <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005394:	f7fc fa66 	bl	8001864 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e195      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053a6:	4b6d      	ldr	r3, [pc, #436]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11d      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053c6:	4b65      	ldr	r3, [pc, #404]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053d4:	4b61      	ldr	r3, [pc, #388]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053da:	0e1b      	lsrs	r3, r3, #24
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	019a      	lsls	r2, r3, #6
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	4958      	ldr	r1, [pc, #352]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02e      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542c:	d129      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800542e:	4b4b      	ldr	r3, [pc, #300]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800543c:	4b47      	ldr	r3, [pc, #284]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005442:	0f1b      	lsrs	r3, r3, #28
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	019a      	lsls	r2, r3, #6
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	061b      	lsls	r3, r3, #24
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	071b      	lsls	r3, r3, #28
 8005462:	493e      	ldr	r1, [pc, #248]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800546a:	4b3c      	ldr	r3, [pc, #240]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	f023 021f 	bic.w	r2, r3, #31
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	3b01      	subs	r3, #1
 800547a:	4938      	ldr	r1, [pc, #224]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01d      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	0e1b      	lsrs	r3, r3, #24
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800549c:	4b2f      	ldr	r3, [pc, #188]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a2:	0f1b      	lsrs	r3, r3, #28
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	019a      	lsls	r2, r3, #6
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	431a      	orrs	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	4926      	ldr	r1, [pc, #152]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d011      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	019a      	lsls	r2, r3, #6
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	061b      	lsls	r3, r3, #24
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	491a      	ldr	r1, [pc, #104]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054fa:	4b18      	ldr	r3, [pc, #96]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fc f9ad 	bl	8001864 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800550e:	f7fc f9a9 	bl	8001864 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0d8      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b01      	cmp	r3, #1
 8005530:	f040 80ce 	bne.w	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a08      	ldr	r2, [pc, #32]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800553a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fc f990 	bl	8001864 <HAL_GetTick>
 8005544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005546:	e00b      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005548:	f7fc f98c 	bl	8001864 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d904      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e0bb      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005560:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556c:	d0ec      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800558a:	2b00      	cmp	r3, #0
 800558c:	d02e      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d12a      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a4:	4b4d      	ldr	r3, [pc, #308]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	0f1b      	lsrs	r3, r3, #28
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	019a      	lsls	r2, r3, #6
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	4944      	ldr	r1, [pc, #272]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055d2:	4b42      	ldr	r3, [pc, #264]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	493d      	ldr	r1, [pc, #244]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d022      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005600:	d11d      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005602:	4b36      	ldr	r3, [pc, #216]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005610:	4b32      	ldr	r3, [pc, #200]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	0f1b      	lsrs	r3, r3, #28
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	019a      	lsls	r2, r3, #6
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	431a      	orrs	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	061b      	lsls	r3, r3, #24
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	071b      	lsls	r3, r3, #28
 8005636:	4929      	ldr	r1, [pc, #164]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d028      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	019a      	lsls	r2, r3, #6
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	4917      	ldr	r1, [pc, #92]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4911      	ldr	r1, [pc, #68]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a8:	f7fc f8dc 	bl	8001864 <HAL_GetTick>
 80056ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056b0:	f7fc f8d8 	bl	8001864 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e007      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d1ef      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800

080056e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e09d      	b.n	800582e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d009      	beq.n	8005718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	61da      	str	r2, [r3, #28]
 800570a:	e005      	b.n	8005718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb fe2e 	bl	8001394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005758:	d902      	bls.n	8005760 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e002      	b.n	8005766 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005764:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800576e:	d007      	beq.n	8005780 <HAL_SPI_Init+0xa0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005778:	d002      	beq.n	8005780 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	ea42 0103 	orr.w	r1, r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	0c1b      	lsrs	r3, r3, #16
 80057dc:	f003 0204 	and.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057fc:	ea42 0103 	orr.w	r1, r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e049      	b.n	80058dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb fe49 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fbbb 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e054      	b.n	80059a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d01d      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	; (80059bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIM_Base_Start_IT+0xe8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d115      	bne.n	8005990 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_TIM_Base_Start_IT+0xec>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b06      	cmp	r3, #6
 8005974:	d015      	beq.n	80059a2 <HAL_TIM_Base_Start_IT+0xbe>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d011      	beq.n	80059a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	e008      	b.n	80059a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e000      	b.n	80059a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40001800 	.word	0x40001800
 80059d0:	00010007 	.word	0x00010007

080059d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e049      	b.n	8005a7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f841 	bl	8005a82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 faec 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d122      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d11b      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0202 	mvn.w	r2, #2
 8005ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fa6b 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005ade:	e005      	b.n	8005aec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa5d 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa6e 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d122      	bne.n	8005b46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d11b      	bne.n	8005b46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0204 	mvn.w	r2, #4
 8005b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa41 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005b32:	e005      	b.n	8005b40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa33 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa44 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d122      	bne.n	8005b9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d11b      	bne.n	8005b9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f06f 0208 	mvn.w	r2, #8
 8005b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa17 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005b86:	e005      	b.n	8005b94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa09 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa1a 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d122      	bne.n	8005bee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0210 	mvn.w	r2, #16
 8005bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f9ed 	bl	8005fb4 <HAL_TIM_IC_CaptureCallback>
 8005bda:	e005      	b.n	8005be8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f9df 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9f0 	bl	8005fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10e      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d107      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0201 	mvn.w	r2, #1
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fb f97b 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d10e      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d107      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fcd1 	bl	80065e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c54:	d10e      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fcc4 	bl	80065fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d10e      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d107      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f99e 	bl	8005fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d10e      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d107      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0220 	mvn.w	r2, #32
 8005cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fc84 	bl	80065d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e088      	b.n	8005e04 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11b      	bne.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6819      	ldr	r1, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f000 fa0e 	bl	8006130 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 020c 	bic.w	r2, r2, #12
 8005d22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	619a      	str	r2, [r3, #24]
 8005d36:	e060      	b.n	8005dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d11c      	bne.n	8005d78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f000 fa92 	bl	8006276 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6999      	ldr	r1, [r3, #24]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	021a      	lsls	r2, r3, #8
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	619a      	str	r2, [r3, #24]
 8005d76:	e040      	b.n	8005dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f000 fadf 	bl	8006350 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 020c 	bic.w	r2, r2, #12
 8005da0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	61da      	str	r2, [r3, #28]
 8005db4:	e021      	b.n	8005dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d11c      	bne.n	8005df6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f000 fafc 	bl	80063c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69da      	ldr	r2, [r3, #28]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69d9      	ldr	r1, [r3, #28]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	61da      	str	r2, [r3, #28]
 8005df4:	e001      	b.n	8005dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e0b4      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x186>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4b56      	ldr	r3, [pc, #344]	; (8005f9c <HAL_TIM_ConfigClockSource+0x190>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e60:	d03e      	beq.n	8005ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	f200 8087 	bhi.w	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	f000 8086 	beq.w	8005f7e <HAL_TIM_ConfigClockSource+0x172>
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d87f      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b70      	cmp	r3, #112	; 0x70
 8005e7a:	d01a      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d87b      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d050      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x11a>
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d877      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b50      	cmp	r3, #80	; 0x50
 8005e8a:	d03c      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0xfa>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d873      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d058      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0x13a>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d86f      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d064      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d86b      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d060      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d867      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d05c      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d05a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	e062      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6899      	ldr	r1, [r3, #8]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f000 fad9 	bl	8006478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	609a      	str	r2, [r3, #8]
      break;
 8005ede:	e04f      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6899      	ldr	r1, [r3, #8]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f000 fac2 	bl	8006478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f02:	609a      	str	r2, [r3, #8]
      break;
 8005f04:	e03c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f000 f980 	bl	8006218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2150      	movs	r1, #80	; 0x50
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fa8f 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005f24:	e02c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f000 f9dc 	bl	80062f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2160      	movs	r1, #96	; 0x60
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fa7f 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005f44:	e01c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 f960 	bl	8006218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fa6f 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e00c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f000 fa66 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005f76:	e003      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	fffeff88 	.word	0xfffeff88

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d027      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d023      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <TIM_Base_SetConfig+0x138>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <TIM_Base_SetConfig+0x13c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <TIM_Base_SetConfig+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40010400 	.word	0x40010400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	40001800 	.word	0x40001800
 8006128:	40001c00 	.word	0x40001c00
 800612c:	40002000 	.word	0x40002000

08006130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a28      	ldr	r2, [pc, #160]	; (80061fc <TIM_TI1_SetConfig+0xcc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01b      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d017      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a25      	ldr	r2, [pc, #148]	; (8006200 <TIM_TI1_SetConfig+0xd0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a24      	ldr	r2, [pc, #144]	; (8006204 <TIM_TI1_SetConfig+0xd4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00f      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a23      	ldr	r2, [pc, #140]	; (8006208 <TIM_TI1_SetConfig+0xd8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00b      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a22      	ldr	r2, [pc, #136]	; (800620c <TIM_TI1_SetConfig+0xdc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d007      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a21      	ldr	r2, [pc, #132]	; (8006210 <TIM_TI1_SetConfig+0xe0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_TI1_SetConfig+0x66>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a20      	ldr	r2, [pc, #128]	; (8006214 <TIM_TI1_SetConfig+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d101      	bne.n	800619a <TIM_TI1_SetConfig+0x6a>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <TIM_TI1_SetConfig+0x6c>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e003      	b.n	80061ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 030a 	bic.w	r3, r3, #10
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f003 030a 	and.w	r3, r3, #10
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40001800 	.word	0x40001800

08006218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 030a 	bic.w	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
 8006282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f023 0210 	bic.w	r2, r3, #16
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f023 0210 	bic.w	r2, r3, #16
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	031b      	lsls	r3, r3, #12
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	621a      	str	r2, [r3, #32]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	b2db      	uxtb	r3, r3
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	031b      	lsls	r3, r3, #12
 800640c:	b29b      	uxth	r3, r3
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800641a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	031b      	lsls	r3, r3, #12
 8006420:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	f043 0307 	orr.w	r3, r3, #7
 8006464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	431a      	orrs	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e06d      	b.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800650a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d01d      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1a      	ldr	r2, [pc, #104]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10c      	bne.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	4313      	orrs	r3, r2
 8006590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40001800 	.word	0x40001800

080065d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e040      	b.n	80066a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fa ffa2 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	; 0x24
 800663c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f82c 	bl	80066ac <UART_SetConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e022      	b.n	80066a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa84 	bl	8006b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800667a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800668a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fb0b 	bl	8006cb8 <UART_CheckIdleState>
 80066a2:	4603      	mov	r3, r0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4ba6      	ldr	r3, [pc, #664]	; (8006970 <UART_SetConfig+0x2c4>)
 80066d8:	4013      	ands	r3, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6812      	ldr	r2, [r2, #0]
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a94      	ldr	r2, [pc, #592]	; (8006974 <UART_SetConfig+0x2c8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d120      	bne.n	800676a <UART_SetConfig+0xbe>
 8006728:	4b93      	ldr	r3, [pc, #588]	; (8006978 <UART_SetConfig+0x2cc>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b03      	cmp	r3, #3
 8006734:	d816      	bhi.n	8006764 <UART_SetConfig+0xb8>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x90>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	0800674d 	.word	0x0800674d
 8006740:	08006759 	.word	0x08006759
 8006744:	08006753 	.word	0x08006753
 8006748:	0800675f 	.word	0x0800675f
 800674c:	2301      	movs	r3, #1
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e150      	b.n	80069f4 <UART_SetConfig+0x348>
 8006752:	2302      	movs	r3, #2
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	e14d      	b.n	80069f4 <UART_SetConfig+0x348>
 8006758:	2304      	movs	r3, #4
 800675a:	77fb      	strb	r3, [r7, #31]
 800675c:	e14a      	b.n	80069f4 <UART_SetConfig+0x348>
 800675e:	2308      	movs	r3, #8
 8006760:	77fb      	strb	r3, [r7, #31]
 8006762:	e147      	b.n	80069f4 <UART_SetConfig+0x348>
 8006764:	2310      	movs	r3, #16
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e144      	b.n	80069f4 <UART_SetConfig+0x348>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a83      	ldr	r2, [pc, #524]	; (800697c <UART_SetConfig+0x2d0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d132      	bne.n	80067da <UART_SetConfig+0x12e>
 8006774:	4b80      	ldr	r3, [pc, #512]	; (8006978 <UART_SetConfig+0x2cc>)
 8006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d828      	bhi.n	80067d4 <UART_SetConfig+0x128>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0xdc>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067bd 	.word	0x080067bd
 800678c:	080067d5 	.word	0x080067d5
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067d5 	.word	0x080067d5
 80067a0:	080067d5 	.word	0x080067d5
 80067a4:	080067d5 	.word	0x080067d5
 80067a8:	080067c3 	.word	0x080067c3
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067cf 	.word	0x080067cf
 80067bc:	2300      	movs	r3, #0
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e118      	b.n	80069f4 <UART_SetConfig+0x348>
 80067c2:	2302      	movs	r3, #2
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e115      	b.n	80069f4 <UART_SetConfig+0x348>
 80067c8:	2304      	movs	r3, #4
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e112      	b.n	80069f4 <UART_SetConfig+0x348>
 80067ce:	2308      	movs	r3, #8
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e10f      	b.n	80069f4 <UART_SetConfig+0x348>
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e10c      	b.n	80069f4 <UART_SetConfig+0x348>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a68      	ldr	r2, [pc, #416]	; (8006980 <UART_SetConfig+0x2d4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d120      	bne.n	8006826 <UART_SetConfig+0x17a>
 80067e4:	4b64      	ldr	r3, [pc, #400]	; (8006978 <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067ee:	2b30      	cmp	r3, #48	; 0x30
 80067f0:	d013      	beq.n	800681a <UART_SetConfig+0x16e>
 80067f2:	2b30      	cmp	r3, #48	; 0x30
 80067f4:	d814      	bhi.n	8006820 <UART_SetConfig+0x174>
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d009      	beq.n	800680e <UART_SetConfig+0x162>
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d810      	bhi.n	8006820 <UART_SetConfig+0x174>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <UART_SetConfig+0x15c>
 8006802:	2b10      	cmp	r3, #16
 8006804:	d006      	beq.n	8006814 <UART_SetConfig+0x168>
 8006806:	e00b      	b.n	8006820 <UART_SetConfig+0x174>
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e0f2      	b.n	80069f4 <UART_SetConfig+0x348>
 800680e:	2302      	movs	r3, #2
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e0ef      	b.n	80069f4 <UART_SetConfig+0x348>
 8006814:	2304      	movs	r3, #4
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e0ec      	b.n	80069f4 <UART_SetConfig+0x348>
 800681a:	2308      	movs	r3, #8
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e0e9      	b.n	80069f4 <UART_SetConfig+0x348>
 8006820:	2310      	movs	r3, #16
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e0e6      	b.n	80069f4 <UART_SetConfig+0x348>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a56      	ldr	r2, [pc, #344]	; (8006984 <UART_SetConfig+0x2d8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d120      	bne.n	8006872 <UART_SetConfig+0x1c6>
 8006830:	4b51      	ldr	r3, [pc, #324]	; (8006978 <UART_SetConfig+0x2cc>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800683a:	2bc0      	cmp	r3, #192	; 0xc0
 800683c:	d013      	beq.n	8006866 <UART_SetConfig+0x1ba>
 800683e:	2bc0      	cmp	r3, #192	; 0xc0
 8006840:	d814      	bhi.n	800686c <UART_SetConfig+0x1c0>
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d009      	beq.n	800685a <UART_SetConfig+0x1ae>
 8006846:	2b80      	cmp	r3, #128	; 0x80
 8006848:	d810      	bhi.n	800686c <UART_SetConfig+0x1c0>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <UART_SetConfig+0x1a8>
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d006      	beq.n	8006860 <UART_SetConfig+0x1b4>
 8006852:	e00b      	b.n	800686c <UART_SetConfig+0x1c0>
 8006854:	2300      	movs	r3, #0
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e0cc      	b.n	80069f4 <UART_SetConfig+0x348>
 800685a:	2302      	movs	r3, #2
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e0c9      	b.n	80069f4 <UART_SetConfig+0x348>
 8006860:	2304      	movs	r3, #4
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e0c6      	b.n	80069f4 <UART_SetConfig+0x348>
 8006866:	2308      	movs	r3, #8
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e0c3      	b.n	80069f4 <UART_SetConfig+0x348>
 800686c:	2310      	movs	r3, #16
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e0c0      	b.n	80069f4 <UART_SetConfig+0x348>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a44      	ldr	r2, [pc, #272]	; (8006988 <UART_SetConfig+0x2dc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d125      	bne.n	80068c8 <UART_SetConfig+0x21c>
 800687c:	4b3e      	ldr	r3, [pc, #248]	; (8006978 <UART_SetConfig+0x2cc>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	d017      	beq.n	80068bc <UART_SetConfig+0x210>
 800688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006890:	d817      	bhi.n	80068c2 <UART_SetConfig+0x216>
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d00b      	beq.n	80068b0 <UART_SetConfig+0x204>
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d811      	bhi.n	80068c2 <UART_SetConfig+0x216>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <UART_SetConfig+0x1fe>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d006      	beq.n	80068b6 <UART_SetConfig+0x20a>
 80068a8:	e00b      	b.n	80068c2 <UART_SetConfig+0x216>
 80068aa:	2300      	movs	r3, #0
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e0a1      	b.n	80069f4 <UART_SetConfig+0x348>
 80068b0:	2302      	movs	r3, #2
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e09e      	b.n	80069f4 <UART_SetConfig+0x348>
 80068b6:	2304      	movs	r3, #4
 80068b8:	77fb      	strb	r3, [r7, #31]
 80068ba:	e09b      	b.n	80069f4 <UART_SetConfig+0x348>
 80068bc:	2308      	movs	r3, #8
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e098      	b.n	80069f4 <UART_SetConfig+0x348>
 80068c2:	2310      	movs	r3, #16
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e095      	b.n	80069f4 <UART_SetConfig+0x348>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2f      	ldr	r2, [pc, #188]	; (800698c <UART_SetConfig+0x2e0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d125      	bne.n	800691e <UART_SetConfig+0x272>
 80068d2:	4b29      	ldr	r3, [pc, #164]	; (8006978 <UART_SetConfig+0x2cc>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e0:	d017      	beq.n	8006912 <UART_SetConfig+0x266>
 80068e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e6:	d817      	bhi.n	8006918 <UART_SetConfig+0x26c>
 80068e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ec:	d00b      	beq.n	8006906 <UART_SetConfig+0x25a>
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f2:	d811      	bhi.n	8006918 <UART_SetConfig+0x26c>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <UART_SetConfig+0x254>
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fc:	d006      	beq.n	800690c <UART_SetConfig+0x260>
 80068fe:	e00b      	b.n	8006918 <UART_SetConfig+0x26c>
 8006900:	2301      	movs	r3, #1
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e076      	b.n	80069f4 <UART_SetConfig+0x348>
 8006906:	2302      	movs	r3, #2
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e073      	b.n	80069f4 <UART_SetConfig+0x348>
 800690c:	2304      	movs	r3, #4
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e070      	b.n	80069f4 <UART_SetConfig+0x348>
 8006912:	2308      	movs	r3, #8
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e06d      	b.n	80069f4 <UART_SetConfig+0x348>
 8006918:	2310      	movs	r3, #16
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	e06a      	b.n	80069f4 <UART_SetConfig+0x348>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <UART_SetConfig+0x2e4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d138      	bne.n	800699a <UART_SetConfig+0x2ee>
 8006928:	4b13      	ldr	r3, [pc, #76]	; (8006978 <UART_SetConfig+0x2cc>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006936:	d017      	beq.n	8006968 <UART_SetConfig+0x2bc>
 8006938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693c:	d82a      	bhi.n	8006994 <UART_SetConfig+0x2e8>
 800693e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006942:	d00b      	beq.n	800695c <UART_SetConfig+0x2b0>
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006948:	d824      	bhi.n	8006994 <UART_SetConfig+0x2e8>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <UART_SetConfig+0x2aa>
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006952:	d006      	beq.n	8006962 <UART_SetConfig+0x2b6>
 8006954:	e01e      	b.n	8006994 <UART_SetConfig+0x2e8>
 8006956:	2300      	movs	r3, #0
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e04b      	b.n	80069f4 <UART_SetConfig+0x348>
 800695c:	2302      	movs	r3, #2
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e048      	b.n	80069f4 <UART_SetConfig+0x348>
 8006962:	2304      	movs	r3, #4
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e045      	b.n	80069f4 <UART_SetConfig+0x348>
 8006968:	2308      	movs	r3, #8
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e042      	b.n	80069f4 <UART_SetConfig+0x348>
 800696e:	bf00      	nop
 8006970:	efff69f3 	.word	0xefff69f3
 8006974:	40011000 	.word	0x40011000
 8006978:	40023800 	.word	0x40023800
 800697c:	40004400 	.word	0x40004400
 8006980:	40004800 	.word	0x40004800
 8006984:	40004c00 	.word	0x40004c00
 8006988:	40005000 	.word	0x40005000
 800698c:	40011400 	.word	0x40011400
 8006990:	40007800 	.word	0x40007800
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e02c      	b.n	80069f4 <UART_SetConfig+0x348>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a72      	ldr	r2, [pc, #456]	; (8006b68 <UART_SetConfig+0x4bc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d125      	bne.n	80069f0 <UART_SetConfig+0x344>
 80069a4:	4b71      	ldr	r3, [pc, #452]	; (8006b6c <UART_SetConfig+0x4c0>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069b2:	d017      	beq.n	80069e4 <UART_SetConfig+0x338>
 80069b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069b8:	d817      	bhi.n	80069ea <UART_SetConfig+0x33e>
 80069ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069be:	d00b      	beq.n	80069d8 <UART_SetConfig+0x32c>
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c4:	d811      	bhi.n	80069ea <UART_SetConfig+0x33e>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <UART_SetConfig+0x326>
 80069ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ce:	d006      	beq.n	80069de <UART_SetConfig+0x332>
 80069d0:	e00b      	b.n	80069ea <UART_SetConfig+0x33e>
 80069d2:	2300      	movs	r3, #0
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e00d      	b.n	80069f4 <UART_SetConfig+0x348>
 80069d8:	2302      	movs	r3, #2
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e00a      	b.n	80069f4 <UART_SetConfig+0x348>
 80069de:	2304      	movs	r3, #4
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e007      	b.n	80069f4 <UART_SetConfig+0x348>
 80069e4:	2308      	movs	r3, #8
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e004      	b.n	80069f4 <UART_SetConfig+0x348>
 80069ea:	2310      	movs	r3, #16
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e001      	b.n	80069f4 <UART_SetConfig+0x348>
 80069f0:	2310      	movs	r3, #16
 80069f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fc:	d15b      	bne.n	8006ab6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d828      	bhi.n	8006a56 <UART_SetConfig+0x3aa>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x360>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
 8006a2c:	08006a4f 	.word	0x08006a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fe f9d4 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8006a34:	61b8      	str	r0, [r7, #24]
        break;
 8006a36:	e013      	b.n	8006a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fe f9e4 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	61b8      	str	r0, [r7, #24]
        break;
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <UART_SetConfig+0x4c4>)
 8006a42:	61bb      	str	r3, [r7, #24]
        break;
 8006a44:	e00c      	b.n	8006a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fe f8b7 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8006a4a:	61b8      	str	r0, [r7, #24]
        break;
 8006a4c:	e008      	b.n	8006a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	61bb      	str	r3, [r7, #24]
        break;
 8006a54:	e004      	b.n	8006a60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d074      	beq.n	8006b50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	005a      	lsls	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	441a      	add	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d916      	bls.n	8006ab0 <UART_SetConfig+0x404>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d212      	bcs.n	8006ab0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f023 030f 	bic.w	r3, r3, #15
 8006a92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	89fa      	ldrh	r2, [r7, #14]
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	e04f      	b.n	8006b50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77bb      	strb	r3, [r7, #30]
 8006ab4:	e04c      	b.n	8006b50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d828      	bhi.n	8006b0e <UART_SetConfig+0x462>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0x418>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe f978 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8006aec:	61b8      	str	r0, [r7, #24]
        break;
 8006aee:	e013      	b.n	8006b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fe f988 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 8006af4:	61b8      	str	r0, [r7, #24]
        break;
 8006af6:	e00f      	b.n	8006b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <UART_SetConfig+0x4c4>)
 8006afa:	61bb      	str	r3, [r7, #24]
        break;
 8006afc:	e00c      	b.n	8006b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fe f85b 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8006b02:	61b8      	str	r0, [r7, #24]
        break;
 8006b04:	e008      	b.n	8006b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0a:	61bb      	str	r3, [r7, #24]
        break;
 8006b0c:	e004      	b.n	8006b18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	77bb      	strb	r3, [r7, #30]
        break;
 8006b16:	bf00      	nop
    }

    if (pclk != 0U)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d018      	beq.n	8006b50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	085a      	lsrs	r2, r3, #1
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	441a      	add	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b0f      	cmp	r3, #15
 8006b36:	d909      	bls.n	8006b4c <UART_SetConfig+0x4a0>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3e:	d205      	bcs.n	8006b4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	e001      	b.n	8006b50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3720      	adds	r7, #32
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40007c00 	.word	0x40007c00
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	00f42400 	.word	0x00f42400

08006b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c72:	d10a      	bne.n	8006c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cc8:	f7fa fdcc 	bl	8001864 <HAL_GetTick>
 8006ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10e      	bne.n	8006cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f831 	bl	8006d52 <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e027      	b.n	8006d4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d10e      	bne.n	8006d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f81b 	bl	8006d52 <UART_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e011      	b.n	8006d4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b09c      	sub	sp, #112	; 0x70
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d62:	e0a7      	b.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	f000 80a3 	beq.w	8006eb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6e:	f7fa fd79 	bl	8001864 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d302      	bcc.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d13f      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d98:	667b      	str	r3, [r7, #100]	; 0x64
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e6      	bne.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e5      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e068      	b.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d050      	beq.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e20:	d148      	bne.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e6      	bne.n	8006e2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e7e:	623a      	str	r2, [r7, #32]
 8006e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	69f9      	ldr	r1, [r7, #28]
 8006e84:	6a3a      	ldr	r2, [r7, #32]
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e010      	b.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	f43f af48 	beq.w	8006d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3770      	adds	r7, #112	; 0x70
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006ee2:	bf00      	nop
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef2:	f3ef 8305 	mrs	r3, IPSR
 8006ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efe:	f3ef 8310 	mrs	r3, PRIMASK
 8006f02:	607b      	str	r3, [r7, #4]
  return(result);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <osKernelInitialize+0x3a>
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <osKernelInitialize+0x64>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006f1e:	f06f 0305 	mvn.w	r3, #5
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e00c      	b.n	8006f40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <osKernelInitialize+0x64>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <osKernelInitialize+0x64>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	2000057c 	.word	0x2000057c

08006f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5a:	f3ef 8305 	mrs	r3, IPSR
 8006f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f66:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6a:	607b      	str	r3, [r7, #4]
  return(result);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f72:	f3ef 8311 	mrs	r3, BASEPRI
 8006f76:	603b      	str	r3, [r7, #0]
  return(result);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <osKernelStart+0x3a>
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <osKernelStart+0x68>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d103      	bne.n	8006f8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f86:	f06f 0305 	mvn.w	r3, #5
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e010      	b.n	8006fb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <osKernelStart+0x68>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d109      	bne.n	8006faa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f96:	f7ff ffa2 	bl	8006ede <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <osKernelStart+0x68>)
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fa0:	f001 f8ca 	bl	8008138 <vTaskStartScheduler>
      stat = osOK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e002      	b.n	8006fb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000057c 	.word	0x2000057c

08006fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd0:	f3ef 8305 	mrs	r3, IPSR
 8006fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 808f 	bne.w	80070fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fde:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	617b      	str	r3, [r7, #20]
  return(result);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <osThreadNew+0x3e>
 8006ff6:	4b44      	ldr	r3, [pc, #272]	; (8007108 <osThreadNew+0x148>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d07e      	beq.n	80070fc <osThreadNew+0x13c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d07b      	beq.n	80070fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007008:	2318      	movs	r3, #24
 800700a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d045      	beq.n	80070a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <osThreadNew+0x6a>
        name = attr->name;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d008      	beq.n	8007050 <osThreadNew+0x90>
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	2b38      	cmp	r3, #56	; 0x38
 8007042:	d805      	bhi.n	8007050 <osThreadNew+0x90>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <osThreadNew+0x94>
        return (NULL);
 8007050:	2300      	movs	r3, #0
 8007052:	e054      	b.n	80070fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00e      	beq.n	800708a <osThreadNew+0xca>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2bbb      	cmp	r3, #187	; 0xbb
 8007072:	d90a      	bls.n	800708a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <osThreadNew+0xca>
        mem = 1;
 8007084:	2301      	movs	r3, #1
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	e010      	b.n	80070ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <osThreadNew+0xec>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <osThreadNew+0xec>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <osThreadNew+0xec>
          mem = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e001      	b.n	80070ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d110      	bne.n	80070d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070ba:	9202      	str	r2, [sp, #8]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fe3f 	bl	8007d4c <xTaskCreateStatic>
 80070ce:	4603      	mov	r3, r0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	e013      	b.n	80070fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d110      	bne.n	80070fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	b29a      	uxth	r2, r3
 80070de:	f107 0310 	add.w	r3, r7, #16
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fe90 	bl	8007e12 <xTaskCreate>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d001      	beq.n	80070fc <osThreadNew+0x13c>
          hTask = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070fc:	693b      	ldr	r3, [r7, #16]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3730      	adds	r7, #48	; 0x30
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	2000057c 	.word	0x2000057c

0800710c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007114:	f3ef 8305 	mrs	r3, IPSR
 8007118:	613b      	str	r3, [r7, #16]
  return(result);
 800711a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10f      	bne.n	8007140 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007120:	f3ef 8310 	mrs	r3, PRIMASK
 8007124:	60fb      	str	r3, [r7, #12]
  return(result);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800712c:	f3ef 8311 	mrs	r3, BASEPRI
 8007130:	60bb      	str	r3, [r7, #8]
  return(result);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <osDelay+0x3c>
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <osDelay+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d103      	bne.n	8007148 <osDelay+0x3c>
    stat = osErrorISR;
 8007140:	f06f 0305 	mvn.w	r3, #5
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e007      	b.n	8007158 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 ffba 	bl	80080cc <vTaskDelay>
    }
  }

  return (stat);
 8007158:	697b      	ldr	r3, [r7, #20]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2000057c 	.word	0x2000057c

08007168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <vApplicationGetIdleTaskMemory+0x2c>)
 8007178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4a06      	ldr	r2, [pc, #24]	; (8007198 <vApplicationGetIdleTaskMemory+0x30>)
 800717e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000580 	.word	0x20000580
 8007198:	2000063c 	.word	0x2000063c

0800719c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a07      	ldr	r2, [pc, #28]	; (80071c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80071ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4a06      	ldr	r2, [pc, #24]	; (80071cc <vApplicationGetTimerTaskMemory+0x30>)
 80071b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ba:	601a      	str	r2, [r3, #0]
}
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	2000083c 	.word	0x2000083c
 80071cc:	200008f8 	.word	0x200008f8

080071d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f103 0208 	add.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295
 80071e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f103 0208 	add.w	r2, r3, #8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f103 0208 	add.w	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d103      	bne.n	8007292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e00c      	b.n	80072ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3308      	adds	r3, #8
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e002      	b.n	80072a0 <vListInsert+0x2e>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d2f6      	bcs.n	800729a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	601a      	str	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6892      	ldr	r2, [r2, #8]
 80072fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6852      	ldr	r2, [r2, #4]
 8007304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d103      	bne.n	8007318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	1e5a      	subs	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007366:	f002 f8a9 	bl	80094bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	441a      	add	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	3b01      	subs	r3, #1
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	22ff      	movs	r2, #255	; 0xff
 80073b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d114      	bne.n	80073e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3310      	adds	r3, #16
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f95d 	bl	8008688 <xTaskRemoveFromEventList>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d012      	beq.n	80073fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <xQueueGenericReset+0xd0>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	e009      	b.n	80073fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3310      	adds	r3, #16
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fef0 	bl	80071d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff feeb 	bl	80071d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073fa:	f002 f893 	bl	8009524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	; 0x38
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10c      	bne.n	800743a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	b672      	cpsid	i
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	b662      	cpsie	i
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10c      	bne.n	800745a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <xQueueGenericCreateStatic+0x5a>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <xQueueGenericCreateStatic+0x5e>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGenericCreateStatic+0x60>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10c      	bne.n	800748a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	b672      	cpsid	i
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	b662      	cpsie	i
 8007484:	623b      	str	r3, [r7, #32]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xQueueGenericCreateStatic+0x8a>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueGenericCreateStatic+0x8e>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericCreateStatic+0x90>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	61fb      	str	r3, [r7, #28]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074ba:	2350      	movs	r3, #80	; 0x50
 80074bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d00c      	beq.n	80074de <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	b672      	cpsid	i
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	b662      	cpsie	i
 80074d8:	61bb      	str	r3, [r7, #24]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00d      	beq.n	8007506 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	4613      	mov	r3, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f805 	bl	8007510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007508:	4618      	mov	r0, r3
 800750a:	3730      	adds	r7, #48	; 0x30
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e002      	b.n	8007532 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800753e:	2101      	movs	r1, #1
 8007540:	69b8      	ldr	r0, [r7, #24]
 8007542:	f7ff fef9 	bl	8007338 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08e      	sub	sp, #56	; 0x38
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007566:	2300      	movs	r3, #0
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10c      	bne.n	800758e <xQueueGenericSend+0x36>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	b672      	cpsid	i
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	b662      	cpsie	i
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueGenericSend+0x44>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <xQueueGenericSend+0x48>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <xQueueGenericSend+0x4a>
 80075a0:	2300      	movs	r3, #0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <xQueueGenericSend+0x68>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	b672      	cpsid	i
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	b662      	cpsie	i
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d103      	bne.n	80075ce <xQueueGenericSend+0x76>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <xQueueGenericSend+0x7a>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <xQueueGenericSend+0x7c>
 80075d2:	2300      	movs	r3, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10c      	bne.n	80075f2 <xQueueGenericSend+0x9a>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	623b      	str	r3, [r7, #32]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f2:	f001 fa13 	bl	8008a1c <xTaskGetSchedulerState>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xQueueGenericSend+0xaa>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <xQueueGenericSend+0xae>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <xQueueGenericSend+0xb0>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10c      	bne.n	8007626 <xQueueGenericSend+0xce>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	b672      	cpsid	i
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	b662      	cpsie	i
 8007620:	61fb      	str	r3, [r7, #28]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007626:	f001 ff49 	bl	80094bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <xQueueGenericSend+0xe4>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d129      	bne.n	8007690 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007642:	f000 fa15 	bl	8007a70 <prvCopyDataToQueue>
 8007646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d010      	beq.n	8007672 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f817 	bl	8008688 <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d013      	beq.n	8007688 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007660:	4b3f      	ldr	r3, [pc, #252]	; (8007760 <xQueueGenericSend+0x208>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	e00a      	b.n	8007688 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007678:	4b39      	ldr	r3, [pc, #228]	; (8007760 <xQueueGenericSend+0x208>)
 800767a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007688:	f001 ff4c 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 800768c:	2301      	movs	r3, #1
 800768e:	e063      	b.n	8007758 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d103      	bne.n	800769e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007696:	f001 ff45 	bl	8009524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800769a:	2300      	movs	r3, #0
 800769c:	e05c      	b.n	8007758 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 f853 	bl	8008754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076b2:	f001 ff37 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076b6:	f000 fdb3 	bl	8008220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ba:	f001 feff 	bl	80094bc <vPortEnterCritical>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076c4:	b25b      	sxtb	r3, r3
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d103      	bne.n	80076d4 <xQueueGenericSend+0x17c>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076da:	b25b      	sxtb	r3, r3
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d103      	bne.n	80076ea <xQueueGenericSend+0x192>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ea:	f001 ff1b 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ee:	1d3a      	adds	r2, r7, #4
 80076f0:	f107 0314 	add.w	r3, r7, #20
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f842 	bl	8008780 <xTaskCheckForTimeOut>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d124      	bne.n	800774c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007704:	f000 faac 	bl	8007c60 <prvIsQueueFull>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	3310      	adds	r3, #16
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4611      	mov	r1, r2
 8007716:	4618      	mov	r0, r3
 8007718:	f000 ff62 	bl	80085e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800771c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800771e:	f000 fa37 	bl	8007b90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007722:	f000 fd8b 	bl	800823c <xTaskResumeAll>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f47f af7c 	bne.w	8007626 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800772e:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <xQueueGenericSend+0x208>)
 8007730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	e772      	b.n	8007626 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007742:	f000 fa25 	bl	8007b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007746:	f000 fd79 	bl	800823c <xTaskResumeAll>
 800774a:	e76c      	b.n	8007626 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800774c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774e:	f000 fa1f 	bl	8007b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007752:	f000 fd73 	bl	800823c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007758:	4618      	mov	r0, r3
 800775a:	3738      	adds	r7, #56	; 0x38
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08e      	sub	sp, #56	; 0x38
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10c      	bne.n	8007796 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	b672      	cpsid	i
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	b662      	cpsie	i
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <xQueueGenericSendFromISR+0x40>
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <xQueueGenericSendFromISR+0x44>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <xQueueGenericSendFromISR+0x46>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10c      	bne.n	80077c8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	b672      	cpsid	i
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	b662      	cpsie	i
 80077c2:	623b      	str	r3, [r7, #32]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d103      	bne.n	80077d6 <xQueueGenericSendFromISR+0x72>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <xQueueGenericSendFromISR+0x76>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <xQueueGenericSendFromISR+0x78>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10c      	bne.n	80077fa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	61fb      	str	r3, [r7, #28]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077fa:	f001 ff47 	bl	800968c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	b672      	cpsid	i
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	b662      	cpsie	i
 8007816:	61ba      	str	r2, [r7, #24]
 8007818:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800781a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007826:	429a      	cmp	r2, r3
 8007828:	d302      	bcc.n	8007830 <xQueueGenericSendFromISR+0xcc>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d12c      	bne.n	800788a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007840:	f000 f916 	bl	8007a70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007844:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d112      	bne.n	8007874 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	3324      	adds	r3, #36	; 0x24
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ff14 	bl	8008688 <xTaskRemoveFromEventList>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00e      	beq.n	8007884 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e007      	b.n	8007884 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007878:	3301      	adds	r3, #1
 800787a:	b2db      	uxtb	r3, r3
 800787c:	b25a      	sxtb	r2, r3
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007884:	2301      	movs	r3, #1
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007888:	e001      	b.n	800788e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007898:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800789a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800789c:	4618      	mov	r0, r3
 800789e:	3738      	adds	r7, #56	; 0x38
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08c      	sub	sp, #48	; 0x30
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10c      	bne.n	80078d8 <xQueueReceive+0x34>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	b672      	cpsid	i
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	b662      	cpsie	i
 80078d2:	623b      	str	r3, [r7, #32]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <xQueueReceive+0x42>
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <xQueueReceive+0x46>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <xQueueReceive+0x48>
 80078ea:	2300      	movs	r3, #0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <xQueueReceive+0x66>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	b672      	cpsid	i
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	b662      	cpsie	i
 8007904:	61fb      	str	r3, [r7, #28]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800790a:	f001 f887 	bl	8008a1c <xTaskGetSchedulerState>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <xQueueReceive+0x76>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <xQueueReceive+0x7a>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <xQueueReceive+0x7c>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10c      	bne.n	800793e <xQueueReceive+0x9a>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	b672      	cpsid	i
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	b662      	cpsie	i
 8007938:	61bb      	str	r3, [r7, #24]
}
 800793a:	bf00      	nop
 800793c:	e7fe      	b.n	800793c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800793e:	f001 fdbd 	bl	80094bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01f      	beq.n	800798e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007952:	f000 f8f7 	bl	8007b44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	1e5a      	subs	r2, r3, #1
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00f      	beq.n	8007986 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	3310      	adds	r3, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fe8c 	bl	8008688 <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007976:	4b3d      	ldr	r3, [pc, #244]	; (8007a6c <xQueueReceive+0x1c8>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007986:	f001 fdcd 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 800798a:	2301      	movs	r3, #1
 800798c:	e069      	b.n	8007a62 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007994:	f001 fdc6 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007998:	2300      	movs	r3, #0
 800799a:	e062      	b.n	8007a62 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079a2:	f107 0310 	add.w	r3, r7, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fed4 	bl	8008754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079b0:	f001 fdb8 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079b4:	f000 fc34 	bl	8008220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079b8:	f001 fd80 	bl	80094bc <vPortEnterCritical>
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d103      	bne.n	80079d2 <xQueueReceive+0x12e>
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d8:	b25b      	sxtb	r3, r3
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d103      	bne.n	80079e8 <xQueueReceive+0x144>
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e8:	f001 fd9c 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ec:	1d3a      	adds	r2, r7, #4
 80079ee:	f107 0310 	add.w	r3, r7, #16
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fec3 	bl	8008780 <xTaskCheckForTimeOut>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d123      	bne.n	8007a48 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a02:	f000 f917 	bl	8007c34 <prvIsQueueEmpty>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d017      	beq.n	8007a3c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	3324      	adds	r3, #36	; 0x24
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fde3 	bl	80085e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1c:	f000 f8b8 	bl	8007b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a20:	f000 fc0c 	bl	800823c <xTaskResumeAll>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d189      	bne.n	800793e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <xQueueReceive+0x1c8>)
 8007a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	e780      	b.n	800793e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3e:	f000 f8a7 	bl	8007b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a42:	f000 fbfb 	bl	800823c <xTaskResumeAll>
 8007a46:	e77a      	b.n	800793e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a4a:	f000 f8a1 	bl	8007b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a4e:	f000 fbf5 	bl	800823c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a54:	f000 f8ee 	bl	8007c34 <prvIsQueueEmpty>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f af6f 	beq.w	800793e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3730      	adds	r7, #48	; 0x30
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	e000ed04 	.word	0xe000ed04

08007a70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10d      	bne.n	8007aaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d14d      	bne.n	8007b32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 ffdc 	bl	8008a58 <xTaskPriorityDisinherit>
 8007aa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	e043      	b.n	8007b32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d119      	bne.n	8007ae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6858      	ldr	r0, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	f002 f834 	bl	8009b28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	441a      	add	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d32b      	bcc.n	8007b32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	e026      	b.n	8007b32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68d8      	ldr	r0, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	461a      	mov	r2, r3
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	f002 f81a 	bl	8009b28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	425b      	negs	r3, r3
 8007afe:	441a      	add	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d207      	bcs.n	8007b20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	425b      	negs	r3, r3
 8007b1a:	441a      	add	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d105      	bne.n	8007b32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b3a:	697b      	ldr	r3, [r7, #20]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d018      	beq.n	8007b88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	441a      	add	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d303      	bcc.n	8007b78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68d9      	ldr	r1, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	461a      	mov	r2, r3
 8007b82:	6838      	ldr	r0, [r7, #0]
 8007b84:	f001 ffd0 	bl	8009b28 <memcpy>
	}
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b98:	f001 fc90 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ba4:	e011      	b.n	8007bca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d012      	beq.n	8007bd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3324      	adds	r3, #36	; 0x24
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fd68 	bl	8008688 <xTaskRemoveFromEventList>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bbe:	f000 fe45 	bl	800884c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dce9      	bgt.n	8007ba6 <prvUnlockQueue+0x16>
 8007bd2:	e000      	b.n	8007bd6 <prvUnlockQueue+0x46>
					break;
 8007bd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	22ff      	movs	r2, #255	; 0xff
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bde:	f001 fca1 	bl	8009524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007be2:	f001 fc6b 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bee:	e011      	b.n	8007c14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fd43 	bl	8008688 <xTaskRemoveFromEventList>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c08:	f000 fe20 	bl	800884c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dce9      	bgt.n	8007bf0 <prvUnlockQueue+0x60>
 8007c1c:	e000      	b.n	8007c20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	22ff      	movs	r2, #255	; 0xff
 8007c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c28:	f001 fc7c 	bl	8009524 <vPortExitCritical>
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c3c:	f001 fc3e 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e001      	b.n	8007c52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c52:	f001 fc67 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c68:	f001 fc28 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d102      	bne.n	8007c7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e001      	b.n	8007c82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c82:	f001 fc4f 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007c86:	68fb      	ldr	r3, [r7, #12]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	e014      	b.n	8007cca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ca0:	4a0f      	ldr	r2, [pc, #60]	; (8007ce0 <vQueueAddToRegistry+0x50>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cac:	490c      	ldr	r1, [pc, #48]	; (8007ce0 <vQueueAddToRegistry+0x50>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <vQueueAddToRegistry+0x50>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cc2:	e006      	b.n	8007cd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	d9e7      	bls.n	8007ca0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20000cf8 	.word	0x20000cf8

08007ce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cf4:	f001 fbe2 	bl	80094bc <vPortEnterCritical>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cfe:	b25b      	sxtb	r3, r3
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d103      	bne.n	8007d0e <vQueueWaitForMessageRestricted+0x2a>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d14:	b25b      	sxtb	r3, r3
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d103      	bne.n	8007d24 <vQueueWaitForMessageRestricted+0x40>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d24:	f001 fbfe 	bl	8009524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3324      	adds	r3, #36	; 0x24
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fc77 	bl	800862c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d3e:	6978      	ldr	r0, [r7, #20]
 8007d40:	f7ff ff26 	bl	8007b90 <prvUnlockQueue>
	}
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08e      	sub	sp, #56	; 0x38
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10c      	bne.n	8007d7a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	b672      	cpsid	i
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	b662      	cpsie	i
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10c      	bne.n	8007d9a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	b672      	cpsid	i
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	b662      	cpsie	i
 8007d94:	61fb      	str	r3, [r7, #28]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d9a:	23bc      	movs	r3, #188	; 0xbc
 8007d9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2bbc      	cmp	r3, #188	; 0xbc
 8007da2:	d00c      	beq.n	8007dbe <xTaskCreateStatic+0x72>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	b672      	cpsid	i
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	b662      	cpsie	i
 8007db8:	61bb      	str	r3, [r7, #24]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01e      	beq.n	8007e04 <xTaskCreateStatic+0xb8>
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01b      	beq.n	8007e04 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	2202      	movs	r2, #2
 8007dda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dde:	2300      	movs	r3, #0
 8007de0:	9303      	str	r3, [sp, #12]
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	9302      	str	r3, [sp, #8]
 8007de6:	f107 0314 	add.w	r3, r7, #20
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f850 	bl	8007e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dfe:	f000 f8f5 	bl	8007fec <prvAddNewTaskToReadyList>
 8007e02:	e001      	b.n	8007e08 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e08:	697b      	ldr	r3, [r7, #20]
	}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3728      	adds	r7, #40	; 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b08c      	sub	sp, #48	; 0x30
 8007e16:	af04      	add	r7, sp, #16
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fc74 	bl	8009714 <pvPortMalloc>
 8007e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00e      	beq.n	8007e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e34:	20bc      	movs	r0, #188	; 0xbc
 8007e36:	f001 fc6d 	bl	8009714 <pvPortMalloc>
 8007e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
 8007e48:	e005      	b.n	8007e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e4a:	6978      	ldr	r0, [r7, #20]
 8007e4c:	f001 fd2c 	bl	80098a8 <vPortFree>
 8007e50:	e001      	b.n	8007e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d017      	beq.n	8007e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	9302      	str	r3, [sp, #8]
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f80e 	bl	8007e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e80:	69f8      	ldr	r0, [r7, #28]
 8007e82:	f000 f8b3 	bl	8007fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	e002      	b.n	8007e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e92:	69bb      	ldr	r3, [r7, #24]
	}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	21a5      	movs	r1, #165	; 0xa5
 8007eb6:	f001 fe45 	bl	8009b44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007ec4:	440b      	add	r3, r1
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f023 0307 	bic.w	r3, r3, #7
 8007ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	b672      	cpsid	i
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	b662      	cpsie	i
 8007ef2:	617b      	str	r3, [r7, #20]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01f      	beq.n	8007f3e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	e012      	b.n	8007f2a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	7819      	ldrb	r1, [r3, #0]
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	3334      	adds	r3, #52	; 0x34
 8007f14:	460a      	mov	r2, r1
 8007f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b0f      	cmp	r3, #15
 8007f2e:	d9e9      	bls.n	8007f04 <prvInitialiseNewTask+0x68>
 8007f30:	e000      	b.n	8007f34 <prvInitialiseNewTask+0x98>
			{
				break;
 8007f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f3c:	e003      	b.n	8007f46 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	2b37      	cmp	r3, #55	; 0x37
 8007f4a:	d901      	bls.n	8007f50 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f4c:	2337      	movs	r3, #55	; 0x37
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	2200      	movs	r2, #0
 8007f60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	3304      	adds	r3, #4
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff f952 	bl	8007210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	3318      	adds	r3, #24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff f94d 	bl	8007210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	3354      	adds	r3, #84	; 0x54
 8007fa0:	2260      	movs	r2, #96	; 0x60
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 fdcd 	bl	8009b44 <memset>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	4a0c      	ldr	r2, [pc, #48]	; (8007fe0 <prvInitialiseNewTask+0x144>)
 8007fae:	659a      	str	r2, [r3, #88]	; 0x58
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <prvInitialiseNewTask+0x148>)
 8007fb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	4a0b      	ldr	r2, [pc, #44]	; (8007fe8 <prvInitialiseNewTask+0x14c>)
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	69b8      	ldr	r0, [r7, #24]
 8007fc2:	f001 f96b 	bl	800929c <pxPortInitialiseStack>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd8:	bf00      	nop
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08009d70 	.word	0x08009d70
 8007fe4:	08009d90 	.word	0x08009d90
 8007fe8:	08009d50 	.word	0x08009d50

08007fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ff4:	f001 fa62 	bl	80094bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ff8:	4b2d      	ldr	r3, [pc, #180]	; (80080b0 <prvAddNewTaskToReadyList+0xc4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a2c      	ldr	r2, [pc, #176]	; (80080b0 <prvAddNewTaskToReadyList+0xc4>)
 8008000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008002:	4b2c      	ldr	r3, [pc, #176]	; (80080b4 <prvAddNewTaskToReadyList+0xc8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d109      	bne.n	800801e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800800a:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <prvAddNewTaskToReadyList+0xc8>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <prvAddNewTaskToReadyList+0xc4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d110      	bne.n	800803a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008018:	f000 fc3c 	bl	8008894 <prvInitialiseTaskLists>
 800801c:	e00d      	b.n	800803a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800801e:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <prvAddNewTaskToReadyList+0xcc>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008026:	4b23      	ldr	r3, [pc, #140]	; (80080b4 <prvAddNewTaskToReadyList+0xc8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	429a      	cmp	r2, r3
 8008032:	d802      	bhi.n	800803a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008034:	4a1f      	ldr	r2, [pc, #124]	; (80080b4 <prvAddNewTaskToReadyList+0xc8>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800803a:	4b20      	ldr	r3, [pc, #128]	; (80080bc <prvAddNewTaskToReadyList+0xd0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <prvAddNewTaskToReadyList+0xd0>)
 8008042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008044:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <prvAddNewTaskToReadyList+0xd0>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <prvAddNewTaskToReadyList+0xd4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d903      	bls.n	8008060 <prvAddNewTaskToReadyList+0x74>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	4a18      	ldr	r2, [pc, #96]	; (80080c0 <prvAddNewTaskToReadyList+0xd4>)
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008064:	4613      	mov	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <prvAddNewTaskToReadyList+0xd8>)
 800806e:	441a      	add	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7ff f8d7 	bl	800722a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800807c:	f001 fa52 	bl	8009524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008080:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <prvAddNewTaskToReadyList+0xcc>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00e      	beq.n	80080a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <prvAddNewTaskToReadyList+0xc8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	429a      	cmp	r2, r3
 8008094:	d207      	bcs.n	80080a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008096:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <prvAddNewTaskToReadyList+0xdc>)
 8008098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	2000120c 	.word	0x2000120c
 80080b4:	20000d38 	.word	0x20000d38
 80080b8:	20001218 	.word	0x20001218
 80080bc:	20001228 	.word	0x20001228
 80080c0:	20001214 	.word	0x20001214
 80080c4:	20000d3c 	.word	0x20000d3c
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d019      	beq.n	8008112 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <vTaskDelay+0x64>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <vTaskDelay+0x34>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	b672      	cpsid	i
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	b662      	cpsie	i
 80080fa:	60bb      	str	r3, [r7, #8]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008100:	f000 f88e 	bl	8008220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fd18 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800810c:	f000 f896 	bl	800823c <xTaskResumeAll>
 8008110:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d107      	bne.n	8008128 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <vTaskDelay+0x68>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20001234 	.word	0x20001234
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008146:	463a      	mov	r2, r7
 8008148:	1d39      	adds	r1, r7, #4
 800814a:	f107 0308 	add.w	r3, r7, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff f80a 	bl	8007168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	9202      	str	r2, [sp, #8]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	2300      	movs	r3, #0
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	460a      	mov	r2, r1
 8008166:	4926      	ldr	r1, [pc, #152]	; (8008200 <vTaskStartScheduler+0xc8>)
 8008168:	4826      	ldr	r0, [pc, #152]	; (8008204 <vTaskStartScheduler+0xcc>)
 800816a:	f7ff fdef 	bl	8007d4c <xTaskCreateStatic>
 800816e:	4603      	mov	r3, r0
 8008170:	4a25      	ldr	r2, [pc, #148]	; (8008208 <vTaskStartScheduler+0xd0>)
 8008172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008174:	4b24      	ldr	r3, [pc, #144]	; (8008208 <vTaskStartScheduler+0xd0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e001      	b.n	8008186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008182:	2300      	movs	r3, #0
 8008184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d102      	bne.n	8008192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800818c:	f000 fd2a 	bl	8008be4 <xTimerCreateTimerTask>
 8008190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d11d      	bne.n	80081d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	613b      	str	r3, [r7, #16]
}
 80081ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081b0:	4b16      	ldr	r3, [pc, #88]	; (800820c <vTaskStartScheduler+0xd4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3354      	adds	r3, #84	; 0x54
 80081b6:	4a16      	ldr	r2, [pc, #88]	; (8008210 <vTaskStartScheduler+0xd8>)
 80081b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081ba:	4b16      	ldr	r3, [pc, #88]	; (8008214 <vTaskStartScheduler+0xdc>)
 80081bc:	f04f 32ff 	mov.w	r2, #4294967295
 80081c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <vTaskStartScheduler+0xe0>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081c8:	4b14      	ldr	r3, [pc, #80]	; (800821c <vTaskStartScheduler+0xe4>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081ce:	f001 f8f7 	bl	80093c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081d2:	e010      	b.n	80081f6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d10c      	bne.n	80081f6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	b672      	cpsid	i
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	b662      	cpsie	i
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <vTaskStartScheduler+0xbc>
}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08009cfc 	.word	0x08009cfc
 8008204:	08008865 	.word	0x08008865
 8008208:	20001230 	.word	0x20001230
 800820c:	20000d38 	.word	0x20000d38
 8008210:	20000010 	.word	0x20000010
 8008214:	2000122c 	.word	0x2000122c
 8008218:	20001218 	.word	0x20001218
 800821c:	20001210 	.word	0x20001210

08008220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <vTaskSuspendAll+0x18>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	4a03      	ldr	r2, [pc, #12]	; (8008238 <vTaskSuspendAll+0x18>)
 800822c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	20001234 	.word	0x20001234

0800823c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800824a:	4b43      	ldr	r3, [pc, #268]	; (8008358 <xTaskResumeAll+0x11c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10c      	bne.n	800826c <xTaskResumeAll+0x30>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	b672      	cpsid	i
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	b662      	cpsie	i
 8008266:	603b      	str	r3, [r7, #0]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800826c:	f001 f926 	bl	80094bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008270:	4b39      	ldr	r3, [pc, #228]	; (8008358 <xTaskResumeAll+0x11c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3b01      	subs	r3, #1
 8008276:	4a38      	ldr	r2, [pc, #224]	; (8008358 <xTaskResumeAll+0x11c>)
 8008278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827a:	4b37      	ldr	r3, [pc, #220]	; (8008358 <xTaskResumeAll+0x11c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d162      	bne.n	8008348 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008282:	4b36      	ldr	r3, [pc, #216]	; (800835c <xTaskResumeAll+0x120>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d05e      	beq.n	8008348 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828a:	e02f      	b.n	80082ec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828c:	4b34      	ldr	r3, [pc, #208]	; (8008360 <xTaskResumeAll+0x124>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3318      	adds	r3, #24
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff f823 	bl	80072e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff f81e 	bl	80072e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <xTaskResumeAll+0x128>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d903      	bls.n	80082bc <xTaskResumeAll+0x80>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <xTaskResumeAll+0x128>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a27      	ldr	r2, [pc, #156]	; (8008368 <xTaskResumeAll+0x12c>)
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7fe ffa9 	bl	800722a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4b23      	ldr	r3, [pc, #140]	; (800836c <xTaskResumeAll+0x130>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80082e6:	4b22      	ldr	r3, [pc, #136]	; (8008370 <xTaskResumeAll+0x134>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ec:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <xTaskResumeAll+0x124>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1cb      	bne.n	800828c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082fa:	f000 fb6f 	bl	80089dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <xTaskResumeAll+0x138>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d010      	beq.n	800832c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800830a:	f000 f847 	bl	800839c <xTaskIncrementTick>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <xTaskResumeAll+0x134>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f1      	bne.n	800830a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <xTaskResumeAll+0x138>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskResumeAll+0x134>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskResumeAll+0x13c>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f001 f8ec 	bl	8009524 <vPortExitCritical>

	return xAlreadyYielded;
 800834c:	68bb      	ldr	r3, [r7, #8]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20001234 	.word	0x20001234
 800835c:	2000120c 	.word	0x2000120c
 8008360:	200011cc 	.word	0x200011cc
 8008364:	20001214 	.word	0x20001214
 8008368:	20000d3c 	.word	0x20000d3c
 800836c:	20000d38 	.word	0x20000d38
 8008370:	20001220 	.word	0x20001220
 8008374:	2000121c 	.word	0x2000121c
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <xTaskGetTickCount+0x1c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008388:	687b      	ldr	r3, [r7, #4]
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20001210 	.word	0x20001210

0800839c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a6:	4b50      	ldr	r3, [pc, #320]	; (80084e8 <xTaskIncrementTick+0x14c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 808b 	bne.w	80084c6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083b0:	4b4e      	ldr	r3, [pc, #312]	; (80084ec <xTaskIncrementTick+0x150>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083b8:	4a4c      	ldr	r2, [pc, #304]	; (80084ec <xTaskIncrementTick+0x150>)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d122      	bne.n	800840a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80083c4:	4b4a      	ldr	r3, [pc, #296]	; (80084f0 <xTaskIncrementTick+0x154>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	603b      	str	r3, [r7, #0]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xTaskIncrementTick+0x4a>
 80083e8:	4b41      	ldr	r3, [pc, #260]	; (80084f0 <xTaskIncrementTick+0x154>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	4b41      	ldr	r3, [pc, #260]	; (80084f4 <xTaskIncrementTick+0x158>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a3f      	ldr	r2, [pc, #252]	; (80084f0 <xTaskIncrementTick+0x154>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	4a3f      	ldr	r2, [pc, #252]	; (80084f4 <xTaskIncrementTick+0x158>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <xTaskIncrementTick+0x15c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	4a3d      	ldr	r2, [pc, #244]	; (80084f8 <xTaskIncrementTick+0x15c>)
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	f000 fae9 	bl	80089dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800840a:	4b3c      	ldr	r3, [pc, #240]	; (80084fc <xTaskIncrementTick+0x160>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	429a      	cmp	r2, r3
 8008412:	d349      	bcc.n	80084a8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008414:	4b36      	ldr	r3, [pc, #216]	; (80084f0 <xTaskIncrementTick+0x154>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841e:	4b37      	ldr	r3, [pc, #220]	; (80084fc <xTaskIncrementTick+0x160>)
 8008420:	f04f 32ff 	mov.w	r2, #4294967295
 8008424:	601a      	str	r2, [r3, #0]
					break;
 8008426:	e03f      	b.n	80084a8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008428:	4b31      	ldr	r3, [pc, #196]	; (80084f0 <xTaskIncrementTick+0x154>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d203      	bcs.n	8008448 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008440:	4a2e      	ldr	r2, [pc, #184]	; (80084fc <xTaskIncrementTick+0x160>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008446:	e02f      	b.n	80084a8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3304      	adds	r3, #4
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe ff49 	bl	80072e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3318      	adds	r3, #24
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe ff40 	bl	80072e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	4b25      	ldr	r3, [pc, #148]	; (8008500 <xTaskIncrementTick+0x164>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d903      	bls.n	8008478 <xTaskIncrementTick+0xdc>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	4a22      	ldr	r2, [pc, #136]	; (8008500 <xTaskIncrementTick+0x164>)
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <xTaskIncrementTick+0x168>)
 8008486:	441a      	add	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3304      	adds	r3, #4
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fecb 	bl	800722a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <xTaskIncrementTick+0x16c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d3b8      	bcc.n	8008414 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80084a2:	2301      	movs	r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a6:	e7b5      	b.n	8008414 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084a8:	4b17      	ldr	r3, [pc, #92]	; (8008508 <xTaskIncrementTick+0x16c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	4915      	ldr	r1, [pc, #84]	; (8008504 <xTaskIncrementTick+0x168>)
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d907      	bls.n	80084d0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e004      	b.n	80084d0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084c6:	4b11      	ldr	r3, [pc, #68]	; (800850c <xTaskIncrementTick+0x170>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3301      	adds	r3, #1
 80084cc:	4a0f      	ldr	r2, [pc, #60]	; (800850c <xTaskIncrementTick+0x170>)
 80084ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <xTaskIncrementTick+0x174>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084dc:	697b      	ldr	r3, [r7, #20]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20001234 	.word	0x20001234
 80084ec:	20001210 	.word	0x20001210
 80084f0:	200011c4 	.word	0x200011c4
 80084f4:	200011c8 	.word	0x200011c8
 80084f8:	20001224 	.word	0x20001224
 80084fc:	2000122c 	.word	0x2000122c
 8008500:	20001214 	.word	0x20001214
 8008504:	20000d3c 	.word	0x20000d3c
 8008508:	20000d38 	.word	0x20000d38
 800850c:	2000121c 	.word	0x2000121c
 8008510:	20001220 	.word	0x20001220

08008514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800851a:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <vTaskSwitchContext+0xb4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008522:	4b2a      	ldr	r3, [pc, #168]	; (80085cc <vTaskSwitchContext+0xb8>)
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008528:	e048      	b.n	80085bc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800852a:	4b28      	ldr	r3, [pc, #160]	; (80085cc <vTaskSwitchContext+0xb8>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008530:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <vTaskSwitchContext+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e012      	b.n	800855e <vTaskSwitchContext+0x4a>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <vTaskSwitchContext+0x44>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	607b      	str	r3, [r7, #4]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <vTaskSwitchContext+0x42>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3b01      	subs	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	491d      	ldr	r1, [pc, #116]	; (80085d4 <vTaskSwitchContext+0xc0>)
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0e2      	beq.n	8008538 <vTaskSwitchContext+0x24>
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <vTaskSwitchContext+0xc0>)
 800857e:	4413      	add	r3, r2
 8008580:	60bb      	str	r3, [r7, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	605a      	str	r2, [r3, #4]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	3308      	adds	r3, #8
 8008594:	429a      	cmp	r2, r3
 8008596:	d104      	bne.n	80085a2 <vTaskSwitchContext+0x8e>
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <vTaskSwitchContext+0xc4>)
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <vTaskSwitchContext+0xbc>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <vTaskSwitchContext+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3354      	adds	r3, #84	; 0x54
 80085b8:	4a08      	ldr	r2, [pc, #32]	; (80085dc <vTaskSwitchContext+0xc8>)
 80085ba:	6013      	str	r3, [r2, #0]
}
 80085bc:	bf00      	nop
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20001234 	.word	0x20001234
 80085cc:	20001220 	.word	0x20001220
 80085d0:	20001214 	.word	0x20001214
 80085d4:	20000d3c 	.word	0x20000d3c
 80085d8:	20000d38 	.word	0x20000d38
 80085dc:	20000010 	.word	0x20000010

080085e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10c      	bne.n	800860a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	b672      	cpsid	i
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	b662      	cpsie	i
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <vTaskPlaceOnEventList+0x48>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3318      	adds	r3, #24
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7fe fe2d 	bl	8007272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008618:	2101      	movs	r1, #1
 800861a:	6838      	ldr	r0, [r7, #0]
 800861c:	f000 fa8e 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000d38 	.word	0x20000d38

0800862c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10c      	bne.n	8008658 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	b672      	cpsid	i
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	b662      	cpsie	i
 8008652:	617b      	str	r3, [r7, #20]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <vTaskPlaceOnEventListRestricted+0x58>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3318      	adds	r3, #24
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7fe fde2 	bl	800722a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800866c:	f04f 33ff 	mov.w	r3, #4294967295
 8008670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68b8      	ldr	r0, [r7, #8]
 8008676:	f000 fa61 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
	}
 800867a:	bf00      	nop
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000d38 	.word	0x20000d38

08008688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	60fb      	str	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3318      	adds	r3, #24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fe11 	bl	80072e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <xTaskRemoveFromEventList+0xb4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11d      	bne.n	8008706 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fe08 	bl	80072e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4b19      	ldr	r3, [pc, #100]	; (8008740 <xTaskRemoveFromEventList+0xb8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d903      	bls.n	80086e8 <xTaskRemoveFromEventList+0x60>
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4a16      	ldr	r2, [pc, #88]	; (8008740 <xTaskRemoveFromEventList+0xb8>)
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4a13      	ldr	r2, [pc, #76]	; (8008744 <xTaskRemoveFromEventList+0xbc>)
 80086f6:	441a      	add	r2, r3
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f7fe fd93 	bl	800722a <vListInsertEnd>
 8008704:	e005      	b.n	8008712 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3318      	adds	r3, #24
 800870a:	4619      	mov	r1, r3
 800870c:	480e      	ldr	r0, [pc, #56]	; (8008748 <xTaskRemoveFromEventList+0xc0>)
 800870e:	f7fe fd8c 	bl	800722a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <xTaskRemoveFromEventList+0xc4>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	429a      	cmp	r2, r3
 800871e:	d905      	bls.n	800872c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <xTaskRemoveFromEventList+0xc8>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e001      	b.n	8008730 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008730:	697b      	ldr	r3, [r7, #20]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20001234 	.word	0x20001234
 8008740:	20001214 	.word	0x20001214
 8008744:	20000d3c 	.word	0x20000d3c
 8008748:	200011cc 	.word	0x200011cc
 800874c:	20000d38 	.word	0x20000d38
 8008750:	20001220 	.word	0x20001220

08008754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <vTaskInternalSetTimeOutState+0x24>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <vTaskInternalSetTimeOutState+0x28>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	605a      	str	r2, [r3, #4]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	20001224 	.word	0x20001224
 800877c:	20001210 	.word	0x20001210

08008780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	613b      	str	r3, [r7, #16]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10c      	bne.n	80087ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	b672      	cpsid	i
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	b662      	cpsie	i
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80087ca:	f000 fe77 	bl	80094bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ce:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <xTaskCheckForTimeOut+0xc4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e6:	d102      	bne.n	80087ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e023      	b.n	8008836 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <xTaskCheckForTimeOut+0xc8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d007      	beq.n	800880a <xTaskCheckForTimeOut+0x8a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	e015      	b.n	8008836 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	429a      	cmp	r2, r3
 8008812:	d20b      	bcs.n	800882c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff97 	bl	8008754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e004      	b.n	8008836 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f000 fe75 	bl	8009524 <vPortExitCritical>

	return xReturn;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20001210 	.word	0x20001210
 8008848:	20001224 	.word	0x20001224

0800884c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008850:	4b03      	ldr	r3, [pc, #12]	; (8008860 <vTaskMissedYield+0x14>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	20001220 	.word	0x20001220

08008864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800886c:	f000 f852 	bl	8008914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <prvIdleTask+0x28>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d9f9      	bls.n	800886c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <prvIdleTask+0x2c>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008888:	e7f0      	b.n	800886c <prvIdleTask+0x8>
 800888a:	bf00      	nop
 800888c:	20000d3c 	.word	0x20000d3c
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	e00c      	b.n	80088ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4a12      	ldr	r2, [pc, #72]	; (80088f4 <prvInitialiseTaskLists+0x60>)
 80088ac:	4413      	add	r3, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc8e 	bl	80071d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3301      	adds	r3, #1
 80088b8:	607b      	str	r3, [r7, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b37      	cmp	r3, #55	; 0x37
 80088be:	d9ef      	bls.n	80088a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088c0:	480d      	ldr	r0, [pc, #52]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088c2:	f7fe fc85 	bl	80071d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088c6:	480d      	ldr	r0, [pc, #52]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088c8:	f7fe fc82 	bl	80071d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <prvInitialiseTaskLists+0x6c>)
 80088ce:	f7fe fc7f 	bl	80071d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088d2:	480c      	ldr	r0, [pc, #48]	; (8008904 <prvInitialiseTaskLists+0x70>)
 80088d4:	f7fe fc7c 	bl	80071d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088d8:	480b      	ldr	r0, [pc, #44]	; (8008908 <prvInitialiseTaskLists+0x74>)
 80088da:	f7fe fc79 	bl	80071d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088de:	4b0b      	ldr	r3, [pc, #44]	; (800890c <prvInitialiseTaskLists+0x78>)
 80088e0:	4a05      	ldr	r2, [pc, #20]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvInitialiseTaskLists+0x7c>)
 80088e6:	4a05      	ldr	r2, [pc, #20]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088e8:	601a      	str	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000d3c 	.word	0x20000d3c
 80088f8:	2000119c 	.word	0x2000119c
 80088fc:	200011b0 	.word	0x200011b0
 8008900:	200011cc 	.word	0x200011cc
 8008904:	200011e0 	.word	0x200011e0
 8008908:	200011f8 	.word	0x200011f8
 800890c:	200011c4 	.word	0x200011c4
 8008910:	200011c8 	.word	0x200011c8

08008914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800891a:	e019      	b.n	8008950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800891c:	f000 fdce 	bl	80094bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008920:	4b10      	ldr	r3, [pc, #64]	; (8008964 <prvCheckTasksWaitingTermination+0x50>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fcd9 	bl	80072e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008932:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3b01      	subs	r3, #1
 8008938:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 800893a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3b01      	subs	r3, #1
 8008942:	4a0a      	ldr	r2, [pc, #40]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008946:	f000 fded 	bl	8009524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f810 	bl	8008970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e1      	bne.n	800891c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200011e0 	.word	0x200011e0
 8008968:	2000120c 	.word	0x2000120c
 800896c:	200011f4 	.word	0x200011f4

08008970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3354      	adds	r3, #84	; 0x54
 800897c:	4618      	mov	r0, r3
 800897e:	f001 f8f7 	bl	8009b70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	4618      	mov	r0, r3
 8008992:	f000 ff89 	bl	80098a8 <vPortFree>
				vPortFree( pxTCB );
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 ff86 	bl	80098a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800899c:	e01a      	b.n	80089d4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d103      	bne.n	80089b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 ff7d 	bl	80098a8 <vPortFree>
	}
 80089ae:	e011      	b.n	80089d4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d00c      	beq.n	80089d4 <prvDeleteTCB+0x64>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	b672      	cpsid	i
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	b662      	cpsie	i
 80089ce:	60fb      	str	r3, [r7, #12]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <prvDeleteTCB+0x62>
	}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e2:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f4:	e008      	b.n	8008a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 8008a06:	6013      	str	r3, [r2, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	200011c4 	.word	0x200011c4
 8008a18:	2000122c 	.word	0x2000122c

08008a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <xTaskGetSchedulerState+0x34>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e008      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a30:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <xTaskGetSchedulerState+0x38>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e001      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a42:	687b      	ldr	r3, [r7, #4]
	}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20001218 	.word	0x20001218
 8008a54:	20001234 	.word	0x20001234

08008a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d05a      	beq.n	8008b24 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a6e:	4b30      	ldr	r3, [pc, #192]	; (8008b30 <xTaskPriorityDisinherit+0xd8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d00c      	beq.n	8008a92 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	b672      	cpsid	i
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	b662      	cpsie	i
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10c      	bne.n	8008ab4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	b672      	cpsid	i
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	b662      	cpsie	i
 8008aae:	60bb      	str	r3, [r7, #8]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d02c      	beq.n	8008b24 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d128      	bne.n	8008b24 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fc04 	bl	80072e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <xTaskPriorityDisinherit+0xdc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d903      	bls.n	8008b04 <xTaskPriorityDisinherit+0xac>
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <xTaskPriorityDisinherit+0xdc>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <xTaskPriorityDisinherit+0xe0>)
 8008b12:	441a      	add	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fe fb85 	bl	800722a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b24:	697b      	ldr	r3, [r7, #20]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000d38 	.word	0x20000d38
 8008b34:	20001214 	.word	0x20001214
 8008b38:	20000d3c 	.word	0x20000d3c

08008b3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <prvAddCurrentTaskToDelayedList+0x90>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b4c:	4b20      	ldr	r3, [pc, #128]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fbc6 	bl	80072e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d10a      	bne.n	8008b76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4819      	ldr	r0, [pc, #100]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b70:	f7fe fb5b 	bl	800722a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b74:	e026      	b.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b7e:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d209      	bcs.n	8008ba2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe fb69 	bl	8007272 <vListInsert>
}
 8008ba0:	e010      	b.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba2:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7fe fb5f 	bl	8007272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bb4:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d202      	bcs.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bbe:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20001210 	.word	0x20001210
 8008bd0:	20000d38 	.word	0x20000d38
 8008bd4:	200011f8 	.word	0x200011f8
 8008bd8:	200011c8 	.word	0x200011c8
 8008bdc:	200011c4 	.word	0x200011c4
 8008be0:	2000122c 	.word	0x2000122c

08008be4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bee:	f000 fb15 	bl	800921c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bf2:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <xTimerCreateTimerTask+0x84>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d021      	beq.n	8008c3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c02:	1d3a      	adds	r2, r7, #4
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	f107 030c 	add.w	r3, r7, #12
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fac5 	bl	800719c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	9202      	str	r2, [sp, #8]
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	460a      	mov	r2, r1
 8008c24:	4911      	ldr	r1, [pc, #68]	; (8008c6c <xTimerCreateTimerTask+0x88>)
 8008c26:	4812      	ldr	r0, [pc, #72]	; (8008c70 <xTimerCreateTimerTask+0x8c>)
 8008c28:	f7ff f890 	bl	8007d4c <xTaskCreateStatic>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <xTimerCreateTimerTask+0x90>)
 8008c30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <xTimerCreateTimerTask+0x90>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10c      	bne.n	8008c5e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	613b      	str	r3, [r7, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20001268 	.word	0x20001268
 8008c6c:	08009d04 	.word	0x08009d04
 8008c70:	08008db5 	.word	0x08008db5
 8008c74:	2000126c 	.word	0x2000126c

08008c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <xTimerGenericCommand+0x32>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	623b      	str	r3, [r7, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008caa:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d02a      	beq.n	8008d08 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	dc18      	bgt.n	8008cf6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cc4:	f7ff feaa 	bl	8008a1c <xTaskGetSchedulerState>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d109      	bne.n	8008ce2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cce:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f107 0110 	add.w	r1, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cda:	f7fe fc3d 	bl	8007558 <xQueueGenericSend>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce0:	e012      	b.n	8008d08 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7fe fc33 	bl	8007558 <xQueueGenericSend>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8008cf4:	e008      	b.n	8008d08 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cf6:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f107 0110 	add.w	r1, r7, #16
 8008cfe:	2300      	movs	r3, #0
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f7fe fd2f 	bl	8007764 <xQueueGenericSendFromISR>
 8008d06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3728      	adds	r7, #40	; 0x28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20001268 	.word	0x20001268

08008d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d22:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <prvProcessExpiredTimer+0x98>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fad7 	bl	80072e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d024      	beq.n	8008d8e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	18d1      	adds	r1, r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	6978      	ldr	r0, [r7, #20]
 8008d52:	f000 f8d3 	bl	8008efc <prvInsertTimerInActiveList>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d021      	beq.n	8008da0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	2100      	movs	r1, #0
 8008d66:	6978      	ldr	r0, [r7, #20]
 8008d68:	f7ff ff86 	bl	8008c78 <xTimerGenericCommand>
 8008d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d115      	bne.n	8008da0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	b672      	cpsid	i
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	b662      	cpsie	i
 8008d88:	60fb      	str	r3, [r7, #12]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	4798      	blx	r3
}
 8008da8:	bf00      	nop
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20001260 	.word	0x20001260

08008db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f857 	bl	8008e74 <prvGetNextExpireTime>
 8008dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 f803 	bl	8008dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dd2:	f000 f8d5 	bl	8008f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dd6:	e7f1      	b.n	8008dbc <prvTimerTask+0x8>

08008dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008de2:	f7ff fa1d 	bl	8008220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008de6:	f107 0308 	add.w	r3, r7, #8
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f866 	bl	8008ebc <prvSampleTimeNow>
 8008df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d130      	bne.n	8008e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <prvProcessTimerOrBlockTask+0x3c>
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d806      	bhi.n	8008e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e06:	f7ff fa19 	bl	800823c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ff83 	bl	8008d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e12:	e024      	b.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e1a:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <prvProcessTimerOrBlockTask+0x90>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <prvProcessTimerOrBlockTask+0x50>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <prvProcessTimerOrBlockTask+0x52>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <prvProcessTimerOrBlockTask+0x94>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f7fe ff53 	bl	8007ce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e3e:	f7ff f9fd 	bl	800823c <xTaskResumeAll>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <prvProcessTimerOrBlockTask+0x98>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
}
 8008e58:	e001      	b.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e5a:	f7ff f9ef 	bl	800823c <xTaskResumeAll>
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20001264 	.word	0x20001264
 8008e6c:	20001268 	.word	0x20001268
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <prvGetNextExpireTime+0x44>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <prvGetNextExpireTime+0x16>
 8008e86:	2201      	movs	r2, #1
 8008e88:	e000      	b.n	8008e8c <prvGetNextExpireTime+0x18>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d105      	bne.n	8008ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e98:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <prvGetNextExpireTime+0x44>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e001      	b.n	8008ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20001260 	.word	0x20001260

08008ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ec4:	f7ff fa5a 	bl	800837c <xTaskGetTickCount>
 8008ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eca:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvSampleTimeNow+0x3c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d205      	bcs.n	8008ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ed4:	f000 f93c 	bl	8009150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e002      	b.n	8008ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ee6:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <prvSampleTimeNow+0x3c>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008eec:	68fb      	ldr	r3, [r7, #12]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20001270 	.word	0x20001270

08008efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d812      	bhi.n	8008f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d302      	bcc.n	8008f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e01b      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f36:	4b10      	ldr	r3, [pc, #64]	; (8008f78 <prvInsertTimerInActiveList+0x7c>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7fe f996 	bl	8007272 <vListInsert>
 8008f46:	e012      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d206      	bcs.n	8008f5e <prvInsertTimerInActiveList+0x62>
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e007      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <prvInsertTimerInActiveList+0x80>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe f982 	bl	8007272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f6e:	697b      	ldr	r3, [r7, #20]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20001264 	.word	0x20001264
 8008f7c:	20001260 	.word	0x20001260

08008f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f86:	e0d0      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da1a      	bge.n	8008fc4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f8e:	1d3b      	adds	r3, r7, #4
 8008f90:	3304      	adds	r3, #4
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	b672      	cpsid	i
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	b662      	cpsie	i
 8008fae:	61fb      	str	r3, [r7, #28]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fba:	6850      	ldr	r0, [r2, #4]
 8008fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fbe:	6892      	ldr	r2, [r2, #8]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f2c0 80ae 	blt.w	8009128 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe f981 	bl	80072e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff69 	bl	8008ebc <prvSampleTimeNow>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	f200 809b 	bhi.w	800912a <prvProcessReceivedCommands+0x1aa>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <prvProcessReceivedCommands+0x7c>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009025 	.word	0x08009025
 8009000:	08009025 	.word	0x08009025
 8009004:	08009025 	.word	0x08009025
 8009008:	0800909d 	.word	0x0800909d
 800900c:	080090b1 	.word	0x080090b1
 8009010:	080090ff 	.word	0x080090ff
 8009014:	08009025 	.word	0x08009025
 8009018:	08009025 	.word	0x08009025
 800901c:	0800909d 	.word	0x0800909d
 8009020:	080090b1 	.word	0x080090b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	18d1      	adds	r1, r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009044:	f7ff ff5a 	bl	8008efc <prvInsertTimerInActiveList>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d06d      	beq.n	800912a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d062      	beq.n	800912a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	441a      	add	r2, r3
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	2100      	movs	r1, #0
 8009074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009076:	f7ff fdff 	bl	8008c78 <xTimerGenericCommand>
 800907a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d153      	bne.n	800912a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	61bb      	str	r3, [r7, #24]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090ae:	e03c      	b.n	800912a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b6:	f043 0301 	orr.w	r3, r3, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10c      	bne.n	80090ea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	b672      	cpsid	i
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	b662      	cpsie	i
 80090e4:	617b      	str	r3, [r7, #20]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	18d1      	adds	r1, r2, r3
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f8:	f7ff ff00 	bl	8008efc <prvInsertTimerInActiveList>
					break;
 80090fc:	e015      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800910c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910e:	f000 fbcb 	bl	80098a8 <vPortFree>
 8009112:	e00a      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009126:	e000      	b.n	800912a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <prvProcessReceivedCommands+0x1cc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1d39      	adds	r1, r7, #4
 8009130:	2200      	movs	r2, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fbb6 	bl	80078a4 <xQueueReceive>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f47f af24 	bne.w	8008f88 <prvProcessReceivedCommands+0x8>
	}
}
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	3730      	adds	r7, #48	; 0x30
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20001268 	.word	0x20001268

08009150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009156:	e04a      	b.n	80091ee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009158:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <prvSwitchTimerLists+0xc4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b2c      	ldr	r3, [pc, #176]	; (8009214 <prvSwitchTimerLists+0xc4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe f8b7 	bl	80072e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d030      	beq.n	80091ee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	429a      	cmp	r2, r3
 800919c:	d90e      	bls.n	80091bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fe f85c 	bl	8007272 <vListInsert>
 80091ba:	e018      	b.n	80091ee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	2100      	movs	r1, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff fd56 	bl	8008c78 <xTimerGenericCommand>
 80091cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <prvSwitchTimerLists+0x9e>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	b672      	cpsid	i
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	b662      	cpsie	i
 80091e8:	603b      	str	r3, [r7, #0]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ee:	4b09      	ldr	r3, [pc, #36]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1af      	bne.n	8009158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <prvSwitchTimerLists+0xc8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a04      	ldr	r2, [pc, #16]	; (8009214 <prvSwitchTimerLists+0xc4>)
 8009204:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009206:	4a04      	ldr	r2, [pc, #16]	; (8009218 <prvSwitchTimerLists+0xc8>)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20001260 	.word	0x20001260
 8009218:	20001264 	.word	0x20001264

0800921c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009222:	f000 f94b 	bl	80094bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d120      	bne.n	8009270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800922e:	4814      	ldr	r0, [pc, #80]	; (8009280 <prvCheckForValidListAndQueue+0x64>)
 8009230:	f7fd ffce 	bl	80071d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009234:	4813      	ldr	r0, [pc, #76]	; (8009284 <prvCheckForValidListAndQueue+0x68>)
 8009236:	f7fd ffcb 	bl	80071d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <prvCheckForValidListAndQueue+0x6c>)
 800923c:	4a10      	ldr	r2, [pc, #64]	; (8009280 <prvCheckForValidListAndQueue+0x64>)
 800923e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <prvCheckForValidListAndQueue+0x70>)
 8009242:	4a10      	ldr	r2, [pc, #64]	; (8009284 <prvCheckForValidListAndQueue+0x68>)
 8009244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <prvCheckForValidListAndQueue+0x74>)
 800924c:	4a11      	ldr	r2, [pc, #68]	; (8009294 <prvCheckForValidListAndQueue+0x78>)
 800924e:	2110      	movs	r1, #16
 8009250:	200a      	movs	r0, #10
 8009252:	f7fe f8db 	bl	800740c <xQueueGenericCreateStatic>
 8009256:	4603      	mov	r3, r0
 8009258:	4a08      	ldr	r2, [pc, #32]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 800925a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800925c:	4b07      	ldr	r3, [pc, #28]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	490b      	ldr	r1, [pc, #44]	; (8009298 <prvCheckForValidListAndQueue+0x7c>)
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fd10 	bl	8007c90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009270:	f000 f958 	bl	8009524 <vPortExitCritical>
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20001268 	.word	0x20001268
 8009280:	20001238 	.word	0x20001238
 8009284:	2000124c 	.word	0x2000124c
 8009288:	20001260 	.word	0x20001260
 800928c:	20001264 	.word	0x20001264
 8009290:	20001314 	.word	0x20001314
 8009294:	20001274 	.word	0x20001274
 8009298:	08009d0c 	.word	0x08009d0c

0800929c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3b04      	subs	r3, #4
 80092ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f023 0201 	bic.w	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b04      	subs	r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092cc:	4a0c      	ldr	r2, [pc, #48]	; (8009300 <pxPortInitialiseStack+0x64>)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3b14      	subs	r3, #20
 80092d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3b04      	subs	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f06f 0202 	mvn.w	r2, #2
 80092ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3b20      	subs	r3, #32
 80092f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	08009305 	.word	0x08009305

08009304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800930e:	4b14      	ldr	r3, [pc, #80]	; (8009360 <prvTaskExitError+0x5c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d00c      	beq.n	8009332 <prvTaskExitError+0x2e>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <prvTaskExitError+0x2c>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	b672      	cpsid	i
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	b662      	cpsie	i
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800934a:	bf00      	nop
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0fc      	beq.n	800934c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	2000000c 	.word	0x2000000c
	...

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	4770      	bx	lr
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst2>:
 8009390:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009398:	4808      	ldr	r0, [pc, #32]	; (80093bc <prvPortStartFirstTask+0x24>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8814 	msr	CONTROL, r0
 80093aa:	b662      	cpsie	i
 80093ac:	b661      	cpsie	f
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	df00      	svc	0
 80093b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ba:	bf00      	nop
 80093bc:	e000ed08 	.word	0xe000ed08

080093c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <xPortStartScheduler+0xe4>)
 80093c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <xPortStartScheduler+0xe8>)
 80093ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ee:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <xPortStartScheduler+0xec>)
 80093f0:	2207      	movs	r2, #7
 80093f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093f4:	e009      	b.n	800940a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093f6:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <xPortStartScheduler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <xPortStartScheduler+0xec>)
 80093fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d0ef      	beq.n	80093f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009416:	4b25      	ldr	r3, [pc, #148]	; (80094ac <xPortStartScheduler+0xec>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1c3 0307 	rsb	r3, r3, #7
 800941e:	2b04      	cmp	r3, #4
 8009420:	d00c      	beq.n	800943c <xPortStartScheduler+0x7c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	60bb      	str	r3, [r7, #8]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <xPortStartScheduler+0xec>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <xPortStartScheduler+0xec>)
 8009444:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <xPortStartScheduler+0xec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800944e:	4a17      	ldr	r2, [pc, #92]	; (80094ac <xPortStartScheduler+0xec>)
 8009450:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800945a:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <xPortStartScheduler+0xf0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a14      	ldr	r2, [pc, #80]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009466:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a11      	ldr	r2, [pc, #68]	; (80094b0 <xPortStartScheduler+0xf0>)
 800946c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009470:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009472:	f000 f8dd 	bl	8009630 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <xPortStartScheduler+0xf4>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800947c:	f000 f8fc 	bl	8009678 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009480:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800948a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800948c:	f7ff ff84 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009490:	f7ff f840 	bl	8008514 <vTaskSwitchContext>
	prvTaskExitError();
 8009494:	f7ff ff36 	bl	8009304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	e000e400 	.word	0xe000e400
 80094a8:	20001364 	.word	0x20001364
 80094ac:	20001368 	.word	0x20001368
 80094b0:	e000ed20 	.word	0xe000ed20
 80094b4:	2000000c 	.word	0x2000000c
 80094b8:	e000ef34 	.word	0xe000ef34

080094bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	b672      	cpsid	i
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	b662      	cpsie	i
 80094d6:	607b      	str	r3, [r7, #4]
}
 80094d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094da:	4b10      	ldr	r3, [pc, #64]	; (800951c <vPortEnterCritical+0x60>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	4a0e      	ldr	r2, [pc, #56]	; (800951c <vPortEnterCritical+0x60>)
 80094e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094e4:	4b0d      	ldr	r3, [pc, #52]	; (800951c <vPortEnterCritical+0x60>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d111      	bne.n	8009510 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <vPortEnterCritical+0x64>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <vPortEnterCritical+0x54>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	b672      	cpsid	i
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	b662      	cpsie	i
 800950a:	603b      	str	r3, [r7, #0]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <vPortEnterCritical+0x52>
	}
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	2000000c 	.word	0x2000000c
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <vPortExitCritical+0x54>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <vPortExitCritical+0x28>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	607b      	str	r3, [r7, #4]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <vPortExitCritical+0x54>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	4a09      	ldr	r2, [pc, #36]	; (8009578 <vPortExitCritical+0x54>)
 8009554:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <vPortExitCritical+0x54>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <vPortExitCritical+0x46>
 800955e:	2300      	movs	r3, #0
 8009560:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f383 8811 	msr	BASEPRI, r3
}
 8009568:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	2000000c 	.word	0x2000000c
 800957c:	00000000 	.word	0x00000000

08009580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009580:	f3ef 8009 	mrs	r0, PSP
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <pxCurrentTCBConst>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	f01e 0f10 	tst.w	lr, #16
 8009590:	bf08      	it	eq
 8009592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095a4:	b672      	cpsid	i
 80095a6:	f380 8811 	msr	BASEPRI, r0
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	b662      	cpsie	i
 80095b4:	f7fe ffae 	bl	8008514 <vTaskSwitchContext>
 80095b8:	f04f 0000 	mov.w	r0, #0
 80095bc:	f380 8811 	msr	BASEPRI, r0
 80095c0:	bc09      	pop	{r0, r3}
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f01e 0f10 	tst.w	lr, #16
 80095ce:	bf08      	it	eq
 80095d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095d4:	f380 8809 	msr	PSP, r0
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop

080095e0 <pxCurrentTCBConst>:
 80095e0:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	607b      	str	r3, [r7, #4]
}
 8009604:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009606:	f7fe fec9 	bl	800839c <xTaskIncrementTick>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <SysTick_Handler+0x44>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f383 8811 	msr	BASEPRI, r3
}
 8009622:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <vPortSetupTimerInterrupt+0x38>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortSetupTimerInterrupt+0x3c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <vPortSetupTimerInterrupt+0x40>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	099b      	lsrs	r3, r3, #6
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortSetupTimerInterrupt+0x44>)
 800964e:	3b01      	subs	r3, #1
 8009650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009654:	2207      	movs	r2, #7
 8009656:	601a      	str	r2, [r3, #0]
}
 8009658:	bf00      	nop
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	e000e010 	.word	0xe000e010
 8009668:	e000e018 	.word	0xe000e018
 800966c:	20000000 	.word	0x20000000
 8009670:	10624dd3 	.word	0x10624dd3
 8009674:	e000e014 	.word	0xe000e014

08009678 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009678:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009688 <vPortEnableVFP+0x10>
 800967c:	6801      	ldr	r1, [r0, #0]
 800967e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009682:	6001      	str	r1, [r0, #0]
 8009684:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009686:	bf00      	nop
 8009688:	e000ed88 	.word	0xe000ed88

0800968c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009692:	f3ef 8305 	mrs	r3, IPSR
 8009696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b0f      	cmp	r3, #15
 800969c:	d916      	bls.n	80096cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800969e:	4a19      	ldr	r2, [pc, #100]	; (8009704 <vPortValidateInterruptPriority+0x78>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096a8:	4b17      	ldr	r3, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x7c>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	7afa      	ldrb	r2, [r7, #11]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d20c      	bcs.n	80096cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	607b      	str	r3, [r7, #4]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <vPortValidateInterruptPriority+0x80>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d90c      	bls.n	80096f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	b672      	cpsid	i
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	b662      	cpsie	i
 80096f0:	603b      	str	r3, [r7, #0]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <vPortValidateInterruptPriority+0x68>
	}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000e3f0 	.word	0xe000e3f0
 8009708:	20001364 	.word	0x20001364
 800970c:	e000ed0c 	.word	0xe000ed0c
 8009710:	20001368 	.word	0x20001368

08009714 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009720:	f7fe fd7e 	bl	8008220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009724:	4b5b      	ldr	r3, [pc, #364]	; (8009894 <pvPortMalloc+0x180>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800972c:	f000 f91a 	bl	8009964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009730:	4b59      	ldr	r3, [pc, #356]	; (8009898 <pvPortMalloc+0x184>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8092 	bne.w	8009862 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01f      	beq.n	8009784 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009744:	2208      	movs	r2, #8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	3308      	adds	r3, #8
 800975e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <pvPortMalloc+0x70>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06b      	beq.n	8009862 <pvPortMalloc+0x14e>
 800978a:	4b44      	ldr	r3, [pc, #272]	; (800989c <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d866      	bhi.n	8009862 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b41      	ldr	r3, [pc, #260]	; (80098a0 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa8>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b35      	ldr	r3, [pc, #212]	; (8009894 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d04d      	beq.n	8009862 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d921      	bls.n	800982c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <pvPortMalloc+0x100>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	b672      	cpsid	i
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	b662      	cpsie	i
 800980e:	613b      	str	r3, [r7, #16]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009826:	69b8      	ldr	r0, [r7, #24]
 8009828:	f000 f8fe 	bl	8009a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <pvPortMalloc+0x188>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <pvPortMalloc+0x188>)
 8009838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800983a:	4b18      	ldr	r3, [pc, #96]	; (800989c <pvPortMalloc+0x188>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <pvPortMalloc+0x190>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d203      	bcs.n	800984e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <pvPortMalloc+0x188>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <pvPortMalloc+0x190>)
 800984c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <pvPortMalloc+0x184>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	431a      	orrs	r2, r3
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009862:	f7fe fceb 	bl	800823c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <pvPortMalloc+0x176>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <pvPortMalloc+0x174>
	return pvReturn;
 800988a:	69fb      	ldr	r3, [r7, #28]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	; 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20004f74 	.word	0x20004f74
 8009898:	20004f80 	.word	0x20004f80
 800989c:	20004f78 	.word	0x20004f78
 80098a0:	20004f6c 	.word	0x20004f6c
 80098a4:	20004f7c 	.word	0x20004f7c

080098a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d04c      	beq.n	8009954 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ba:	2308      	movs	r3, #8
 80098bc:	425b      	negs	r3, r3
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <vPortFree+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4013      	ands	r3, r2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10c      	bne.n	80098f0 <vPortFree+0x48>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	60fb      	str	r3, [r7, #12]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00c      	beq.n	8009912 <vPortFree+0x6a>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	b672      	cpsid	i
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	b662      	cpsie	i
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <vPortFree+0xb4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d019      	beq.n	8009954 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <vPortFree+0xb4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fc72 	bl	8008220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <vPortFree+0xb8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a06      	ldr	r2, [pc, #24]	; (8009960 <vPortFree+0xb8>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f86c 	bl	8009a28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009950:	f7fe fc74 	bl	800823c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009954:	bf00      	nop
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20004f80 	.word	0x20004f80
 8009960:	20004f78 	.word	0x20004f78

08009964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800996a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800996e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009970:	4b27      	ldr	r3, [pc, #156]	; (8009a10 <prvHeapInit+0xac>)
 8009972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3307      	adds	r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <prvHeapInit+0xac>)
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800999c:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <prvHeapInit+0xb0>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <prvHeapInit+0xb0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099b0:	2208      	movs	r2, #8
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <prvHeapInit+0xb4>)
 80099c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <prvHeapInit+0xb4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvHeapInit+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <prvHeapInit+0xb4>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	; (8009a1c <prvHeapInit+0xb8>)
 80099f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <prvHeapInit+0xbc>)
 80099fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <prvHeapInit+0xc0>)
 80099fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	2000136c 	.word	0x2000136c
 8009a14:	20004f6c 	.word	0x20004f6c
 8009a18:	20004f74 	.word	0x20004f74
 8009a1c:	20004f7c 	.word	0x20004f7c
 8009a20:	20004f78 	.word	0x20004f78
 8009a24:	20004f80 	.word	0x20004f80

08009a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <prvInsertBlockIntoFreeList+0xac>)
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e002      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x14>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8f7      	bhi.n	8009a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d108      	bne.n	8009a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	441a      	add	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d118      	bne.n	8009ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d00d      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	441a      	add	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e008      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e003      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d002      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20004f6c 	.word	0x20004f6c
 8009ad8:	20004f74 	.word	0x20004f74

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	; (8009b14 <__libc_init_array+0x38>)
 8009ae0:	4c0d      	ldr	r4, [pc, #52]	; (8009b18 <__libc_init_array+0x3c>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	; (8009b1c <__libc_init_array+0x40>)
 8009aee:	4c0c      	ldr	r4, [pc, #48]	; (8009b20 <__libc_init_array+0x44>)
 8009af0:	f000 f8f2 	bl	8009cd8 <_init>
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	2600      	movs	r6, #0
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	4798      	blx	r3
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	4798      	blx	r3
 8009b10:	3601      	adds	r6, #1
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	08009db8 	.word	0x08009db8
 8009b18:	08009db8 	.word	0x08009db8
 8009b1c:	08009db8 	.word	0x08009db8
 8009b20:	08009dbc 	.word	0x08009dbc

08009b24 <__retarget_lock_acquire_recursive>:
 8009b24:	4770      	bx	lr

08009b26 <__retarget_lock_release_recursive>:
 8009b26:	4770      	bx	lr

08009b28 <memcpy>:
 8009b28:	440a      	add	r2, r1
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b30:	d100      	bne.n	8009b34 <memcpy+0xc>
 8009b32:	4770      	bx	lr
 8009b34:	b510      	push	{r4, lr}
 8009b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	d1f9      	bne.n	8009b36 <memcpy+0xe>
 8009b42:	bd10      	pop	{r4, pc}

08009b44 <memset>:
 8009b44:	4402      	add	r2, r0
 8009b46:	4603      	mov	r3, r0
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d100      	bne.n	8009b4e <memset+0xa>
 8009b4c:	4770      	bx	lr
 8009b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b52:	e7f9      	b.n	8009b48 <memset+0x4>

08009b54 <cleanup_glue>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	6809      	ldr	r1, [r1, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b109      	cbz	r1, 8009b62 <cleanup_glue+0xe>
 8009b5e:	f7ff fff9 	bl	8009b54 <cleanup_glue>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6a:	f000 b869 	b.w	8009c40 <_free_r>
	...

08009b70 <_reclaim_reent>:
 8009b70:	4b2c      	ldr	r3, [pc, #176]	; (8009c24 <_reclaim_reent+0xb4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4283      	cmp	r3, r0
 8009b76:	b570      	push	{r4, r5, r6, lr}
 8009b78:	4604      	mov	r4, r0
 8009b7a:	d051      	beq.n	8009c20 <_reclaim_reent+0xb0>
 8009b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b7e:	b143      	cbz	r3, 8009b92 <_reclaim_reent+0x22>
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d14a      	bne.n	8009c1c <_reclaim_reent+0xac>
 8009b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b88:	6819      	ldr	r1, [r3, #0]
 8009b8a:	b111      	cbz	r1, 8009b92 <_reclaim_reent+0x22>
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f857 	bl	8009c40 <_free_r>
 8009b92:	6961      	ldr	r1, [r4, #20]
 8009b94:	b111      	cbz	r1, 8009b9c <_reclaim_reent+0x2c>
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f852 	bl	8009c40 <_free_r>
 8009b9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b9e:	b111      	cbz	r1, 8009ba6 <_reclaim_reent+0x36>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 f84d 	bl	8009c40 <_free_r>
 8009ba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ba8:	b111      	cbz	r1, 8009bb0 <_reclaim_reent+0x40>
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 f848 	bl	8009c40 <_free_r>
 8009bb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bb2:	b111      	cbz	r1, 8009bba <_reclaim_reent+0x4a>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 f843 	bl	8009c40 <_free_r>
 8009bba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bbc:	b111      	cbz	r1, 8009bc4 <_reclaim_reent+0x54>
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 f83e 	bl	8009c40 <_free_r>
 8009bc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009bc6:	b111      	cbz	r1, 8009bce <_reclaim_reent+0x5e>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f839 	bl	8009c40 <_free_r>
 8009bce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bd0:	b111      	cbz	r1, 8009bd8 <_reclaim_reent+0x68>
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f834 	bl	8009c40 <_free_r>
 8009bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bda:	b111      	cbz	r1, 8009be2 <_reclaim_reent+0x72>
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f82f 	bl	8009c40 <_free_r>
 8009be2:	69a3      	ldr	r3, [r4, #24]
 8009be4:	b1e3      	cbz	r3, 8009c20 <_reclaim_reent+0xb0>
 8009be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009be8:	4620      	mov	r0, r4
 8009bea:	4798      	blx	r3
 8009bec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bee:	b1b9      	cbz	r1, 8009c20 <_reclaim_reent+0xb0>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bf6:	f7ff bfad 	b.w	8009b54 <cleanup_glue>
 8009bfa:	5949      	ldr	r1, [r1, r5]
 8009bfc:	b941      	cbnz	r1, 8009c10 <_reclaim_reent+0xa0>
 8009bfe:	3504      	adds	r5, #4
 8009c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c02:	2d80      	cmp	r5, #128	; 0x80
 8009c04:	68d9      	ldr	r1, [r3, #12]
 8009c06:	d1f8      	bne.n	8009bfa <_reclaim_reent+0x8a>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 f819 	bl	8009c40 <_free_r>
 8009c0e:	e7ba      	b.n	8009b86 <_reclaim_reent+0x16>
 8009c10:	680e      	ldr	r6, [r1, #0]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f814 	bl	8009c40 <_free_r>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	e7ef      	b.n	8009bfc <_reclaim_reent+0x8c>
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	e7ef      	b.n	8009c00 <_reclaim_reent+0x90>
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	bf00      	nop
 8009c24:	20000010 	.word	0x20000010

08009c28 <__malloc_lock>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__malloc_lock+0x8>)
 8009c2a:	f7ff bf7b 	b.w	8009b24 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	20004f84 	.word	0x20004f84

08009c34 <__malloc_unlock>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__malloc_unlock+0x8>)
 8009c36:	f7ff bf76 	b.w	8009b26 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20004f84 	.word	0x20004f84

08009c40 <_free_r>:
 8009c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c42:	2900      	cmp	r1, #0
 8009c44:	d044      	beq.n	8009cd0 <_free_r+0x90>
 8009c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c4a:	9001      	str	r0, [sp, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c52:	bfb8      	it	lt
 8009c54:	18e4      	addlt	r4, r4, r3
 8009c56:	f7ff ffe7 	bl	8009c28 <__malloc_lock>
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <_free_r+0x94>)
 8009c5c:	9801      	ldr	r0, [sp, #4]
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	b933      	cbnz	r3, 8009c70 <_free_r+0x30>
 8009c62:	6063      	str	r3, [r4, #4]
 8009c64:	6014      	str	r4, [r2, #0]
 8009c66:	b003      	add	sp, #12
 8009c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c6c:	f7ff bfe2 	b.w	8009c34 <__malloc_unlock>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d908      	bls.n	8009c86 <_free_r+0x46>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	1961      	adds	r1, r4, r5
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf01      	itttt	eq
 8009c7c:	6819      	ldreq	r1, [r3, #0]
 8009c7e:	685b      	ldreq	r3, [r3, #4]
 8009c80:	1949      	addeq	r1, r1, r5
 8009c82:	6021      	streq	r1, [r4, #0]
 8009c84:	e7ed      	b.n	8009c62 <_free_r+0x22>
 8009c86:	461a      	mov	r2, r3
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	b10b      	cbz	r3, 8009c90 <_free_r+0x50>
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	d9fa      	bls.n	8009c86 <_free_r+0x46>
 8009c90:	6811      	ldr	r1, [r2, #0]
 8009c92:	1855      	adds	r5, r2, r1
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d10b      	bne.n	8009cb0 <_free_r+0x70>
 8009c98:	6824      	ldr	r4, [r4, #0]
 8009c9a:	4421      	add	r1, r4
 8009c9c:	1854      	adds	r4, r2, r1
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6011      	str	r1, [r2, #0]
 8009ca2:	d1e0      	bne.n	8009c66 <_free_r+0x26>
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	6053      	str	r3, [r2, #4]
 8009caa:	4421      	add	r1, r4
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	e7da      	b.n	8009c66 <_free_r+0x26>
 8009cb0:	d902      	bls.n	8009cb8 <_free_r+0x78>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	e7d6      	b.n	8009c66 <_free_r+0x26>
 8009cb8:	6825      	ldr	r5, [r4, #0]
 8009cba:	1961      	adds	r1, r4, r5
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	bf04      	itt	eq
 8009cc0:	6819      	ldreq	r1, [r3, #0]
 8009cc2:	685b      	ldreq	r3, [r3, #4]
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	bf04      	itt	eq
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	6054      	str	r4, [r2, #4]
 8009cce:	e7ca      	b.n	8009c66 <_free_r+0x26>
 8009cd0:	b003      	add	sp, #12
 8009cd2:	bd30      	pop	{r4, r5, pc}
 8009cd4:	20004f88 	.word	0x20004f88

08009cd8 <_init>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr

08009ce4 <_fini>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b898  0800b898  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8a0  0800b8a0  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800b8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a80  20000174  0800ba1c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bf4  0800ba1c  00026bf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022033  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a56  00000000  00000000  000421d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00046c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  000485c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b1b  00000000  00000000  00049d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1d0  00000000  00000000  00050863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104b89  00000000  00000000  0006fa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001745bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d90  00000000  00000000  0017460c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000174 	.word	0x20000174
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b724 	.word	0x0800b724

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000178 	.word	0x20000178
 800023c:	0800b724 	.word	0x0800b724

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Init_MsgQueue>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t buffer[32];			//Our own global Rx buffer. For use without msg queue

int Init_MsgQueue (void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  MSGQ = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	200a      	movs	r0, #10
 8000622:	f007 fa33 	bl	8007a8c <osMessageQueueNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a05      	ldr	r2, [pc, #20]	; (8000640 <Init_MsgQueue+0x28>)
 800062a:	6013      	str	r3, [r2, #0]
  if (MSGQ == NULL) {
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <Init_MsgQueue+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <Init_MsgQueue+0x22>
	  return -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e000      	b.n	800063c <Init_MsgQueue+0x24>
  }
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000019c 	.word	0x2000019c

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000648:	f7ff ff7c 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800064c:	f7ff ffa0 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fa80 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f834 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f8a2 	bl	80007a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800065c:	f007 f8d8 	bl	8007810 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  Init_MsgQueue();
 8000660:	f7ff ffda 	bl	8000618 <Init_MsgQueue>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Tx */
  Task_TxHandle = osThreadNew(StartTask_Tx, NULL, &Task_Tx_attributes);
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <main+0x58>)
 8000666:	2100      	movs	r1, #0
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <main+0x5c>)
 800066a:	f007 f93b 	bl	80078e4 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <main+0x60>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of Task_Rx */
  Task_RxHandle = osThreadNew(StartTask_Rx, NULL, &Task_Rx_attributes);
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <main+0x64>)
 8000676:	2100      	movs	r1, #0
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0x68>)
 800067a:	f007 f933 	bl	80078e4 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <main+0x6c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of Task_misc */
  Task_miscHandle = osThreadNew(StartTask_misc, NULL, &Task_misc_attributes);
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <main+0x70>)
 8000686:	2100      	movs	r1, #0
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <main+0x74>)
 800068a:	f007 f92b 	bl	80078e4 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <main+0x78>)
 8000692:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000694:	f007 f8f0 	bl	8007878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x54>
 800069a:	bf00      	nop
 800069c:	0800b7b4 	.word	0x0800b7b4
 80006a0:	08000835 	.word	0x08000835
 80006a4:	20000190 	.word	0x20000190
 80006a8:	0800b7d8 	.word	0x0800b7d8
 80006ac:	08000889 	.word	0x08000889
 80006b0:	20000194 	.word	0x20000194
 80006b4:	0800b7fc 	.word	0x0800b7fc
 80006b8:	08000899 	.word	0x08000899
 80006bc:	20000198 	.word	0x20000198

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00a feba 	bl	800b448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0xd8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemClock_Config+0xd8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xdc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xdc>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000730:	2360      	movs	r3, #96	; 0x60
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f829 	bl	800279c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f8bc 	bl	80008cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f001 ffd2 	bl	80026fc <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800075e:	f000 f8b5 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2103      	movs	r1, #3
 800077e:	4618      	mov	r0, r3
 8000780:	f002 faba 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800078a:	f000 f89f 	bl	80008cc <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0x8c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_GPIO_Init+0x8c>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_GPIO_Init+0x8c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_GPIO_Init+0x8c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_GPIO_Init+0x8c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_GPIO_Init+0x8c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_GPIO_Init+0x8c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_GPIO_Init+0x8c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_GPIO_Init+0x90>)
 8000804:	f000 fc8e 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0x90>)
 8000820:	f000 fad4 	bl	8000dcc <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400

08000834 <StartTask_Tx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_Tx */
void StartTask_Tx(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800083c:	f00a f80e 	bl	800a85c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  for(;;)
  {

	  if( MSGQ != NULL )
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <StartTask_Tx+0x50>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0fb      	beq.n	8000840 <StartTask_Tx+0xc>
		{
			status = osMessageQueueGet(MSGQ, &msg, NULL, 0U);
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <StartTask_Tx+0x50>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f107 010c 	add.w	r1, r7, #12
 8000850:	2300      	movs	r3, #0
 8000852:	2200      	movs	r2, #0
 8000854:	f007 fa14 	bl	8007c80 <osMessageQueueGet>
 8000858:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (status == osOK)
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1ef      	bne.n	8000840 <StartTask_Tx+0xc>
			{
				CDC_Transmit_FS( /*(uint8_t *)*/ msg.Buf, sizeof(msg.Buf));		// Transmit what's been recieved in our msg queue
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2120      	movs	r1, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f00a f8dc 	bl	800aa24 <CDC_Transmit_FS>
					  memset(msg.Buf, 0, sizeof(msg.Buf));						// Set rx memory to 0 to stop repetitive sending.
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2220      	movs	r2, #32
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00a fde7 	bl	800b448 <memset>
					  osDelay(500);
 800087a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087e:	f007 f8d7 	bl	8007a30 <osDelay>
	  if( MSGQ != NULL )
 8000882:	e7dd      	b.n	8000840 <StartTask_Tx+0xc>
 8000884:	2000019c 	.word	0x2000019c

08000888 <StartTask_Rx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Rx */
void StartTask_Rx(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Rx */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f007 f8cd 	bl	8007a30 <osDelay>
 8000896:	e7fb      	b.n	8000890 <StartTask_Rx+0x8>

08000898 <StartTask_misc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_misc */
void StartTask_misc(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_misc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f007 f8c5 	bl	8007a30 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartTask_misc+0x8>

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 f961 	bl	8000b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40001000 	.word	0x40001000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa2f 	bl	8000d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <HAL_InitTick+0xe0>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <HAL_InitTick+0xe0>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <HAL_InitTick+0xe0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000950:	f107 0210 	add.w	r2, r7, #16
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fbde 	bl	800311c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096a:	f002 fbc3 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 800096e:	6378      	str	r0, [r7, #52]	; 0x34
 8000970:	e004      	b.n	800097c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000972:	f002 fbbf 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8000976:	4603      	mov	r3, r0
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <HAL_InitTick+0xe4>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	0c9b      	lsrs	r3, r3, #18
 8000986:	3b01      	subs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_InitTick+0xe8>)
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <HAL_InitTick+0xec>)
 800098e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_InitTick+0xe8>)
 8000992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000996:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_InitTick+0xe8>)
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_InitTick+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_InitTick+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_InitTick+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b0:	4817      	ldr	r0, [pc, #92]	; (8000a10 <HAL_InitTick+0xe8>)
 80009b2:	f003 f80d 	bl	80039d0 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d11b      	bne.n	80009fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <HAL_InitTick+0xe8>)
 80009c6:	f003 f865 	bl	8003a94 <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d111      	bne.n	80009fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d8:	2036      	movs	r0, #54	; 0x36
 80009da:	f000 f9e9 	bl	8000db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d808      	bhi.n	80009f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	2036      	movs	r0, #54	; 0x36
 80009ea:	f000 f9c5 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_InitTick+0xf0>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	e002      	b.n	80009fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3738      	adds	r7, #56	; 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	200001a0 	.word	0x200001a0
 8000a14:	40001000 	.word	0x40001000
 8000a18:	20000004 	.word	0x20000004

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM6_DAC_IRQHandler+0x10>)
 8000a4e:	f003 f899 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001a0 	.word	0x200001a0

08000a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <OTG_FS_IRQHandler+0x10>)
 8000a62:	f000 fcd8 	bl	8001416 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200066dc 	.word	0x200066dc

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f00a fc88 	bl	800b3b4 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20080000 	.word	0x20080000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	200001ec 	.word	0x200001ec
 8000ad8:	20006bf8 	.word	0x20006bf8

08000adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ffd7 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f00a fc47 	bl	800b3c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd87 	bl	8000644 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000b44:	0800b8a8 	.word	0x0800b8a8
  ldr r2, =_sbss
 8000b48:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000b4c:	20006bf4 	.word	0x20006bf4

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f8fc 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f7ff fedc 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff feb2 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200001f0 	.word	0x200001f0

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001f0 	.word	0x200001f0

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <__NVIC_SetPriorityGrouping+0x40>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x40>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	05fa0000 	.word	0x05fa0000

08000c50 <__NVIC_GetPriorityGrouping>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff4c 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8a:	f7ff ff61 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f7ff ffb1 	bl	8000cfc <NVIC_EncodePriority>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff80 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff54 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e175      	b.n	80010d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8164 	bne.w	80010d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_GPIO_Init+0x56>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d130      	bne.n	8000e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d017      	beq.n	8000ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80be 	beq.w	80010d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_GPIO_Init+0x324>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a65      	ldr	r2, [pc, #404]	; (80010f0 <HAL_GPIO_Init+0x324>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <HAL_GPIO_Init+0x324>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f6e:	4a61      	ldr	r2, [pc, #388]	; (80010f4 <HAL_GPIO_Init+0x328>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a58      	ldr	r2, [pc, #352]	; (80010f8 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d037      	beq.n	800100a <HAL_GPIO_Init+0x23e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	; (80010fc <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d031      	beq.n	8001006 <HAL_GPIO_Init+0x23a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_GPIO_Init+0x334>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d02b      	beq.n	8001002 <HAL_GPIO_Init+0x236>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a55      	ldr	r2, [pc, #340]	; (8001104 <HAL_GPIO_Init+0x338>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x232>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a54      	ldr	r2, [pc, #336]	; (8001108 <HAL_GPIO_Init+0x33c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x22e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a53      	ldr	r2, [pc, #332]	; (800110c <HAL_GPIO_Init+0x340>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x22a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x344>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a51      	ldr	r2, [pc, #324]	; (8001114 <HAL_GPIO_Init+0x348>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x34c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x350>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x21a>
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	e012      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	e010      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fea:	2308      	movs	r3, #8
 8000fec:	e00e      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x240>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x240>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x240>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x240>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800101c:	4935      	ldr	r1, [pc, #212]	; (80010f4 <HAL_GPIO_Init+0x328>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <HAL_GPIO_Init+0x354>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a34      	ldr	r2, [pc, #208]	; (8001120 <HAL_GPIO_Init+0x354>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <HAL_GPIO_Init+0x354>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <HAL_GPIO_Init+0x354>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_GPIO_Init+0x354>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a2:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <HAL_GPIO_Init+0x354>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_GPIO_Init+0x354>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_GPIO_Init+0x354>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f ae86 	bls.w	8000dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021c00 	.word	0x40021c00
 8001118:	40022000 	.word	0x40022000
 800111c:	40022400 	.word	0x40022400
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	041a      	lsls	r2, r3, #16
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43d9      	mvns	r1, r3
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	400b      	ands	r3, r1
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800118a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118c:	b08f      	sub	sp, #60	; 0x3c
 800118e:	af0a      	add	r7, sp, #40	; 0x28
 8001190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e116      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f009 fd8e 	bl	800acd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 ffe3 	bl	80041a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	687e      	ldr	r6, [r7, #4]
 80011e8:	466d      	mov	r5, sp
 80011ea:	f106 0410 	add.w	r4, r6, #16
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fe:	1d33      	adds	r3, r6, #4
 8001200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f002 fec4 	bl	8003f90 <USB_CoreInit>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0d7      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f002 ffd1 	bl	80041c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e04a      	b.n	80012c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	333d      	adds	r3, #61	; 0x3d
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	333c      	adds	r3, #60	; 0x3c
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	b298      	uxth	r0, r3
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3344      	adds	r3, #68	; 0x44
 8001268:	4602      	mov	r2, r0
 800126a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3340      	adds	r3, #64	; 0x40
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3348      	adds	r3, #72	; 0x48
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	334c      	adds	r3, #76	; 0x4c
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3354      	adds	r3, #84	; 0x54
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3af      	bcc.n	800122c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e044      	b.n	800135c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3301      	adds	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3b5      	bcc.n	80012d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	687e      	ldr	r6, [r7, #4]
 800136e:	466d      	mov	r5, sp
 8001370:	f106 0410 	add.w	r4, r6, #16
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}
 8001384:	1d33      	adds	r3, r6, #4
 8001386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f002 ff69 	bl	8004260 <USB_DevInit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e014      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f001 f97b 	bl	80026b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 f8b7 	bl	8005536 <USB_DevDisconnect>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_PCD_Start+0x16>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e012      	b.n	800140e <HAL_PCD_Start+0x3c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fec5 	bl	8004184 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 f878 	bl	80054f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b08d      	sub	sp, #52	; 0x34
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f004 f936 	bl	800569e <USB_GetMode>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 84b7 	bne.w	8001da8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f89a 	bl	8005578 <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 84ad 	beq.w	8001da6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f887 	bl	8005578 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d107      	bne.n	8001484 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f002 0202 	and.w	r2, r2, #2
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f004 f875 	bl	8005578 <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b10      	cmp	r3, #16
 8001496:	d161      	bne.n	800155c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	0c5b      	lsrs	r3, r3, #17
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d124      	bne.n	800151e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d035      	beq.n	800154c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	6a38      	ldr	r0, [r7, #32]
 80014f4:	f003 feac 	bl	8005250 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	441a      	add	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001516:	441a      	add	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	621a      	str	r2, [r3, #32]
 800151c:	e016      	b.n	800154c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	0c5b      	lsrs	r3, r3, #17
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	2b06      	cmp	r3, #6
 8001528:	d110      	bne.n	800154c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001530:	2208      	movs	r2, #8
 8001532:	4619      	mov	r1, r3
 8001534:	6a38      	ldr	r0, [r7, #32]
 8001536:	f003 fe8b 	bl	8005250 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	441a      	add	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0210 	orr.w	r2, r2, #16
 800155a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f004 f809 	bl	8005578 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001570:	f040 80a7 	bne.w	80016c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 f80e 	bl	800559e <USB_ReadDevAllOutEpInterrupt>
 8001582:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001584:	e099      	b.n	80016ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 808e 	beq.w	80016ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f832 	bl	8005606 <USB_ReadDevOutEPInterrupt>
 80015a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00c      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ba:	461a      	mov	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fef0 	bl	80023a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015de:	461a      	mov	r2, r3
 80015e0:	2308      	movs	r3, #8
 80015e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 ffc6 	bl	8002578 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001602:	461a      	mov	r2, r3
 8001604:	2310      	movs	r3, #16
 8001606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d030      	beq.n	8001674 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b80      	cmp	r3, #128	; 0x80
 800161c:	d109      	bne.n	8001632 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001630:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	78db      	ldrb	r3, [r3, #3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2200      	movs	r2, #0
 8001654:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4619      	mov	r1, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f009 fc5f 	bl	800af20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166e:	461a      	mov	r2, r3
 8001670:	2302      	movs	r3, #2
 8001672:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168a:	461a      	mov	r2, r3
 800168c:	2320      	movs	r3, #32
 800168e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a6:	461a      	mov	r2, r3
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	3301      	adds	r3, #1
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f af62 	bne.w	8001586 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 ff56 	bl	8005578 <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016d6:	f040 80db 	bne.w	8001890 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 ff77 	bl	80055d2 <USB_ReadDevAllInEpInterrupt>
 80016e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016ea:	e0cd      	b.n	8001888 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80c2 	beq.w	800187c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f003 ff9d 	bl	8005642 <USB_ReadDevInEPInterrupt>
 8001708:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d057      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	2201      	movs	r2, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	69f9      	ldr	r1, [r7, #28]
 8001730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001734:	4013      	ands	r3, r2
 8001736:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001744:	461a      	mov	r2, r3
 8001746:	2301      	movs	r3, #1
 8001748:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d132      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	334c      	adds	r3, #76	; 0x4c
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	3348      	adds	r3, #72	; 0x48
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4419      	add	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4403      	add	r3, r0
 8001786:	334c      	adds	r3, #76	; 0x4c
 8001788:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	2b00      	cmp	r3, #0
 800178e:	d113      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x3a2>
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001794:	4613      	mov	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3354      	adds	r3, #84	; 0x54
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017b0:	461a      	mov	r2, r3
 80017b2:	2101      	movs	r1, #1
 80017b4:	f003 ffa6 	bl	8005704 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f009 fb29 	bl	800ae16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	2308      	movs	r3, #8
 80017de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	461a      	mov	r2, r3
 80017f8:	2310      	movs	r3, #16
 80017fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001812:	461a      	mov	r2, r3
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d023      	beq.n	800186a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001824:	6a38      	ldr	r0, [r7, #32]
 8001826:	f002 fe79 	bl	800451c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	3338      	adds	r3, #56	; 0x38
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
 800183c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2200      	movs	r2, #0
 800184a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f009 fb76 	bl	800af44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001864:	461a      	mov	r2, r3
 8001866:	2302      	movs	r3, #2
 8001868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fd08 	bl	800228c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f af2e 	bne.w	80016ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fe6f 	bl	8005578 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018a4:	d122      	bne.n	80018ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f009 fcf0 	bl	800b2b4 <HAL_PCDEx_LPM_Callback>
 80018d4:	e002      	b.n	80018dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f009 fb14 	bl	800af04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fe41 	bl	8005578 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001900:	d112      	bne.n	8001928 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f009 fad0 	bl	800aeb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f003 fe23 	bl	8005578 <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800193c:	d121      	bne.n	8001982 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800194c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	f003 020f 	and.w	r2, r3, #15
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001972:	2101      	movs	r1, #1
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f009 fc9d 	bl	800b2b4 <HAL_PCDEx_LPM_Callback>
 800197a:	e002      	b.n	8001982 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f009 fa9b 	bl	800aeb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fdf6 	bl	8005578 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001996:	f040 80b7 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2110      	movs	r1, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fdb1 	bl	800451c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	e046      	b.n	8001a4e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019cc:	461a      	mov	r2, r3
 80019ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	0151      	lsls	r1, r2, #5
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	440a      	add	r2, r1
 80019ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a00:	461a      	mov	r2, r3
 8001a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a18:	0151      	lsls	r1, r2, #5
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	440a      	add	r2, r1
 8001a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a38:	0151      	lsls	r1, r2, #5
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	440a      	add	r2, r1
 8001a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3b3      	bcc.n	80019c0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a84:	f043 030b 	orr.w	r3, r3, #11
 8001a88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a9a:	f043 030b 	orr.w	r3, r3, #11
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	e015      	b.n	8001ace <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f242 032b 	movw	r3, #8235	; 0x202b
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac8:	f043 030b 	orr.w	r3, r3, #11
 8001acc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ae0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001af2:	461a      	mov	r2, r3
 8001af4:	f003 fe06 	bl	8005704 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fd33 	bl	8005578 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1c:	d124      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fdca 	bl	80056bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fd72 	bl	8004616 <USB_GetDevSpeed>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681c      	ldr	r4, [r3, #0]
 8001b3e:	f001 facd 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8001b42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f002 fa77 	bl	8004040 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f009 f987 	bl	800ae66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fd03 	bl	8005578 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d10a      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f009 f964 	bl	800ae4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f002 0208 	and.w	r2, r2, #8
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fcee 	bl	8005578 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	d122      	bne.n	8001bec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e014      	b.n	8001be2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb27 	bl	800222a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3e5      	bcc.n	8001bb8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fcc1 	bl	8005578 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c00:	d13b      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	e02b      	b.n	8001c60 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3340      	adds	r3, #64	; 0x40
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d115      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da12      	bge.n	8001c5a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	333f      	adds	r3, #63	; 0x3f
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fae8 	bl	800222a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d3ce      	bcc.n	8001c08 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fc7a 	bl	8005578 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c8e:	d155      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e045      	b.n	8001d22 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d12e      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da2b      	bge.n	8001d1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cd0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d121      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d18:	6053      	str	r3, [r2, #4]
            break;
 8001d1a:	e007      	b.n	8001d2c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3b4      	bcc.n	8001c96 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fc19 	bl	8005578 <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d50:	d10a      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f009 f908 	bl	800af68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fc03 	bl	8005578 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d115      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f009 f8f8 	bl	800af84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e000      	b.n	8001da8 <HAL_PCD_IRQHandler+0x992>
      return;
 8001da6:	bf00      	nop
    }
  }
}
 8001da8:	3734      	adds	r7, #52	; 0x34
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}

08001dae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_SetAddress+0x1a>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e013      	b.n	8001df0 <HAL_PCD_SetAddress+0x42>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fb61 	bl	80054a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	70fb      	strb	r3, [r7, #3]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	803b      	strh	r3, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0f      	bge.n	8001e3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
 8001e3c:	e00f      	b.n	8001e5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e6a:	883a      	ldrh	r2, [r7, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	78ba      	ldrb	r2, [r7, #2]
 8001e74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e88:	78bb      	ldrb	r3, [r7, #2]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d102      	bne.n	8001e94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_Open+0xaa>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_Open+0xc8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fbd5 	bl	8004660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0f      	bge.n	8001efc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3338      	adds	r3, #56	; 0x38
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	705a      	strb	r2, [r3, #1]
 8001efa:	e00f      	b.n	8001f1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_EP_Close+0x6e>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e00e      	b.n	8001f54 <HAL_PCD_EP_Close+0x8c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fc13 	bl	8004770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	f002 fefa 	bl	8004dc8 <USB_EP0StartXfer>
 8001fd4:	e008      	b.n	8001fe8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	f002 fca0 	bl	8004928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002014:	681b      	ldr	r3, [r3, #0]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3338      	adds	r3, #56	; 0x38
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2201      	movs	r2, #1
 8002060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	f002 fe98 	bl	8004dc8 <USB_EP0StartXfer>
 8002098:	e008      	b.n	80020ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	f002 fc3e 	bl	8004928 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d901      	bls.n	80020d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e050      	b.n	8002176 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da0f      	bge.n	80020fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3338      	adds	r3, #56	; 0x38
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	705a      	strb	r2, [r3, #1]
 80020fa:	e00d      	b.n	8002118 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	3304      	adds	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_PCD_EP_SetStall+0x82>
 8002134:	2302      	movs	r3, #2
 8002136:	e01e      	b.n	8002176 <HAL_PCD_EP_SetStall+0xc0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f8da 	bl	8005300 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	b2d9      	uxtb	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002166:	461a      	mov	r2, r3
 8002168:	f003 facc 	bl	8005704 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d901      	bls.n	800219c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e042      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800219c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da0f      	bge.n	80021c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3338      	adds	r3, #56	; 0x38
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	705a      	strb	r2, [r3, #1]
 80021c2:	e00f      	b.n	80021e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	3304      	adds	r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_EP_ClrStall+0x86>
 8002200:	2302      	movs	r3, #2
 8002202:	e00e      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f8e2 	bl	80053dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0c      	bge.n	8002258 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e00c      	b.n	8002272 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f002 ff01 	bl	8005080 <USB_EPStopXfer>
 800227e:	4603      	mov	r3, r0
 8002280:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002282:	7afb      	ldrb	r3, [r7, #11]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3338      	adds	r3, #56	; 0x38
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d901      	bls.n	80022c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e06c      	b.n	800239e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d902      	bls.n	80022e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3303      	adds	r3, #3
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022e8:	e02b      	b.n	8002342 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d902      	bls.n	8002306 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3303      	adds	r3, #3
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6919      	ldr	r1, [r3, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800231e:	b2db      	uxtb	r3, r3
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f002 ff55 	bl	80051d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	441a      	add	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	441a      	add	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	b29b      	uxth	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	429a      	cmp	r2, r3
 8002356:	d809      	bhi.n	800236c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002360:	429a      	cmp	r2, r3
 8002362:	d203      	bcs.n	800236c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1be      	bne.n	80022ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d811      	bhi.n	800239c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	2201      	movs	r2, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	43db      	mvns	r3, r3
 8002392:	6939      	ldr	r1, [r7, #16]
 8002394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002398:	4013      	ands	r3, r2
 800239a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	333c      	adds	r3, #60	; 0x3c
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d17b      	bne.n	80024d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4a61      	ldr	r2, [pc, #388]	; (8002570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	f240 80b9 	bls.w	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80b3 	beq.w	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	461a      	mov	r2, r3
 800240c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002410:	6093      	str	r3, [r2, #8]
 8002412:	e0a7      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242a:	461a      	mov	r2, r3
 800242c:	2320      	movs	r3, #32
 800242e:	6093      	str	r3, [r2, #8]
 8002430:	e098      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 8093 	bne.w	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d90f      	bls.n	8002466 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002462:	6093      	str	r3, [r2, #8]
 8002464:	e07e      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	440b      	add	r3, r1
 8002488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d114      	bne.n	80024c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	f003 f926 	bl	8005704 <USB_EP0_OutStart>
 80024b8:	e006      	b.n	80024c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	441a      	add	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f008 fc86 	bl	800ade0 <HAL_PCD_DataOutStageCallback>
 80024d4:	e046      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d124      	bne.n	8002528 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fa:	6093      	str	r3, [r2, #8]
 80024fc:	e032      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2320      	movs	r3, #32
 8002518:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f008 fc5d 	bl	800ade0 <HAL_PCD_DataOutStageCallback>
 8002526:	e01d      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d114      	bne.n	8002558 <PCD_EP_OutXfrComplete_int+0x1b0>
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002550:	461a      	mov	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f003 f8d6 	bl	8005704 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f008 fc3e 	bl	800ade0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	4f54300a 	.word	0x4f54300a
 8002574:	4f54310a 	.word	0x4f54310a

08002578 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	333c      	adds	r3, #60	; 0x3c
 8002590:	3304      	adds	r3, #4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <PCD_EP_OutSetupPacket_int+0x88>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d90e      	bls.n	80025cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c4:	461a      	mov	r2, r3
 80025c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f008 fbf5 	bl	800adbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <PCD_EP_OutSetupPacket_int+0x88>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d90c      	bls.n	80025f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d108      	bne.n	80025f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ec:	461a      	mov	r2, r3
 80025ee:	2101      	movs	r1, #1
 80025f0:	f003 f888 	bl	8005704 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	4f54300a 	.word	0x4f54300a

08002604 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
 8002610:	4613      	mov	r3, r2
 8002612:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002622:	883b      	ldrh	r3, [r7, #0]
 8002624:	0419      	lsls	r1, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	430a      	orrs	r2, r1
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
 8002630:	e028      	b.n	8002684 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	4413      	add	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e00d      	b.n	8002662 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3340      	adds	r3, #64	; 0x40
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	3301      	adds	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	3b01      	subs	r3, #1
 8002668:	429a      	cmp	r2, r3
 800266a:	d3ec      	bcc.n	8002646 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800266c:	883b      	ldrh	r3, [r7, #0]
 800266e:	0418      	lsls	r0, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	3b01      	subs	r3, #1
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4302      	orrs	r2, r0
 800267c:	3340      	adds	r3, #64	; 0x40
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	10000003 	.word	0x10000003

080026fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_PWREx_EnableOverDrive+0x98>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_PWREx_EnableOverDrive+0x98>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_PWREx_EnableOverDrive+0x98>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800272a:	f7fe fa3d 	bl	8000ba8 <HAL_GetTick>
 800272e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002730:	e009      	b.n	8002746 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002732:	f7fe fa39 	bl	8000ba8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002740:	d901      	bls.n	8002746 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e022      	b.n	800278c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002752:	d1ee      	bne.n	8002732 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7fe fa22 	bl	8000ba8 <HAL_GetTick>
 8002764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002766:	e009      	b.n	800277c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002768:	f7fe fa1e 	bl	8000ba8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002776:	d901      	bls.n	800277c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e007      	b.n	800278c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002788:	d1ee      	bne.n	8002768 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e29b      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d00c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027cc:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d112      	bne.n	80027fe <HAL_RCC_OscConfig+0x62>
 80027d8:	4b90      	ldr	r3, [pc, #576]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b8d      	ldr	r3, [pc, #564]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d06c      	beq.n	80028cc <HAL_RCC_OscConfig+0x130>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d168      	bne.n	80028cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e275      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x7a>
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a83      	ldr	r2, [pc, #524]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e02e      	b.n	8002874 <HAL_RCC_OscConfig+0xd8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x9c>
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7e      	ldr	r2, [pc, #504]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xd8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xc0>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xd8>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe f994 	bl	8000ba8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe f990 	bl	8000ba8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e229      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xe8>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe f980 	bl	8000ba8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe f97c 	bl	8000ba8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e215      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x110>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d069      	beq.n	80029ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11c      	bne.n	800292c <HAL_RCC_OscConfig+0x190>
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x17a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1e9      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	493d      	ldr	r1, [pc, #244]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e040      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d023      	beq.n	800297c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe f932 	bl	8000ba8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe f92e 	bl	8000ba8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1c7      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4929      	ldr	r1, [pc, #164]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe f90e 	bl	8000ba8 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe f90a 	bl	8000ba8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1a3      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d038      	beq.n	8002a2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d019      	beq.n	80029f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe f8eb 	bl	8000ba8 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe f8e7 	bl	8000ba8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e180      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x23a>
 80029f4:	e01a      	b.n	8002a2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_RCC_OscConfig+0x280>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe f8d1 	bl	8000ba8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe f8cd 	bl	8000ba8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d903      	bls.n	8002a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e166      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
 8002a1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b92      	ldr	r3, [pc, #584]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80a4 	beq.w	8002b82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4b89      	ldr	r3, [pc, #548]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a88      	ldr	r2, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a62:	4b83      	ldr	r3, [pc, #524]	; (8002c70 <HAL_RCC_OscConfig+0x4d4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d118      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a6e:	4b80      	ldr	r3, [pc, #512]	; (8002c70 <HAL_RCC_OscConfig+0x4d4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7f      	ldr	r2, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x4d4>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f895 	bl	8000ba8 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7fe f891 	bl	8000ba8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e12a      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x4d4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x31a>
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	e02d      	b.n	8002b12 <HAL_RCC_OscConfig+0x376>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x33c>
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a6a      	ldr	r2, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a67      	ldr	r2, [pc, #412]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	e01c      	b.n	8002b12 <HAL_RCC_OscConfig+0x376>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d10c      	bne.n	8002afa <HAL_RCC_OscConfig+0x35e>
 8002ae0:	4b62      	ldr	r3, [pc, #392]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a5e      	ldr	r2, [pc, #376]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	e00b      	b.n	8002b12 <HAL_RCC_OscConfig+0x376>
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d015      	beq.n	8002b46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe f845 	bl	8000ba8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe f841 	bl	8000ba8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0d8      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ee      	beq.n	8002b22 <HAL_RCC_OscConfig+0x386>
 8002b44:	e014      	b.n	8002b70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe f82f 	bl	8000ba8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe f82b 	bl	8000ba8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0c2      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a3c      	ldr	r2, [pc, #240]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80ae 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8c:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d06d      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d14b      	bne.n	8002c38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fd fffc 	bl	8000ba8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fd fff8 	bl	8000ba8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e091      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	491b      	ldr	r1, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fd ffca 	bl	8000ba8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fd ffc6 	bl	8000ba8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e05f      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x47c>
 8002c36:	e057      	b.n	8002ce8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd ffb0 	bl	8000ba8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fd ffac 	bl	8000ba8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e045      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4b0>
 8002c6a:	e03d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x54c>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <HAL_RCC_OscConfig+0x558>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d030      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d129      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d122      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002caa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d119      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d0      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	4965      	ldr	r1, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e073      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4936      	ldr	r1, [pc, #216]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fd fedc 	bl	8000ba8 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fd fed8 	bl	8000ba8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e053      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 020f 	bic.w	r2, r3, #15
 8002e32:	4922      	ldr	r1, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1d4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fd3c 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	0800b820 	.word	0x0800b820
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b094      	sub	sp, #80	; 0x50
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	647b      	str	r3, [r7, #68]	; 0x44
 8002edc:	2300      	movs	r3, #0
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80e1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e0db      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f08:	e0db      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f42:	4622      	mov	r2, r4
 8002f44:	462b      	mov	r3, r5
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f54:	0150      	lsls	r0, r2, #5
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	1a51      	subs	r1, r2, r1
 8002f5e:	6139      	str	r1, [r7, #16]
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f74:	4659      	mov	r1, fp
 8002f76:	018b      	lsls	r3, r1, #6
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7e:	4651      	mov	r1, sl
 8002f80:	018a      	lsls	r2, r1, #6
 8002f82:	4651      	mov	r1, sl
 8002f84:	ebb2 0801 	subs.w	r8, r2, r1
 8002f88:	4659      	mov	r1, fp
 8002f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	eb18 0303 	adds.w	r3, r8, r3
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	462b      	mov	r3, r5
 8002fb0:	eb49 0303 	adc.w	r3, r9, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	024b      	lsls	r3, r1, #9
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fcc:	4621      	mov	r1, r4
 8002fce:	024a      	lsls	r2, r1, #9
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fe0:	f7fd f92e 	bl	8000240 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fec:	e058      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0159      	lsls	r1, r3, #5
 8003016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301a:	0150      	lsls	r0, r2, #5
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4641      	mov	r1, r8
 8003022:	ebb2 0a01 	subs.w	sl, r2, r1
 8003026:	4649      	mov	r1, r9
 8003028:	eb63 0b01 	sbc.w	fp, r3, r1
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800303c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003040:	ebb2 040a 	subs.w	r4, r2, sl
 8003044:	eb63 050b 	sbc.w	r5, r3, fp
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	464b      	mov	r3, r9
 8003064:	eb45 0303 	adc.w	r3, r5, r3
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	61fa      	str	r2, [r7, #28]
 8003090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003094:	f7fd f8d4 	bl	8000240 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3750      	adds	r7, #80	; 0x50
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200

080030dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff0 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a9b      	lsrs	r3, r3, #10
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	0800b830 	.word	0x0800b830

0800311c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	220f      	movs	r2, #15
 800312a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCC_GetClockConfig+0x60>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40023c00 	.word	0x40023c00

08003180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031a8:	4b69      	ldr	r3, [pc, #420]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a68      	ldr	r2, [pc, #416]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	4964      	ldr	r1, [pc, #400]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031da:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	4959      	ldr	r1, [pc, #356]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f8:	d101      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003216:	4b4e      	ldr	r3, [pc, #312]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	494a      	ldr	r1, [pc, #296]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 808b 	beq.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	4a39      	ldr	r2, [pc, #228]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326e:	6413      	str	r3, [r2, #64]	; 0x40
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a34      	ldr	r2, [pc, #208]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd fc8e 	bl	8000ba8 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fd fc8a 	bl	8000ba8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e38f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d035      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d02e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d6:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d114      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd fc52 	bl	8000ba8 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fd fc4e 	bl	8000ba8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e351      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003336:	d111      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003346:	400b      	ands	r3, r1
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
 800334e:	e00b      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003350:	40023800 	.word	0x40023800
 8003354:	40007000 	.word	0x40007000
 8003358:	0ffffcff 	.word	0x0ffffcff
 800335c:	4bac      	ldr	r3, [pc, #688]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4aab      	ldr	r2, [pc, #684]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003366:	6093      	str	r3, [r2, #8]
 8003368:	4ba9      	ldr	r3, [pc, #676]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	49a6      	ldr	r1, [pc, #664]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003376:	4313      	orrs	r3, r2
 8003378:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003386:	4ba2      	ldr	r3, [pc, #648]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	4aa0      	ldr	r2, [pc, #640]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003392:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003396:	4b9e      	ldr	r3, [pc, #632]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003398:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	499b      	ldr	r1, [pc, #620]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b4:	4b96      	ldr	r3, [pc, #600]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c2:	4993      	ldr	r1, [pc, #588]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033d6:	4b8e      	ldr	r3, [pc, #568]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e4:	498a      	ldr	r1, [pc, #552]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033f8:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	4982      	ldr	r1, [pc, #520]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800341a:	4b7d      	ldr	r3, [pc, #500]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4979      	ldr	r1, [pc, #484]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343c:	4b74      	ldr	r3, [pc, #464]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4971      	ldr	r1, [pc, #452]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800345e:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f023 020c 	bic.w	r2, r3, #12
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	4968      	ldr	r1, [pc, #416]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003480:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4960      	ldr	r1, [pc, #384]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	4957      	ldr	r1, [pc, #348]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034c4:	4b52      	ldr	r3, [pc, #328]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	494f      	ldr	r1, [pc, #316]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	4946      	ldr	r1, [pc, #280]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003508:	4b41      	ldr	r3, [pc, #260]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	493e      	ldr	r1, [pc, #248]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	4935      	ldr	r1, [pc, #212]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355a:	492d      	ldr	r1, [pc, #180]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800356e:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	4924      	ldr	r1, [pc, #144]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	4914      	ldr	r1, [pc, #80]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e0:	490b      	ldr	r1, [pc, #44]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00f      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	4902      	ldr	r1, [pc, #8]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800360c:	e002      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003620:	4b8a      	ldr	r3, [pc, #552]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003626:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	4986      	ldr	r1, [pc, #536]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003654:	497d      	ldr	r1, [pc, #500]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d006      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80d6 	beq.w	800381c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003670:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd fa94 	bl	8000ba8 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003684:	f7fd fa90 	bl	8000ba8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e195      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003696:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d021      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036b6:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	0e1b      	lsrs	r3, r3, #24
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	019a      	lsls	r2, r3, #6
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	4958      	ldr	r1, [pc, #352]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371c:	d129      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800371e:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	493e      	ldr	r1, [pc, #248]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800375a:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003760:	f023 021f 	bic.w	r2, r3, #31
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	3b01      	subs	r3, #1
 800376a:	4938      	ldr	r1, [pc, #224]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01d      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800377e:	4b33      	ldr	r3, [pc, #204]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	0f1b      	lsrs	r3, r3, #28
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	019a      	lsls	r2, r3, #6
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	4926      	ldr	r1, [pc, #152]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	019a      	lsls	r2, r3, #6
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	491a      	ldr	r1, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f6:	f7fd f9d7 	bl	8000ba8 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037fe:	f7fd f9d3 	bl	8000ba8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d901      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0d8      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	f040 80ce 	bne.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a08      	ldr	r2, [pc, #32]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd f9ba 	bl	8000ba8 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003836:	e00b      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003838:	f7fd f9b6 	bl	8000ba8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d904      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0bb      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003850:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800385c:	d0ec      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12a      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003886:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	0f1b      	lsrs	r3, r3, #28
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	019a      	lsls	r2, r3, #6
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	071b      	lsls	r3, r3, #28
 80038ba:	4944      	ldr	r1, [pc, #272]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038c2:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	493d      	ldr	r1, [pc, #244]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d022      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f0:	d11d      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	0e1b      	lsrs	r3, r3, #24
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003900:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	0f1b      	lsrs	r3, r3, #28
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	019a      	lsls	r2, r3, #6
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	4929      	ldr	r1, [pc, #164]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d028      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003948:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	431a      	orrs	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	4917      	ldr	r1, [pc, #92]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4911      	ldr	r1, [pc, #68]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fd f906 	bl	8000ba8 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039a0:	f7fd f902 	bl	8000ba8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e007      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039be:	d1ef      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800

080039d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e049      	b.n	8003a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f841 	bl	8003a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 fa00 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e054      	b.n	8003b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d01d      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d115      	bne.n	8003b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_TIM_Base_Start_IT+0xec>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d015      	beq.n	8003b52 <HAL_TIM_Base_Start_IT+0xbe>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d011      	beq.n	8003b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	e008      	b.n	8003b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40001800 	.word	0x40001800
 8003b80:	00010007 	.word	0x00010007

08003b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0202 	mvn.w	r2, #2
 8003bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f905 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8f7 	bl	8003dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f908 	bl	8003dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0204 	mvn.w	r2, #4
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8db 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8cd 	bl	8003dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8de 	bl	8003dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0208 	mvn.w	r2, #8
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8b1 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8a3 	bl	8003dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8b4 	bl	8003dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f887 	bl	8003dd6 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f879 	bl	8003dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f88a 	bl	8003dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0201 	mvn.w	r2, #1
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc fdd0 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f91a 	bl	8003f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d10e      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b80      	cmp	r3, #128	; 0x80
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f90d 	bl	8003f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d10e      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f838 	bl	8003dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d10e      	bne.n	8003dba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0220 	mvn.w	r2, #32
 8003db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8cd 	bl	8003f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a40      	ldr	r2, [pc, #256]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00f      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <TIM_Base_SetConfig+0x120>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2f      	ldr	r2, [pc, #188]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d027      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d023      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <TIM_Base_SetConfig+0x120>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d017      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <TIM_Base_SetConfig+0x128>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <TIM_Base_SetConfig+0x12c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00f      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <TIM_Base_SetConfig+0x130>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <TIM_Base_SetConfig+0x134>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <TIM_Base_SetConfig+0x138>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <TIM_Base_SetConfig+0x13c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <TIM_Base_SetConfig+0x124>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d103      	bne.n	8003f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	615a      	str	r2, [r3, #20]
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40010400 	.word	0x40010400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800
 8003f48:	40001800 	.word	0x40001800
 8003f4c:	40001c00 	.word	0x40001c00
 8003f50:	40002000 	.word	0x40002000

08003f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f90:	b084      	sub	sp, #16
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	f107 001c 	add.w	r0, r7, #28
 8003f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d120      	bne.n	8003fea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <USB_CoreInit+0xac>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 fbee 	bl	80057c0 <USB_CoreReset>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e010      	b.n	800400c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f001 fbe2 	bl	80057c0 <USB_CoreReset>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2b01      	cmp	r3, #1
 8004010:	d10b      	bne.n	800402a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f043 0206 	orr.w	r2, r3, #6
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004036:	b004      	add	sp, #16
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	ffbdffbf 	.word	0xffbdffbf

08004040 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d165      	bne.n	8004120 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a41      	ldr	r2, [pc, #260]	; (800415c <USB_SetTurnaroundTime+0x11c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d906      	bls.n	800406a <USB_SetTurnaroundTime+0x2a>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <USB_SetTurnaroundTime+0x120>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d202      	bcs.n	800406a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004064:	230f      	movs	r3, #15
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e062      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <USB_SetTurnaroundTime+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d306      	bcc.n	8004080 <USB_SetTurnaroundTime+0x40>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <USB_SetTurnaroundTime+0x124>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d202      	bcs.n	8004080 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800407a:	230e      	movs	r3, #14
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e057      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <USB_SetTurnaroundTime+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d306      	bcc.n	8004096 <USB_SetTurnaroundTime+0x56>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4a37      	ldr	r2, [pc, #220]	; (8004168 <USB_SetTurnaroundTime+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d202      	bcs.n	8004096 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004090:	230d      	movs	r3, #13
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e04c      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a33      	ldr	r2, [pc, #204]	; (8004168 <USB_SetTurnaroundTime+0x128>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d306      	bcc.n	80040ac <USB_SetTurnaroundTime+0x6c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <USB_SetTurnaroundTime+0x12c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d802      	bhi.n	80040ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040a6:	230c      	movs	r3, #12
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e041      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a2f      	ldr	r2, [pc, #188]	; (800416c <USB_SetTurnaroundTime+0x12c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d906      	bls.n	80040c2 <USB_SetTurnaroundTime+0x82>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a2e      	ldr	r2, [pc, #184]	; (8004170 <USB_SetTurnaroundTime+0x130>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d802      	bhi.n	80040c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040bc:	230b      	movs	r3, #11
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e036      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <USB_SetTurnaroundTime+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <USB_SetTurnaroundTime+0x98>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <USB_SetTurnaroundTime+0x134>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d802      	bhi.n	80040d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040d2:	230a      	movs	r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e02b      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <USB_SetTurnaroundTime+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d906      	bls.n	80040ee <USB_SetTurnaroundTime+0xae>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <USB_SetTurnaroundTime+0x138>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d202      	bcs.n	80040ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040e8:	2309      	movs	r3, #9
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e020      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <USB_SetTurnaroundTime+0x138>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d306      	bcc.n	8004104 <USB_SetTurnaroundTime+0xc4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <USB_SetTurnaroundTime+0x13c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d802      	bhi.n	8004104 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040fe:	2308      	movs	r3, #8
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e015      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <USB_SetTurnaroundTime+0x13c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d906      	bls.n	800411a <USB_SetTurnaroundTime+0xda>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <USB_SetTurnaroundTime+0x140>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d202      	bcs.n	800411a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004114:	2307      	movs	r3, #7
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00a      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800411a:	2306      	movs	r3, #6
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e007      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004126:	2309      	movs	r3, #9
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e001      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800412c:	2309      	movs	r3, #9
 800412e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	029b      	lsls	r3, r3, #10
 8004144:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	00d8acbf 	.word	0x00d8acbf
 8004160:	00e4e1c0 	.word	0x00e4e1c0
 8004164:	00f42400 	.word	0x00f42400
 8004168:	01067380 	.word	0x01067380
 800416c:	011a499f 	.word	0x011a499f
 8004170:	01312cff 	.word	0x01312cff
 8004174:	014ca43f 	.word	0x014ca43f
 8004178:	016e3600 	.word	0x016e3600
 800417c:	01a6ab1f 	.word	0x01a6ab1f
 8004180:	01e84800 	.word	0x01e84800

08004184 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d115      	bne.n	8004216 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fc fce2 	bl	8000bc0 <HAL_Delay>
      ms++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3301      	adds	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f001 fa4b 	bl	800569e <USB_GetMode>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d01e      	beq.n	800424c <USB_SetCurrentMode+0x84>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b31      	cmp	r3, #49	; 0x31
 8004212:	d9f0      	bls.n	80041f6 <USB_SetCurrentMode+0x2e>
 8004214:	e01a      	b.n	800424c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d115      	bne.n	8004248 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004228:	2001      	movs	r0, #1
 800422a:	f7fc fcc9 	bl	8000bc0 <HAL_Delay>
      ms++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f001 fa32 	bl	800569e <USB_GetMode>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <USB_SetCurrentMode+0x84>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b31      	cmp	r3, #49	; 0x31
 8004244:	d9f0      	bls.n	8004228 <USB_SetCurrentMode+0x60>
 8004246:	e001      	b.n	800424c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e005      	b.n	8004258 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b32      	cmp	r3, #50	; 0x32
 8004250:	d101      	bne.n	8004256 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004260:	b084      	sub	sp, #16
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800426e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e009      	b.n	8004294 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3340      	adds	r3, #64	; 0x40
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	3301      	adds	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0e      	cmp	r3, #14
 8004298:	d9f2      	bls.n	8004280 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11c      	bne.n	80042da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e005      	b.n	80042e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	4619      	mov	r1, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	461a      	mov	r2, r3
 8004302:	680b      	ldr	r3, [r1, #0]
 8004304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10c      	bne.n	8004326 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004312:	2100      	movs	r1, #0
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f965 	bl	80045e4 <USB_SetDevSpeed>
 800431a:	e008      	b.n	800432e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800431c:	2101      	movs	r1, #1
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f960 	bl	80045e4 <USB_SetDevSpeed>
 8004324:	e003      	b.n	800432e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004326:	2103      	movs	r1, #3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f95b 	bl	80045e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800432e:	2110      	movs	r1, #16
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8f3 	bl	800451c <USB_FlushTxFifo>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f91f 	bl	8004584 <USB_FlushRxFifo>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	461a      	mov	r2, r3
 8004358:	2300      	movs	r3, #0
 800435a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	461a      	mov	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436e:	461a      	mov	r2, r3
 8004370:	2300      	movs	r3, #0
 8004372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e043      	b.n	8004402 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004390:	d118      	bne.n	80043c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	461a      	mov	r2, r3
 80043a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e013      	b.n	80043d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	461a      	mov	r2, r3
 80043bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e008      	b.n	80043d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	461a      	mov	r2, r3
 80043d2:	2300      	movs	r3, #0
 80043d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d3b7      	bcc.n	800437a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e043      	b.n	8004498 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004426:	d118      	bne.n	800445a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e013      	b.n	800446c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	e008      	b.n	800446c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	461a      	mov	r2, r3
 8004468:	2300      	movs	r3, #0
 800446a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	2300      	movs	r3, #0
 800447c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3301      	adds	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3b7      	bcc.n	8004410 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 0210 	orr.w	r2, r3, #16
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <USB_DevInit+0x2b4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <USB_DevInit+0x2b8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004510:	b004      	add	sp, #16
 8004512:	4770      	bx	lr
 8004514:	803c3800 	.word	0x803c3800
 8004518:	40000004 	.word	0x40000004

0800451c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <USB_FlushTxFifo+0x64>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e01b      	b.n	8004574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	daf2      	bge.n	800452a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <USB_FlushTxFifo+0x64>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e006      	b.n	8004574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b20      	cmp	r3, #32
 8004570:	d0f0      	beq.n	8004554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	00030d40 	.word	0x00030d40

08004584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a11      	ldr	r2, [pc, #68]	; (80045e0 <USB_FlushRxFifo+0x5c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e018      	b.n	80045d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	daf2      	bge.n	8004590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2210      	movs	r2, #16
 80045b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <USB_FlushRxFifo+0x5c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e006      	b.n	80045d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d0f0      	beq.n	80045b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	00030d40 	.word	0x00030d40

080045e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]
 800463a:	e00a      	b.n	8004652 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d002      	beq.n	8004648 <USB_GetDevSpeed+0x32>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b06      	cmp	r3, #6
 8004646:	d102      	bne.n	800464e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004648:	2302      	movs	r3, #2
 800464a:	75fb      	strb	r3, [r7, #23]
 800464c:	e001      	b.n	8004652 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800464e:	230f      	movs	r3, #15
 8004650:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004652:	7dfb      	ldrb	r3, [r7, #23]
}
 8004654:	4618      	mov	r0, r3
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d139      	bne.n	80046f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	b29b      	uxth	r3, r3
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469a:	4313      	orrs	r3, r2
 800469c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d153      	bne.n	800475c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	059b      	lsls	r3, r3, #22
 80046d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	440b      	add	r3, r1
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	4619      	mov	r1, r3
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <USB_ActivateEndpoint+0x10c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
 80046ee:	e035      	b.n	800475c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800470e:	4313      	orrs	r3, r2
 8004710:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d119      	bne.n	800475c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	791b      	ldrb	r3, [r3, #4]
 8004742:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004744:	430b      	orrs	r3, r1
 8004746:	431a      	orrs	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	0159      	lsls	r1, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	440b      	add	r3, r1
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	4619      	mov	r1, r3
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <USB_ActivateEndpoint+0x10c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	10008000 	.word	0x10008000

08004770 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d161      	bne.n	8004850 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800479e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a2:	d11f      	bne.n	80047e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004804:	4013      	ands	r3, r2
 8004806:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004828:	4013      	ands	r3, r2
 800482a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0159      	lsls	r1, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	440b      	add	r3, r1
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	4619      	mov	r1, r3
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <USB_DeactivateEndpoint+0x1b0>)
 800484a:	4013      	ands	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
 800484e:	e060      	b.n	8004912 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004866:	d11f      	bne.n	80048a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004886:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	2101      	movs	r1, #1
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	43db      	mvns	r3, r3
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c8:	4013      	ands	r3, r2
 80048ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	43db      	mvns	r3, r3
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ec:	4013      	ands	r3, r2
 80048ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0159      	lsls	r1, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	440b      	add	r3, r1
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	4619      	mov	r1, r3
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <USB_DeactivateEndpoint+0x1b4>)
 800490e:	4013      	ands	r3, r2
 8004910:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	ec337800 	.word	0xec337800
 8004924:	eff37800 	.word	0xeff37800

08004928 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b01      	cmp	r3, #1
 8004946:	f040 8163 	bne.w	8004c10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d132      	bne.n	80049b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	0159      	lsls	r1, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	440b      	add	r3, r1
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	4619      	mov	r1, r3
 800496e:	4ba5      	ldr	r3, [pc, #660]	; (8004c04 <USB_EPStartXfer+0x2dc>)
 8004970:	4013      	ands	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	0159      	lsls	r1, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	4619      	mov	r1, r3
 80049b0:	4b95      	ldr	r3, [pc, #596]	; (8004c08 <USB_EPStartXfer+0x2e0>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
 80049b6:	e074      	b.n	8004aa2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	0159      	lsls	r1, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	440b      	add	r3, r1
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	4619      	mov	r1, r3
 80049d4:	4b8c      	ldr	r3, [pc, #560]	; (8004c08 <USB_EPStartXfer+0x2e0>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	0159      	lsls	r1, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	4619      	mov	r1, r3
 80049f6:	4b83      	ldr	r3, [pc, #524]	; (8004c04 <USB_EPStartXfer+0x2dc>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6999      	ldr	r1, [r3, #24]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	440b      	add	r3, r1
 8004a14:	1e59      	subs	r1, r3, #1
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a20:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <USB_EPStartXfer+0x2e4>)
 8004a22:	400b      	ands	r3, r1
 8004a24:	69b9      	ldr	r1, [r7, #24]
 8004a26:	0148      	lsls	r0, r1, #5
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	4401      	add	r1, r0
 8004a2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4a:	69b9      	ldr	r1, [r7, #24]
 8004a4c:	0148      	lsls	r0, r1, #5
 8004a4e:	69f9      	ldr	r1, [r7, #28]
 8004a50:	4401      	add	r1, r0
 8004a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	791b      	ldrb	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d11f      	bne.n	8004aa2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d14b      	bne.n	8004b40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	791b      	ldrb	r3, [r3, #4]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d128      	bne.n	8004b1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e00f      	b.n	8004b1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e137      	b.n	8004db0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	791b      	ldrb	r3, [r3, #4]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d015      	beq.n	8004b94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 811f 	beq.w	8004db0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	2101      	movs	r1, #1
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	634b      	str	r3, [r1, #52]	; 0x34
 8004b92:	e10d      	b.n	8004db0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d110      	bne.n	8004bc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e00f      	b.n	8004be6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	b298      	uxth	r0, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 faea 	bl	80051d4 <USB_WritePacket>
 8004c00:	e0d6      	b.n	8004db0 <USB_EPStartXfer+0x488>
 8004c02:	bf00      	nop
 8004c04:	e007ffff 	.word	0xe007ffff
 8004c08:	fff80000 	.word	0xfff80000
 8004c0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	0159      	lsls	r1, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4b63      	ldr	r3, [pc, #396]	; (8004dbc <USB_EPStartXfer+0x494>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	0159      	lsls	r1, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	440b      	add	r3, r1
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4b5c      	ldr	r3, [pc, #368]	; (8004dc0 <USB_EPStartXfer+0x498>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d123      	bne.n	8004ca4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c72:	69b9      	ldr	r1, [r7, #24]
 8004c74:	0148      	lsls	r0, r1, #5
 8004c76:	69f9      	ldr	r1, [r7, #28]
 8004c78:	4401      	add	r1, r0
 8004c7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca0:	6113      	str	r3, [r2, #16]
 8004ca2:	e037      	b.n	8004d14 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	1e5a      	subs	r2, r3, #1
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	8afa      	ldrh	r2, [r7, #22]
 8004cc0:	fb03 f202 	mul.w	r2, r3, r2
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	8afb      	ldrh	r3, [r7, #22]
 8004cd8:	04d9      	lsls	r1, r3, #19
 8004cda:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <USB_EPStartXfer+0x49c>)
 8004cdc:	400b      	ands	r3, r1
 8004cde:	69b9      	ldr	r1, [r7, #24]
 8004ce0:	0148      	lsls	r0, r1, #5
 8004ce2:	69f9      	ldr	r1, [r7, #28]
 8004ce4:	4401      	add	r1, r0
 8004ce6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	0148      	lsls	r0, r1, #5
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d10:	4313      	orrs	r3, r2
 8004d12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10d      	bne.n	8004d36 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6919      	ldr	r1, [r3, #16]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	460a      	mov	r2, r1
 8004d34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d128      	bne.n	8004d90 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d110      	bne.n	8004d70 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e00f      	b.n	8004d90 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	fff80000 	.word	0xfff80000
 8004dc0:	e007ffff 	.word	0xe007ffff
 8004dc4:	1ff80000 	.word	0x1ff80000

08004dc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	f040 80ce 	bne.w	8004f86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d132      	bne.n	8004e58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	0159      	lsls	r1, r3, #5
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	440b      	add	r3, r1
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4b9a      	ldr	r3, [pc, #616]	; (8005078 <USB_EP0StartXfer+0x2b0>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	0159      	lsls	r1, r3, #5
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4b8a      	ldr	r3, [pc, #552]	; (800507c <USB_EP0StartXfer+0x2b4>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]
 8004e56:	e04e      	b.n	8004ef6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	4619      	mov	r1, r3
 8004e74:	4b81      	ldr	r3, [pc, #516]	; (800507c <USB_EP0StartXfer+0x2b4>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	0159      	lsls	r1, r3, #5
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	440b      	add	r3, r1
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	4619      	mov	r1, r3
 8004e96:	4b78      	ldr	r3, [pc, #480]	; (8005078 <USB_EP0StartXfer+0x2b0>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d903      	bls.n	8004eb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	0148      	lsls	r0, r1, #5
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	4401      	add	r1, r0
 8004eee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d11e      	bne.n	8004f3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e097      	b.n	800506a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8083 	beq.w	800506a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	2101      	movs	r1, #1
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	6979      	ldr	r1, [r7, #20]
 8004f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f80:	4313      	orrs	r3, r2
 8004f82:	634b      	str	r3, [r1, #52]	; 0x34
 8004f84:	e071      	b.n	800506a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	0159      	lsls	r1, r3, #5
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <USB_EP0StartXfer+0x2b4>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	0159      	lsls	r1, r3, #5
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <USB_EP0StartXfer+0x2b0>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	6939      	ldr	r1, [r7, #16]
 800501a:	0148      	lsls	r0, r1, #5
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	4401      	add	r1, r0
 8005020:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10d      	bne.n	800504a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6919      	ldr	r1, [r3, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	460a      	mov	r2, r1
 8005048:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005064:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005068:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e007ffff 	.word	0xe007ffff
 800507c:	fff80000 	.word	0xfff80000

08005080 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d14a      	bne.n	8005134 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b6:	f040 8086 	bne.w	80051c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005100:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f242 7210 	movw	r2, #10000	; 0x2710
 800510e:	4293      	cmp	r3, r2
 8005110:	d902      	bls.n	8005118 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
          break;
 8005116:	e056      	b.n	80051c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005130:	d0e7      	beq.n	8005102 <USB_EPStopXfer+0x82>
 8005132:	e048      	b.n	80051c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514c:	d13b      	bne.n	80051c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005170:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	7812      	ldrb	r2, [r2, #0]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005194:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f242 7210 	movw	r2, #10000	; 0x2710
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d902      	bls.n	80051ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
          break;
 80051aa:	e00c      	b.n	80051c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c4:	d0e7      	beq.n	8005196 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4611      	mov	r1, r2
 80051e0:	461a      	mov	r2, r3
 80051e2:	460b      	mov	r3, r1
 80051e4:	71fb      	strb	r3, [r7, #7]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d123      	bne.n	8005242 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051fa:	88bb      	ldrh	r3, [r7, #4]
 80051fc:	3303      	adds	r3, #3
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e018      	b.n	800523a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	031a      	lsls	r2, r3, #12
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005214:	461a      	mov	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	3301      	adds	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3e2      	bcc.n	8005208 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3724      	adds	r7, #36	; 0x24
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005250:	b480      	push	{r7}
 8005252:	b08b      	sub	sp, #44	; 0x2c
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	b29b      	uxth	r3, r3
 800526c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	e014      	b.n	80052a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	601a      	str	r2, [r3, #0]
    pDest++;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	3301      	adds	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	3301      	adds	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	3301      	adds	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	3301      	adds	r3, #1
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3e6      	bcc.n	800527c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052ae:	8bfb      	ldrh	r3, [r7, #30]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01e      	beq.n	80052f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052be:	461a      	mov	r2, r3
 80052c0:	f107 0310 	add.w	r3, r7, #16
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	701a      	strb	r2, [r3, #0]
      i++;
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	3301      	adds	r3, #1
 80052de:	623b      	str	r3, [r7, #32]
      pDest++;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052e6:	8bfb      	ldrh	r3, [r7, #30]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052ec:	8bfb      	ldrh	r3, [r7, #30]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ea      	bne.n	80052c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	372c      	adds	r7, #44	; 0x2c
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d12c      	bne.n	8005376 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	db12      	blt.n	8005354 <USB_EPSetStall+0x54>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00f      	beq.n	8005354 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005352:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e02b      	b.n	80053ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db12      	blt.n	80053ae <USB_EPSetStall+0xae>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00f      	beq.n	80053ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d128      	bne.n	800544a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005416:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	791b      	ldrb	r3, [r3, #4]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d003      	beq.n	8005428 <USB_EPClearStall+0x4c>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	791b      	ldrb	r3, [r3, #4]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d138      	bne.n	800549a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e027      	b.n	800549a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005468:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d003      	beq.n	800547a <USB_EPClearStall+0x9e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	791b      	ldrb	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d10f      	bne.n	800549a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005498:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005522:	f023 0302 	bic.w	r3, r3, #2
 8005526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005550:	f023 0303 	bic.w	r3, r3, #3
 8005554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0c1b      	lsrs	r3, r3, #16
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	b29b      	uxth	r3, r3
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005634:	68bb      	ldr	r3, [r7, #8]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	01db      	lsls	r3, r3, #7
 8005674:	b2db      	uxtb	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005690:	68bb      	ldr	r3, [r7, #8]
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	4619      	mov	r1, r3
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <USB_ActivateSetup+0x44>)
 80056da:	4013      	ands	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	fffff800 	.word	0xfffff800

08005704 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	460b      	mov	r3, r1
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	333c      	adds	r3, #60	; 0x3c
 800571a:	3304      	adds	r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <USB_EP0_OutStart+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d90a      	bls.n	800573e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005738:	d101      	bne.n	800573e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e037      	b.n	80057ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800575c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576c:	f043 0318 	orr.w	r3, r3, #24
 8005770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005780:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005784:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005786:	7afb      	ldrb	r3, [r7, #11]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10f      	bne.n	80057ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	4f54300a 	.word	0x4f54300a

080057c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <USB_CoreReset+0x64>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e01b      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	daf2      	bge.n	80057cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <USB_CoreReset+0x64>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d0f0      	beq.n	80057f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	00030d40 	.word	0x00030d40

08005828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005834:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005838:	f005 fde8 	bl	800b40c <malloc>
 800583c:	4603      	mov	r3, r0
 800583e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	32b0      	adds	r2, #176	; 0xb0
 8005850:	2100      	movs	r1, #0
 8005852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005856:	2302      	movs	r3, #2
 8005858:	e0d4      	b.n	8005a04 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800585a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800585e:	2100      	movs	r1, #0
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f005 fdf1 	bl	800b448 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	32b0      	adds	r2, #176	; 0xb0
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	32b0      	adds	r2, #176	; 0xb0
 8005880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7c1b      	ldrb	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d138      	bne.n	8005904 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005892:	4b5e      	ldr	r3, [pc, #376]	; (8005a0c <USBD_CDC_Init+0x1e4>)
 8005894:	7819      	ldrb	r1, [r3, #0]
 8005896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800589a:	2202      	movs	r2, #2
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f005 fbe6 	bl	800b06e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058a2:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <USBD_CDC_Init+0x1e4>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	2201      	movs	r2, #1
 80058ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058bc:	4b54      	ldr	r3, [pc, #336]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 80058be:	7819      	ldrb	r1, [r3, #0]
 80058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c4:	2202      	movs	r2, #2
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f005 fbd1 	bl	800b06e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058cc:	4b50      	ldr	r3, [pc, #320]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058e4:	2201      	movs	r2, #1
 80058e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80058e8:	4b4a      	ldr	r3, [pc, #296]	; (8005a14 <USBD_CDC_Init+0x1ec>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3326      	adds	r3, #38	; 0x26
 80058fe:	2210      	movs	r2, #16
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e035      	b.n	8005970 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005904:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <USBD_CDC_Init+0x1e4>)
 8005906:	7819      	ldrb	r1, [r3, #0]
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	2202      	movs	r2, #2
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f005 fbae 	bl	800b06e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005912:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <USBD_CDC_Init+0x1e4>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2201      	movs	r2, #1
 800592a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800592c:	4b38      	ldr	r3, [pc, #224]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 800592e:	7819      	ldrb	r1, [r3, #0]
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	2202      	movs	r2, #2
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f005 fb9a 	bl	800b06e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800593a:	4b35      	ldr	r3, [pc, #212]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f003 020f 	and.w	r2, r3, #15
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005952:	2201      	movs	r2, #1
 8005954:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <USBD_CDC_Init+0x1ec>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	3326      	adds	r3, #38	; 0x26
 800596c:	2210      	movs	r2, #16
 800596e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005970:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <USBD_CDC_Init+0x1ec>)
 8005972:	7819      	ldrb	r1, [r3, #0]
 8005974:	2308      	movs	r3, #8
 8005976:	2203      	movs	r2, #3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f005 fb78 	bl	800b06e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <USBD_CDC_Init+0x1ec>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	3324      	adds	r3, #36	; 0x24
 8005994:	2201      	movs	r2, #1
 8005996:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	33b0      	adds	r3, #176	; 0xb0
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80059ce:	2302      	movs	r3, #2
 80059d0:	e018      	b.n	8005a04 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7c1b      	ldrb	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 80059dc:	7819      	ldrb	r1, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f005 fc2f 	bl	800b24c <USBD_LL_PrepareReceive>
 80059ee:	e008      	b.n	8005a02 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <USBD_CDC_Init+0x1e8>)
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059fa:	2340      	movs	r3, #64	; 0x40
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f005 fc25 	bl	800b24c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000093 	.word	0x20000093
 8005a10:	20000094 	.word	0x20000094
 8005a14:	20000095 	.word	0x20000095

08005a18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <USBD_CDC_DeInit+0xf8>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f005 fb45 	bl	800b0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a30:	4b37      	ldr	r3, [pc, #220]	; (8005b10 <USBD_CDC_DeInit+0xf8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3324      	adds	r3, #36	; 0x24
 8005a46:	2200      	movs	r2, #0
 8005a48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a4a:	4b32      	ldr	r3, [pc, #200]	; (8005b14 <USBD_CDC_DeInit+0xfc>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f005 fb32 	bl	800b0ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <USBD_CDC_DeInit+0xfc>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a6e:	2200      	movs	r2, #0
 8005a70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a72:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <USBD_CDC_DeInit+0x100>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f005 fb1e 	bl	800b0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <USBD_CDC_DeInit+0x100>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f003 020f 	and.w	r2, r3, #15
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	3324      	adds	r3, #36	; 0x24
 8005a94:	2200      	movs	r2, #0
 8005a96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <USBD_CDC_DeInit+0x100>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	3326      	adds	r3, #38	; 0x26
 8005aae:	2200      	movs	r2, #0
 8005ab0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	32b0      	adds	r2, #176	; 0xb0
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01f      	beq.n	8005b04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	33b0      	adds	r3, #176	; 0xb0
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	32b0      	adds	r2, #176	; 0xb0
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f005 fc98 	bl	800b41c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	32b0      	adds	r2, #176	; 0xb0
 8005af6:	2100      	movs	r1, #0
 8005af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000093 	.word	0x20000093
 8005b14:	20000094 	.word	0x20000094
 8005b18:	20000095 	.word	0x20000095

08005b1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	32b0      	adds	r2, #176	; 0xb0
 8005b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e0bf      	b.n	8005ccc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d050      	beq.n	8005bfa <USBD_CDC_Setup+0xde>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	f040 80af 	bne.w	8005cbc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	88db      	ldrh	r3, [r3, #6]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03a      	beq.n	8005bdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da1b      	bge.n	8005ba8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	33b0      	adds	r3, #176	; 0xb0
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	88d2      	ldrh	r2, [r2, #6]
 8005b8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	88db      	ldrh	r3, [r3, #6]
 8005b92:	2b07      	cmp	r3, #7
 8005b94:	bf28      	it	cs
 8005b96:	2307      	movcs	r3, #7
 8005b98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	89fa      	ldrh	r2, [r7, #14]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 fdad 	bl	8007700 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ba6:	e090      	b.n	8005cca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785a      	ldrb	r2, [r3, #1]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	88db      	ldrh	r3, [r3, #6]
 8005bb6:	2b3f      	cmp	r3, #63	; 0x3f
 8005bb8:	d803      	bhi.n	8005bc2 <USBD_CDC_Setup+0xa6>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	e000      	b.n	8005bc4 <USBD_CDC_Setup+0xa8>
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005bca:	6939      	ldr	r1, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fdbf 	bl	8007758 <USBD_CtlPrepareRx>
      break;
 8005bda:	e076      	b.n	8005cca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	33b0      	adds	r3, #176	; 0xb0
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	7850      	ldrb	r0, [r2, #1]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	4798      	blx	r3
      break;
 8005bf8:	e067      	b.n	8005cca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b0b      	cmp	r3, #11
 8005c00:	d851      	bhi.n	8005ca6 <USBD_CDC_Setup+0x18a>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <USBD_CDC_Setup+0xec>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c39 	.word	0x08005c39
 8005c0c:	08005cb5 	.word	0x08005cb5
 8005c10:	08005ca7 	.word	0x08005ca7
 8005c14:	08005ca7 	.word	0x08005ca7
 8005c18:	08005ca7 	.word	0x08005ca7
 8005c1c:	08005ca7 	.word	0x08005ca7
 8005c20:	08005ca7 	.word	0x08005ca7
 8005c24:	08005ca7 	.word	0x08005ca7
 8005c28:	08005ca7 	.word	0x08005ca7
 8005c2c:	08005ca7 	.word	0x08005ca7
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c8d 	.word	0x08005c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d107      	bne.n	8005c54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c44:	f107 030a 	add.w	r3, r7, #10
 8005c48:	2202      	movs	r2, #2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 fd57 	bl	8007700 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c52:	e032      	b.n	8005cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fce1 	bl	800761e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c60:	e02b      	b.n	8005cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d107      	bne.n	8005c7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c6e:	f107 030d 	add.w	r3, r7, #13
 8005c72:	2201      	movs	r2, #1
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fd42 	bl	8007700 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c7c:	e01d      	b.n	8005cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fccc 	bl	800761e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c86:	2303      	movs	r3, #3
 8005c88:	75fb      	strb	r3, [r7, #23]
          break;
 8005c8a:	e016      	b.n	8005cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d00f      	beq.n	8005cb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fcbf 	bl	800761e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ca4:	e008      	b.n	8005cb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 fcb8 	bl	800761e <USBD_CtlError>
          ret = USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cb2:	e002      	b.n	8005cba <USBD_CDC_Setup+0x19e>
          break;
 8005cb4:	bf00      	nop
 8005cb6:	e008      	b.n	8005cca <USBD_CDC_Setup+0x1ae>
          break;
 8005cb8:	bf00      	nop
      }
      break;
 8005cba:	e006      	b.n	8005cca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fcad 	bl	800761e <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	32b0      	adds	r2, #176	; 0xb0
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e065      	b.n	8005dca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	32b0      	adds	r2, #176	; 0xb0
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f003 020f 	and.w	r2, r3, #15
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	3318      	adds	r3, #24
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02f      	beq.n	8005d88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3318      	adds	r3, #24
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 010f 	and.w	r1, r3, #15
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	460b      	mov	r3, r1
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	440b      	add	r3, r1
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4403      	add	r3, r0
 8005d50:	3348      	adds	r3, #72	; 0x48
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d112      	bne.n	8005d88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 020f 	and.w	r2, r3, #15
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	3318      	adds	r3, #24
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d7a:	78f9      	ldrb	r1, [r7, #3]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f005 fa42 	bl	800b20a <USBD_LL_Transmit>
 8005d86:	e01f      	b.n	8005dc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	33b0      	adds	r3, #176	; 0xb0
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	33b0      	adds	r3, #176	; 0xb0
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32b0      	adds	r2, #176	; 0xb0
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	; 0xb0
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e01a      	b.n	8005e3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f005 fa40 	bl	800b28e <USBD_LL_GetRxDataSize>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	33b0      	adds	r3, #176	; 0xb0
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e34:	4611      	mov	r1, r2
 8005e36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	32b0      	adds	r2, #176	; 0xb0
 8005e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e025      	b.n	8005eb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	33b0      	adds	r3, #176	; 0xb0
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01a      	beq.n	8005eae <USBD_CDC_EP0_RxReady+0x6c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e7e:	2bff      	cmp	r3, #255	; 0xff
 8005e80:	d015      	beq.n	8005eae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	33b0      	adds	r3, #176	; 0xb0
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ea2:	b292      	uxth	r2, r2
 8005ea4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22ff      	movs	r2, #255	; 0xff
 8005eaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ec0:	2182      	movs	r1, #130	; 0x82
 8005ec2:	4818      	ldr	r0, [pc, #96]	; (8005f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ec4:	f000 fd49 	bl	800695a <USBD_GetEpDesc>
 8005ec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4815      	ldr	r0, [pc, #84]	; (8005f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ece:	f000 fd44 	bl	800695a <USBD_GetEpDesc>
 8005ed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ed4:	2181      	movs	r1, #129	; 0x81
 8005ed6:	4813      	ldr	r0, [pc, #76]	; (8005f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ed8:	f000 fd3f 	bl	800695a <USBD_GetEpDesc>
 8005edc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef8:	711a      	strb	r2, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	711a      	strb	r2, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2243      	movs	r2, #67	; 0x43
 8005f16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000050 	.word	0x20000050

08005f28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f30:	2182      	movs	r1, #130	; 0x82
 8005f32:	4818      	ldr	r0, [pc, #96]	; (8005f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f34:	f000 fd11 	bl	800695a <USBD_GetEpDesc>
 8005f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4815      	ldr	r0, [pc, #84]	; (8005f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f3e:	f000 fd0c 	bl	800695a <USBD_GetEpDesc>
 8005f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f44:	2181      	movs	r1, #129	; 0x81
 8005f46:	4813      	ldr	r0, [pc, #76]	; (8005f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f48:	f000 fd07 	bl	800695a <USBD_GetEpDesc>
 8005f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2210      	movs	r2, #16
 8005f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2200      	movs	r2, #0
 8005f64:	711a      	strb	r2, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f042 0202 	orr.w	r2, r2, #2
 8005f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	711a      	strb	r2, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f042 0202 	orr.w	r2, r2, #2
 8005f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2243      	movs	r2, #67	; 0x43
 8005f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000050 	.word	0x20000050

08005f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fa0:	2182      	movs	r1, #130	; 0x82
 8005fa2:	4818      	ldr	r0, [pc, #96]	; (8006004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fa4:	f000 fcd9 	bl	800695a <USBD_GetEpDesc>
 8005fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005faa:	2101      	movs	r1, #1
 8005fac:	4815      	ldr	r0, [pc, #84]	; (8006004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fae:	f000 fcd4 	bl	800695a <USBD_GetEpDesc>
 8005fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fb4:	2181      	movs	r1, #129	; 0x81
 8005fb6:	4813      	ldr	r0, [pc, #76]	; (8006004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fb8:	f000 fccf 	bl	800695a <USBD_GetEpDesc>
 8005fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd8:	711a      	strb	r2, [r3, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fec:	711a      	strb	r2, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2243      	movs	r2, #67	; 0x43
 8005ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000050 	.word	0x20000050

08006008 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	220a      	movs	r2, #10
 8006014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	2000000c 	.word	0x2000000c

08006028 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	e009      	b.n	8006050 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	33b0      	adds	r3, #176	; 0xb0
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	32b0      	adds	r2, #176	; 0xb0
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800607e:	2303      	movs	r3, #3
 8006080:	e008      	b.n	8006094 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	32b0      	adds	r2, #176	; 0xb0
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e004      	b.n	80060ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32b0      	adds	r2, #176	; 0xb0
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060fe:	2303      	movs	r3, #3
 8006100:	e025      	b.n	800614e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11f      	bne.n	800614c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2201      	movs	r2, #1
 8006110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <USBD_CDC_TransmitPacket+0x7c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4403      	add	r3, r0
 800612e:	3318      	adds	r3, #24
 8006130:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <USBD_CDC_TransmitPacket+0x7c>)
 8006134:	7819      	ldrb	r1, [r3, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f005 f861 	bl	800b20a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000093 	.word	0x20000093

0800615c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	32b0      	adds	r2, #176	; 0xb0
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	32b0      	adds	r2, #176	; 0xb0
 800617e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006186:	2303      	movs	r3, #3
 8006188:	e018      	b.n	80061bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7c1b      	ldrb	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <USBD_CDC_ReceivePacket+0x68>)
 8006194:	7819      	ldrb	r1, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800619c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f005 f853 	bl	800b24c <USBD_LL_PrepareReceive>
 80061a6:	e008      	b.n	80061ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <USBD_CDC_ReceivePacket+0x68>)
 80061aa:	7819      	ldrb	r1, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061b2:	2340      	movs	r3, #64	; 0x40
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f005 f849 	bl	800b24c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000094 	.word	0x20000094

080061c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	e01f      	b.n	8006220 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	79fa      	ldrb	r2, [r7, #7]
 8006212:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f004 fec3 	bl	800afa0 <USBD_LL_Init>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e025      	b.n	800628c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32ae      	adds	r2, #174	; 0xae
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00f      	beq.n	800627c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32ae      	adds	r2, #174	; 0xae
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f107 020e 	add.w	r2, r7, #14
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	4602      	mov	r2, r0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f004 fecb 	bl	800b038 <USBD_LL_Start>
 80062a2:	4603      	mov	r3, r0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	4611      	mov	r1, r2
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	4611      	mov	r1, r2
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f932 	bl	80075aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2b02      	cmp	r3, #2
 8006368:	d01a      	beq.n	80063a0 <USBD_LL_SetupStage+0x72>
 800636a:	2b02      	cmp	r3, #2
 800636c:	d822      	bhi.n	80063b4 <USBD_LL_SetupStage+0x86>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <USBD_LL_SetupStage+0x4a>
 8006372:	2b01      	cmp	r3, #1
 8006374:	d00a      	beq.n	800638c <USBD_LL_SetupStage+0x5e>
 8006376:	e01d      	b.n	80063b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fb5f 	bl	8006a44 <USBD_StdDevReq>
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]
      break;
 800638a:	e020      	b.n	80063ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fbc7 	bl	8006b28 <USBD_StdItfReq>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
      break;
 800639e:	e016      	b.n	80063ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc29 	bl	8006c00 <USBD_StdEPReq>
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]
      break;
 80063b2:	e00c      	b.n	80063ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f004 fe98 	bl	800b0f8 <USBD_LL_StallEP>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	bf00      	nop
  }

  return ret;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	460b      	mov	r3, r1
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d16e      	bne.n	80064ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063fe:	2b03      	cmp	r3, #3
 8006400:	f040 8098 	bne.w	8006534 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	429a      	cmp	r2, r3
 800640e:	d913      	bls.n	8006438 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	4293      	cmp	r3, r2
 8006428:	bf28      	it	cs
 800642a:	4613      	movcs	r3, r2
 800642c:	461a      	mov	r2, r3
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 f9ae 	bl	8007792 <USBD_CtlContinueRx>
 8006436:	e07d      	b.n	8006534 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b02      	cmp	r3, #2
 8006444:	d014      	beq.n	8006470 <USBD_LL_DataOutStage+0x98>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d81d      	bhi.n	8006486 <USBD_LL_DataOutStage+0xae>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USBD_LL_DataOutStage+0x7c>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d003      	beq.n	800645a <USBD_LL_DataOutStage+0x82>
 8006452:	e018      	b.n	8006486 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	75bb      	strb	r3, [r7, #22]
            break;
 8006458:	e018      	b.n	800648c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006460:	b2db      	uxtb	r3, r3
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fa5e 	bl	8006926 <USBD_CoreFindIF>
 800646a:	4603      	mov	r3, r0
 800646c:	75bb      	strb	r3, [r7, #22]
            break;
 800646e:	e00d      	b.n	800648c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006476:	b2db      	uxtb	r3, r3
 8006478:	4619      	mov	r1, r3
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fa60 	bl	8006940 <USBD_CoreFindEP>
 8006480:	4603      	mov	r3, r0
 8006482:	75bb      	strb	r3, [r7, #22]
            break;
 8006484:	e002      	b.n	800648c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	75bb      	strb	r3, [r7, #22]
            break;
 800648a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800648c:	7dbb      	ldrb	r3, [r7, #22]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d119      	bne.n	80064c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d113      	bne.n	80064c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800649e:	7dba      	ldrb	r2, [r7, #22]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	32ae      	adds	r2, #174	; 0xae
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80064ae:	7dba      	ldrb	r2, [r7, #22]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80064b6:	7dba      	ldrb	r2, [r7, #22]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	32ae      	adds	r2, #174	; 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 f974 	bl	80077b4 <USBD_CtlSendStatus>
 80064cc:	e032      	b.n	8006534 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	4619      	mov	r1, r3
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fa31 	bl	8006940 <USBD_CoreFindEP>
 80064de:	4603      	mov	r3, r0
 80064e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064e2:	7dbb      	ldrb	r3, [r7, #22]
 80064e4:	2bff      	cmp	r3, #255	; 0xff
 80064e6:	d025      	beq.n	8006534 <USBD_LL_DataOutStage+0x15c>
 80064e8:	7dbb      	ldrb	r3, [r7, #22]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d122      	bne.n	8006534 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d117      	bne.n	800652a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064fa:	7dba      	ldrb	r2, [r7, #22]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	32ae      	adds	r2, #174	; 0xae
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00f      	beq.n	800652a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800650a:	7dba      	ldrb	r2, [r7, #22]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006512:	7dba      	ldrb	r2, [r7, #22]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	32ae      	adds	r2, #174	; 0xae
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	7afa      	ldrb	r2, [r7, #11]
 8006520:	4611      	mov	r1, r2
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	e000      	b.n	8006536 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	460b      	mov	r3, r1
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d16f      	bne.n	8006632 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3314      	adds	r3, #20
 8006556:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800655e:	2b02      	cmp	r3, #2
 8006560:	d15a      	bne.n	8006618 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	429a      	cmp	r2, r3
 800656c:	d914      	bls.n	8006598 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	461a      	mov	r2, r3
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f001 f8d6 	bl	8007736 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800658a:	2300      	movs	r3, #0
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f004 fe5b 	bl	800b24c <USBD_LL_PrepareReceive>
 8006596:	e03f      	b.n	8006618 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d11c      	bne.n	80065de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d316      	bcc.n	80065de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d20f      	bcs.n	80065de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065be:	2200      	movs	r2, #0
 80065c0:	2100      	movs	r1, #0
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f001 f8b7 	bl	8007736 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065d0:	2300      	movs	r3, #0
 80065d2:	2200      	movs	r2, #0
 80065d4:	2100      	movs	r1, #0
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f004 fe38 	bl	800b24c <USBD_LL_PrepareReceive>
 80065dc:	e01c      	b.n	8006618 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d10f      	bne.n	800660a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f004 fd73 	bl	800b0f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f001 f8e1 	bl	80077da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d03a      	beq.n	8006698 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fe42 	bl	80062ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006630:	e032      	b.n	8006698 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006638:	b2db      	uxtb	r3, r3
 800663a:	4619      	mov	r1, r3
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f97f 	bl	8006940 <USBD_CoreFindEP>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2bff      	cmp	r3, #255	; 0xff
 800664a:	d025      	beq.n	8006698 <USBD_LL_DataInStage+0x15a>
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d122      	bne.n	8006698 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d11c      	bne.n	8006698 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800665e:	7dfa      	ldrb	r2, [r7, #23]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	32ae      	adds	r2, #174	; 0xae
 8006664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d014      	beq.n	8006698 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800666e:	7dfa      	ldrb	r2, [r7, #23]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006676:	7dfa      	ldrb	r2, [r7, #23]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	32ae      	adds	r2, #174	; 0xae
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	7afa      	ldrb	r2, [r7, #11]
 8006684:	4611      	mov	r1, r2
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800668e:	7dbb      	ldrb	r3, [r7, #22]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006694:	7dbb      	ldrb	r3, [r7, #22]
 8006696:	e000      	b.n	800669a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d014      	beq.n	8006708 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00e      	beq.n	8006708 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6852      	ldr	r2, [r2, #4]
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	4611      	mov	r1, r2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f004 fcad 	bl	800b06e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	2200      	movs	r2, #0
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f004 fc9f 	bl	800b06e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2240      	movs	r2, #64	; 0x40
 800673a:	621a      	str	r2, [r3, #32]

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2da      	uxtb	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d106      	bne.n	80067b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d110      	bne.n	80067f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32ae      	adds	r2, #174	; 0xae
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e01c      	b.n	800685e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b03      	cmp	r3, #3
 800682e:	d115      	bne.n	800685c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32ae      	adds	r2, #174	; 0xae
 800683a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	32ae      	adds	r2, #174	; 0xae
 800684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	4611      	mov	r1, r2
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	32ae      	adds	r2, #174	; 0xae
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	e01c      	b.n	80068c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b03      	cmp	r3, #3
 8006892:	d115      	bne.n	80068c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	32ae      	adds	r2, #174	; 0xae
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32ae      	adds	r2, #174	; 0xae
 80068b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	4611      	mov	r1, r2
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6852      	ldr	r2, [r2, #4]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	4611      	mov	r1, r2
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006932:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800694c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	429a      	cmp	r2, r3
 8006980:	d920      	bls.n	80069c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800698a:	e013      	b.n	80069b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800698c:	f107 030a 	add.w	r3, r7, #10
 8006990:	4619      	mov	r1, r3
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f000 f81b 	bl	80069ce <USBD_GetNextDesc>
 8006998:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b05      	cmp	r3, #5
 80069a0:	d108      	bne.n	80069b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	789b      	ldrb	r3, [r3, #2]
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d008      	beq.n	80069c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	885b      	ldrh	r3, [r3, #2]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	897b      	ldrh	r3, [r7, #10]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d8e5      	bhi.n	800698c <USBD_GetEpDesc+0x32>
 80069c0:	e000      	b.n	80069c4 <USBD_GetEpDesc+0x6a>
          break;
 80069c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80069c4:	693b      	ldr	r3, [r7, #16]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4413      	add	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069fa:	68fb      	ldr	r3, [r7, #12]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a26:	8a3b      	ldrh	r3, [r7, #16]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b21b      	sxth	r3, r3
 8006a34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a36:	89fb      	ldrh	r3, [r7, #14]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d005      	beq.n	8006a6a <USBD_StdDevReq+0x26>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d857      	bhi.n	8006b12 <USBD_StdDevReq+0xce>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <USBD_StdDevReq+0x42>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d153      	bne.n	8006b12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	32ae      	adds	r2, #174	; 0xae
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	e04a      	b.n	8006b1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b09      	cmp	r3, #9
 8006a8c:	d83b      	bhi.n	8006b06 <USBD_StdDevReq+0xc2>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_StdDevReq+0x50>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006b07 	.word	0x08006b07
 8006aa0:	08006af3 	.word	0x08006af3
 8006aa4:	08006b07 	.word	0x08006b07
 8006aa8:	08006ac7 	.word	0x08006ac7
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006b07 	.word	0x08006b07
 8006ab4:	08006adf 	.word	0x08006adf
 8006ab8:	08006ad1 	.word	0x08006ad1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa3c 	bl	8006f3c <USBD_GetDescriptor>
          break;
 8006ac4:	e024      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fbcb 	bl	8007264 <USBD_SetAddress>
          break;
 8006ace:	e01f      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc0a 	bl	80072ec <USBD_SetConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
          break;
 8006adc:	e018      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fcad 	bl	8007440 <USBD_GetConfig>
          break;
 8006ae6:	e013      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fcde 	bl	80074ac <USBD_GetStatus>
          break;
 8006af0:	e00e      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fd0d 	bl	8007514 <USBD_SetFeature>
          break;
 8006afa:	e009      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fd31 	bl	8007566 <USBD_ClrFeature>
          break;
 8006b04:	e004      	b.n	8006b10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fd88 	bl	800761e <USBD_CtlError>
          break;
 8006b0e:	bf00      	nop
      }
      break;
 8006b10:	e004      	b.n	8006b1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fd82 	bl	800761e <USBD_CtlError>
      break;
 8006b1a:	bf00      	nop
  }

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d005      	beq.n	8006b4e <USBD_StdItfReq+0x26>
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d852      	bhi.n	8006bec <USBD_StdItfReq+0xc4>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <USBD_StdItfReq+0x26>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d14e      	bne.n	8006bec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d840      	bhi.n	8006bde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	889b      	ldrh	r3, [r3, #4]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d836      	bhi.n	8006bd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fed9 	bl	8006926 <USBD_CoreFindIF>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d01d      	beq.n	8006bba <USBD_StdItfReq+0x92>
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11a      	bne.n	8006bba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b84:	7bba      	ldrb	r2, [r7, #14]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	32ae      	adds	r2, #174	; 0xae
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00f      	beq.n	8006bb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b94:	7bba      	ldrb	r2, [r7, #14]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b9c:	7bba      	ldrb	r2, [r7, #14]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32ae      	adds	r2, #174	; 0xae
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bb2:	e004      	b.n	8006bbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bb8:	e001      	b.n	8006bbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d110      	bne.n	8006be8 <USBD_StdItfReq+0xc0>
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fdf1 	bl	80077b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bd2:	e009      	b.n	8006be8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fd21 	bl	800761e <USBD_CtlError>
          break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fd1c 	bl	800761e <USBD_CtlError>
          break;
 8006be6:	e000      	b.n	8006bea <USBD_StdItfReq+0xc2>
          break;
 8006be8:	bf00      	nop
      }
      break;
 8006bea:	e004      	b.n	8006bf6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd15 	bl	800761e <USBD_CtlError>
      break;
 8006bf4:	bf00      	nop
  }

  return ret;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	889b      	ldrh	r3, [r3, #4]
 8006c12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d007      	beq.n	8006c30 <USBD_StdEPReq+0x30>
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	f200 817f 	bhi.w	8006f24 <USBD_StdEPReq+0x324>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d02a      	beq.n	8006c80 <USBD_StdEPReq+0x80>
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	f040 817a 	bne.w	8006f24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fe83 	bl	8006940 <USBD_CoreFindEP>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c3e:	7b7b      	ldrb	r3, [r7, #13]
 8006c40:	2bff      	cmp	r3, #255	; 0xff
 8006c42:	f000 8174 	beq.w	8006f2e <USBD_StdEPReq+0x32e>
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 8170 	bne.w	8006f2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c4e:	7b7a      	ldrb	r2, [r7, #13]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c56:	7b7a      	ldrb	r2, [r7, #13]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	32ae      	adds	r2, #174	; 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 8163 	beq.w	8006f2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c68:	7b7a      	ldrb	r2, [r7, #13]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32ae      	adds	r2, #174	; 0xae
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c7e:	e156      	b.n	8006f2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d008      	beq.n	8006c9a <USBD_StdEPReq+0x9a>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	f300 8145 	bgt.w	8006f18 <USBD_StdEPReq+0x318>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 809b 	beq.w	8006dca <USBD_StdEPReq+0x1ca>
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d03c      	beq.n	8006d12 <USBD_StdEPReq+0x112>
 8006c98:	e13e      	b.n	8006f18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d002      	beq.n	8006cac <USBD_StdEPReq+0xac>
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d016      	beq.n	8006cd8 <USBD_StdEPReq+0xd8>
 8006caa:	e02c      	b.n	8006d06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <USBD_StdEPReq+0xce>
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b80      	cmp	r3, #128	; 0x80
 8006cb6:	d00a      	beq.n	8006cce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f004 fa1b 	bl	800b0f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cc2:	2180      	movs	r1, #128	; 0x80
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f004 fa17 	bl	800b0f8 <USBD_LL_StallEP>
 8006cca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ccc:	e020      	b.n	8006d10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fca4 	bl	800761e <USBD_CtlError>
              break;
 8006cd6:	e01b      	b.n	8006d10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	885b      	ldrh	r3, [r3, #2]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10e      	bne.n	8006cfe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <USBD_StdEPReq+0xfe>
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b80      	cmp	r3, #128	; 0x80
 8006cea:	d008      	beq.n	8006cfe <USBD_StdEPReq+0xfe>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f004 f9fd 	bl	800b0f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fd58 	bl	80077b4 <USBD_CtlSendStatus>

              break;
 8006d04:	e004      	b.n	8006d10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc88 	bl	800761e <USBD_CtlError>
              break;
 8006d0e:	bf00      	nop
          }
          break;
 8006d10:	e107      	b.n	8006f22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d002      	beq.n	8006d24 <USBD_StdEPReq+0x124>
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d016      	beq.n	8006d50 <USBD_StdEPReq+0x150>
 8006d22:	e04b      	b.n	8006dbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <USBD_StdEPReq+0x146>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d00a      	beq.n	8006d46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f004 f9df 	bl	800b0f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f004 f9db 	bl	800b0f8 <USBD_LL_StallEP>
 8006d42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d44:	e040      	b.n	8006dc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fc68 	bl	800761e <USBD_CtlError>
              break;
 8006d4e:	e03b      	b.n	8006dc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	885b      	ldrh	r3, [r3, #2]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d136      	bne.n	8006dc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f004 f9e5 	bl	800b136 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fd21 	bl	80077b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fde2 	bl	8006940 <USBD_CoreFindEP>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d80:	7b7b      	ldrb	r3, [r7, #13]
 8006d82:	2bff      	cmp	r3, #255	; 0xff
 8006d84:	d01f      	beq.n	8006dc6 <USBD_StdEPReq+0x1c6>
 8006d86:	7b7b      	ldrb	r3, [r7, #13]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11c      	bne.n	8006dc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d8c:	7b7a      	ldrb	r2, [r7, #13]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d94:	7b7a      	ldrb	r2, [r7, #13]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	32ae      	adds	r2, #174	; 0xae
 8006d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006da4:	7b7a      	ldrb	r2, [r7, #13]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	; 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006dba:	e004      	b.n	8006dc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fc2d 	bl	800761e <USBD_CtlError>
              break;
 8006dc4:	e000      	b.n	8006dc8 <USBD_StdEPReq+0x1c8>
              break;
 8006dc6:	bf00      	nop
          }
          break;
 8006dc8:	e0ab      	b.n	8006f22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d002      	beq.n	8006ddc <USBD_StdEPReq+0x1dc>
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d032      	beq.n	8006e40 <USBD_StdEPReq+0x240>
 8006dda:	e097      	b.n	8006f0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <USBD_StdEPReq+0x1f2>
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d004      	beq.n	8006df2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc17 	bl	800761e <USBD_CtlError>
                break;
 8006df0:	e091      	b.n	8006f16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da0b      	bge.n	8006e12 <USBD_StdEPReq+0x212>
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	3310      	adds	r3, #16
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3304      	adds	r3, #4
 8006e10:	e00b      	b.n	8006e2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	3304      	adds	r3, #4
 8006e2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2202      	movs	r2, #2
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fc61 	bl	8007700 <USBD_CtlSendData>
              break;
 8006e3e:	e06a      	b.n	8006f16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da11      	bge.n	8006e6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	3324      	adds	r3, #36	; 0x24
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d117      	bne.n	8006e92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fbda 	bl	800761e <USBD_CtlError>
                  break;
 8006e6a:	e054      	b.n	8006f16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	f003 020f 	and.w	r2, r3, #15
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fbc7 	bl	800761e <USBD_CtlError>
                  break;
 8006e90:	e041      	b.n	8006f16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da0b      	bge.n	8006eb2 <USBD_StdEPReq+0x2b2>
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	e00b      	b.n	8006eca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3304      	adds	r3, #4
 8006eca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <USBD_StdEPReq+0x2d8>
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d103      	bne.n	8006ee0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e00e      	b.n	8006efe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f004 f945 	bl	800b174 <USBD_LL_IsStallEP>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2202      	movs	r2, #2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fbfb 	bl	8007700 <USBD_CtlSendData>
              break;
 8006f0a:	e004      	b.n	8006f16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fb85 	bl	800761e <USBD_CtlError>
              break;
 8006f14:	bf00      	nop
          }
          break;
 8006f16:	e004      	b.n	8006f22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb7f 	bl	800761e <USBD_CtlError>
          break;
 8006f20:	bf00      	nop
      }
      break;
 8006f22:	e005      	b.n	8006f30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb79 	bl	800761e <USBD_CtlError>
      break;
 8006f2c:	e000      	b.n	8006f30 <USBD_StdEPReq+0x330>
      break;
 8006f2e:	bf00      	nop
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	2b0e      	cmp	r3, #14
 8006f5e:	f200 8152 	bhi.w	8007206 <USBD_GetDescriptor+0x2ca>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <USBD_GetDescriptor+0x2c>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006fd9 	.word	0x08006fd9
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08007031 	.word	0x08007031
 8006f74:	08007207 	.word	0x08007207
 8006f78:	08007207 	.word	0x08007207
 8006f7c:	080071a7 	.word	0x080071a7
 8006f80:	080071d3 	.word	0x080071d3
 8006f84:	08007207 	.word	0x08007207
 8006f88:	08007207 	.word	0x08007207
 8006f8c:	08007207 	.word	0x08007207
 8006f90:	08007207 	.word	0x08007207
 8006f94:	08007207 	.word	0x08007207
 8006f98:	08007207 	.word	0x08007207
 8006f9c:	08007207 	.word	0x08007207
 8006fa0:	08006fa5 	.word	0x08006fa5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7c12      	ldrb	r2, [r2, #16]
 8006fbc:	f107 0108 	add.w	r1, r7, #8
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc6:	e126      	b.n	8007216 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fb27 	bl	800761e <USBD_CtlError>
        err++;
 8006fd0:	7afb      	ldrb	r3, [r7, #11]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd6:	e11e      	b.n	8007216 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
      break;
 8006fee:	e112      	b.n	8007216 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7c1b      	ldrb	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10d      	bne.n	8007014 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f107 0208 	add.w	r2, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007012:	e100      	b.n	8007216 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	2202      	movs	r2, #2
 800702c:	701a      	strb	r2, [r3, #0]
      break;
 800702e:	e0f2      	b.n	8007216 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b05      	cmp	r3, #5
 8007038:	f200 80ac 	bhi.w	8007194 <USBD_GetDescriptor+0x258>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_GetDescriptor+0x108>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	0800705d 	.word	0x0800705d
 8007048:	08007091 	.word	0x08007091
 800704c:	080070c5 	.word	0x080070c5
 8007050:	080070f9 	.word	0x080070f9
 8007054:	0800712d 	.word	0x0800712d
 8007058:	08007161 	.word	0x08007161
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7c12      	ldrb	r2, [r2, #16]
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707e:	e091      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 facb 	bl	800761e <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
          break;
 800708e:	e089      	b.n	80071a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b2:	e077      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fab1 	bl	800761e <USBD_CtlError>
            err++;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	3301      	adds	r3, #1
 80070c0:	72fb      	strb	r3, [r7, #11]
          break;
 80070c2:	e06f      	b.n	80071a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7c12      	ldrb	r2, [r2, #16]
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e6:	e05d      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa97 	bl	800761e <USBD_CtlError>
            err++;
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	3301      	adds	r3, #1
 80070f4:	72fb      	strb	r3, [r7, #11]
          break;
 80070f6:	e055      	b.n	80071a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711a:	e043      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa7d 	bl	800761e <USBD_CtlError>
            err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
          break;
 800712a:	e03b      	b.n	80071a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714e:	e029      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa63 	bl	800761e <USBD_CtlError>
            err++;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	3301      	adds	r3, #1
 800715c:	72fb      	strb	r3, [r7, #11]
          break;
 800715e:	e021      	b.n	80071a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007182:	e00f      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa49 	bl	800761e <USBD_CtlError>
            err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
          break;
 8007192:	e007      	b.n	80071a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa41 	bl	800761e <USBD_CtlError>
          err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071a2:	bf00      	nop
      }
      break;
 80071a4:	e037      	b.n	8007216 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7c1b      	ldrb	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	f107 0208 	add.w	r2, r7, #8
 80071ba:	4610      	mov	r0, r2
 80071bc:	4798      	blx	r3
 80071be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071c0:	e029      	b.n	8007216 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa2a 	bl	800761e <USBD_CtlError>
        err++;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	3301      	adds	r3, #1
 80071ce:	72fb      	strb	r3, [r7, #11]
      break;
 80071d0:	e021      	b.n	8007216 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10d      	bne.n	80071f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
 80071ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	2207      	movs	r2, #7
 80071f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f4:	e00f      	b.n	8007216 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa10 	bl	800761e <USBD_CtlError>
        err++;
 80071fe:	7afb      	ldrb	r3, [r7, #11]
 8007200:	3301      	adds	r3, #1
 8007202:	72fb      	strb	r3, [r7, #11]
      break;
 8007204:	e007      	b.n	8007216 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa08 	bl	800761e <USBD_CtlError>
      err++;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	3301      	adds	r3, #1
 8007212:	72fb      	strb	r3, [r7, #11]
      break;
 8007214:	bf00      	nop
  }

  if (err != 0U)
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11e      	bne.n	800725a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d016      	beq.n	8007252 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007224:	893b      	ldrh	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	88da      	ldrh	r2, [r3, #6]
 800722e:	893b      	ldrh	r3, [r7, #8]
 8007230:	4293      	cmp	r3, r2
 8007232:	bf28      	it	cs
 8007234:	4613      	movcs	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800723a:	893b      	ldrh	r3, [r7, #8]
 800723c:	461a      	mov	r2, r3
 800723e:	68f9      	ldr	r1, [r7, #12]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa5d 	bl	8007700 <USBD_CtlSendData>
 8007246:	e009      	b.n	800725c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9e7 	bl	800761e <USBD_CtlError>
 8007250:	e004      	b.n	800725c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 faae 	bl	80077b4 <USBD_CtlSendStatus>
 8007258:	e000      	b.n	800725c <USBD_GetDescriptor+0x320>
    return;
 800725a:	bf00      	nop
  }
}
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop

08007264 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	889b      	ldrh	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d131      	bne.n	80072da <USBD_SetAddress+0x76>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	88db      	ldrh	r3, [r3, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d12d      	bne.n	80072da <USBD_SetAddress+0x76>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	2b7f      	cmp	r3, #127	; 0x7f
 8007284:	d829      	bhi.n	80072da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007290:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d104      	bne.n	80072a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9bc 	bl	800761e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a6:	e01d      	b.n	80072e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7bfa      	ldrb	r2, [r7, #15]
 80072ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f003 ff89 	bl	800b1cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa7a 	bl	80077b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	e009      	b.n	80072e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	e004      	b.n	80072e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f99e 	bl	800761e <USBD_CtlError>
  }
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	4b4e      	ldr	r3, [pc, #312]	; (800743c <USBD_SetConfig+0x150>)
 8007302:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007304:	4b4d      	ldr	r3, [pc, #308]	; (800743c <USBD_SetConfig+0x150>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d905      	bls.n	8007318 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f985 	bl	800761e <USBD_CtlError>
    return USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	e08c      	b.n	8007432 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d002      	beq.n	800732a <USBD_SetConfig+0x3e>
 8007324:	2b03      	cmp	r3, #3
 8007326:	d029      	beq.n	800737c <USBD_SetConfig+0x90>
 8007328:	e075      	b.n	8007416 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800732a:	4b44      	ldr	r3, [pc, #272]	; (800743c <USBD_SetConfig+0x150>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007332:	4b42      	ldr	r3, [pc, #264]	; (800743c <USBD_SetConfig+0x150>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800733c:	4b3f      	ldr	r3, [pc, #252]	; (800743c <USBD_SetConfig+0x150>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe ffbd 	bl	80062c2 <USBD_SetClassConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f962 	bl	800761e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007362:	e065      	b.n	8007430 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa25 	bl	80077b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2203      	movs	r2, #3
 800736e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007372:	e05d      	b.n	8007430 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fa1d 	bl	80077b4 <USBD_CtlSendStatus>
      break;
 800737a:	e059      	b.n	8007430 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800737c:	4b2f      	ldr	r3, [pc, #188]	; (800743c <USBD_SetConfig+0x150>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d112      	bne.n	80073aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800738c:	4b2b      	ldr	r3, [pc, #172]	; (800743c <USBD_SetConfig+0x150>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007396:	4b29      	ldr	r3, [pc, #164]	; (800743c <USBD_SetConfig+0x150>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fe ffac 	bl	80062fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa06 	bl	80077b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073a8:	e042      	b.n	8007430 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <USBD_SetConfig+0x150>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d02a      	beq.n	800740e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fe ff9a 	bl	80062fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <USBD_SetConfig+0x150>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073d0:	4b1a      	ldr	r3, [pc, #104]	; (800743c <USBD_SetConfig+0x150>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe ff73 	bl	80062c2 <USBD_SetClassConfig>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00f      	beq.n	8007406 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f918 	bl	800761e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fe ff7f 	bl	80062fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007404:	e014      	b.n	8007430 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f9d4 	bl	80077b4 <USBD_CtlSendStatus>
      break;
 800740c:	e010      	b.n	8007430 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9d0 	bl	80077b4 <USBD_CtlSendStatus>
      break;
 8007414:	e00c      	b.n	8007430 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f900 	bl	800761e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800741e:	4b07      	ldr	r3, [pc, #28]	; (800743c <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fe ff68 	bl	80062fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	73fb      	strb	r3, [r7, #15]
      break;
 800742e:	bf00      	nop
  }

  return ret;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200001f4 	.word	0x200001f4

08007440 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d004      	beq.n	800745c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f8e2 	bl	800761e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800745a:	e023      	b.n	80074a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	dc02      	bgt.n	800746e <USBD_GetConfig+0x2e>
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc03      	bgt.n	8007474 <USBD_GetConfig+0x34>
 800746c:	e015      	b.n	800749a <USBD_GetConfig+0x5a>
 800746e:	2b03      	cmp	r3, #3
 8007470:	d00b      	beq.n	800748a <USBD_GetConfig+0x4a>
 8007472:	e012      	b.n	800749a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3308      	adds	r3, #8
 800747e:	2201      	movs	r2, #1
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f93c 	bl	8007700 <USBD_CtlSendData>
        break;
 8007488:	e00c      	b.n	80074a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3304      	adds	r3, #4
 800748e:	2201      	movs	r2, #1
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f934 	bl	8007700 <USBD_CtlSendData>
        break;
 8007498:	e004      	b.n	80074a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8be 	bl	800761e <USBD_CtlError>
        break;
 80074a2:	bf00      	nop
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d81e      	bhi.n	8007502 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	88db      	ldrh	r3, [r3, #6]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d004      	beq.n	80074d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8a5 	bl	800761e <USBD_CtlError>
        break;
 80074d4:	e01a      	b.n	800750c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f043 0202 	orr.w	r2, r3, #2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	330c      	adds	r3, #12
 80074f6:	2202      	movs	r2, #2
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f900 	bl	8007700 <USBD_CtlSendData>
      break;
 8007500:	e004      	b.n	800750c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f88a 	bl	800761e <USBD_CtlError>
      break;
 800750a:	bf00      	nop
  }
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f940 	bl	80077b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007534:	e013      	b.n	800755e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d10b      	bne.n	8007556 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	889b      	ldrh	r3, [r3, #4]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	b2da      	uxtb	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f930 	bl	80077b4 <USBD_CtlSendStatus>
}
 8007554:	e003      	b.n	800755e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f860 	bl	800761e <USBD_CtlError>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007576:	b2db      	uxtb	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	2b02      	cmp	r3, #2
 800757c:	d80b      	bhi.n	8007596 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	885b      	ldrh	r3, [r3, #2]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10c      	bne.n	80075a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f910 	bl	80077b4 <USBD_CtlSendStatus>
      }
      break;
 8007594:	e004      	b.n	80075a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f840 	bl	800761e <USBD_CtlError>
      break;
 800759e:	e000      	b.n	80075a2 <USBD_ClrFeature+0x3c>
      break;
 80075a0:	bf00      	nop
  }
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff fa17 	bl	8006a08 <SWAPBYTE>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fa0a 	bl	8006a08 <SWAPBYTE>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3301      	adds	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff f9fd 	bl	8006a08 <SWAPBYTE>
 800760e:	4603      	mov	r3, r0
 8007610:	461a      	mov	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	80da      	strh	r2, [r3, #6]
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007628:	2180      	movs	r1, #128	; 0x80
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f003 fd64 	bl	800b0f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f003 fd60 	bl	800b0f8 <USBD_LL_StallEP>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d036      	beq.n	80076c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800765a:	6938      	ldr	r0, [r7, #16]
 800765c:	f000 f836 	bl	80076cc <USBD_GetLen>
 8007660:	4603      	mov	r3, r0
 8007662:	3301      	adds	r3, #1
 8007664:	b29b      	uxth	r3, r3
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4413      	add	r3, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
  idx++;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	3301      	adds	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	2203      	movs	r2, #3
 8007688:	701a      	strb	r2, [r3, #0]
  idx++;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	3301      	adds	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007690:	e013      	b.n	80076ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	4413      	add	r3, r2
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	7812      	ldrb	r2, [r2, #0]
 800769c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
    idx++;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	3301      	adds	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	4413      	add	r3, r2
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	3301      	adds	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e7      	bne.n	8007692 <USBD_GetString+0x52>
 80076c2:	e000      	b.n	80076c6 <USBD_GetString+0x86>
    return;
 80076c4:	bf00      	nop
  }
}
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076dc:	e005      	b.n	80076ea <USBD_GetLen+0x1e>
  {
    len++;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	3301      	adds	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	3301      	adds	r3, #1
 80076e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f5      	bne.n	80076de <USBD_GetLen+0x12>
  }

  return len;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2202      	movs	r2, #2
 8007710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	2100      	movs	r1, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f003 fd6f 	bl	800b20a <USBD_LL_Transmit>

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	2100      	movs	r1, #0
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f003 fd5e 	bl	800b20a <USBD_LL_Transmit>

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2203      	movs	r2, #3
 8007768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	2100      	movs	r1, #0
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f003 fd62 	bl	800b24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	2100      	movs	r1, #0
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f003 fd51 	bl	800b24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2204      	movs	r2, #4
 80077c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077c4:	2300      	movs	r3, #0
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f003 fd1d 	bl	800b20a <USBD_LL_Transmit>

  return USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2205      	movs	r2, #5
 80077e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077ea:	2300      	movs	r3, #0
 80077ec:	2200      	movs	r2, #0
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f003 fd2b 	bl	800b24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007816:	f3ef 8305 	mrs	r3, IPSR
 800781a:	60bb      	str	r3, [r7, #8]
  return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007822:	f3ef 8310 	mrs	r3, PRIMASK
 8007826:	607b      	str	r3, [r7, #4]
  return(result);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800782e:	f3ef 8311 	mrs	r3, BASEPRI
 8007832:	603b      	str	r3, [r7, #0]
  return(result);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <osKernelInitialize+0x3a>
 800783a:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <osKernelInitialize+0x64>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007842:	f06f 0305 	mvn.w	r3, #5
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e00c      	b.n	8007864 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800784a:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <osKernelInitialize+0x64>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <osKernelInitialize+0x64>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e002      	b.n	8007864 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	200001f8 	.word	0x200001f8

08007878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
 8007882:	60bb      	str	r3, [r7, #8]
  return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	607b      	str	r3, [r7, #4]
  return(result);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	603b      	str	r3, [r7, #0]
  return(result);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <osKernelStart+0x3a>
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <osKernelStart+0x68>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d103      	bne.n	80078b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078aa:	f06f 0305 	mvn.w	r3, #5
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e010      	b.n	80078d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <osKernelStart+0x68>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d109      	bne.n	80078ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078ba:	f7ff ffa1 	bl	8007800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078be:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <osKernelStart+0x68>)
 80078c0:	2202      	movs	r2, #2
 80078c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078c4:	f001 fafe 	bl	8008ec4 <vTaskStartScheduler>
      stat = osOK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e002      	b.n	80078d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80078ce:	f04f 33ff 	mov.w	r3, #4294967295
 80078d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078d4:	68fb      	ldr	r3, [r7, #12]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	200001f8 	.word	0x200001f8

080078e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b090      	sub	sp, #64	; 0x40
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f4:	f3ef 8305 	mrs	r3, IPSR
 80078f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80078fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 8090 	bne.w	8007a22 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007902:	f3ef 8310 	mrs	r3, PRIMASK
 8007906:	61bb      	str	r3, [r7, #24]
  return(result);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d105      	bne.n	800791a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800790e:	f3ef 8311 	mrs	r3, BASEPRI
 8007912:	617b      	str	r3, [r7, #20]
  return(result);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <osThreadNew+0x3e>
 800791a:	4b44      	ldr	r3, [pc, #272]	; (8007a2c <osThreadNew+0x148>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d07f      	beq.n	8007a22 <osThreadNew+0x13e>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d07c      	beq.n	8007a22 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8007928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800792e:	2318      	movs	r3, #24
 8007930:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295
 800793a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d045      	beq.n	80079ce <osThreadNew+0xea>
      if (attr->name != NULL) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <osThreadNew+0x6c>
        name = attr->name;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <osThreadNew+0x92>
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b38      	cmp	r3, #56	; 0x38
 8007968:	d805      	bhi.n	8007976 <osThreadNew+0x92>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <osThreadNew+0x96>
        return (NULL);
 8007976:	2300      	movs	r3, #0
 8007978:	e054      	b.n	8007a24 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	089b      	lsrs	r3, r3, #2
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <osThreadNew+0xcc>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2bbb      	cmp	r3, #187	; 0xbb
 8007998:	d90a      	bls.n	80079b0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d006      	beq.n	80079b0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <osThreadNew+0xcc>
        mem = 1;
 80079aa:	2301      	movs	r3, #1
 80079ac:	623b      	str	r3, [r7, #32]
 80079ae:	e010      	b.n	80079d2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10c      	bne.n	80079d2 <osThreadNew+0xee>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d108      	bne.n	80079d2 <osThreadNew+0xee>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <osThreadNew+0xee>
          mem = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
 80079cc:	e001      	b.n	80079d2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d110      	bne.n	80079fa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079e0:	9202      	str	r2, [sp, #8]
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f001 f872 	bl	8008ad8 <xTaskCreateStatic>
 80079f4:	4603      	mov	r3, r0
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	e013      	b.n	8007a22 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d110      	bne.n	8007a22 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f107 0310 	add.w	r3, r7, #16
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 f8c3 	bl	8008b9e <xTaskCreate>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d001      	beq.n	8007a22 <osThreadNew+0x13e>
          hTask = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a22:	693b      	ldr	r3, [r7, #16]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3730      	adds	r7, #48	; 0x30
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200001f8 	.word	0x200001f8

08007a30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10f      	bne.n	8007a64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a44:	f3ef 8310 	mrs	r3, PRIMASK
 8007a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a50:	f3ef 8311 	mrs	r3, BASEPRI
 8007a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <osDelay+0x3c>
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <osDelay+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d103      	bne.n	8007a6c <osDelay+0x3c>
    stat = osErrorISR;
 8007a64:	f06f 0305 	mvn.w	r3, #5
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e007      	b.n	8007a7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9ee 	bl	8008e58 <vTaskDelay>
    }
  }

  return (stat);
 8007a7c:	697b      	ldr	r3, [r7, #20]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200001f8 	.word	0x200001f8

08007a8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	; 0x30
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a9c:	f3ef 8305 	mrs	r3, IPSR
 8007aa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007aa2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d16f      	bne.n	8007b88 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aac:	617b      	str	r3, [r7, #20]
  return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <osMessageQueueNew+0x3c>
 8007ac0:	4b34      	ldr	r3, [pc, #208]	; (8007b94 <osMessageQueueNew+0x108>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d05f      	beq.n	8007b88 <osMessageQueueNew+0xfc>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d05c      	beq.n	8007b88 <osMessageQueueNew+0xfc>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d059      	beq.n	8007b88 <osMessageQueueNew+0xfc>
    mem = -1;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d029      	beq.n	8007b34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <osMessageQueueNew+0x82>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b4f      	cmp	r3, #79	; 0x4f
 8007aee:	d90e      	bls.n	8007b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <osMessageQueueNew+0x82>
        mem = 1;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	623b      	str	r3, [r7, #32]
 8007b0c:	e014      	b.n	8007b38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d110      	bne.n	8007b38 <osMessageQueueNew+0xac>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10c      	bne.n	8007b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <osMessageQueueNew+0xac>
          mem = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e001      	b.n	8007b38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d10b      	bne.n	8007b56 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2100      	movs	r1, #0
 8007b48:	9100      	str	r1, [sp, #0]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fa5b 	bl	8008008 <xQueueGenericCreateStatic>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e008      	b.n	8007b68 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fad3 	bl	800810c <xQueueGenericCreate>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	e001      	b.n	8007b80 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b84:	f000 ff4a 	bl	8008a1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3728      	adds	r7, #40	; 0x28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200001f8 	.word	0x200001f8

08007b98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb0:	f3ef 8305 	mrs	r3, IPSR
 8007bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d02c      	beq.n	8007c2e <osMessageQueuePut+0x96>
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <osMessageQueuePut+0xe0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d128      	bne.n	8007c2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <osMessageQueuePut+0x56>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <osMessageQueuePut+0x56>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007bee:	f06f 0303 	mvn.w	r3, #3
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf4:	e039      	b.n	8007c6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007bfa:	f107 0210 	add.w	r2, r7, #16
 8007bfe:	2300      	movs	r3, #0
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	6a38      	ldr	r0, [r7, #32]
 8007c04:	f000 fbee 	bl	80083e4 <xQueueGenericSendFromISR>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d003      	beq.n	8007c16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c0e:	f06f 0302 	mvn.w	r3, #2
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c14:	e029      	b.n	8007c6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d026      	beq.n	8007c6a <osMessageQueuePut+0xd2>
 8007c1c:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <osMessageQueuePut+0xe4>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c2c:	e01d      	b.n	8007c6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <osMessageQueuePut+0xa2>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007c3a:	f06f 0303 	mvn.w	r3, #3
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	e014      	b.n	8007c6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c42:	2300      	movs	r3, #0
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	6a38      	ldr	r0, [r7, #32]
 8007c4a:	f000 fac5 	bl	80081d8 <xQueueGenericSend>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d00b      	beq.n	8007c6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007c5a:	f06f 0301 	mvn.w	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c60:	e004      	b.n	8007c6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007c62:	f06f 0302 	mvn.w	r3, #2
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
 8007c68:	e000      	b.n	8007c6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3728      	adds	r7, #40	; 0x28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200001f8 	.word	0x200001f8
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c96:	f3ef 8305 	mrs	r3, IPSR
 8007c9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10f      	bne.n	8007cc2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cae:	f3ef 8311 	mrs	r3, BASEPRI
 8007cb2:	617b      	str	r3, [r7, #20]
  return(result);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d02c      	beq.n	8007d14 <osMessageQueueGet+0x94>
 8007cba:	4b28      	ldr	r3, [pc, #160]	; (8007d5c <osMessageQueueGet+0xdc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d128      	bne.n	8007d14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <osMessageQueueGet+0x54>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <osMessageQueueGet+0x54>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007cd4:	f06f 0303 	mvn.w	r3, #3
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cda:	e038      	b.n	8007d4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ce0:	f107 0310 	add.w	r3, r7, #16
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	6a38      	ldr	r0, [r7, #32]
 8007cea:	f000 fd01 	bl	80086f0 <xQueueReceiveFromISR>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d003      	beq.n	8007cfc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007cf4:	f06f 0302 	mvn.w	r3, #2
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cfa:	e028      	b.n	8007d4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d025      	beq.n	8007d4e <osMessageQueueGet+0xce>
 8007d02:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <osMessageQueueGet+0xe0>)
 8007d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d12:	e01c      	b.n	8007d4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <osMessageQueueGet+0xa0>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007d20:	f06f 0303 	mvn.w	r3, #3
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	e013      	b.n	8007d50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	6a38      	ldr	r0, [r7, #32]
 8007d2e:	f000 fbf9 	bl	8008524 <xQueueReceive>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d00b      	beq.n	8007d50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007d3e:	f06f 0301 	mvn.w	r3, #1
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
 8007d44:	e004      	b.n	8007d50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007d46:	f06f 0302 	mvn.w	r3, #2
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4c:	e000      	b.n	8007d50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200001f8 	.word	0x200001f8
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a07      	ldr	r2, [pc, #28]	; (8007d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4a06      	ldr	r2, [pc, #24]	; (8007d94 <vApplicationGetIdleTaskMemory+0x30>)
 8007d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	200001fc 	.word	0x200001fc
 8007d94:	200002b8 	.word	0x200002b8

08007d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4a06      	ldr	r2, [pc, #24]	; (8007dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8007dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db6:	601a      	str	r2, [r3, #0]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	200006b8 	.word	0x200006b8
 8007dc8:	20000774 	.word	0x20000774

08007dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f103 0208 	add.w	r2, r3, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295
 8007de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f103 0208 	add.w	r2, r3, #8
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 0208 	add.w	r2, r3, #8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d103      	bne.n	8007e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e00c      	b.n	8007ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3308      	adds	r3, #8
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e002      	b.n	8007e9c <vListInsert+0x2e>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d2f6      	bcs.n	8007e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6892      	ldr	r2, [r2, #8]
 8007ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6852      	ldr	r2, [r2, #4]
 8007f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d103      	bne.n	8007f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10c      	bne.n	8007f62 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	b672      	cpsid	i
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	b662      	cpsie	i
 8007f5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007f62:	f002 f96b 	bl	800a23c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	441a      	add	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	3b01      	subs	r3, #1
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	22ff      	movs	r2, #255	; 0xff
 8007fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	22ff      	movs	r2, #255	; 0xff
 8007fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d114      	bne.n	8007fe2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01a      	beq.n	8007ff6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fa25 	bl	8009414 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d012      	beq.n	8007ff6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <xQueueGenericReset+0xd0>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	e009      	b.n	8007ff6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff fef0 	bl	8007dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3324      	adds	r3, #36	; 0x24
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff feeb 	bl	8007dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ff6:	f002 f955 	bl	800a2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ffa:	2301      	movs	r3, #1
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	e000ed04 	.word	0xe000ed04

08008008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08e      	sub	sp, #56	; 0x38
 800800c:	af02      	add	r7, sp, #8
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10c      	bne.n	8008036 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	b672      	cpsid	i
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	b662      	cpsie	i
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	b672      	cpsid	i
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	b662      	cpsie	i
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <xQueueGenericCreateStatic+0x5a>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <xQueueGenericCreateStatic+0x5e>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueGenericCreateStatic+0x60>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10c      	bne.n	8008086 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	b672      	cpsid	i
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	b662      	cpsie	i
 8008080:	623b      	str	r3, [r7, #32]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <xQueueGenericCreateStatic+0x8a>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <xQueueGenericCreateStatic+0x8e>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <xQueueGenericCreateStatic+0x90>
 8008096:	2300      	movs	r3, #0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10c      	bne.n	80080b6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	b672      	cpsid	i
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	b662      	cpsie	i
 80080b0:	61fb      	str	r3, [r7, #28]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080b6:	2350      	movs	r3, #80	; 0x50
 80080b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b50      	cmp	r3, #80	; 0x50
 80080be:	d00c      	beq.n	80080da <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	b672      	cpsid	i
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	b662      	cpsie	i
 80080d4:	61bb      	str	r3, [r7, #24]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00d      	beq.n	8008102 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4613      	mov	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f847 	bl	8008190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008104:	4618      	mov	r0, r3
 8008106:	3730      	adds	r7, #48	; 0x30
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10c      	bne.n	800813a <xQueueGenericCreate+0x2e>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	b672      	cpsid	i
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	b662      	cpsie	i
 8008134:	613b      	str	r3, [r7, #16]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e004      	b.n	8008150 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	3350      	adds	r3, #80	; 0x50
 8008154:	4618      	mov	r0, r3
 8008156:	f002 f99d 	bl	800a494 <pvPortMalloc>
 800815a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	3350      	adds	r3, #80	; 0x50
 800816a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008174:	79fa      	ldrb	r2, [r7, #7]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f805 	bl	8008190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008186:	69bb      	ldr	r3, [r7, #24]
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e002      	b.n	80081b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081be:	2101      	movs	r1, #1
 80081c0:	69b8      	ldr	r0, [r7, #24]
 80081c2:	f7ff feb7 	bl	8007f34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <xQueueGenericSend+0x36>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <xQueueGenericSend+0x44>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <xQueueGenericSend+0x48>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <xQueueGenericSend+0x4a>
 8008220:	2300      	movs	r3, #0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <xQueueGenericSend+0x68>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	b672      	cpsid	i
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	b662      	cpsie	i
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d103      	bne.n	800824e <xQueueGenericSend+0x76>
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <xQueueGenericSend+0x7a>
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <xQueueGenericSend+0x7c>
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10c      	bne.n	8008272 <xQueueGenericSend+0x9a>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	b672      	cpsid	i
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	b662      	cpsie	i
 800826c:	623b      	str	r3, [r7, #32]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008272:	f001 fa99 	bl	80097a8 <xTaskGetSchedulerState>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <xQueueGenericSend+0xaa>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <xQueueGenericSend+0xae>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <xQueueGenericSend+0xb0>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10c      	bne.n	80082a6 <xQueueGenericSend+0xce>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	b672      	cpsid	i
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	b662      	cpsie	i
 80082a0:	61fb      	str	r3, [r7, #28]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a6:	f001 ffc9 	bl	800a23c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSend+0xe4>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d129      	bne.n	8008310 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c2:	f000 fa9b 	bl	80087fc <prvCopyDataToQueue>
 80082c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f89d 	bl	8009414 <xTaskRemoveFromEventList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <xQueueGenericSend+0x208>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	e00a      	b.n	8008308 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <xQueueGenericSend+0x208>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008308:	f001 ffcc 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	e063      	b.n	80083d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008316:	f001 ffc5 	bl	800a2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	e05c      	b.n	80083d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f8d9 	bl	80094e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008332:	f001 ffb7 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008336:	f000 fe39 	bl	8008fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833a:	f001 ff7f 	bl	800a23c <vPortEnterCritical>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d103      	bne.n	8008354 <xQueueGenericSend+0x17c>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835a:	b25b      	sxtb	r3, r3
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x192>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836a:	f001 ff9b 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f8c8 	bl	800950c <xTaskCheckForTimeOut>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008384:	f000 fb32 	bl	80089ec <prvIsQueueFull>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	3310      	adds	r3, #16
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f000 ffe8 	bl	800936c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 fabd 	bl	800891c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083a2:	f000 fe11 	bl	8008fc8 <xTaskResumeAll>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af7c 	bne.w	80082a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xQueueGenericSend+0x208>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	e772      	b.n	80082a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c2:	f000 faab 	bl	800891c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c6:	f000 fdff 	bl	8008fc8 <xTaskResumeAll>
 80083ca:	e76c      	b.n	80082a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ce:	f000 faa5 	bl	800891c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083d2:	f000 fdf9 	bl	8008fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	; 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08e      	sub	sp, #56	; 0x38
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <xQueueGenericSendFromISR+0x40>
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <xQueueGenericSendFromISR+0x44>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <xQueueGenericSendFromISR+0x46>
 8008428:	2300      	movs	r3, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10c      	bne.n	8008448 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	b672      	cpsid	i
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	b662      	cpsie	i
 8008442:	623b      	str	r3, [r7, #32]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d103      	bne.n	8008456 <xQueueGenericSendFromISR+0x72>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <xQueueGenericSendFromISR+0x76>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <xQueueGenericSendFromISR+0x78>
 800845a:	2300      	movs	r3, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10c      	bne.n	800847a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	b672      	cpsid	i
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	b662      	cpsie	i
 8008474:	61fb      	str	r3, [r7, #28]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800847a:	f001 ffc7 	bl	800a40c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800847e:	f3ef 8211 	mrs	r2, BASEPRI
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	b672      	cpsid	i
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	b662      	cpsie	i
 8008496:	61ba      	str	r2, [r7, #24]
 8008498:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800849a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d302      	bcc.n	80084b0 <xQueueGenericSendFromISR+0xcc>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d12c      	bne.n	800850a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c0:	f000 f99c 	bl	80087fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d112      	bne.n	80084f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	3324      	adds	r3, #36	; 0x24
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 ff9a 	bl	8009414 <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00e      	beq.n	8008504 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e007      	b.n	8008504 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	b25a      	sxtb	r2, r3
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008508:	e001      	b.n	800850e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800850a:	2300      	movs	r3, #0
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008518:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800851c:	4618      	mov	r0, r3
 800851e:	3738      	adds	r7, #56	; 0x38
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	; 0x30
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008530:	2300      	movs	r3, #0
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <xQueueReceive+0x34>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	623b      	str	r3, [r7, #32]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <xQueueReceive+0x42>
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <xQueueReceive+0x46>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueReceive+0x48>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <xQueueReceive+0x66>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800858a:	f001 f90d 	bl	80097a8 <xTaskGetSchedulerState>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <xQueueReceive+0x76>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <xQueueReceive+0x7a>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <xQueueReceive+0x7c>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10c      	bne.n	80085be <xQueueReceive+0x9a>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	b672      	cpsid	i
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	b662      	cpsie	i
 80085b8:	61bb      	str	r3, [r7, #24]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085be:	f001 fe3d 	bl	800a23c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d01f      	beq.n	800860e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d2:	f000 f97d 	bl	80088d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	1e5a      	subs	r2, r3, #1
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00f      	beq.n	8008606 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	3310      	adds	r3, #16
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 ff12 	bl	8009414 <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085f6:	4b3d      	ldr	r3, [pc, #244]	; (80086ec <xQueueReceive+0x1c8>)
 80085f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008606:	f001 fe4d 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800860a:	2301      	movs	r3, #1
 800860c:	e069      	b.n	80086e2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008614:	f001 fe46 	bl	800a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008618:	2300      	movs	r3, #0
 800861a:	e062      	b.n	80086e2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ff5a 	bl	80094e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008630:	f001 fe38 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008634:	f000 fcba 	bl	8008fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008638:	f001 fe00 	bl	800a23c <vPortEnterCritical>
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <xQueueReceive+0x12e>
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <xQueueReceive+0x144>
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	f001 fe1c 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800866c:	1d3a      	adds	r2, r7, #4
 800866e:	f107 0310 	add.w	r3, r7, #16
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f000 ff49 	bl	800950c <xTaskCheckForTimeOut>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d123      	bne.n	80086c8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008682:	f000 f99d 	bl	80089c0 <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d017      	beq.n	80086bc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	3324      	adds	r3, #36	; 0x24
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4611      	mov	r1, r2
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fe69 	bl	800936c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869c:	f000 f93e 	bl	800891c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086a0:	f000 fc92 	bl	8008fc8 <xTaskResumeAll>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d189      	bne.n	80085be <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80086aa:	4b10      	ldr	r3, [pc, #64]	; (80086ec <xQueueReceive+0x1c8>)
 80086ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	e780      	b.n	80085be <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086be:	f000 f92d 	bl	800891c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086c2:	f000 fc81 	bl	8008fc8 <xTaskResumeAll>
 80086c6:	e77a      	b.n	80085be <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ca:	f000 f927 	bl	800891c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ce:	f000 fc7b 	bl	8008fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d4:	f000 f974 	bl	80089c0 <prvIsQueueEmpty>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f43f af6f 	beq.w	80085be <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3730      	adds	r7, #48	; 0x30
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10c      	bne.n	8008720 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	b672      	cpsid	i
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	b662      	cpsie	i
 800871a:	623b      	str	r3, [r7, #32]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <xQueueReceiveFromISR+0x3e>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <xQueueReceiveFromISR+0x42>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <xQueueReceiveFromISR+0x44>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10c      	bne.n	8008752 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	b672      	cpsid	i
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	b662      	cpsie	i
 800874c:	61fb      	str	r3, [r7, #28]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008752:	f001 fe5b 	bl	800a40c <vPortValidateInterruptPriority>
	__asm volatile
 8008756:	f3ef 8211 	mrs	r2, BASEPRI
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	b672      	cpsid	i
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	b662      	cpsie	i
 800876e:	61ba      	str	r2, [r7, #24]
 8008770:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008772:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d02f      	beq.n	80087e2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008790:	f000 f89e 	bl	80088d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	1e5a      	subs	r2, r3, #1
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800879c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d112      	bne.n	80087cc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	3310      	adds	r3, #16
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fe2e 	bl	8009414 <xTaskRemoveFromEventList>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	e007      	b.n	80087dc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d0:	3301      	adds	r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	b25a      	sxtb	r2, r3
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087dc:	2301      	movs	r3, #1
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
 80087e0:	e001      	b.n	80087e6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f383 8811 	msr	BASEPRI, r3
}
 80087f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3738      	adds	r7, #56	; 0x38
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10d      	bne.n	8008836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d14d      	bne.n	80088be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 ffdc 	bl	80097e4 <xTaskPriorityDisinherit>
 800882c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	609a      	str	r2, [r3, #8]
 8008834:	e043      	b.n	80088be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d119      	bne.n	8008870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6858      	ldr	r0, [r3, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	461a      	mov	r2, r3
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	f002 fdf0 	bl	800b42c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	441a      	add	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	429a      	cmp	r2, r3
 8008864:	d32b      	bcc.n	80088be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	e026      	b.n	80088be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68d8      	ldr	r0, [r3, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	461a      	mov	r2, r3
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	f002 fdd6 	bl	800b42c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	425b      	negs	r3, r3
 800888a:	441a      	add	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d207      	bcs.n	80088ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	425b      	negs	r3, r3
 80088a6:	441a      	add	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d105      	bne.n	80088be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d018      	beq.n	8008914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	441a      	add	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d303      	bcc.n	8008904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68d9      	ldr	r1, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	461a      	mov	r2, r3
 800890e:	6838      	ldr	r0, [r7, #0]
 8008910:	f002 fd8c 	bl	800b42c <memcpy>
	}
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008924:	f001 fc8a 	bl	800a23c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800892e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008930:	e011      	b.n	8008956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d012      	beq.n	8008960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3324      	adds	r3, #36	; 0x24
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fd68 	bl	8009414 <xTaskRemoveFromEventList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800894a:	f000 fe45 	bl	80095d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	3b01      	subs	r3, #1
 8008952:	b2db      	uxtb	r3, r3
 8008954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dce9      	bgt.n	8008932 <prvUnlockQueue+0x16>
 800895e:	e000      	b.n	8008962 <prvUnlockQueue+0x46>
					break;
 8008960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	22ff      	movs	r2, #255	; 0xff
 8008966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800896a:	f001 fc9b 	bl	800a2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800896e:	f001 fc65 	bl	800a23c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800897a:	e011      	b.n	80089a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d012      	beq.n	80089aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3310      	adds	r3, #16
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fd43 	bl	8009414 <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008994:	f000 fe20 	bl	80095d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	3b01      	subs	r3, #1
 800899c:	b2db      	uxtb	r3, r3
 800899e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dce9      	bgt.n	800897c <prvUnlockQueue+0x60>
 80089a8:	e000      	b.n	80089ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	22ff      	movs	r2, #255	; 0xff
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089b4:	f001 fc76 	bl	800a2a4 <vPortExitCritical>
}
 80089b8:	bf00      	nop
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089c8:	f001 fc38 	bl	800a23c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e001      	b.n	80089de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089de:	f001 fc61 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089f4:	f001 fc22 	bl	800a23c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d102      	bne.n	8008a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	e001      	b.n	8008a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a0e:	f001 fc49 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	e014      	b.n	8008a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a2c:	4a0f      	ldr	r2, [pc, #60]	; (8008a6c <vQueueAddToRegistry+0x50>)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a38:	490c      	ldr	r1, [pc, #48]	; (8008a6c <vQueueAddToRegistry+0x50>)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a42:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <vQueueAddToRegistry+0x50>)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	4413      	add	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a4e:	e006      	b.n	8008a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b07      	cmp	r3, #7
 8008a5a:	d9e7      	bls.n	8008a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000f74 	.word	0x20000f74

08008a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a80:	f001 fbdc 	bl	800a23c <vPortEnterCritical>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a8a:	b25b      	sxtb	r3, r3
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d103      	bne.n	8008a9a <vQueueWaitForMessageRestricted+0x2a>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa0:	b25b      	sxtb	r3, r3
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d103      	bne.n	8008ab0 <vQueueWaitForMessageRestricted+0x40>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ab0:	f001 fbf8 	bl	800a2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	3324      	adds	r3, #36	; 0x24
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fc77 	bl	80093b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aca:	6978      	ldr	r0, [r7, #20]
 8008acc:	f7ff ff26 	bl	800891c <prvUnlockQueue>
	}
 8008ad0:	bf00      	nop
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08e      	sub	sp, #56	; 0x38
 8008adc:	af04      	add	r7, sp, #16
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10c      	bne.n	8008b06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	b672      	cpsid	i
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	b662      	cpsie	i
 8008b00:	623b      	str	r3, [r7, #32]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10c      	bne.n	8008b26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	b672      	cpsid	i
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	b662      	cpsie	i
 8008b20:	61fb      	str	r3, [r7, #28]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b26:	23bc      	movs	r3, #188	; 0xbc
 8008b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2bbc      	cmp	r3, #188	; 0xbc
 8008b2e:	d00c      	beq.n	8008b4a <xTaskCreateStatic+0x72>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	b672      	cpsid	i
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	b662      	cpsie	i
 8008b44:	61bb      	str	r3, [r7, #24]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01e      	beq.n	8008b90 <xTaskCreateStatic+0xb8>
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01b      	beq.n	8008b90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9303      	str	r3, [sp, #12]
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	9302      	str	r3, [sp, #8]
 8008b72:	f107 0314 	add.w	r3, r7, #20
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f850 	bl	8008c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b8a:	f000 f8f5 	bl	8008d78 <prvAddNewTaskToReadyList>
 8008b8e:	e001      	b.n	8008b94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b94:	697b      	ldr	r3, [r7, #20]
	}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3728      	adds	r7, #40	; 0x28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b08c      	sub	sp, #48	; 0x30
 8008ba2:	af04      	add	r7, sp, #16
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	603b      	str	r3, [r7, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 fc6e 	bl	800a494 <pvPortMalloc>
 8008bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bc0:	20bc      	movs	r0, #188	; 0xbc
 8008bc2:	f001 fc67 	bl	800a494 <pvPortMalloc>
 8008bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8008bd4:	e005      	b.n	8008be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bd6:	6978      	ldr	r0, [r7, #20]
 8008bd8:	f001 fd26 	bl	800a628 <vPortFree>
 8008bdc:	e001      	b.n	8008be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d017      	beq.n	8008c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f80e 	bl	8008c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c0c:	69f8      	ldr	r0, [r7, #28]
 8008c0e:	f000 f8b3 	bl	8008d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c12:	2301      	movs	r3, #1
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	e002      	b.n	8008c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	461a      	mov	r2, r3
 8008c40:	21a5      	movs	r1, #165	; 0xa5
 8008c42:	f002 fc01 	bl	800b448 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c50:	440b      	add	r3, r1
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	b672      	cpsid	i
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	b662      	cpsie	i
 8008c7e:	617b      	str	r3, [r7, #20]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01f      	beq.n	8008cca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	e012      	b.n	8008cb6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	4413      	add	r3, r2
 8008c96:	7819      	ldrb	r1, [r3, #0]
 8008c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	3334      	adds	r3, #52	; 0x34
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	2b0f      	cmp	r3, #15
 8008cba:	d9e9      	bls.n	8008c90 <prvInitialiseNewTask+0x68>
 8008cbc:	e000      	b.n	8008cc0 <prvInitialiseNewTask+0x98>
			{
				break;
 8008cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cc8:	e003      	b.n	8008cd2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	2b37      	cmp	r3, #55	; 0x37
 8008cd6:	d901      	bls.n	8008cdc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cd8:	2337      	movs	r3, #55	; 0x37
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2200      	movs	r2, #0
 8008cec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff f88a 	bl	8007e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	3318      	adds	r3, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff f885 	bl	8007e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	3354      	adds	r3, #84	; 0x54
 8008d2c:	2260      	movs	r2, #96	; 0x60
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f002 fb89 	bl	800b448 <memset>
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	4a0c      	ldr	r2, [pc, #48]	; (8008d6c <prvInitialiseNewTask+0x144>)
 8008d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	4a0c      	ldr	r2, [pc, #48]	; (8008d70 <prvInitialiseNewTask+0x148>)
 8008d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <prvInitialiseNewTask+0x14c>)
 8008d46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	69b8      	ldr	r0, [r7, #24]
 8008d4e:	f001 f96b 	bl	800a028 <pxPortInitialiseStack>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d64:	bf00      	nop
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	0800b858 	.word	0x0800b858
 8008d70:	0800b878 	.word	0x0800b878
 8008d74:	0800b838 	.word	0x0800b838

08008d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d80:	f001 fa5c 	bl	800a23c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d84:	4b2d      	ldr	r3, [pc, #180]	; (8008e3c <prvAddNewTaskToReadyList+0xc4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	4a2c      	ldr	r2, [pc, #176]	; (8008e3c <prvAddNewTaskToReadyList+0xc4>)
 8008d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d8e:	4b2c      	ldr	r3, [pc, #176]	; (8008e40 <prvAddNewTaskToReadyList+0xc8>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d109      	bne.n	8008daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d96:	4a2a      	ldr	r2, [pc, #168]	; (8008e40 <prvAddNewTaskToReadyList+0xc8>)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d9c:	4b27      	ldr	r3, [pc, #156]	; (8008e3c <prvAddNewTaskToReadyList+0xc4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d110      	bne.n	8008dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008da4:	f000 fc3c 	bl	8009620 <prvInitialiseTaskLists>
 8008da8:	e00d      	b.n	8008dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008daa:	4b26      	ldr	r3, [pc, #152]	; (8008e44 <prvAddNewTaskToReadyList+0xcc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008db2:	4b23      	ldr	r3, [pc, #140]	; (8008e40 <prvAddNewTaskToReadyList+0xc8>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d802      	bhi.n	8008dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dc0:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <prvAddNewTaskToReadyList+0xc8>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dc6:	4b20      	ldr	r3, [pc, #128]	; (8008e48 <prvAddNewTaskToReadyList+0xd0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <prvAddNewTaskToReadyList+0xd0>)
 8008dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	; (8008e48 <prvAddNewTaskToReadyList+0xd0>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ddc:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <prvAddNewTaskToReadyList+0xd4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d903      	bls.n	8008dec <prvAddNewTaskToReadyList+0x74>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <prvAddNewTaskToReadyList+0xd4>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <prvAddNewTaskToReadyList+0xd8>)
 8008dfa:	441a      	add	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7ff f80f 	bl	8007e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e08:	f001 fa4c 	bl	800a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e0c:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <prvAddNewTaskToReadyList+0xcc>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <prvAddNewTaskToReadyList+0xc8>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d207      	bcs.n	8008e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e22:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <prvAddNewTaskToReadyList+0xdc>)
 8008e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20001488 	.word	0x20001488
 8008e40:	20000fb4 	.word	0x20000fb4
 8008e44:	20001494 	.word	0x20001494
 8008e48:	200014a4 	.word	0x200014a4
 8008e4c:	20001490 	.word	0x20001490
 8008e50:	20000fb8 	.word	0x20000fb8
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d019      	beq.n	8008e9e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e6a:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <vTaskDelay+0x64>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <vTaskDelay+0x34>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	b672      	cpsid	i
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	b662      	cpsie	i
 8008e86:	60bb      	str	r3, [r7, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e8c:	f000 f88e 	bl	8008fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fd18 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e98:	f000 f896 	bl	8008fc8 <xTaskResumeAll>
 8008e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <vTaskDelay+0x68>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200014b0 	.word	0x200014b0
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ed2:	463a      	mov	r2, r7
 8008ed4:	1d39      	adds	r1, r7, #4
 8008ed6:	f107 0308 	add.w	r3, r7, #8
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe ff42 	bl	8007d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	9202      	str	r2, [sp, #8]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	460a      	mov	r2, r1
 8008ef2:	4926      	ldr	r1, [pc, #152]	; (8008f8c <vTaskStartScheduler+0xc8>)
 8008ef4:	4826      	ldr	r0, [pc, #152]	; (8008f90 <vTaskStartScheduler+0xcc>)
 8008ef6:	f7ff fdef 	bl	8008ad8 <xTaskCreateStatic>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <vTaskStartScheduler+0xd0>)
 8008efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <vTaskStartScheduler+0xd0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e001      	b.n	8008f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d102      	bne.n	8008f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f18:	f000 fd2a 	bl	8009970 <xTimerCreateTimerTask>
 8008f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d11d      	bne.n	8008f60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	b672      	cpsid	i
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	b662      	cpsie	i
 8008f38:	613b      	str	r3, [r7, #16]
}
 8008f3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f3c:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <vTaskStartScheduler+0xd4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3354      	adds	r3, #84	; 0x54
 8008f42:	4a16      	ldr	r2, [pc, #88]	; (8008f9c <vTaskStartScheduler+0xd8>)
 8008f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f46:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <vTaskStartScheduler+0xdc>)
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <vTaskStartScheduler+0xe0>)
 8008f50:	2201      	movs	r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f54:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <vTaskStartScheduler+0xe4>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f5a:	f001 f8f1 	bl	800a140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f5e:	e010      	b.n	8008f82 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d10c      	bne.n	8008f82 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	b672      	cpsid	i
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	b662      	cpsie	i
 8008f7c:	60fb      	str	r3, [r7, #12]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <vTaskStartScheduler+0xbc>
}
 8008f82:	bf00      	nop
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	0800b758 	.word	0x0800b758
 8008f90:	080095f1 	.word	0x080095f1
 8008f94:	200014ac 	.word	0x200014ac
 8008f98:	20000fb4 	.word	0x20000fb4
 8008f9c:	20000110 	.word	0x20000110
 8008fa0:	200014a8 	.word	0x200014a8
 8008fa4:	20001494 	.word	0x20001494
 8008fa8:	2000148c 	.word	0x2000148c

08008fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <vTaskSuspendAll+0x18>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a03      	ldr	r2, [pc, #12]	; (8008fc4 <vTaskSuspendAll+0x18>)
 8008fb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200014b0 	.word	0x200014b0

08008fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fd6:	4b43      	ldr	r3, [pc, #268]	; (80090e4 <xTaskResumeAll+0x11c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10c      	bne.n	8008ff8 <xTaskResumeAll+0x30>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	b672      	cpsid	i
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	b662      	cpsie	i
 8008ff2:	603b      	str	r3, [r7, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ff8:	f001 f920 	bl	800a23c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ffc:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <xTaskResumeAll+0x11c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	4a38      	ldr	r2, [pc, #224]	; (80090e4 <xTaskResumeAll+0x11c>)
 8009004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009006:	4b37      	ldr	r3, [pc, #220]	; (80090e4 <xTaskResumeAll+0x11c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d162      	bne.n	80090d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800900e:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <xTaskResumeAll+0x120>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d05e      	beq.n	80090d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009016:	e02f      	b.n	8009078 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	4b34      	ldr	r3, [pc, #208]	; (80090ec <xTaskResumeAll+0x124>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3318      	adds	r3, #24
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe ff5b 	bl	8007ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3304      	adds	r3, #4
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe ff56 	bl	8007ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <xTaskResumeAll+0x128>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d903      	bls.n	8009048 <xTaskResumeAll+0x80>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <xTaskResumeAll+0x128>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4a27      	ldr	r2, [pc, #156]	; (80090f4 <xTaskResumeAll+0x12c>)
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f7fe fee1 	bl	8007e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <xTaskResumeAll+0x130>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <xTaskResumeAll+0x134>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <xTaskResumeAll+0x124>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1cb      	bne.n	8009018 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009086:	f000 fb6f 	bl	8009768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <xTaskResumeAll+0x138>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d010      	beq.n	80090b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009096:	f000 f847 	bl	8009128 <xTaskIncrementTick>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80090a0:	4b16      	ldr	r3, [pc, #88]	; (80090fc <xTaskResumeAll+0x134>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f1      	bne.n	8009096 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <xTaskResumeAll+0x138>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090b8:	4b10      	ldr	r3, [pc, #64]	; (80090fc <xTaskResumeAll+0x134>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d009      	beq.n	80090d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <xTaskResumeAll+0x13c>)
 80090c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090d4:	f001 f8e6 	bl	800a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 80090d8:	68bb      	ldr	r3, [r7, #8]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200014b0 	.word	0x200014b0
 80090e8:	20001488 	.word	0x20001488
 80090ec:	20001448 	.word	0x20001448
 80090f0:	20001490 	.word	0x20001490
 80090f4:	20000fb8 	.word	0x20000fb8
 80090f8:	20000fb4 	.word	0x20000fb4
 80090fc:	2000149c 	.word	0x2000149c
 8009100:	20001498 	.word	0x20001498
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <xTaskGetTickCount+0x1c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009114:	687b      	ldr	r3, [r7, #4]
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	2000148c 	.word	0x2000148c

08009128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009132:	4b50      	ldr	r3, [pc, #320]	; (8009274 <xTaskIncrementTick+0x14c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f040 808b 	bne.w	8009252 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800913c:	4b4e      	ldr	r3, [pc, #312]	; (8009278 <xTaskIncrementTick+0x150>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009144:	4a4c      	ldr	r2, [pc, #304]	; (8009278 <xTaskIncrementTick+0x150>)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d122      	bne.n	8009196 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009150:	4b4a      	ldr	r3, [pc, #296]	; (800927c <xTaskIncrementTick+0x154>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <xTaskIncrementTick+0x4c>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	b672      	cpsid	i
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	b662      	cpsie	i
 800916e:	603b      	str	r3, [r7, #0]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <xTaskIncrementTick+0x4a>
 8009174:	4b41      	ldr	r3, [pc, #260]	; (800927c <xTaskIncrementTick+0x154>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	4b41      	ldr	r3, [pc, #260]	; (8009280 <xTaskIncrementTick+0x158>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a3f      	ldr	r2, [pc, #252]	; (800927c <xTaskIncrementTick+0x154>)
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	4a3f      	ldr	r2, [pc, #252]	; (8009280 <xTaskIncrementTick+0x158>)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <xTaskIncrementTick+0x15c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	4a3d      	ldr	r2, [pc, #244]	; (8009284 <xTaskIncrementTick+0x15c>)
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	f000 fae9 	bl	8009768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009196:	4b3c      	ldr	r3, [pc, #240]	; (8009288 <xTaskIncrementTick+0x160>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	429a      	cmp	r2, r3
 800919e:	d349      	bcc.n	8009234 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a0:	4b36      	ldr	r3, [pc, #216]	; (800927c <xTaskIncrementTick+0x154>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091aa:	4b37      	ldr	r3, [pc, #220]	; (8009288 <xTaskIncrementTick+0x160>)
 80091ac:	f04f 32ff 	mov.w	r2, #4294967295
 80091b0:	601a      	str	r2, [r3, #0]
					break;
 80091b2:	e03f      	b.n	8009234 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	4b31      	ldr	r3, [pc, #196]	; (800927c <xTaskIncrementTick+0x154>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d203      	bcs.n	80091d4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091cc:	4a2e      	ldr	r2, [pc, #184]	; (8009288 <xTaskIncrementTick+0x160>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091d2:	e02f      	b.n	8009234 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fe81 	bl	8007ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	3318      	adds	r3, #24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fe78 	bl	8007ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	4b25      	ldr	r3, [pc, #148]	; (800928c <xTaskIncrementTick+0x164>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d903      	bls.n	8009204 <xTaskIncrementTick+0xdc>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	4a22      	ldr	r2, [pc, #136]	; (800928c <xTaskIncrementTick+0x164>)
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <xTaskIncrementTick+0x168>)
 8009212:	441a      	add	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f7fe fe03 	bl	8007e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <xTaskIncrementTick+0x16c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	429a      	cmp	r2, r3
 800922c:	d3b8      	bcc.n	80091a0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800922e:	2301      	movs	r3, #1
 8009230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009232:	e7b5      	b.n	80091a0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009234:	4b17      	ldr	r3, [pc, #92]	; (8009294 <xTaskIncrementTick+0x16c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4915      	ldr	r1, [pc, #84]	; (8009290 <xTaskIncrementTick+0x168>)
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d907      	bls.n	800925c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e004      	b.n	800925c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <xTaskIncrementTick+0x170>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a0f      	ldr	r2, [pc, #60]	; (8009298 <xTaskIncrementTick+0x170>)
 800925a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <xTaskIncrementTick+0x174>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009268:	697b      	ldr	r3, [r7, #20]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200014b0 	.word	0x200014b0
 8009278:	2000148c 	.word	0x2000148c
 800927c:	20001440 	.word	0x20001440
 8009280:	20001444 	.word	0x20001444
 8009284:	200014a0 	.word	0x200014a0
 8009288:	200014a8 	.word	0x200014a8
 800928c:	20001490 	.word	0x20001490
 8009290:	20000fb8 	.word	0x20000fb8
 8009294:	20000fb4 	.word	0x20000fb4
 8009298:	20001498 	.word	0x20001498
 800929c:	2000149c 	.word	0x2000149c

080092a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092a6:	4b2b      	ldr	r3, [pc, #172]	; (8009354 <vTaskSwitchContext+0xb4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ae:	4b2a      	ldr	r3, [pc, #168]	; (8009358 <vTaskSwitchContext+0xb8>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092b4:	e048      	b.n	8009348 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80092b6:	4b28      	ldr	r3, [pc, #160]	; (8009358 <vTaskSwitchContext+0xb8>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092bc:	4b27      	ldr	r3, [pc, #156]	; (800935c <vTaskSwitchContext+0xbc>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e012      	b.n	80092ea <vTaskSwitchContext+0x4a>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10c      	bne.n	80092e4 <vTaskSwitchContext+0x44>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	b672      	cpsid	i
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	b662      	cpsie	i
 80092de:	607b      	str	r3, [r7, #4]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <vTaskSwitchContext+0x42>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	491d      	ldr	r1, [pc, #116]	; (8009360 <vTaskSwitchContext+0xc0>)
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0e2      	beq.n	80092c4 <vTaskSwitchContext+0x24>
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a15      	ldr	r2, [pc, #84]	; (8009360 <vTaskSwitchContext+0xc0>)
 800930a:	4413      	add	r3, r2
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	605a      	str	r2, [r3, #4]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	3308      	adds	r3, #8
 8009320:	429a      	cmp	r2, r3
 8009322:	d104      	bne.n	800932e <vTaskSwitchContext+0x8e>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a0b      	ldr	r2, [pc, #44]	; (8009364 <vTaskSwitchContext+0xc4>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <vTaskSwitchContext+0xbc>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <vTaskSwitchContext+0xc4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3354      	adds	r3, #84	; 0x54
 8009344:	4a08      	ldr	r2, [pc, #32]	; (8009368 <vTaskSwitchContext+0xc8>)
 8009346:	6013      	str	r3, [r2, #0]
}
 8009348:	bf00      	nop
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	200014b0 	.word	0x200014b0
 8009358:	2000149c 	.word	0x2000149c
 800935c:	20001490 	.word	0x20001490
 8009360:	20000fb8 	.word	0x20000fb8
 8009364:	20000fb4 	.word	0x20000fb4
 8009368:	20000110 	.word	0x20000110

0800936c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10c      	bne.n	8009396 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	b672      	cpsid	i
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	b662      	cpsie	i
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <vTaskPlaceOnEventList+0x48>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3318      	adds	r3, #24
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7fe fd65 	bl	8007e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093a4:	2101      	movs	r1, #1
 80093a6:	6838      	ldr	r0, [r7, #0]
 80093a8:	f000 fa8e 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000fb4 	.word	0x20000fb4

080093b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10c      	bne.n	80093e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	b672      	cpsid	i
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	b662      	cpsie	i
 80093de:	617b      	str	r3, [r7, #20]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <vTaskPlaceOnEventListRestricted+0x58>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3318      	adds	r3, #24
 80093ea:	4619      	mov	r1, r3
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7fe fd1a 	bl	8007e26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	68b8      	ldr	r0, [r7, #8]
 8009402:	f000 fa61 	bl	80098c8 <prvAddCurrentTaskToDelayedList>
	}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000fb4 	.word	0x20000fb4

08009414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10c      	bne.n	8009444 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	b672      	cpsid	i
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	b662      	cpsie	i
 800943e:	60fb      	str	r3, [r7, #12]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	3318      	adds	r3, #24
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe fd49 	bl	8007ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944e:	4b1e      	ldr	r3, [pc, #120]	; (80094c8 <xTaskRemoveFromEventList+0xb4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d11d      	bne.n	8009492 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3304      	adds	r3, #4
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fd40 	bl	8007ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4b19      	ldr	r3, [pc, #100]	; (80094cc <xTaskRemoveFromEventList+0xb8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d903      	bls.n	8009474 <xTaskRemoveFromEventList+0x60>
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <xTaskRemoveFromEventList+0xb8>)
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <xTaskRemoveFromEventList+0xbc>)
 8009482:	441a      	add	r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fe fccb 	bl	8007e26 <vListInsertEnd>
 8009490:	e005      	b.n	800949e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3318      	adds	r3, #24
 8009496:	4619      	mov	r1, r3
 8009498:	480e      	ldr	r0, [pc, #56]	; (80094d4 <xTaskRemoveFromEventList+0xc0>)
 800949a:	f7fe fcc4 	bl	8007e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <xTaskRemoveFromEventList+0xc4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d905      	bls.n	80094b8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <xTaskRemoveFromEventList+0xc8>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e001      	b.n	80094bc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094bc:	697b      	ldr	r3, [r7, #20]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200014b0 	.word	0x200014b0
 80094cc:	20001490 	.word	0x20001490
 80094d0:	20000fb8 	.word	0x20000fb8
 80094d4:	20001448 	.word	0x20001448
 80094d8:	20000fb4 	.word	0x20000fb4
 80094dc:	2000149c 	.word	0x2000149c

080094e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094e8:	4b06      	ldr	r3, [pc, #24]	; (8009504 <vTaskInternalSetTimeOutState+0x24>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <vTaskInternalSetTimeOutState+0x28>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	605a      	str	r2, [r3, #4]
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	200014a0 	.word	0x200014a0
 8009508:	2000148c 	.word	0x2000148c

0800950c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10c      	bne.n	8009536 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	b672      	cpsid	i
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	b662      	cpsie	i
 8009530:	613b      	str	r3, [r7, #16]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10c      	bne.n	8009556 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	b672      	cpsid	i
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	b662      	cpsie	i
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009556:	f000 fe71 	bl	800a23c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800955a:	4b1d      	ldr	r3, [pc, #116]	; (80095d0 <xTaskCheckForTimeOut+0xc4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d102      	bne.n	800957a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	e023      	b.n	80095c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <xTaskCheckForTimeOut+0xc8>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d007      	beq.n	8009596 <xTaskCheckForTimeOut+0x8a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	429a      	cmp	r2, r3
 800958e:	d302      	bcc.n	8009596 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009590:	2301      	movs	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	e015      	b.n	80095c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	429a      	cmp	r2, r3
 800959e:	d20b      	bcs.n	80095b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	1ad2      	subs	r2, r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff ff97 	bl	80094e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61fb      	str	r3, [r7, #28]
 80095b6:	e004      	b.n	80095c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095be:	2301      	movs	r3, #1
 80095c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095c2:	f000 fe6f 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 80095c6:	69fb      	ldr	r3, [r7, #28]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	2000148c 	.word	0x2000148c
 80095d4:	200014a0 	.word	0x200014a0

080095d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095dc:	4b03      	ldr	r3, [pc, #12]	; (80095ec <vTaskMissedYield+0x14>)
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
}
 80095e2:	bf00      	nop
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	2000149c 	.word	0x2000149c

080095f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095f8:	f000 f852 	bl	80096a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <prvIdleTask+0x28>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d9f9      	bls.n	80095f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <prvIdleTask+0x2c>)
 8009606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009614:	e7f0      	b.n	80095f8 <prvIdleTask+0x8>
 8009616:	bf00      	nop
 8009618:	20000fb8 	.word	0x20000fb8
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009626:	2300      	movs	r3, #0
 8009628:	607b      	str	r3, [r7, #4]
 800962a:	e00c      	b.n	8009646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4a12      	ldr	r2, [pc, #72]	; (8009680 <prvInitialiseTaskLists+0x60>)
 8009638:	4413      	add	r3, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fbc6 	bl	8007dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3301      	adds	r3, #1
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b37      	cmp	r3, #55	; 0x37
 800964a:	d9ef      	bls.n	800962c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800964c:	480d      	ldr	r0, [pc, #52]	; (8009684 <prvInitialiseTaskLists+0x64>)
 800964e:	f7fe fbbd 	bl	8007dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009652:	480d      	ldr	r0, [pc, #52]	; (8009688 <prvInitialiseTaskLists+0x68>)
 8009654:	f7fe fbba 	bl	8007dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009658:	480c      	ldr	r0, [pc, #48]	; (800968c <prvInitialiseTaskLists+0x6c>)
 800965a:	f7fe fbb7 	bl	8007dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800965e:	480c      	ldr	r0, [pc, #48]	; (8009690 <prvInitialiseTaskLists+0x70>)
 8009660:	f7fe fbb4 	bl	8007dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009664:	480b      	ldr	r0, [pc, #44]	; (8009694 <prvInitialiseTaskLists+0x74>)
 8009666:	f7fe fbb1 	bl	8007dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <prvInitialiseTaskLists+0x78>)
 800966c:	4a05      	ldr	r2, [pc, #20]	; (8009684 <prvInitialiseTaskLists+0x64>)
 800966e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009670:	4b0a      	ldr	r3, [pc, #40]	; (800969c <prvInitialiseTaskLists+0x7c>)
 8009672:	4a05      	ldr	r2, [pc, #20]	; (8009688 <prvInitialiseTaskLists+0x68>)
 8009674:	601a      	str	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000fb8 	.word	0x20000fb8
 8009684:	20001418 	.word	0x20001418
 8009688:	2000142c 	.word	0x2000142c
 800968c:	20001448 	.word	0x20001448
 8009690:	2000145c 	.word	0x2000145c
 8009694:	20001474 	.word	0x20001474
 8009698:	20001440 	.word	0x20001440
 800969c:	20001444 	.word	0x20001444

080096a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096a6:	e019      	b.n	80096dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096a8:	f000 fdc8 	bl	800a23c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <prvCheckTasksWaitingTermination+0x50>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe fc11 	bl	8007ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096be:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <prvCheckTasksWaitingTermination+0x54>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	4a0b      	ldr	r2, [pc, #44]	; (80096f4 <prvCheckTasksWaitingTermination+0x54>)
 80096c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <prvCheckTasksWaitingTermination+0x58>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	4a0a      	ldr	r2, [pc, #40]	; (80096f8 <prvCheckTasksWaitingTermination+0x58>)
 80096d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096d2:	f000 fde7 	bl	800a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f810 	bl	80096fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <prvCheckTasksWaitingTermination+0x58>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e1      	bne.n	80096a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000145c 	.word	0x2000145c
 80096f4:	20001488 	.word	0x20001488
 80096f8:	20001470 	.word	0x20001470

080096fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3354      	adds	r3, #84	; 0x54
 8009708:	4618      	mov	r0, r3
 800970a:	f001 ff93 	bl	800b634 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009714:	2b00      	cmp	r3, #0
 8009716:	d108      	bne.n	800972a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	4618      	mov	r0, r3
 800971e:	f000 ff83 	bl	800a628 <vPortFree>
				vPortFree( pxTCB );
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 ff80 	bl	800a628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009728:	e01a      	b.n	8009760 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009730:	2b01      	cmp	r3, #1
 8009732:	d103      	bne.n	800973c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 ff77 	bl	800a628 <vPortFree>
	}
 800973a:	e011      	b.n	8009760 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009742:	2b02      	cmp	r3, #2
 8009744:	d00c      	beq.n	8009760 <prvDeleteTCB+0x64>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	b672      	cpsid	i
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	b662      	cpsie	i
 800975a:	60fb      	str	r3, [r7, #12]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <prvDeleteTCB+0x62>
	}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800976e:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <prvResetNextTaskUnblockTime+0x38>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <prvResetNextTaskUnblockTime+0x3c>)
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009780:	e008      	b.n	8009794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <prvResetNextTaskUnblockTime+0x38>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	4a04      	ldr	r2, [pc, #16]	; (80097a4 <prvResetNextTaskUnblockTime+0x3c>)
 8009792:	6013      	str	r3, [r2, #0]
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20001440 	.word	0x20001440
 80097a4:	200014a8 	.word	0x200014a8

080097a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097ae:	4b0b      	ldr	r3, [pc, #44]	; (80097dc <xTaskGetSchedulerState+0x34>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097b6:	2301      	movs	r3, #1
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	e008      	b.n	80097ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097bc:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <xTaskGetSchedulerState+0x38>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097c4:	2302      	movs	r3, #2
 80097c6:	607b      	str	r3, [r7, #4]
 80097c8:	e001      	b.n	80097ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097ca:	2300      	movs	r3, #0
 80097cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097ce:	687b      	ldr	r3, [r7, #4]
	}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20001494 	.word	0x20001494
 80097e0:	200014b0 	.word	0x200014b0

080097e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d05a      	beq.n	80098b0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097fa:	4b30      	ldr	r3, [pc, #192]	; (80098bc <xTaskPriorityDisinherit+0xd8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	429a      	cmp	r2, r3
 8009802:	d00c      	beq.n	800981e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	b672      	cpsid	i
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	b662      	cpsie	i
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10c      	bne.n	8009840 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	b672      	cpsid	i
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	b662      	cpsie	i
 800983a:	60bb      	str	r3, [r7, #8]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009844:	1e5a      	subs	r2, r3, #1
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	429a      	cmp	r2, r3
 8009854:	d02c      	beq.n	80098b0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985a:	2b00      	cmp	r3, #0
 800985c:	d128      	bne.n	80098b0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3304      	adds	r3, #4
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fb3c 	bl	8007ee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <xTaskPriorityDisinherit+0xdc>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d903      	bls.n	8009890 <xTaskPriorityDisinherit+0xac>
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4a0c      	ldr	r2, [pc, #48]	; (80098c0 <xTaskPriorityDisinherit+0xdc>)
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4a09      	ldr	r2, [pc, #36]	; (80098c4 <xTaskPriorityDisinherit+0xe0>)
 800989e:	441a      	add	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fe fabd 	bl	8007e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098b0:	697b      	ldr	r3, [r7, #20]
	}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000fb4 	.word	0x20000fb4
 80098c0:	20001490 	.word	0x20001490
 80098c4:	20000fb8 	.word	0x20000fb8

080098c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098d2:	4b21      	ldr	r3, [pc, #132]	; (8009958 <prvAddCurrentTaskToDelayedList+0x90>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d8:	4b20      	ldr	r3, [pc, #128]	; (800995c <prvAddCurrentTaskToDelayedList+0x94>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fafe 	bl	8007ee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d10a      	bne.n	8009902 <prvAddCurrentTaskToDelayedList+0x3a>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098f2:	4b1a      	ldr	r3, [pc, #104]	; (800995c <prvAddCurrentTaskToDelayedList+0x94>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4819      	ldr	r0, [pc, #100]	; (8009960 <prvAddCurrentTaskToDelayedList+0x98>)
 80098fc:	f7fe fa93 	bl	8007e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009900:	e026      	b.n	8009950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4413      	add	r3, r2
 8009908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <prvAddCurrentTaskToDelayedList+0x94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d209      	bcs.n	800992e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <prvAddCurrentTaskToDelayedList+0x94>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fe faa1 	bl	8007e6e <vListInsert>
}
 800992c:	e010      	b.n	8009950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800992e:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <prvAddCurrentTaskToDelayedList+0x94>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3304      	adds	r3, #4
 8009938:	4619      	mov	r1, r3
 800993a:	4610      	mov	r0, r2
 800993c:	f7fe fa97 	bl	8007e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d202      	bcs.n	8009950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800994a:	4a08      	ldr	r2, [pc, #32]	; (800996c <prvAddCurrentTaskToDelayedList+0xa4>)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6013      	str	r3, [r2, #0]
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	2000148c 	.word	0x2000148c
 800995c:	20000fb4 	.word	0x20000fb4
 8009960:	20001474 	.word	0x20001474
 8009964:	20001444 	.word	0x20001444
 8009968:	20001440 	.word	0x20001440
 800996c:	200014a8 	.word	0x200014a8

08009970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800997a:	f000 fb15 	bl	8009fa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800997e:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <xTimerCreateTimerTask+0x84>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d021      	beq.n	80099ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800998e:	1d3a      	adds	r2, r7, #4
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	f107 030c 	add.w	r3, r7, #12
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe f9fd 	bl	8007d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	9202      	str	r2, [sp, #8]
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	2302      	movs	r3, #2
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	2300      	movs	r3, #0
 80099ae:	460a      	mov	r2, r1
 80099b0:	4911      	ldr	r1, [pc, #68]	; (80099f8 <xTimerCreateTimerTask+0x88>)
 80099b2:	4812      	ldr	r0, [pc, #72]	; (80099fc <xTimerCreateTimerTask+0x8c>)
 80099b4:	f7ff f890 	bl	8008ad8 <xTaskCreateStatic>
 80099b8:	4603      	mov	r3, r0
 80099ba:	4a11      	ldr	r2, [pc, #68]	; (8009a00 <xTimerCreateTimerTask+0x90>)
 80099bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099be:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xTimerCreateTimerTask+0x90>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099c6:	2301      	movs	r3, #1
 80099c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10c      	bne.n	80099ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	613b      	str	r3, [r7, #16]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80099ea:	697b      	ldr	r3, [r7, #20]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200014e4 	.word	0x200014e4
 80099f8:	0800b760 	.word	0x0800b760
 80099fc:	08009b41 	.word	0x08009b41
 8009a00:	200014e8 	.word	0x200014e8

08009a04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10c      	bne.n	8009a36 <xTimerGenericCommand+0x32>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	b672      	cpsid	i
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	b662      	cpsie	i
 8009a30:	623b      	str	r3, [r7, #32]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <xTimerGenericCommand+0x9c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02a      	beq.n	8009a94 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	dc18      	bgt.n	8009a82 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a50:	f7ff feaa 	bl	80097a8 <xTaskGetSchedulerState>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d109      	bne.n	8009a6e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a5a:	4b11      	ldr	r3, [pc, #68]	; (8009aa0 <xTimerGenericCommand+0x9c>)
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	f107 0110 	add.w	r1, r7, #16
 8009a62:	2300      	movs	r3, #0
 8009a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a66:	f7fe fbb7 	bl	80081d8 <xQueueGenericSend>
 8009a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a6c:	e012      	b.n	8009a94 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <xTimerGenericCommand+0x9c>)
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f107 0110 	add.w	r1, r7, #16
 8009a76:	2300      	movs	r3, #0
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f7fe fbad 	bl	80081d8 <xQueueGenericSend>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a80:	e008      	b.n	8009a94 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a82:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <xTimerGenericCommand+0x9c>)
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f107 0110 	add.w	r1, r7, #16
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	f7fe fca9 	bl	80083e4 <xQueueGenericSendFromISR>
 8009a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3728      	adds	r7, #40	; 0x28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200014e4 	.word	0x200014e4

08009aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aae:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <prvProcessExpiredTimer+0x98>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fa0f 	bl	8007ee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d024      	beq.n	8009b1a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	699a      	ldr	r2, [r3, #24]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	18d1      	adds	r1, r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	6978      	ldr	r0, [r7, #20]
 8009ade:	f000 f8d3 	bl	8009c88 <prvInsertTimerInActiveList>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d021      	beq.n	8009b2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	2300      	movs	r3, #0
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	2100      	movs	r1, #0
 8009af2:	6978      	ldr	r0, [r7, #20]
 8009af4:	f7ff ff86 	bl	8009a04 <xTimerGenericCommand>
 8009af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d115      	bne.n	8009b2c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b20:	f023 0301 	bic.w	r3, r3, #1
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	6978      	ldr	r0, [r7, #20]
 8009b32:	4798      	blx	r3
}
 8009b34:	bf00      	nop
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200014dc 	.word	0x200014dc

08009b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 f857 	bl	8009c00 <prvGetNextExpireTime>
 8009b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4619      	mov	r1, r3
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f803 	bl	8009b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b5e:	f000 f8d5 	bl	8009d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b62:	e7f1      	b.n	8009b48 <prvTimerTask+0x8>

08009b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b6e:	f7ff fa1d 	bl	8008fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 f866 	bl	8009c48 <prvSampleTimeNow>
 8009b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d130      	bne.n	8009be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <prvProcessTimerOrBlockTask+0x3c>
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d806      	bhi.n	8009ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b92:	f7ff fa19 	bl	8008fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff83 	bl	8009aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b9e:	e024      	b.n	8009bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ba6:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <prvProcessTimerOrBlockTask+0x90>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <prvProcessTimerOrBlockTask+0x50>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e000      	b.n	8009bb6 <prvProcessTimerOrBlockTask+0x52>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bb8:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <prvProcessTimerOrBlockTask+0x94>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7fe ff53 	bl	8008a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bca:	f7ff f9fd 	bl	8008fc8 <xTaskResumeAll>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <prvProcessTimerOrBlockTask+0x98>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
}
 8009be4:	e001      	b.n	8009bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009be6:	f7ff f9ef 	bl	8008fc8 <xTaskResumeAll>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200014e0 	.word	0x200014e0
 8009bf8:	200014e4 	.word	0x200014e4
 8009bfc:	e000ed04 	.word	0xe000ed04

08009c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c08:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <prvGetNextExpireTime+0x44>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <prvGetNextExpireTime+0x16>
 8009c12:	2201      	movs	r2, #1
 8009c14:	e000      	b.n	8009c18 <prvGetNextExpireTime+0x18>
 8009c16:	2200      	movs	r2, #0
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d105      	bne.n	8009c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <prvGetNextExpireTime+0x44>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	e001      	b.n	8009c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	200014dc 	.word	0x200014dc

08009c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c50:	f7ff fa5a 	bl	8009108 <xTaskGetTickCount>
 8009c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <prvSampleTimeNow+0x3c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d205      	bcs.n	8009c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c60:	f000 f93c 	bl	8009edc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	e002      	b.n	8009c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <prvSampleTimeNow+0x3c>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200014ec 	.word	0x200014ec

08009c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d812      	bhi.n	8009cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d302      	bcc.n	8009cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	e01b      	b.n	8009cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <prvInsertTimerInActiveList+0x7c>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7fe f8ce 	bl	8007e6e <vListInsert>
 8009cd2:	e012      	b.n	8009cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d206      	bcs.n	8009cea <prvInsertTimerInActiveList+0x62>
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d302      	bcc.n	8009cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	e007      	b.n	8009cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <prvInsertTimerInActiveList+0x80>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7fe f8ba 	bl	8007e6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cfa:	697b      	ldr	r3, [r7, #20]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	200014e0 	.word	0x200014e0
 8009d08:	200014dc 	.word	0x200014dc

08009d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08e      	sub	sp, #56	; 0x38
 8009d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d12:	e0d0      	b.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da1a      	bge.n	8009d50 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d1a:	1d3b      	adds	r3, r7, #4
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10c      	bne.n	8009d40 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	b672      	cpsid	i
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	b662      	cpsie	i
 8009d3a:	61fb      	str	r3, [r7, #28]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d46:	6850      	ldr	r0, [r2, #4]
 8009d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d4a:	6892      	ldr	r2, [r2, #8]
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f2c0 80ae 	blt.w	8009eb4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	3304      	adds	r3, #4
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe f8b9 	bl	8007ee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d6e:	463b      	mov	r3, r7
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ff69 	bl	8009c48 <prvSampleTimeNow>
 8009d76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	f200 809b 	bhi.w	8009eb6 <prvProcessReceivedCommands+0x1aa>
 8009d80:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <prvProcessReceivedCommands+0x7c>)
 8009d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009db1 	.word	0x08009db1
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009e29 	.word	0x08009e29
 8009d98:	08009e3d 	.word	0x08009e3d
 8009d9c:	08009e8b 	.word	0x08009e8b
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009db1 	.word	0x08009db1
 8009da8:	08009e29 	.word	0x08009e29
 8009dac:	08009e3d 	.word	0x08009e3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009db6:	f043 0301 	orr.w	r3, r3, #1
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	18d1      	adds	r1, r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd0:	f7ff ff5a 	bl	8009c88 <prvInsertTimerInActiveList>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d06d      	beq.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d062      	beq.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	441a      	add	r2, r3
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e02:	f7ff fdff 	bl	8009a04 <xTimerGenericCommand>
 8009e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d153      	bne.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	b672      	cpsid	i
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	b662      	cpsie	i
 8009e22:	61bb      	str	r3, [r7, #24]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e3a:	e03c      	b.n	8009eb6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10c      	bne.n	8009e76 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	b672      	cpsid	i
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	b662      	cpsie	i
 8009e70:	617b      	str	r3, [r7, #20]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	18d1      	adds	r1, r2, r3
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e84:	f7ff ff00 	bl	8009c88 <prvInsertTimerInActiveList>
					break;
 8009e88:	e015      	b.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9a:	f000 fbc5 	bl	800a628 <vPortFree>
 8009e9e:	e00a      	b.n	8009eb6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009eb2:	e000      	b.n	8009eb6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009eb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eb6:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <prvProcessReceivedCommands+0x1cc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1d39      	adds	r1, r7, #4
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe fb30 	bl	8008524 <xQueueReceive>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f47f af24 	bne.w	8009d14 <prvProcessReceivedCommands+0x8>
	}
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	3730      	adds	r7, #48	; 0x30
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200014e4 	.word	0x200014e4

08009edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ee2:	e04a      	b.n	8009f7a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ee4:	4b2e      	ldr	r3, [pc, #184]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fd ffef 	bl	8007ee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d030      	beq.n	8009f7a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d90e      	bls.n	8009f48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f36:	4b1a      	ldr	r3, [pc, #104]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7fd ff94 	bl	8007e6e <vListInsert>
 8009f46:	e018      	b.n	8009f7a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	2100      	movs	r1, #0
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7ff fd56 	bl	8009a04 <xTimerGenericCommand>
 8009f58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10c      	bne.n	8009f7a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	b672      	cpsid	i
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	b662      	cpsie	i
 8009f74:	603b      	str	r3, [r7, #0]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1af      	bne.n	8009ee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f84:	4b06      	ldr	r3, [pc, #24]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f8a:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <prvSwitchTimerLists+0xc8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <prvSwitchTimerLists+0xc4>)
 8009f90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f92:	4a04      	ldr	r2, [pc, #16]	; (8009fa4 <prvSwitchTimerLists+0xc8>)
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	6013      	str	r3, [r2, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	200014dc 	.word	0x200014dc
 8009fa4:	200014e0 	.word	0x200014e0

08009fa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fae:	f000 f945 	bl	800a23c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <prvCheckForValidListAndQueue+0x60>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d120      	bne.n	8009ffc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009fba:	4814      	ldr	r0, [pc, #80]	; (800a00c <prvCheckForValidListAndQueue+0x64>)
 8009fbc:	f7fd ff06 	bl	8007dcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009fc0:	4813      	ldr	r0, [pc, #76]	; (800a010 <prvCheckForValidListAndQueue+0x68>)
 8009fc2:	f7fd ff03 	bl	8007dcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fc6:	4b13      	ldr	r3, [pc, #76]	; (800a014 <prvCheckForValidListAndQueue+0x6c>)
 8009fc8:	4a10      	ldr	r2, [pc, #64]	; (800a00c <prvCheckForValidListAndQueue+0x64>)
 8009fca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fcc:	4b12      	ldr	r3, [pc, #72]	; (800a018 <prvCheckForValidListAndQueue+0x70>)
 8009fce:	4a10      	ldr	r2, [pc, #64]	; (800a010 <prvCheckForValidListAndQueue+0x68>)
 8009fd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <prvCheckForValidListAndQueue+0x74>)
 8009fd8:	4a11      	ldr	r2, [pc, #68]	; (800a020 <prvCheckForValidListAndQueue+0x78>)
 8009fda:	2110      	movs	r1, #16
 8009fdc:	200a      	movs	r0, #10
 8009fde:	f7fe f813 	bl	8008008 <xQueueGenericCreateStatic>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4a08      	ldr	r2, [pc, #32]	; (800a008 <prvCheckForValidListAndQueue+0x60>)
 8009fe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fe8:	4b07      	ldr	r3, [pc, #28]	; (800a008 <prvCheckForValidListAndQueue+0x60>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <prvCheckForValidListAndQueue+0x60>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	490b      	ldr	r1, [pc, #44]	; (800a024 <prvCheckForValidListAndQueue+0x7c>)
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fd10 	bl	8008a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ffc:	f000 f952 	bl	800a2a4 <vPortExitCritical>
}
 800a000:	bf00      	nop
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	200014e4 	.word	0x200014e4
 800a00c:	200014b4 	.word	0x200014b4
 800a010:	200014c8 	.word	0x200014c8
 800a014:	200014dc 	.word	0x200014dc
 800a018:	200014e0 	.word	0x200014e0
 800a01c:	20001590 	.word	0x20001590
 800a020:	200014f0 	.word	0x200014f0
 800a024:	0800b768 	.word	0x0800b768

0800a028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b04      	subs	r3, #4
 800a038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3b04      	subs	r3, #4
 800a046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f023 0201 	bic.w	r2, r3, #1
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3b04      	subs	r3, #4
 800a056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a058:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <pxPortInitialiseStack+0x64>)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3b14      	subs	r3, #20
 800a062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3b04      	subs	r3, #4
 800a06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f06f 0202 	mvn.w	r2, #2
 800a076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3b20      	subs	r3, #32
 800a07c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a07e:	68fb      	ldr	r3, [r7, #12]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	0800a091 	.word	0x0800a091

0800a090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a09a:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <prvTaskExitError+0x5c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d00c      	beq.n	800a0be <prvTaskExitError+0x2e>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	b672      	cpsid	i
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	b662      	cpsie	i
 800a0b8:	60fb      	str	r3, [r7, #12]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <prvTaskExitError+0x2c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	b672      	cpsid	i
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	b662      	cpsie	i
 800a0d2:	60bb      	str	r3, [r7, #8]
}
 800a0d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0d6:	bf00      	nop
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0fc      	beq.n	800a0d8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20000098 	.word	0x20000098

0800a0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0f0:	4b07      	ldr	r3, [pc, #28]	; (800a110 <pxCurrentTCBConst2>)
 800a0f2:	6819      	ldr	r1, [r3, #0]
 800a0f4:	6808      	ldr	r0, [r1, #0]
 800a0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	f380 8809 	msr	PSP, r0
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8811 	msr	BASEPRI, r0
 800a10a:	4770      	bx	lr
 800a10c:	f3af 8000 	nop.w

0800a110 <pxCurrentTCBConst2>:
 800a110:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop

0800a118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a118:	4808      	ldr	r0, [pc, #32]	; (800a13c <prvPortStartFirstTask+0x24>)
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	6800      	ldr	r0, [r0, #0]
 800a11e:	f380 8808 	msr	MSP, r0
 800a122:	f04f 0000 	mov.w	r0, #0
 800a126:	f380 8814 	msr	CONTROL, r0
 800a12a:	b662      	cpsie	i
 800a12c:	b661      	cpsie	f
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	df00      	svc	0
 800a138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a13a:	bf00      	nop
 800a13c:	e000ed08 	.word	0xe000ed08

0800a140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a146:	4b37      	ldr	r3, [pc, #220]	; (800a224 <xPortStartScheduler+0xe4>)
 800a148:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b2f      	ldr	r3, [pc, #188]	; (800a228 <xPortStartScheduler+0xe8>)
 800a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a16e:	4b2f      	ldr	r3, [pc, #188]	; (800a22c <xPortStartScheduler+0xec>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a174:	e009      	b.n	800a18a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a176:	4b2d      	ldr	r3, [pc, #180]	; (800a22c <xPortStartScheduler+0xec>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a2b      	ldr	r2, [pc, #172]	; (800a22c <xPortStartScheduler+0xec>)
 800a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d0ef      	beq.n	800a176 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a196:	4b25      	ldr	r3, [pc, #148]	; (800a22c <xPortStartScheduler+0xec>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1c3 0307 	rsb	r3, r3, #7
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d00c      	beq.n	800a1bc <xPortStartScheduler+0x7c>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	b672      	cpsid	i
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	b662      	cpsie	i
 800a1b6:	60bb      	str	r3, [r7, #8]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1bc:	4b1b      	ldr	r3, [pc, #108]	; (800a22c <xPortStartScheduler+0xec>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	4a1a      	ldr	r2, [pc, #104]	; (800a22c <xPortStartScheduler+0xec>)
 800a1c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1c6:	4b19      	ldr	r3, [pc, #100]	; (800a22c <xPortStartScheduler+0xec>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ce:	4a17      	ldr	r2, [pc, #92]	; (800a22c <xPortStartScheduler+0xec>)
 800a1d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <xPortStartScheduler+0xf0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a14      	ldr	r2, [pc, #80]	; (800a230 <xPortStartScheduler+0xf0>)
 800a1e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1e6:	4b12      	ldr	r3, [pc, #72]	; (800a230 <xPortStartScheduler+0xf0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a11      	ldr	r2, [pc, #68]	; (800a230 <xPortStartScheduler+0xf0>)
 800a1ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1f2:	f000 f8dd 	bl	800a3b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <xPortStartScheduler+0xf4>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1fc:	f000 f8fc 	bl	800a3f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a200:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <xPortStartScheduler+0xf8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a0c      	ldr	r2, [pc, #48]	; (800a238 <xPortStartScheduler+0xf8>)
 800a206:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a20a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a20c:	f7ff ff84 	bl	800a118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a210:	f7ff f846 	bl	80092a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a214:	f7ff ff3c 	bl	800a090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	e000e400 	.word	0xe000e400
 800a228:	200015e0 	.word	0x200015e0
 800a22c:	200015e4 	.word	0x200015e4
 800a230:	e000ed20 	.word	0xe000ed20
 800a234:	20000098 	.word	0x20000098
 800a238:	e000ef34 	.word	0xe000ef34

0800a23c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	b672      	cpsid	i
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	b662      	cpsie	i
 800a256:	607b      	str	r3, [r7, #4]
}
 800a258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <vPortEnterCritical+0x60>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3301      	adds	r3, #1
 800a260:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <vPortEnterCritical+0x60>)
 800a262:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a264:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <vPortEnterCritical+0x60>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d111      	bne.n	800a290 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a26c:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <vPortEnterCritical+0x64>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00c      	beq.n	800a290 <vPortEnterCritical+0x54>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	603b      	str	r3, [r7, #0]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortEnterCritical+0x52>
	}
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	20000098 	.word	0x20000098
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <vPortExitCritical+0x54>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10c      	bne.n	800a2cc <vPortExitCritical+0x28>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	b672      	cpsid	i
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	b662      	cpsie	i
 800a2c6:	607b      	str	r3, [r7, #4]
}
 800a2c8:	bf00      	nop
 800a2ca:	e7fe      	b.n	800a2ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <vPortExitCritical+0x54>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <vPortExitCritical+0x54>)
 800a2d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <vPortExitCritical+0x54>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <vPortExitCritical+0x46>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	f383 8811 	msr	BASEPRI, r3
}
 800a2e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000098 	.word	0x20000098
 800a2fc:	00000000 	.word	0x00000000

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	f01e 0f10 	tst.w	lr, #16
 800a310:	bf08      	it	eq
 800a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31a:	6010      	str	r0, [r2, #0]
 800a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a324:	b672      	cpsid	i
 800a326:	f380 8811 	msr	BASEPRI, r0
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	b662      	cpsie	i
 800a334:	f7fe ffb4 	bl	80092a0 <vTaskSwitchContext>
 800a338:	f04f 0000 	mov.w	r0, #0
 800a33c:	f380 8811 	msr	BASEPRI, r0
 800a340:	bc09      	pop	{r0, r3}
 800a342:	6819      	ldr	r1, [r3, #0]
 800a344:	6808      	ldr	r0, [r1, #0]
 800a346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34a:	f01e 0f10 	tst.w	lr, #16
 800a34e:	bf08      	it	eq
 800a350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a354:	f380 8809 	msr	PSP, r0
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop

0800a360 <pxCurrentTCBConst>:
 800a360:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	b672      	cpsid	i
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	b662      	cpsie	i
 800a382:	607b      	str	r3, [r7, #4]
}
 800a384:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a386:	f7fe fecf 	bl	8009128 <xTaskIncrementTick>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a390:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <SysTick_Handler+0x44>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	f383 8811 	msr	BASEPRI, r3
}
 800a3a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	e000ed04 	.word	0xe000ed04

0800a3b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3b4:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <vPortSetupTimerInterrupt+0x34>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <vPortSetupTimerInterrupt+0x38>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <vPortSetupTimerInterrupt+0x3c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a0a      	ldr	r2, [pc, #40]	; (800a3f0 <vPortSetupTimerInterrupt+0x40>)
 800a3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ca:	099b      	lsrs	r3, r3, #6
 800a3cc:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <vPortSetupTimerInterrupt+0x44>)
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <vPortSetupTimerInterrupt+0x34>)
 800a3d4:	2207      	movs	r2, #7
 800a3d6:	601a      	str	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	e000e010 	.word	0xe000e010
 800a3e8:	e000e018 	.word	0xe000e018
 800a3ec:	20000000 	.word	0x20000000
 800a3f0:	10624dd3 	.word	0x10624dd3
 800a3f4:	e000e014 	.word	0xe000e014

0800a3f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a408 <vPortEnableVFP+0x10>
 800a3fc:	6801      	ldr	r1, [r0, #0]
 800a3fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a402:	6001      	str	r1, [r0, #0]
 800a404:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a406:	bf00      	nop
 800a408:	e000ed88 	.word	0xe000ed88

0800a40c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a412:	f3ef 8305 	mrs	r3, IPSR
 800a416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b0f      	cmp	r3, #15
 800a41c:	d916      	bls.n	800a44c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41e:	4a19      	ldr	r2, [pc, #100]	; (800a484 <vPortValidateInterruptPriority+0x78>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a428:	4b17      	ldr	r3, [pc, #92]	; (800a488 <vPortValidateInterruptPriority+0x7c>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	7afa      	ldrb	r2, [r7, #11]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d20c      	bcs.n	800a44c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	b672      	cpsid	i
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	b662      	cpsie	i
 800a446:	607b      	str	r3, [r7, #4]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <vPortValidateInterruptPriority+0x80>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <vPortValidateInterruptPriority+0x84>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d90c      	bls.n	800a476 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	b672      	cpsid	i
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	b662      	cpsie	i
 800a470:	603b      	str	r3, [r7, #0]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <vPortValidateInterruptPriority+0x68>
	}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	e000e3f0 	.word	0xe000e3f0
 800a488:	200015e0 	.word	0x200015e0
 800a48c:	e000ed0c 	.word	0xe000ed0c
 800a490:	200015e4 	.word	0x200015e4

0800a494 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	; 0x28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a49c:	2300      	movs	r3, #0
 800a49e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4a0:	f7fe fd84 	bl	8008fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4a4:	4b5b      	ldr	r3, [pc, #364]	; (800a614 <pvPortMalloc+0x180>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d101      	bne.n	800a4b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4ac:	f000 f91a 	bl	800a6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4b0:	4b59      	ldr	r3, [pc, #356]	; (800a618 <pvPortMalloc+0x184>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f040 8092 	bne.w	800a5e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01f      	beq.n	800a504 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d016      	beq.n	800a504 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	3308      	adds	r3, #8
 800a4de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00c      	beq.n	800a504 <pvPortMalloc+0x70>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	b672      	cpsid	i
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	b662      	cpsie	i
 800a4fe:	617b      	str	r3, [r7, #20]
}
 800a500:	bf00      	nop
 800a502:	e7fe      	b.n	800a502 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d06b      	beq.n	800a5e2 <pvPortMalloc+0x14e>
 800a50a:	4b44      	ldr	r3, [pc, #272]	; (800a61c <pvPortMalloc+0x188>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	429a      	cmp	r2, r3
 800a512:	d866      	bhi.n	800a5e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a514:	4b42      	ldr	r3, [pc, #264]	; (800a620 <pvPortMalloc+0x18c>)
 800a516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a518:	4b41      	ldr	r3, [pc, #260]	; (800a620 <pvPortMalloc+0x18c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51e:	e004      	b.n	800a52a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <pvPortMalloc+0xa8>
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f1      	bne.n	800a520 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a53c:	4b35      	ldr	r3, [pc, #212]	; (800a614 <pvPortMalloc+0x180>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a542:	429a      	cmp	r2, r3
 800a544:	d04d      	beq.n	800a5e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2208      	movs	r2, #8
 800a54c:	4413      	add	r3, r2
 800a54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	2308      	movs	r3, #8
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	429a      	cmp	r2, r3
 800a566:	d921      	bls.n	800a5ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00c      	beq.n	800a594 <pvPortMalloc+0x100>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	b672      	cpsid	i
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	b662      	cpsie	i
 800a58e:	613b      	str	r3, [r7, #16]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5a6:	69b8      	ldr	r0, [r7, #24]
 800a5a8:	f000 f8fe 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <pvPortMalloc+0x188>)
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	4a19      	ldr	r2, [pc, #100]	; (800a61c <pvPortMalloc+0x188>)
 800a5b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5ba:	4b18      	ldr	r3, [pc, #96]	; (800a61c <pvPortMalloc+0x188>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	4b19      	ldr	r3, [pc, #100]	; (800a624 <pvPortMalloc+0x190>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d203      	bcs.n	800a5ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5c6:	4b15      	ldr	r3, [pc, #84]	; (800a61c <pvPortMalloc+0x188>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a16      	ldr	r2, [pc, #88]	; (800a624 <pvPortMalloc+0x190>)
 800a5cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b11      	ldr	r3, [pc, #68]	; (800a618 <pvPortMalloc+0x184>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5e2:	f7fe fcf1 	bl	8008fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00c      	beq.n	800a60a <pvPortMalloc+0x176>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	b662      	cpsie	i
 800a604:	60fb      	str	r3, [r7, #12]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <pvPortMalloc+0x174>
	return pvReturn;
 800a60a:	69fb      	ldr	r3, [r7, #28]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3728      	adds	r7, #40	; 0x28
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	200051f0 	.word	0x200051f0
 800a618:	200051fc 	.word	0x200051fc
 800a61c:	200051f4 	.word	0x200051f4
 800a620:	200051e8 	.word	0x200051e8
 800a624:	200051f8 	.word	0x200051f8

0800a628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d04c      	beq.n	800a6d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a63a:	2308      	movs	r3, #8
 800a63c:	425b      	negs	r3, r3
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	4b23      	ldr	r3, [pc, #140]	; (800a6dc <vPortFree+0xb4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4013      	ands	r3, r2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10c      	bne.n	800a670 <vPortFree+0x48>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	b672      	cpsid	i
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	b662      	cpsie	i
 800a66a:	60fb      	str	r3, [r7, #12]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00c      	beq.n	800a692 <vPortFree+0x6a>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	b672      	cpsid	i
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	b662      	cpsie	i
 800a68c:	60bb      	str	r3, [r7, #8]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <vPortFree+0xb4>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d019      	beq.n	800a6d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d115      	bne.n	800a6d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <vPortFree+0xb4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	43db      	mvns	r3, r3
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6b8:	f7fe fc78 	bl	8008fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <vPortFree+0xb8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <vPortFree+0xb8>)
 800a6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f000 f86c 	bl	800a7a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6d0:	f7fe fc7a 	bl	8008fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6d4:	bf00      	nop
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	200051fc 	.word	0x200051fc
 800a6e0:	200051f4 	.word	0x200051f4

0800a6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6f0:	4b27      	ldr	r3, [pc, #156]	; (800a790 <prvHeapInit+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00c      	beq.n	800a718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3307      	adds	r3, #7
 800a702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <prvHeapInit+0xac>)
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <prvHeapInit+0xb0>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <prvHeapInit+0xb0>)
 800a724:	2200      	movs	r2, #0
 800a726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4413      	add	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a730:	2208      	movs	r2, #8
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvHeapInit+0xb4>)
 800a744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <prvHeapInit+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvHeapInit+0xb4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvHeapInit+0xb4>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <prvHeapInit+0xb8>)
 800a772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <prvHeapInit+0xbc>)
 800a77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <prvHeapInit+0xc0>)
 800a77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	200015e8 	.word	0x200015e8
 800a794:	200051e8 	.word	0x200051e8
 800a798:	200051f0 	.word	0x200051f0
 800a79c:	200051f8 	.word	0x200051f8
 800a7a0:	200051f4 	.word	0x200051f4
 800a7a4:	200051fc 	.word	0x200051fc

0800a7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <prvInsertBlockIntoFreeList+0xac>)
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e002      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x14>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d8f7      	bhi.n	800a7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d108      	bne.n	800a7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d118      	bne.n	800a830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d00d      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e008      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e003      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d002      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	200051e8 	.word	0x200051e8
 800a858:	200051f0 	.word	0x200051f0

0800a85c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a860:	2200      	movs	r2, #0
 800a862:	4912      	ldr	r1, [pc, #72]	; (800a8ac <MX_USB_DEVICE_Init+0x50>)
 800a864:	4812      	ldr	r0, [pc, #72]	; (800a8b0 <MX_USB_DEVICE_Init+0x54>)
 800a866:	f7fb fcaf 	bl	80061c8 <USBD_Init>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a870:	f7f6 f82c 	bl	80008cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a874:	490f      	ldr	r1, [pc, #60]	; (800a8b4 <MX_USB_DEVICE_Init+0x58>)
 800a876:	480e      	ldr	r0, [pc, #56]	; (800a8b0 <MX_USB_DEVICE_Init+0x54>)
 800a878:	f7fb fcd6 	bl	8006228 <USBD_RegisterClass>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a882:	f7f6 f823 	bl	80008cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a886:	490c      	ldr	r1, [pc, #48]	; (800a8b8 <MX_USB_DEVICE_Init+0x5c>)
 800a888:	4809      	ldr	r0, [pc, #36]	; (800a8b0 <MX_USB_DEVICE_Init+0x54>)
 800a88a:	f7fb fbcd 	bl	8006028 <USBD_CDC_RegisterInterface>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a894:	f7f6 f81a 	bl	80008cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a898:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <MX_USB_DEVICE_Init+0x54>)
 800a89a:	f7fb fcfb 	bl	8006294 <USBD_Start>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8a4:	f7f6 f812 	bl	80008cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8a8:	bf00      	nop
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	200000b0 	.word	0x200000b0
 800a8b0:	20005200 	.word	0x20005200
 800a8b4:	20000018 	.word	0x20000018
 800a8b8:	2000009c 	.word	0x2000009c

0800a8bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4905      	ldr	r1, [pc, #20]	; (800a8d8 <CDC_Init_FS+0x1c>)
 800a8c4:	4805      	ldr	r0, [pc, #20]	; (800a8dc <CDC_Init_FS+0x20>)
 800a8c6:	f7fb fbc9 	bl	800605c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8ca:	4905      	ldr	r1, [pc, #20]	; (800a8e0 <CDC_Init_FS+0x24>)
 800a8cc:	4803      	ldr	r0, [pc, #12]	; (800a8dc <CDC_Init_FS+0x20>)
 800a8ce:	f7fb fbe7 	bl	80060a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20005cdc 	.word	0x20005cdc
 800a8dc:	20005200 	.word	0x20005200
 800a8e0:	200054dc 	.word	0x200054dc

0800a8e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	6039      	str	r1, [r7, #0]
 800a8fe:	71fb      	strb	r3, [r7, #7]
 800a900:	4613      	mov	r3, r2
 800a902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a904:	79fb      	ldrb	r3, [r7, #7]
 800a906:	2b23      	cmp	r3, #35	; 0x23
 800a908:	d84a      	bhi.n	800a9a0 <CDC_Control_FS+0xac>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <CDC_Control_FS+0x1c>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a9a1 	.word	0x0800a9a1
 800a914:	0800a9a1 	.word	0x0800a9a1
 800a918:	0800a9a1 	.word	0x0800a9a1
 800a91c:	0800a9a1 	.word	0x0800a9a1
 800a920:	0800a9a1 	.word	0x0800a9a1
 800a924:	0800a9a1 	.word	0x0800a9a1
 800a928:	0800a9a1 	.word	0x0800a9a1
 800a92c:	0800a9a1 	.word	0x0800a9a1
 800a930:	0800a9a1 	.word	0x0800a9a1
 800a934:	0800a9a1 	.word	0x0800a9a1
 800a938:	0800a9a1 	.word	0x0800a9a1
 800a93c:	0800a9a1 	.word	0x0800a9a1
 800a940:	0800a9a1 	.word	0x0800a9a1
 800a944:	0800a9a1 	.word	0x0800a9a1
 800a948:	0800a9a1 	.word	0x0800a9a1
 800a94c:	0800a9a1 	.word	0x0800a9a1
 800a950:	0800a9a1 	.word	0x0800a9a1
 800a954:	0800a9a1 	.word	0x0800a9a1
 800a958:	0800a9a1 	.word	0x0800a9a1
 800a95c:	0800a9a1 	.word	0x0800a9a1
 800a960:	0800a9a1 	.word	0x0800a9a1
 800a964:	0800a9a1 	.word	0x0800a9a1
 800a968:	0800a9a1 	.word	0x0800a9a1
 800a96c:	0800a9a1 	.word	0x0800a9a1
 800a970:	0800a9a1 	.word	0x0800a9a1
 800a974:	0800a9a1 	.word	0x0800a9a1
 800a978:	0800a9a1 	.word	0x0800a9a1
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9a1 	.word	0x0800a9a1
 800a984:	0800a9a1 	.word	0x0800a9a1
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9a1 	.word	0x0800a9a1
 800a990:	0800a9a1 	.word	0x0800a9a1
 800a994:	0800a9a1 	.word	0x0800a9a1
 800a998:	0800a9a1 	.word	0x0800a9a1
 800a99c:	0800a9a1 	.word	0x0800a9a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9a0:	bf00      	nop
  }

  return (USBD_OK);
 800a9a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08c      	sub	sp, #48	; 0x30
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);		//Default two lines of receive code.
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4816      	ldr	r0, [pc, #88]	; (800aa18 <CDC_Receive_FS+0x68>)
 800a9be:	f7fb fb6f 	bl	80060a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9c2:	4815      	ldr	r0, [pc, #84]	; (800aa18 <CDC_Receive_FS+0x68>)
 800a9c4:	f7fb fbca 	bl	800615c <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  //memset (buffer, '\0', 64);			//These 3 lines clear our own rx buffer, copies USB buffer to our own rx buffer
  //memcpy (buffer, Buf, len);			// and then clear the USB buffer.
  //memset (Buf, '\0', len);

  if( MSGQ != NULL )
 800a9d0:	4b12      	ldr	r3, [pc, #72]	; (800aa1c <CDC_Receive_FS+0x6c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d01a      	beq.n	800aa0e <CDC_Receive_FS+0x5e>
  	{
	  	memset (msg.Buf, '\0', 32);					//Clear msg-obj
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	2220      	movs	r2, #32
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fd31 	bl	800b448 <memset>
  		memcpy (msg.Buf, Buf, len);					//Copy usb buffer to msg-obj
 800a9e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fd1b 	bl	800b42c <memcpy>
  		osMessageQueuePut(MSGQ, &msg, 0U, 0U);		//Put object in queue
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <CDC_Receive_FS+0x6c>)
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f107 010c 	add.w	r1, r7, #12
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2200      	movs	r2, #0
 800aa02:	f7fd f8c9 	bl	8007b98 <osMessageQueuePut>

  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	//Toggle indicator LED, to show RTOS communication / interrupt possibilities.
 800aa06:	2180      	movs	r1, #128	; 0x80
 800aa08:	4805      	ldr	r0, [pc, #20]	; (800aa20 <CDC_Receive_FS+0x70>)
 800aa0a:	f7f6 fba4 	bl	8001156 <HAL_GPIO_TogglePin>

  	}



  return (USBD_OK);
 800aa0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3730      	adds	r7, #48	; 0x30
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	20005200 	.word	0x20005200
 800aa1c:	2000019c 	.word	0x2000019c
 800aa20:	40020400 	.word	0x40020400

0800aa24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa34:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <CDC_Transmit_FS+0x48>)
 800aa36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e00b      	b.n	800aa62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa4a:	887b      	ldrh	r3, [r7, #2]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	4806      	ldr	r0, [pc, #24]	; (800aa6c <CDC_Transmit_FS+0x48>)
 800aa52:	f7fb fb03 	bl	800605c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa56:	4805      	ldr	r0, [pc, #20]	; (800aa6c <CDC_Transmit_FS+0x48>)
 800aa58:	f7fb fb40 	bl	80060dc <USBD_CDC_TransmitPacket>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20005200 	.word	0x20005200

0800aa70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2212      	movs	r2, #18
 800aaa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aaa6:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200000d0 	.word	0x200000d0

0800aab8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2204      	movs	r2, #4
 800aac8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaca:	4b03      	ldr	r3, [pc, #12]	; (800aad8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aacc:	4618      	mov	r0, r3
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	200000f0 	.word	0x200000f0

0800aadc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaf2:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaf4:	f7fc fda4 	bl	8007640 <USBD_GetString>
 800aaf8:	e004      	b.n	800ab04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_ProductStrDescriptor+0x34>)
 800aafe:	4805      	ldr	r0, [pc, #20]	; (800ab14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab00:	f7fc fd9e 	bl	8007640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	200064dc 	.word	0x200064dc
 800ab14:	0800b770 	.word	0x0800b770

0800ab18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	4904      	ldr	r1, [pc, #16]	; (800ab38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab28:	4804      	ldr	r0, [pc, #16]	; (800ab3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab2a:	f7fc fd89 	bl	8007640 <USBD_GetString>
  return USBD_StrDesc;
 800ab2e:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200064dc 	.word	0x200064dc
 800ab3c:	0800b784 	.word	0x0800b784

0800ab40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	221a      	movs	r2, #26
 800ab50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab52:	f000 f855 	bl	800ac00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab56:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	200000f4 	.word	0x200000f4

0800ab64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d105      	bne.n	800ab82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	4907      	ldr	r1, [pc, #28]	; (800ab98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab7a:	4808      	ldr	r0, [pc, #32]	; (800ab9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab7c:	f7fc fd60 	bl	8007640 <USBD_GetString>
 800ab80:	e004      	b.n	800ab8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	4904      	ldr	r1, [pc, #16]	; (800ab98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab86:	4805      	ldr	r0, [pc, #20]	; (800ab9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab88:	f7fc fd5a 	bl	8007640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab8c:	4b02      	ldr	r3, [pc, #8]	; (800ab98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	200064dc 	.word	0x200064dc
 800ab9c:	0800b798 	.word	0x0800b798

0800aba0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4907      	ldr	r1, [pc, #28]	; (800abd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abb6:	4808      	ldr	r0, [pc, #32]	; (800abd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abb8:	f7fc fd42 	bl	8007640 <USBD_GetString>
 800abbc:	e004      	b.n	800abc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4904      	ldr	r1, [pc, #16]	; (800abd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abc2:	4805      	ldr	r0, [pc, #20]	; (800abd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abc4:	f7fc fd3c 	bl	8007640 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200064dc 	.word	0x200064dc
 800abd8:	0800b7a4 	.word	0x0800b7a4

0800abdc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	220c      	movs	r2, #12
 800abec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800abee:	4b03      	ldr	r3, [pc, #12]	; (800abfc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	200000e4 	.word	0x200000e4

0800ac00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <Get_SerialNum+0x44>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac0c:	4b0e      	ldr	r3, [pc, #56]	; (800ac48 <Get_SerialNum+0x48>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac12:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <Get_SerialNum+0x4c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac26:	2208      	movs	r2, #8
 800ac28:	4909      	ldr	r1, [pc, #36]	; (800ac50 <Get_SerialNum+0x50>)
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 f814 	bl	800ac58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac30:	2204      	movs	r2, #4
 800ac32:	4908      	ldr	r1, [pc, #32]	; (800ac54 <Get_SerialNum+0x54>)
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f000 f80f 	bl	800ac58 <IntToUnicode>
  }
}
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	1ff0f420 	.word	0x1ff0f420
 800ac48:	1ff0f424 	.word	0x1ff0f424
 800ac4c:	1ff0f428 	.word	0x1ff0f428
 800ac50:	200000f6 	.word	0x200000f6
 800ac54:	20000106 	.word	0x20000106

0800ac58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
 800ac6e:	e027      	b.n	800acc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	0f1b      	lsrs	r3, r3, #28
 800ac74:	2b09      	cmp	r3, #9
 800ac76:	d80b      	bhi.n	800ac90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	0f1b      	lsrs	r3, r3, #28
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	4619      	mov	r1, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	440b      	add	r3, r1
 800ac88:	3230      	adds	r2, #48	; 0x30
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	e00a      	b.n	800aca6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	0f1b      	lsrs	r3, r3, #28
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	440b      	add	r3, r1
 800aca0:	3237      	adds	r2, #55	; 0x37
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	011b      	lsls	r3, r3, #4
 800acaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	3301      	adds	r3, #1
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	4413      	add	r3, r2
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	3301      	adds	r3, #1
 800acbe:	75fb      	strb	r3, [r7, #23]
 800acc0:	7dfa      	ldrb	r2, [r7, #23]
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d3d3      	bcc.n	800ac70 <IntToUnicode+0x18>
  }
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b0ae      	sub	sp, #184	; 0xb8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	605a      	str	r2, [r3, #4]
 800acea:	609a      	str	r2, [r3, #8]
 800acec:	60da      	str	r2, [r3, #12]
 800acee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800acf0:	f107 0314 	add.w	r3, r7, #20
 800acf4:	2290      	movs	r2, #144	; 0x90
 800acf6:	2100      	movs	r1, #0
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fba5 	bl	800b448 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad06:	d151      	bne.n	800adac <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ad08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f8 fa31 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ad24:	f7f5 fdd2 	bl	80008cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad28:	4b22      	ldr	r3, [pc, #136]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	6313      	str	r3, [r2, #48]	; 0x30
 800ad34:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad54:	2303      	movs	r3, #3
 800ad56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ad64:	4619      	mov	r1, r3
 800ad66:	4814      	ldr	r0, [pc, #80]	; (800adb8 <HAL_PCD_MspInit+0xe0>)
 800ad68:	f7f6 f830 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad6c:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	4a10      	ldr	r2, [pc, #64]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad76:	6353      	str	r3, [r2, #52]	; 0x34
 800ad78:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad88:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad8e:	6453      	str	r3, [r2, #68]	; 0x44
 800ad90:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <HAL_PCD_MspInit+0xdc>)
 800ad92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad98:	60bb      	str	r3, [r7, #8]
 800ad9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2105      	movs	r1, #5
 800ada0:	2043      	movs	r0, #67	; 0x43
 800ada2:	f7f5 ffe9 	bl	8000d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ada6:	2043      	movs	r0, #67	; 0x43
 800ada8:	f7f6 f802 	bl	8000db0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800adac:	bf00      	nop
 800adae:	37b8      	adds	r7, #184	; 0xb8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	40023800 	.word	0x40023800
 800adb8:	40020000 	.word	0x40020000

0800adbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fb faab 	bl	800632e <USBD_LL_SetupStage>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800adf2:	78fa      	ldrb	r2, [r7, #3]
 800adf4:	6879      	ldr	r1, [r7, #4]
 800adf6:	4613      	mov	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	440b      	add	r3, r1
 800ae00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f7fb fae5 	bl	80063d8 <USBD_LL_DataOutStage>
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ae28:	78fa      	ldrb	r2, [r7, #3]
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	334c      	adds	r3, #76	; 0x4c
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f7fb fb7e 	bl	800653e <USBD_LL_DataInStage>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fb fcb2 	bl	80067c2 <USBD_LL_SOF>
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]
 800ae7e:	e008      	b.n	800ae92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d102      	bne.n	800ae8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e001      	b.n	800ae92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae8e:	f7f5 fd1d 	bl	80008cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae98:	7bfa      	ldrb	r2, [r7, #15]
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fb fc52 	bl	8006746 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fb fbfa 	bl	80066a2 <USBD_LL_Reset>
}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fb fc4d 	bl	8006766 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6812      	ldr	r2, [r2, #0]
 800aeda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <HAL_PCD_SuspendCallback+0x48>)
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	4a03      	ldr	r2, [pc, #12]	; (800af00 <HAL_PCD_SuspendCallback+0x48>)
 800aef2:	f043 0306 	orr.w	r3, r3, #6
 800aef6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	e000ed00 	.word	0xe000ed00

0800af04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af12:	4618      	mov	r0, r3
 800af14:	f7fb fc3d 	bl	8006792 <USBD_LL_Resume>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af32:	78fa      	ldrb	r2, [r7, #3]
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7fb fc95 	bl	8006866 <USBD_LL_IsoOUTIncomplete>
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af56:	78fa      	ldrb	r2, [r7, #3]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fb fc51 	bl	8006802 <USBD_LL_IsoINIncomplete>
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af76:	4618      	mov	r0, r3
 800af78:	f7fb fca7 	bl	80068ca <USBD_LL_DevConnected>
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af92:	4618      	mov	r0, r3
 800af94:	f7fb fca4 	bl	80068e0 <USBD_LL_DevDisconnected>
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d13c      	bne.n	800b02a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800afb0:	4a20      	ldr	r2, [pc, #128]	; (800b034 <USBD_LL_Init+0x94>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a1e      	ldr	r2, [pc, #120]	; (800b034 <USBD_LL_Init+0x94>)
 800afbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800afc0:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <USBD_LL_Init+0x94>)
 800afc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800afc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <USBD_LL_Init+0x94>)
 800afca:	2206      	movs	r2, #6
 800afcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800afce:	4b19      	ldr	r3, [pc, #100]	; (800b034 <USBD_LL_Init+0x94>)
 800afd0:	2202      	movs	r2, #2
 800afd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afd4:	4b17      	ldr	r3, [pc, #92]	; (800b034 <USBD_LL_Init+0x94>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afda:	4b16      	ldr	r3, [pc, #88]	; (800b034 <USBD_LL_Init+0x94>)
 800afdc:	2202      	movs	r2, #2
 800afde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afe0:	4b14      	ldr	r3, [pc, #80]	; (800b034 <USBD_LL_Init+0x94>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800afe6:	4b13      	ldr	r3, [pc, #76]	; (800b034 <USBD_LL_Init+0x94>)
 800afe8:	2200      	movs	r2, #0
 800afea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <USBD_LL_Init+0x94>)
 800afee:	2200      	movs	r2, #0
 800aff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aff2:	4b10      	ldr	r3, [pc, #64]	; (800b034 <USBD_LL_Init+0x94>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aff8:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <USBD_LL_Init+0x94>)
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800affe:	480d      	ldr	r0, [pc, #52]	; (800b034 <USBD_LL_Init+0x94>)
 800b000:	f7f6 f8c3 	bl	800118a <HAL_PCD_Init>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b00a:	f7f5 fc5f 	bl	80008cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b00e:	2180      	movs	r1, #128	; 0x80
 800b010:	4808      	ldr	r0, [pc, #32]	; (800b034 <USBD_LL_Init+0x94>)
 800b012:	f7f7 fb3e 	bl	8002692 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b016:	2240      	movs	r2, #64	; 0x40
 800b018:	2100      	movs	r1, #0
 800b01a:	4806      	ldr	r0, [pc, #24]	; (800b034 <USBD_LL_Init+0x94>)
 800b01c:	f7f7 faf2 	bl	8002604 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b020:	2280      	movs	r2, #128	; 0x80
 800b022:	2101      	movs	r1, #1
 800b024:	4803      	ldr	r0, [pc, #12]	; (800b034 <USBD_LL_Init+0x94>)
 800b026:	f7f7 faed 	bl	8002604 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	200066dc 	.word	0x200066dc

0800b038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f6 f9bf 	bl	80013d2 <HAL_PCD_Start>
 800b054:	4603      	mov	r3, r0
 800b056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 f97e 	bl	800b35c <USBD_Get_USB_Status>
 800b060:	4603      	mov	r3, r0
 800b062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b064:	7bbb      	ldrb	r3, [r7, #14]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	4608      	mov	r0, r1
 800b078:	4611      	mov	r1, r2
 800b07a:	461a      	mov	r2, r3
 800b07c:	4603      	mov	r3, r0
 800b07e:	70fb      	strb	r3, [r7, #3]
 800b080:	460b      	mov	r3, r1
 800b082:	70bb      	strb	r3, [r7, #2]
 800b084:	4613      	mov	r3, r2
 800b086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b096:	78bb      	ldrb	r3, [r7, #2]
 800b098:	883a      	ldrh	r2, [r7, #0]
 800b09a:	78f9      	ldrb	r1, [r7, #3]
 800b09c:	f7f6 feac 	bl	8001df8 <HAL_PCD_EP_Open>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f958 	bl	800b35c <USBD_Get_USB_Status>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0d4:	78fa      	ldrb	r2, [r7, #3]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f6 fef5 	bl	8001ec8 <HAL_PCD_EP_Close>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f939 	bl	800b35c <USBD_Get_USB_Status>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b112:	78fa      	ldrb	r2, [r7, #3]
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7f6 ffcd 	bl	80020b6 <HAL_PCD_EP_SetStall>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f91a 	bl	800b35c <USBD_Get_USB_Status>
 800b128:	4603      	mov	r3, r0
 800b12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b150:	78fa      	ldrb	r2, [r7, #3]
 800b152:	4611      	mov	r1, r2
 800b154:	4618      	mov	r0, r3
 800b156:	f7f7 f812 	bl	800217e <HAL_PCD_EP_ClrStall>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	4618      	mov	r0, r3
 800b162:	f000 f8fb 	bl	800b35c <USBD_Get_USB_Status>
 800b166:	4603      	mov	r3, r0
 800b168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b186:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	da0b      	bge.n	800b1a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b190:	78fb      	ldrb	r3, [r7, #3]
 800b192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	4613      	mov	r3, r2
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	333e      	adds	r3, #62	; 0x3e
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	e00b      	b.n	800b1c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1a8:	78fb      	ldrb	r3, [r7, #3]
 800b1aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ae:	68f9      	ldr	r1, [r7, #12]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b1be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f6 fddf 	bl	8001dae <HAL_PCD_SetAddress>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f8b0 	bl	800b35c <USBD_Get_USB_Status>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b200:	7bbb      	ldrb	r3, [r7, #14]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b086      	sub	sp, #24
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	460b      	mov	r3, r1
 800b218:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b228:	7af9      	ldrb	r1, [r7, #11]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	f7f6 fef8 	bl	8002022 <HAL_PCD_EP_Transmit>
 800b232:	4603      	mov	r3, r0
 800b234:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 f88f 	bl	800b35c <USBD_Get_USB_Status>
 800b23e:	4603      	mov	r3, r0
 800b240:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b242:	7dbb      	ldrb	r3, [r7, #22]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	607a      	str	r2, [r7, #4]
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	460b      	mov	r3, r1
 800b25a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b26a:	7af9      	ldrb	r1, [r7, #11]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	f7f6 fe74 	bl	8001f5c <HAL_PCD_EP_Receive>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 f86e 	bl	800b35c <USBD_Get_USB_Status>
 800b280:	4603      	mov	r3, r0
 800b282:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b284:	7dbb      	ldrb	r3, [r7, #22]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2a0:	78fa      	ldrb	r2, [r7, #3]
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f6 fea4 	bl	8001ff2 <HAL_PCD_EP_GetRxCount>
 800b2aa:	4603      	mov	r3, r0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <HAL_PCDEx_LPM_Callback+0x18>
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d01f      	beq.n	800b30a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b2ca:	e03b      	b.n	800b344 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d007      	beq.n	800b2e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2d4:	f000 f83c 	bl	800b350 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <HAL_PCDEx_LPM_Callback+0x98>)
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	4a1b      	ldr	r2, [pc, #108]	; (800b34c <HAL_PCDEx_LPM_Callback+0x98>)
 800b2de:	f023 0306 	bic.w	r3, r3, #6
 800b2e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6812      	ldr	r2, [r2, #0]
 800b2f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2f6:	f023 0301 	bic.w	r3, r3, #1
 800b2fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b302:	4618      	mov	r0, r3
 800b304:	f7fb fa45 	bl	8006792 <USBD_LL_Resume>
    break;
 800b308:	e01c      	b.n	800b344 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	6812      	ldr	r2, [r2, #0]
 800b318:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b31c:	f043 0301 	orr.w	r3, r3, #1
 800b320:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fb fa1c 	bl	8006766 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <HAL_PCDEx_LPM_Callback+0x98>)
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	4a04      	ldr	r2, [pc, #16]	; (800b34c <HAL_PCDEx_LPM_Callback+0x98>)
 800b33c:	f043 0306 	orr.w	r3, r3, #6
 800b340:	6113      	str	r3, [r2, #16]
    break;
 800b342:	bf00      	nop
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	e000ed00 	.word	0xe000ed00

0800b350 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b354:	f7f5 f9b4 	bl	80006c0 <SystemClock_Config>
}
 800b358:	bf00      	nop
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d817      	bhi.n	800b3a0 <USBD_Get_USB_Status+0x44>
 800b370:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <USBD_Get_USB_Status+0x1c>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b389 	.word	0x0800b389
 800b37c:	0800b38f 	.word	0x0800b38f
 800b380:	0800b395 	.word	0x0800b395
 800b384:	0800b39b 	.word	0x0800b39b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
    break;
 800b38c:	e00b      	b.n	800b3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b38e:	2303      	movs	r3, #3
 800b390:	73fb      	strb	r3, [r7, #15]
    break;
 800b392:	e008      	b.n	800b3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b394:	2301      	movs	r3, #1
 800b396:	73fb      	strb	r3, [r7, #15]
    break;
 800b398:	e005      	b.n	800b3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	73fb      	strb	r3, [r7, #15]
    break;
 800b39e:	e002      	b.n	800b3a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a4:	bf00      	nop
  }
  return usb_status;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <__errno>:
 800b3b4:	4b01      	ldr	r3, [pc, #4]	; (800b3bc <__errno+0x8>)
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20000110 	.word	0x20000110

0800b3c0 <__libc_init_array>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4d0d      	ldr	r5, [pc, #52]	; (800b3f8 <__libc_init_array+0x38>)
 800b3c4:	4c0d      	ldr	r4, [pc, #52]	; (800b3fc <__libc_init_array+0x3c>)
 800b3c6:	1b64      	subs	r4, r4, r5
 800b3c8:	10a4      	asrs	r4, r4, #2
 800b3ca:	2600      	movs	r6, #0
 800b3cc:	42a6      	cmp	r6, r4
 800b3ce:	d109      	bne.n	800b3e4 <__libc_init_array+0x24>
 800b3d0:	4d0b      	ldr	r5, [pc, #44]	; (800b400 <__libc_init_array+0x40>)
 800b3d2:	4c0c      	ldr	r4, [pc, #48]	; (800b404 <__libc_init_array+0x44>)
 800b3d4:	f000 f9a6 	bl	800b724 <_init>
 800b3d8:	1b64      	subs	r4, r4, r5
 800b3da:	10a4      	asrs	r4, r4, #2
 800b3dc:	2600      	movs	r6, #0
 800b3de:	42a6      	cmp	r6, r4
 800b3e0:	d105      	bne.n	800b3ee <__libc_init_array+0x2e>
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e8:	4798      	blx	r3
 800b3ea:	3601      	adds	r6, #1
 800b3ec:	e7ee      	b.n	800b3cc <__libc_init_array+0xc>
 800b3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f2:	4798      	blx	r3
 800b3f4:	3601      	adds	r6, #1
 800b3f6:	e7f2      	b.n	800b3de <__libc_init_array+0x1e>
 800b3f8:	0800b8a0 	.word	0x0800b8a0
 800b3fc:	0800b8a0 	.word	0x0800b8a0
 800b400:	0800b8a0 	.word	0x0800b8a0
 800b404:	0800b8a4 	.word	0x0800b8a4

0800b408 <__retarget_lock_acquire_recursive>:
 800b408:	4770      	bx	lr

0800b40a <__retarget_lock_release_recursive>:
 800b40a:	4770      	bx	lr

0800b40c <malloc>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <malloc+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 b88d 	b.w	800b530 <_malloc_r>
 800b416:	bf00      	nop
 800b418:	20000110 	.word	0x20000110

0800b41c <free>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <free+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f000 b819 	b.w	800b458 <_free_r>
 800b426:	bf00      	nop
 800b428:	20000110 	.word	0x20000110

0800b42c <memcpy>:
 800b42c:	440a      	add	r2, r1
 800b42e:	4291      	cmp	r1, r2
 800b430:	f100 33ff 	add.w	r3, r0, #4294967295
 800b434:	d100      	bne.n	800b438 <memcpy+0xc>
 800b436:	4770      	bx	lr
 800b438:	b510      	push	{r4, lr}
 800b43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b442:	4291      	cmp	r1, r2
 800b444:	d1f9      	bne.n	800b43a <memcpy+0xe>
 800b446:	bd10      	pop	{r4, pc}

0800b448 <memset>:
 800b448:	4402      	add	r2, r0
 800b44a:	4603      	mov	r3, r0
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d100      	bne.n	800b452 <memset+0xa>
 800b450:	4770      	bx	lr
 800b452:	f803 1b01 	strb.w	r1, [r3], #1
 800b456:	e7f9      	b.n	800b44c <memset+0x4>

0800b458 <_free_r>:
 800b458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d044      	beq.n	800b4e8 <_free_r+0x90>
 800b45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b462:	9001      	str	r0, [sp, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f1a1 0404 	sub.w	r4, r1, #4
 800b46a:	bfb8      	it	lt
 800b46c:	18e4      	addlt	r4, r4, r3
 800b46e:	f000 f94d 	bl	800b70c <__malloc_lock>
 800b472:	4a1e      	ldr	r2, [pc, #120]	; (800b4ec <_free_r+0x94>)
 800b474:	9801      	ldr	r0, [sp, #4]
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	b933      	cbnz	r3, 800b488 <_free_r+0x30>
 800b47a:	6063      	str	r3, [r4, #4]
 800b47c:	6014      	str	r4, [r2, #0]
 800b47e:	b003      	add	sp, #12
 800b480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b484:	f000 b948 	b.w	800b718 <__malloc_unlock>
 800b488:	42a3      	cmp	r3, r4
 800b48a:	d908      	bls.n	800b49e <_free_r+0x46>
 800b48c:	6825      	ldr	r5, [r4, #0]
 800b48e:	1961      	adds	r1, r4, r5
 800b490:	428b      	cmp	r3, r1
 800b492:	bf01      	itttt	eq
 800b494:	6819      	ldreq	r1, [r3, #0]
 800b496:	685b      	ldreq	r3, [r3, #4]
 800b498:	1949      	addeq	r1, r1, r5
 800b49a:	6021      	streq	r1, [r4, #0]
 800b49c:	e7ed      	b.n	800b47a <_free_r+0x22>
 800b49e:	461a      	mov	r2, r3
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	b10b      	cbz	r3, 800b4a8 <_free_r+0x50>
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	d9fa      	bls.n	800b49e <_free_r+0x46>
 800b4a8:	6811      	ldr	r1, [r2, #0]
 800b4aa:	1855      	adds	r5, r2, r1
 800b4ac:	42a5      	cmp	r5, r4
 800b4ae:	d10b      	bne.n	800b4c8 <_free_r+0x70>
 800b4b0:	6824      	ldr	r4, [r4, #0]
 800b4b2:	4421      	add	r1, r4
 800b4b4:	1854      	adds	r4, r2, r1
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	d1e0      	bne.n	800b47e <_free_r+0x26>
 800b4bc:	681c      	ldr	r4, [r3, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	6053      	str	r3, [r2, #4]
 800b4c2:	4421      	add	r1, r4
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	e7da      	b.n	800b47e <_free_r+0x26>
 800b4c8:	d902      	bls.n	800b4d0 <_free_r+0x78>
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	6003      	str	r3, [r0, #0]
 800b4ce:	e7d6      	b.n	800b47e <_free_r+0x26>
 800b4d0:	6825      	ldr	r5, [r4, #0]
 800b4d2:	1961      	adds	r1, r4, r5
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf04      	itt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	bf04      	itt	eq
 800b4e0:	1949      	addeq	r1, r1, r5
 800b4e2:	6021      	streq	r1, [r4, #0]
 800b4e4:	6054      	str	r4, [r2, #4]
 800b4e6:	e7ca      	b.n	800b47e <_free_r+0x26>
 800b4e8:	b003      	add	sp, #12
 800b4ea:	bd30      	pop	{r4, r5, pc}
 800b4ec:	20006be8 	.word	0x20006be8

0800b4f0 <sbrk_aligned>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	4e0e      	ldr	r6, [pc, #56]	; (800b52c <sbrk_aligned+0x3c>)
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	6831      	ldr	r1, [r6, #0]
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	b911      	cbnz	r1, 800b502 <sbrk_aligned+0x12>
 800b4fc:	f000 f8f6 	bl	800b6ec <_sbrk_r>
 800b500:	6030      	str	r0, [r6, #0]
 800b502:	4621      	mov	r1, r4
 800b504:	4628      	mov	r0, r5
 800b506:	f000 f8f1 	bl	800b6ec <_sbrk_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d00a      	beq.n	800b524 <sbrk_aligned+0x34>
 800b50e:	1cc4      	adds	r4, r0, #3
 800b510:	f024 0403 	bic.w	r4, r4, #3
 800b514:	42a0      	cmp	r0, r4
 800b516:	d007      	beq.n	800b528 <sbrk_aligned+0x38>
 800b518:	1a21      	subs	r1, r4, r0
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 f8e6 	bl	800b6ec <_sbrk_r>
 800b520:	3001      	adds	r0, #1
 800b522:	d101      	bne.n	800b528 <sbrk_aligned+0x38>
 800b524:	f04f 34ff 	mov.w	r4, #4294967295
 800b528:	4620      	mov	r0, r4
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	20006bec 	.word	0x20006bec

0800b530 <_malloc_r>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	1ccd      	adds	r5, r1, #3
 800b536:	f025 0503 	bic.w	r5, r5, #3
 800b53a:	3508      	adds	r5, #8
 800b53c:	2d0c      	cmp	r5, #12
 800b53e:	bf38      	it	cc
 800b540:	250c      	movcc	r5, #12
 800b542:	2d00      	cmp	r5, #0
 800b544:	4607      	mov	r7, r0
 800b546:	db01      	blt.n	800b54c <_malloc_r+0x1c>
 800b548:	42a9      	cmp	r1, r5
 800b54a:	d905      	bls.n	800b558 <_malloc_r+0x28>
 800b54c:	230c      	movs	r3, #12
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	2600      	movs	r6, #0
 800b552:	4630      	mov	r0, r6
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	4e2e      	ldr	r6, [pc, #184]	; (800b614 <_malloc_r+0xe4>)
 800b55a:	f000 f8d7 	bl	800b70c <__malloc_lock>
 800b55e:	6833      	ldr	r3, [r6, #0]
 800b560:	461c      	mov	r4, r3
 800b562:	bb34      	cbnz	r4, 800b5b2 <_malloc_r+0x82>
 800b564:	4629      	mov	r1, r5
 800b566:	4638      	mov	r0, r7
 800b568:	f7ff ffc2 	bl	800b4f0 <sbrk_aligned>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	4604      	mov	r4, r0
 800b570:	d14d      	bne.n	800b60e <_malloc_r+0xde>
 800b572:	6834      	ldr	r4, [r6, #0]
 800b574:	4626      	mov	r6, r4
 800b576:	2e00      	cmp	r6, #0
 800b578:	d140      	bne.n	800b5fc <_malloc_r+0xcc>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	4631      	mov	r1, r6
 800b57e:	4638      	mov	r0, r7
 800b580:	eb04 0803 	add.w	r8, r4, r3
 800b584:	f000 f8b2 	bl	800b6ec <_sbrk_r>
 800b588:	4580      	cmp	r8, r0
 800b58a:	d13a      	bne.n	800b602 <_malloc_r+0xd2>
 800b58c:	6821      	ldr	r1, [r4, #0]
 800b58e:	3503      	adds	r5, #3
 800b590:	1a6d      	subs	r5, r5, r1
 800b592:	f025 0503 	bic.w	r5, r5, #3
 800b596:	3508      	adds	r5, #8
 800b598:	2d0c      	cmp	r5, #12
 800b59a:	bf38      	it	cc
 800b59c:	250c      	movcc	r5, #12
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7ff ffa5 	bl	800b4f0 <sbrk_aligned>
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d02b      	beq.n	800b602 <_malloc_r+0xd2>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	442b      	add	r3, r5
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	e00e      	b.n	800b5d0 <_malloc_r+0xa0>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	1b52      	subs	r2, r2, r5
 800b5b6:	d41e      	bmi.n	800b5f6 <_malloc_r+0xc6>
 800b5b8:	2a0b      	cmp	r2, #11
 800b5ba:	d916      	bls.n	800b5ea <_malloc_r+0xba>
 800b5bc:	1961      	adds	r1, r4, r5
 800b5be:	42a3      	cmp	r3, r4
 800b5c0:	6025      	str	r5, [r4, #0]
 800b5c2:	bf18      	it	ne
 800b5c4:	6059      	strne	r1, [r3, #4]
 800b5c6:	6863      	ldr	r3, [r4, #4]
 800b5c8:	bf08      	it	eq
 800b5ca:	6031      	streq	r1, [r6, #0]
 800b5cc:	5162      	str	r2, [r4, r5]
 800b5ce:	604b      	str	r3, [r1, #4]
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f104 060b 	add.w	r6, r4, #11
 800b5d6:	f000 f89f 	bl	800b718 <__malloc_unlock>
 800b5da:	f026 0607 	bic.w	r6, r6, #7
 800b5de:	1d23      	adds	r3, r4, #4
 800b5e0:	1af2      	subs	r2, r6, r3
 800b5e2:	d0b6      	beq.n	800b552 <_malloc_r+0x22>
 800b5e4:	1b9b      	subs	r3, r3, r6
 800b5e6:	50a3      	str	r3, [r4, r2]
 800b5e8:	e7b3      	b.n	800b552 <_malloc_r+0x22>
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	bf0c      	ite	eq
 800b5f0:	6032      	streq	r2, [r6, #0]
 800b5f2:	605a      	strne	r2, [r3, #4]
 800b5f4:	e7ec      	b.n	800b5d0 <_malloc_r+0xa0>
 800b5f6:	4623      	mov	r3, r4
 800b5f8:	6864      	ldr	r4, [r4, #4]
 800b5fa:	e7b2      	b.n	800b562 <_malloc_r+0x32>
 800b5fc:	4634      	mov	r4, r6
 800b5fe:	6876      	ldr	r6, [r6, #4]
 800b600:	e7b9      	b.n	800b576 <_malloc_r+0x46>
 800b602:	230c      	movs	r3, #12
 800b604:	603b      	str	r3, [r7, #0]
 800b606:	4638      	mov	r0, r7
 800b608:	f000 f886 	bl	800b718 <__malloc_unlock>
 800b60c:	e7a1      	b.n	800b552 <_malloc_r+0x22>
 800b60e:	6025      	str	r5, [r4, #0]
 800b610:	e7de      	b.n	800b5d0 <_malloc_r+0xa0>
 800b612:	bf00      	nop
 800b614:	20006be8 	.word	0x20006be8

0800b618 <cleanup_glue>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	460c      	mov	r4, r1
 800b61c:	6809      	ldr	r1, [r1, #0]
 800b61e:	4605      	mov	r5, r0
 800b620:	b109      	cbz	r1, 800b626 <cleanup_glue+0xe>
 800b622:	f7ff fff9 	bl	800b618 <cleanup_glue>
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b62e:	f7ff bf13 	b.w	800b458 <_free_r>
	...

0800b634 <_reclaim_reent>:
 800b634:	4b2c      	ldr	r3, [pc, #176]	; (800b6e8 <_reclaim_reent+0xb4>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4283      	cmp	r3, r0
 800b63a:	b570      	push	{r4, r5, r6, lr}
 800b63c:	4604      	mov	r4, r0
 800b63e:	d051      	beq.n	800b6e4 <_reclaim_reent+0xb0>
 800b640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b642:	b143      	cbz	r3, 800b656 <_reclaim_reent+0x22>
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d14a      	bne.n	800b6e0 <_reclaim_reent+0xac>
 800b64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b64c:	6819      	ldr	r1, [r3, #0]
 800b64e:	b111      	cbz	r1, 800b656 <_reclaim_reent+0x22>
 800b650:	4620      	mov	r0, r4
 800b652:	f7ff ff01 	bl	800b458 <_free_r>
 800b656:	6961      	ldr	r1, [r4, #20]
 800b658:	b111      	cbz	r1, 800b660 <_reclaim_reent+0x2c>
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff fefc 	bl	800b458 <_free_r>
 800b660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b662:	b111      	cbz	r1, 800b66a <_reclaim_reent+0x36>
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff fef7 	bl	800b458 <_free_r>
 800b66a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b66c:	b111      	cbz	r1, 800b674 <_reclaim_reent+0x40>
 800b66e:	4620      	mov	r0, r4
 800b670:	f7ff fef2 	bl	800b458 <_free_r>
 800b674:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b676:	b111      	cbz	r1, 800b67e <_reclaim_reent+0x4a>
 800b678:	4620      	mov	r0, r4
 800b67a:	f7ff feed 	bl	800b458 <_free_r>
 800b67e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b680:	b111      	cbz	r1, 800b688 <_reclaim_reent+0x54>
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff fee8 	bl	800b458 <_free_r>
 800b688:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b68a:	b111      	cbz	r1, 800b692 <_reclaim_reent+0x5e>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f7ff fee3 	bl	800b458 <_free_r>
 800b692:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b694:	b111      	cbz	r1, 800b69c <_reclaim_reent+0x68>
 800b696:	4620      	mov	r0, r4
 800b698:	f7ff fede 	bl	800b458 <_free_r>
 800b69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b69e:	b111      	cbz	r1, 800b6a6 <_reclaim_reent+0x72>
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff fed9 	bl	800b458 <_free_r>
 800b6a6:	69a3      	ldr	r3, [r4, #24]
 800b6a8:	b1e3      	cbz	r3, 800b6e4 <_reclaim_reent+0xb0>
 800b6aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	4798      	blx	r3
 800b6b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6b2:	b1b9      	cbz	r1, 800b6e4 <_reclaim_reent+0xb0>
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6ba:	f7ff bfad 	b.w	800b618 <cleanup_glue>
 800b6be:	5949      	ldr	r1, [r1, r5]
 800b6c0:	b941      	cbnz	r1, 800b6d4 <_reclaim_reent+0xa0>
 800b6c2:	3504      	adds	r5, #4
 800b6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c6:	2d80      	cmp	r5, #128	; 0x80
 800b6c8:	68d9      	ldr	r1, [r3, #12]
 800b6ca:	d1f8      	bne.n	800b6be <_reclaim_reent+0x8a>
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff fec3 	bl	800b458 <_free_r>
 800b6d2:	e7ba      	b.n	800b64a <_reclaim_reent+0x16>
 800b6d4:	680e      	ldr	r6, [r1, #0]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7ff febe 	bl	800b458 <_free_r>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	e7ef      	b.n	800b6c0 <_reclaim_reent+0x8c>
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	e7ef      	b.n	800b6c4 <_reclaim_reent+0x90>
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000110 	.word	0x20000110

0800b6ec <_sbrk_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4d06      	ldr	r5, [pc, #24]	; (800b708 <_sbrk_r+0x1c>)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f5 f9ba 	bl	8000a70 <_sbrk>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_sbrk_r+0x1a>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_sbrk_r+0x1a>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	20006bf0 	.word	0x20006bf0

0800b70c <__malloc_lock>:
 800b70c:	4801      	ldr	r0, [pc, #4]	; (800b714 <__malloc_lock+0x8>)
 800b70e:	f7ff be7b 	b.w	800b408 <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	20006be4 	.word	0x20006be4

0800b718 <__malloc_unlock>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__malloc_unlock+0x8>)
 800b71a:	f7ff be76 	b.w	800b40a <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	20006be4 	.word	0x20006be4

0800b724 <_init>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr

0800b730 <_fini>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	bf00      	nop
 800b734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b736:	bc08      	pop	{r3}
 800b738:	469e      	mov	lr, r3
 800b73a:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080107ec  080107ec  000207ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109c4  080109c4  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080109c4  080109c4  000209c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109cc  080109cc  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109cc  080109cc  000209cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109d0  080109d0  000209d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080109d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08010bc8  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08010c68  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006e94  20000334  08010d08  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200071c8  08010d08  000371c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003674d  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006963  00000000  00000000  00066aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002780  00000000  00000000  0006d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024b8  00000000  00000000  0006fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a21d  00000000  00000000  00072050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033d50  00000000  00000000  0007c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001190de  00000000  00000000  000affbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c909b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aa18  00000000  00000000  001c90ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	080107d4 	.word	0x080107d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	080107d4 	.word	0x080107d4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f988 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f870 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fb30 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fb10 	bl	8000c54 <MX_DMA_Init>
  MX_CAN1_Init();
 8000634:	f000 f8da 	bl	80007ec <MX_CAN1_Init>
  MX_DAC_Init();
 8000638:	f000 f90c 	bl	8000854 <MX_DAC_Init>
  MX_ETH_Init();
 800063c:	f000 f934 	bl	80008a8 <MX_ETH_Init>
  MX_I2C1_Init();
 8000640:	f000 f980 	bl	8000944 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000644:	f000 f9be 	bl	80009c4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000648:	f000 f9f6 	bl	8000a38 <MX_SPI3_Init>
  MX_TIM1_Init();
 800064c:	f000 fa2e 	bl	8000aac <MX_TIM1_Init>
  MX_UART7_Init();
 8000650:	f000 fad0 	bl	8000bf4 <MX_UART7_Init>

  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <main+0xac>)
 8000658:	f001 fbc8 	bl	8001dec <HAL_DAC_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	491a      	ldr	r1, [pc, #104]	; (80006c8 <main+0xb0>)
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <main+0xb4>)
 8000662:	f008 f995 	bl	8008990 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000666:	f00c f931 	bl	800c8cc <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 800066a:	f009 fe31 	bl	800a2d0 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <main+0xb8>)
 8000670:	2100      	movs	r1, #0
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0xbc>)
 8000674:	f00c f994 	bl	800c9a0 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <main+0xc0>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <main+0xc4>)
 8000680:	2100      	movs	r1, #0
 8000682:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0xc8>)
 8000684:	f00c f98c 	bl	800c9a0 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <main+0xcc>)
 800068c:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <main+0xd0>)
 8000690:	2100      	movs	r1, #0
 8000692:	4816      	ldr	r0, [pc, #88]	; (80006ec <main+0xd4>)
 8000694:	f00c f984 	bl	800c9a0 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <main+0xd8>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <main+0xdc>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <main+0xe0>)
 80006a4:	f00c f97c 	bl	800c9a0 <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <main+0xe4>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <main+0xe8>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0xec>)
 80006b4:	f00c f974 	bl	800c9a0 <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <main+0xf0>)
 80006bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006be:	f00c f939 	bl	800c934 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0xaa>
 80006c4:	200003b0 	.word	0x200003b0
 80006c8:	200006dc 	.word	0x200006dc
 80006cc:	200005dc 	.word	0x200005dc
 80006d0:	08010890 	.word	0x08010890
 80006d4:	08000f1d 	.word	0x08000f1d
 80006d8:	200006c4 	.word	0x200006c4
 80006dc:	080108b4 	.word	0x080108b4
 80006e0:	08000f31 	.word	0x08000f31
 80006e4:	200006c8 	.word	0x200006c8
 80006e8:	080108d8 	.word	0x080108d8
 80006ec:	08000f41 	.word	0x08000f41
 80006f0:	200006cc 	.word	0x200006cc
 80006f4:	080108fc 	.word	0x080108fc
 80006f8:	08000fa9 	.word	0x08000fa9
 80006fc:	200006d0 	.word	0x200006d0
 8000700:	08010920 	.word	0x08010920
 8000704:	08000fb9 	.word	0x08000fb9
 8000708:	200006d4 	.word	0x200006d4

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00f feec 	bl	80104f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <SystemClock_Config+0xd8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xd8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000750:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <SystemClock_Config+0xdc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xdc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f99d 	bl	8004ad0 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800079c:	f000 fc26 	bl	8000fec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a0:	f004 f946 	bl	8004a30 <HAL_PWREx_EnableOverDrive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007aa:	f000 fc1f 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2103      	movs	r1, #3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fc2e 	bl	800502c <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007d6:	f000 fc09 	bl	8000fec <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_CAN1_Init+0x60>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_CAN1_Init+0x64>)
 80007f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_CAN1_Init+0x60>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_CAN1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_CAN1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_CAN1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_CAN1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_CAN1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_CAN1_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_CAN1_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_CAN1_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_CAN1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_CAN1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_CAN1_Init+0x60>)
 800083a:	f001 f8d7 	bl	80019ec <HAL_CAN_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fbd2 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000388 	.word	0x20000388
 8000850:	40006400 	.word	0x40006400

08000854 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DAC_Init+0x4c>)
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_DAC_Init+0x50>)
 8000866:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_DAC_Init+0x4c>)
 800086a:	f001 fa9d 	bl	8001da8 <HAL_DAC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000874:	f000 fbba 	bl	8000fec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_DAC_Init+0x4c>)
 8000888:	f001 fb8b 	bl	8001fa2 <HAL_DAC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000892:	f000 fbab 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200003b0 	.word	0x200003b0
 80008a4:	40007400 	.word	0x40007400

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <MX_ETH_Init+0x88>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_ETH_Init+0x8c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ETH_Init+0x8c>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ETH_Init+0x8c>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_ETH_Init+0x8c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ETH_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_ETH_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ETH_Init+0x84>)
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_ETH_Init+0x8c>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_ETH_Init+0x84>)
 80008de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ETH_Init+0x84>)
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <MX_ETH_Init+0x90>)
 80008e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_ETH_Init+0x84>)
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_ETH_Init+0x94>)
 80008ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_ETH_Init+0x84>)
 80008f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x84>)
 80008fa:	f001 ffb5 	bl	8002868 <HAL_ETH_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 fb72 	bl	8000fec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000908:	2238      	movs	r2, #56	; 0x38
 800090a:	2100      	movs	r1, #0
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ETH_Init+0x98>)
 800090e:	f00f fdf3 	bl	80104f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_ETH_Init+0x98>)
 8000914:	2221      	movs	r2, #33	; 0x21
 8000916:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_ETH_Init+0x98>)
 800091a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800091e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_ETH_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200003c4 	.word	0x200003c4
 8000930:	40028000 	.word	0x40028000
 8000934:	2000075c 	.word	0x2000075c
 8000938:	20000294 	.word	0x20000294
 800093c:	200001f4 	.word	0x200001f4
 8000940:	20000350 	.word	0x20000350

08000944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_I2C1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x7c>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_I2C1_Init+0x74>)
 800095c:	2201      	movs	r2, #1
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000980:	f002 fc76 	bl	8003270 <HAL_I2C_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800098a:	f000 fb2f 	bl	8000fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000992:	f002 fcfd 	bl	8003390 <HAL_I2CEx_ConfigAnalogFilter>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 fb26 	bl	8000fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_I2C1_Init+0x74>)
 80009a4:	f002 fd3f 	bl	8003426 <HAL_I2CEx_ConfigDigitalFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 fb1d 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000474 	.word	0x20000474
 80009bc:	40005400 	.word	0x40005400
 80009c0:	20303e5d 	.word	0x20303e5d

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009ca:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <MX_SPI1_Init+0x70>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_SPI1_Init+0x6c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x6c>)
 8000a1e:	f005 f985 	bl	8005d2c <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a28:	f000 fae0 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200004c8 	.word	0x200004c8
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_SPI3_Init+0x70>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a92:	f005 f94b 	bl	8005d2c <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a9c:	f000 faa6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000052c 	.word	0x2000052c
 8000aa8:	40003c00 	.word	0x40003c00

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	; 0x40
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae8:	4b40      	ldr	r3, [pc, #256]	; (8000bec <MX_TIM1_Init+0x140>)
 8000aea:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <MX_TIM1_Init+0x144>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <MX_TIM1_Init+0x140>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <MX_TIM1_Init+0x140>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <MX_TIM1_Init+0x140>)
 8000afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b08:	4b38      	ldr	r3, [pc, #224]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b14:	4835      	ldr	r0, [pc, #212]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b16:	f005 f9b4 	bl	8005e82 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b20:	f000 fa64 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482e      	ldr	r0, [pc, #184]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b32:	f006 f817 	bl	8006b64 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b3c:	f000 fa56 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b40:	482a      	ldr	r0, [pc, #168]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b42:	f005 fa6d 	bl	8006020 <HAL_TIM_IC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b4c:	f000 fa4e 	bl	8000fec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b50:	2304      	movs	r3, #4
 8000b52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b54:	2350      	movs	r3, #80	; 0x50
 8000b56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b6c:	f006 f8c4 	bl	8006cf8 <HAL_TIM_SlaveConfigSynchro>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b76:	f000 fa39 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4619      	mov	r1, r3
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_TIM1_Init+0x140>)
 8000b94:	f005 ff49 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b9e:	f000 fa25 	bl	8000fec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_TIM1_Init+0x140>)
 8000bb4:	f005 ff39 	bl	8006a2a <HAL_TIM_IC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bbe:	f000 fa15 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_TIM1_Init+0x140>)
 8000bd4:	f006 fc52 	bl	800747c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000bde:	f000 fa05 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3740      	adds	r7, #64	; 0x40
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000590 	.word	0x20000590
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_UART7_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_UART7_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_UART7_Init+0x58>)
 8000c38:	f006 fccc 	bl	80075d4 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 f9d3 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200005dc 	.word	0x200005dc
 8000c50:	40007800 	.word	0x40007800

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	200e      	movs	r0, #14
 8000c78:	f001 f86c 	bl	8001d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c7c:	200e      	movs	r0, #14
 8000c7e:	f001 f885 	bl	8001d8c <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b95      	ldr	r3, [pc, #596]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a94      	ldr	r2, [pc, #592]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b92      	ldr	r3, [pc, #584]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a8e      	ldr	r2, [pc, #568]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b8c      	ldr	r3, [pc, #560]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b89      	ldr	r3, [pc, #548]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a88      	ldr	r2, [pc, #544]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b86      	ldr	r3, [pc, #536]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b83      	ldr	r3, [pc, #524]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a82      	ldr	r2, [pc, #520]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b80      	ldr	r3, [pc, #512]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b7d      	ldr	r3, [pc, #500]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a7c      	ldr	r2, [pc, #496]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b7a      	ldr	r3, [pc, #488]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b77      	ldr	r3, [pc, #476]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a76      	ldr	r2, [pc, #472]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b74      	ldr	r3, [pc, #464]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d36:	4b71      	ldr	r3, [pc, #452]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a70      	ldr	r2, [pc, #448]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b6e      	ldr	r3, [pc, #440]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a6a      	ldr	r2, [pc, #424]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b68      	ldr	r3, [pc, #416]	; (8000efc <MX_GPIO_Init+0x26c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	4865      	ldr	r0, [pc, #404]	; (8000f00 <MX_GPIO_Init+0x270>)
 8000d6c:	f002 fa66 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000d70:	2200      	movs	r2, #0
 8000d72:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000d76:	4863      	ldr	r0, [pc, #396]	; (8000f04 <MX_GPIO_Init+0x274>)
 8000d78:	f002 fa60 	bl	800323c <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	210c      	movs	r1, #12
 8000d80:	4861      	ldr	r0, [pc, #388]	; (8000f08 <MX_GPIO_Init+0x278>)
 8000d82:	f002 fa5b 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000d8c:	485f      	ldr	r0, [pc, #380]	; (8000f0c <MX_GPIO_Init+0x27c>)
 8000d8e:	f002 fa55 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	485d      	ldr	r0, [pc, #372]	; (8000f10 <MX_GPIO_Init+0x280>)
 8000d9a:	f002 fa4f 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2174      	movs	r1, #116	; 0x74
 8000da2:	485c      	ldr	r0, [pc, #368]	; (8000f14 <MX_GPIO_Init+0x284>)
 8000da4:	f002 fa4a 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000da8:	f241 0308 	movw	r3, #4104	; 0x1008
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4856      	ldr	r0, [pc, #344]	; (8000f18 <MX_GPIO_Init+0x288>)
 8000dbe:	f002 f879 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000dc2:	f248 0305 	movw	r3, #32773	; 0x8005
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	484e      	ldr	r0, [pc, #312]	; (8000f10 <MX_GPIO_Init+0x280>)
 8000dd8:	f002 f86c 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4843      	ldr	r0, [pc, #268]	; (8000f00 <MX_GPIO_Init+0x270>)
 8000df4:	f002 f85e 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4840      	ldr	r0, [pc, #256]	; (8000f0c <MX_GPIO_Init+0x27c>)
 8000e0c:	f002 f852 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <MX_GPIO_Init+0x274>)
 8000e24:	f002 f846 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000e28:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e2e:	2311      	movs	r3, #17
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4830      	ldr	r0, [pc, #192]	; (8000f04 <MX_GPIO_Init+0x274>)
 8000e42:	f002 f837 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e4a:	2311      	movs	r3, #17
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	482a      	ldr	r0, [pc, #168]	; (8000f08 <MX_GPIO_Init+0x278>)
 8000e5e:	f002 f829 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e62:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4824      	ldr	r0, [pc, #144]	; (8000f0c <MX_GPIO_Init+0x27c>)
 8000e7c:	f002 f81a 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_GPIO_Init+0x280>)
 8000e9a:	f002 f80b 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <MX_GPIO_Init+0x284>)
 8000eb6:	f001 fffd 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000eba:	2370      	movs	r3, #112	; 0x70
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ebe:	2311      	movs	r3, #17
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4810      	ldr	r0, [pc, #64]	; (8000f14 <MX_GPIO_Init+0x284>)
 8000ed2:	f001 ffef 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_GPIO_Init+0x274>)
 8000eee:	f001 ffe1 	bl	8002eb4 <HAL_GPIO_Init>

}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40021000 	.word	0x40021000

08000f1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f24:	f00e fcfa 	bl	800f91c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f00b fddf 	bl	800caec <osDelay>
 8000f2e:	e7fb      	b.n	8000f28 <StartDefaultTask+0xc>

08000f30 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f00b fdd7 	bl	800caec <osDelay>
 8000f3e:	e7fb      	b.n	8000f38 <StartTask_gateway+0x8>

08000f40 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if( USB_MSGQ_Rx != NULL )
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <StartTask_controller+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d024      	beq.n	8000f9a <StartTask_controller+0x5a>
	  {

			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <StartTask_controller+0x64>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f107 010c 	add.w	r1, r7, #12
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f00b feee 	bl	800cd3c <osMessageQueueGet>
 8000f60:	6138      	str	r0, [r7, #16]

			if (status == osOK)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d118      	bne.n	8000f9a <StartTask_controller+0x5a>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00d      	b.n	8000f8a <StartTask_controller+0x4a>
				{
					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	4413      	add	r3, r2
 8000f76:	7819      	ldrb	r1, [r3, #0]
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d9ee      	bls.n	8000f6e <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f009 fa21 	bl	800a3dc <HiL_controller_read_message>
			}
	  }

	  osDelay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f00b fda6 	bl	800caec <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000fa0:	e7d2      	b.n	8000f48 <StartTask_controller+0x8>
 8000fa2:	bf00      	nop
 8000fa4:	200006d8 	.word	0x200006d8

08000fa8 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f00b fd9b 	bl	800caec <osDelay>
 8000fb6:	e7fb      	b.n	8000fb0 <StartTask_SHT20+0x8>

08000fb8 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f00b fd93 	bl	800caec <osDelay>
 8000fc6:	e7fb      	b.n	8000fc0 <StartTask_74HC595D+0x8>

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fcc3 	bl	8001964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40001000 	.word	0x40001000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	210f      	movs	r1, #15
 8001032:	f06f 0001 	mvn.w	r0, #1
 8001036:	f000 fe8d 	bl	8001d54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_CAN_MspInit+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d127      	bne.n	80010ba <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 8001070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_CAN_MspInit+0x80>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 800109a:	2303      	movs	r3, #3
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010aa:	2309      	movs	r3, #9
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_CAN_MspInit+0x84>)
 80010b6:	f001 fefd 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40006400 	.word	0x40006400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_DAC_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_DAC_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_DAC_MspInit+0x88>)
 80010f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_DAC_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8001122:	2310      	movs	r3, #16
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <HAL_DAC_MspInit+0x8c>)
 8001136:	f001 febd 	bl	8002eb4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	210f      	movs	r1, #15
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f000 fe08 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 fe21 	bl	8001d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40007400 	.word	0x40007400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_ETH_MspInit+0x158>)
 800117e:	4293      	cmp	r3, r2
 8001180:	f040 8096 	bne.w	80012b0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 800118a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b44      	ldr	r3, [pc, #272]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a40      	ldr	r2, [pc, #256]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a3a      	ldr	r2, [pc, #232]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 800121a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_ETH_MspInit+0x15c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123c:	230b      	movs	r3, #11
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <HAL_ETH_MspInit+0x160>)
 8001248:	f001 fe34 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800124c:	2386      	movs	r3, #134	; 0x86
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125c:	230b      	movs	r3, #11
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4817      	ldr	r0, [pc, #92]	; (80012c4 <HAL_ETH_MspInit+0x164>)
 8001268:	f001 fe24 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127e:	230b      	movs	r3, #11
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <HAL_ETH_MspInit+0x168>)
 800128a:	f001 fe13 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800128e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <HAL_ETH_MspInit+0x16c>)
 80012ac:	f001 fe02 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40028000 	.word	0x40028000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40021800 	.word	0x40021800

080012d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0ae      	sub	sp, #184	; 0xb8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2290      	movs	r2, #144	; 0x90
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00f f901 	bl	80104f8 <memset>
  if(hi2c->Instance==I2C1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_I2C_MspInit+0xb4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d13c      	bne.n	800137a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001304:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001306:	2300      	movs	r3, #0
 8001308:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4618      	mov	r0, r3
 8001310:	f004 f8e4 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800131a:	f7ff fe67 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 8001336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_I2C_MspInit+0xbc>)
 800135e:	f001 fda9 	bl	8002eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	37b8      	adds	r7, #184	; 0xb8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005400 	.word	0x40005400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_SPI_MspInit+0x148>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d144      	bne.n	800143c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a43      	ldr	r2, [pc, #268]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140a:	2305      	movs	r3, #5
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4832      	ldr	r0, [pc, #200]	; (80014e0 <HAL_SPI_MspInit+0x150>)
 8001416:	f001 fd4d 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800141a:	2308      	movs	r3, #8
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142a:	2305      	movs	r3, #5
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	482b      	ldr	r0, [pc, #172]	; (80014e4 <HAL_SPI_MspInit+0x154>)
 8001436:	f001 fd3d 	bl	8002eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800143a:	e049      	b.n	80014d0 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a29      	ldr	r2, [pc, #164]	; (80014e8 <HAL_SPI_MspInit+0x158>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d144      	bne.n	80014d0 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 800144c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_SPI_MspInit+0x14c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800148e:	2304      	movs	r3, #4
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800149e:	2307      	movs	r3, #7
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	480e      	ldr	r0, [pc, #56]	; (80014e4 <HAL_SPI_MspInit+0x154>)
 80014aa:	f001 fd03 	bl	8002eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014c0:	2306      	movs	r3, #6
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <HAL_SPI_MspInit+0x15c>)
 80014cc:	f001 fcf2 	bl	8002eb4 <HAL_GPIO_Init>
}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013000 	.word	0x40013000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40003c00 	.word	0x40003c00
 80014ec:	40020800 	.word	0x40020800

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_TIM_Base_MspInit+0x8c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d130      	bne.n	8001574 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_TIM_Base_MspInit+0x90>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x94>)
 8001560:	f001 fca8 	bl	8002eb4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2105      	movs	r1, #5
 8001568:	201b      	movs	r0, #27
 800156a:	f000 fbf3 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800156e:	201b      	movs	r0, #27
 8001570:	f000 fc0c 	bl	8001d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010000 	.word	0x40010000
 8001580:	40023800 	.word	0x40023800
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ae      	sub	sp, #184	; 0xb8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2290      	movs	r2, #144	; 0x90
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e ffa5 	bl	80104f8 <memset>
  if(huart->Instance==UART7)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <HAL_UART_MspInit+0x120>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d172      	bne.n	800169e <HAL_UART_MspInit+0x116>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 ff88 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f7ff fd0b 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_UART_MspInit+0x124>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 8001606:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800160a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001620:	2308      	movs	r3, #8
 8001622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001626:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800162a:	4619      	mov	r1, r3
 800162c:	4820      	ldr	r0, [pc, #128]	; (80016b0 <HAL_UART_MspInit+0x128>)
 800162e:	f001 fc41 	bl	8002eb4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_UART_MspInit+0x130>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 800163a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800163e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 800164e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001672:	4810      	ldr	r0, [pc, #64]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001674:	f000 fcee 	bl	8002054 <HAL_DMA_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800167e:	f7ff fcb5 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 8001686:	675a      	str	r2, [r3, #116]	; 0x74
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_UART_MspInit+0x12c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2105      	movs	r1, #5
 8001692:	2052      	movs	r0, #82	; 0x52
 8001694:	f000 fb5e 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001698:	2052      	movs	r0, #82	; 0x52
 800169a:	f000 fb77 	bl	8001d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	37b8      	adds	r7, #184	; 0xb8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40007800 	.word	0x40007800
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40021000 	.word	0x40021000
 80016b4:	20000664 	.word	0x20000664
 80016b8:	40026058 	.word	0x40026058

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_InitTick+0xe0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a32      	ldr	r2, [pc, #200]	; (800179c <HAL_InitTick+0xe0>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_InitTick+0xe0>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e4:	f107 0210 	add.w	r2, r7, #16
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fec2 	bl	8005478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fe:	f003 fe93 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8001702:	6378      	str	r0, [r7, #52]	; 0x34
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001706:	f003 fe8f 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <HAL_InitTick+0xe4>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3b01      	subs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_InitTick+0xe8>)
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_InitTick+0xec>)
 8001722:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_InitTick+0xe8>)
 8001726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_InitTick+0xe8>)
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_InitTick+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_InitTick+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_InitTick+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_InitTick+0xe8>)
 8001746:	f004 fb9c 	bl	8005e82 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11b      	bne.n	8001790 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_InitTick+0xe8>)
 800175a:	f004 fbe9 	bl	8005f30 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800176c:	2036      	movs	r0, #54	; 0x36
 800176e:	f000 fb0d 	bl	8001d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d808      	bhi.n	800178a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2036      	movs	r0, #54	; 0x36
 800177e:	f000 fae9 	bl	8001d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_InitTick+0xf0>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e002      	b.n	8001790 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001794:	4618      	mov	r0, r3
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	20000764 	.word	0x20000764
 80017a8:	40001000 	.word	0x40001000
 80017ac:	20000004 	.word	0x20000004

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream3_IRQHandler+0x10>)
 80017e2:	f000 fdd7 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000664 	.word	0x20000664

080017f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM1_CC_IRQHandler+0x10>)
 80017f6:	f004 fff9 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000590 	.word	0x20000590

08001804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <TIM6_DAC_IRQHandler+0x20>)
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <TIM6_DAC_IRQHandler+0x20>)
 8001814:	f000 fb3c 	bl	8001e90 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <TIM6_DAC_IRQHandler+0x24>)
 800181a:	f004 ffe7 	bl	80067ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003b0 	.word	0x200003b0
 8001828:	20000764 	.word	0x20000764

0800182c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <OTG_FS_IRQHandler+0x10>)
 8001832:	f001 ff8a 	bl	800374a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20006cb0 	.word	0x20006cb0

08001840 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <UART7_IRQHandler+0x10>)
 8001846:	f005 ff13 	bl	8007670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200005dc 	.word	0x200005dc

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f00e fdee 	bl	8010464 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20080000 	.word	0x20080000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	200007b0 	.word	0x200007b0
 80018bc:	200071c8 	.word	0x200071c8

080018c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ea:	490e      	ldr	r1, [pc, #56]	; (8001924 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001900:	4c0b      	ldr	r4, [pc, #44]	; (8001930 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190e:	f7ff ffd7 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001912:	f00e fdad 	bl	8010470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7fe fe7f 	bl	8000618 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001928:	080109d4 	.word	0x080109d4
  ldr r2, =_sbss
 800192c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001930:	200071c8 	.word	0x200071c8

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x28>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f9f8 	bl	8001d3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f7ff feb4 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fb50 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	200007b4 	.word	0x200007b4

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200007b4 	.word	0x200007b4

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008

080019ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0ed      	b.n	8001bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fb1c 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a20:	f7ff ffb4 	bl	800198c <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a26:	e012      	b.n	8001a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a28:	f7ff ffb0 	bl	800198c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d90b      	bls.n	8001a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0c5      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e5      	beq.n	8001a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0202 	bic.w	r2, r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6c:	f7ff ff8e 	bl	800198c <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a72:	e012      	b.n	8001a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a74:	f7ff ff8a 	bl	800198c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	d90b      	bls.n	8001a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e09f      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e5      	bne.n	8001a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7e5b      	ldrb	r3, [r3, #25]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e9b      	ldrb	r3, [r3, #26]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0220 	orr.w	r2, r2, #32
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0220 	bic.w	r2, r2, #32
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7edb      	ldrb	r3, [r3, #27]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0210 	bic.w	r2, r2, #16
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0210 	orr.w	r2, r2, #16
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7f5b      	ldrb	r3, [r3, #29]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	ea42 0103 	orr.w	r1, r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <__NVIC_SetPriorityGrouping>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <__NVIC_SetPriorityGrouping+0x40>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x40>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00
 8001c28:	05fa0000 	.word	0x05fa0000

08001c2c <__NVIC_GetPriorityGrouping>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff4c 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d66:	f7ff ff61 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	6978      	ldr	r0, [r7, #20]
 8001d72:	f7ff ffb1 	bl	8001cd8 <NVIC_EncodePriority>
 8001d76:	4602      	mov	r2, r0
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff80 	bl	8001c84 <__NVIC_SetPriority>
}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff54 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e014      	b.n	8001de4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff f980 	bl	80010d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_DAC_Start+0x16>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e040      	b.n	8001e84 <HAL_DAC_Start+0x98>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10f      	bne.n	8001e4c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e36:	2b3c      	cmp	r3, #60	; 0x3c
 8001e38:	d11d      	bne.n	8001e76 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	e014      	b.n	8001e76 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	213c      	movs	r1, #60	; 0x3c
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d107      	bne.n	8001e76 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0202 	orr.w	r2, r2, #2
 8001e74:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d120      	bne.n	8001eea <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d118      	bne.n	8001eea <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f852 	bl	8001f8e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d120      	bne.n	8001f3c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f08:	d118      	bne.n	8001f3c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f043 0202 	orr.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f34:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f882 	bl	8002040 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	3308      	adds	r3, #8
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e004      	b.n	8001f78 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3314      	adds	r3, #20
 8001f76:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	795b      	ldrb	r3, [r3, #5]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_DAC_ConfigChannel+0x18>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e03c      	b.n	8002034 <HAL_DAC_ConfigChannel+0x92>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	22c0      	movs	r2, #192	; 0xc0
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fc94 	bl	800198c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e099      	b.n	80021a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002090:	e00f      	b.n	80020b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002092:	f7ff fc7b 	bl	800198c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b05      	cmp	r3, #5
 800209e:	d908      	bls.n	80020b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e078      	b.n	80021a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e8      	bne.n	8002092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_DMA_Init+0x158>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2b04      	cmp	r3, #4
 800210a:	d107      	bne.n	800211c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4313      	orrs	r3, r2
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0307 	bic.w	r3, r3, #7
 8002132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b04      	cmp	r3, #4
 8002144:	d117      	bne.n	8002176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fb09 	bl	8002770 <DMA_CheckFifoParam>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002172:	2301      	movs	r3, #1
 8002174:	e016      	b.n	80021a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fac0 	bl	8002704 <DMA_CalcBaseAndBitshift>
 8002184:	4603      	mov	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	223f      	movs	r2, #63	; 0x3f
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	e010803f 	.word	0xe010803f

080021b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_DMA_Start_IT+0x26>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e048      	b.n	8002268 <HAL_DMA_Start_IT+0xb8>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d137      	bne.n	800225a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fa52 	bl	80026a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	223f      	movs	r2, #63	; 0x3f
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0216 	orr.w	r2, r2, #22
 800221e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0208 	orr.w	r2, r2, #8
 8002246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e005      	b.n	8002266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800227e:	f7ff fb85 	bl	800198c <HAL_GetTick>
 8002282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d008      	beq.n	80022a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e052      	b.n	8002348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0216 	bic.w	r2, r2, #22
 80022b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_DMA_Abort+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0208 	bic.w	r2, r2, #8
 80022e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	e013      	b.n	800231c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f4:	f7ff fb4a 	bl	800198c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d90c      	bls.n	800231c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2203      	movs	r2, #3
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e015      	b.n	8002348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e4      	bne.n	80022f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	223f      	movs	r2, #63	; 0x3f
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d004      	beq.n	800236e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00c      	b.n	8002388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023a0:	4b8e      	ldr	r3, [pc, #568]	; (80025dc <HAL_DMA_IRQHandler+0x248>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8e      	ldr	r2, [pc, #568]	; (80025e0 <HAL_DMA_IRQHandler+0x24c>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2208      	movs	r2, #8
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2208      	movs	r2, #8
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2201      	movs	r2, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2201      	movs	r2, #1
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2204      	movs	r2, #4
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2210      	movs	r2, #16
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d043      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03c      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2210      	movs	r2, #16
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e01f      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e016      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0208 	bic.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2220      	movs	r2, #32
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 808f 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8087 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2220      	movs	r2, #32
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d136      	bne.n	80025ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0216 	bic.w	r2, r2, #22
 800254c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800255c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_DMA_IRQHandler+0x1da>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0208 	bic.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	223f      	movs	r2, #63	; 0x3f
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
        }
        return;
 80025aa:	e079      	b.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e02c      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000
 80025e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
 80025f4:	e01e      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0210 	bic.w	r2, r2, #16
 8002612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d032      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d022      	beq.n	800268e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2205      	movs	r2, #5
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3301      	adds	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d307      	bcc.n	800267c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_DMA_IRQHandler+0x2cc>
 800267a:	e000      	b.n	800267e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800267c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026a0:	bf00      	nop
    }
  }
}
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3b10      	subs	r3, #16
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <DMA_CalcBaseAndBitshift+0x60>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <DMA_CalcBaseAndBitshift+0x64>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d908      	bls.n	8002744 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <DMA_CalcBaseAndBitshift+0x68>)
 800273a:	4013      	ands	r3, r2
 800273c:	1d1a      	adds	r2, r3, #4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	; 0x58
 8002742:	e006      	b.n	8002752 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <DMA_CalcBaseAndBitshift+0x68>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	aaaaaaab 	.word	0xaaaaaaab
 8002768:	0801095c 	.word	0x0801095c
 800276c:	fffffc00 	.word	0xfffffc00

08002770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11f      	bne.n	80027ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d856      	bhi.n	800283e <DMA_CheckFifoParam+0xce>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x28>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027bb 	.word	0x080027bb
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	0800283f 	.word	0x0800283f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d046      	beq.n	8002842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e043      	b.n	8002842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c2:	d140      	bne.n	8002846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e03d      	b.n	8002846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d121      	bne.n	8002818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d837      	bhi.n	800284a <DMA_CheckFifoParam+0xda>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <DMA_CheckFifoParam+0x70>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027f7 	.word	0x080027f7
 80027e8:	080027f1 	.word	0x080027f1
 80027ec:	08002809 	.word	0x08002809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e030      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d025      	beq.n	800284e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002806:	e022      	b.n	800284e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002810:	d11f      	bne.n	8002852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002816:	e01c      	b.n	8002852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d903      	bls.n	8002826 <DMA_CheckFifoParam+0xb6>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d003      	beq.n	800282c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002824:	e018      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      break;
 800282a:	e015      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      break;
 800283c:	e00b      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 800283e:	bf00      	nop
 8002840:	e00a      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;
 8002842:	bf00      	nop
 8002844:	e008      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
 8002848:	e006      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e004      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e002      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;   
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
    }
  } 
  
  return status; 
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06a      	b.n	8002950 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2223      	movs	r2, #35	; 0x23
 8002888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe fc67 	bl	8001160 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_ETH_Init+0xf0>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a30      	ldr	r2, [pc, #192]	; (8002958 <HAL_ETH_Init+0xf0>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <HAL_ETH_Init+0xf0>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_ETH_Init+0xf4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_ETH_Init+0xf4>)
 80028b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_ETH_Init+0xf4>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4927      	ldr	r1, [pc, #156]	; (800295c <HAL_ETH_Init+0xf4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_ETH_Init+0xf4>)
 80028c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7ff f854 	bl	800198c <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028e6:	e011      	b.n	800290c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028e8:	f7ff f850 	bl	800198c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028f6:	d909      	bls.n	800290c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	22e0      	movs	r2, #224	; 0xe0
 8002904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e021      	b.n	8002950 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e4      	bne.n	80028e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f958 	bl	8002bd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f9ff 	bl	8002d28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa55 	bl	8002dda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	461a      	mov	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f9bd 	bl	8002cb8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2210      	movs	r2, #16
 800294a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800

08002960 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <ETH_SetMACConfig+0x15c>)
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	7c1b      	ldrb	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <ETH_SetMACConfig+0x28>
 8002982:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002986:	e000      	b.n	800298a <ETH_SetMACConfig+0x2a>
 8002988:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7c5b      	ldrb	r3, [r3, #17]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <ETH_SetMACConfig+0x38>
 8002992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002996:	e000      	b.n	800299a <ETH_SetMACConfig+0x3a>
 8002998:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800299a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7fdb      	ldrb	r3, [r3, #31]
 80029a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	7f92      	ldrb	r2, [r2, #30]
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d102      	bne.n	80029be <ETH_SetMACConfig+0x5e>
 80029b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029bc:	e000      	b.n	80029c0 <ETH_SetMACConfig+0x60>
 80029be:	2200      	movs	r2, #0
                        macconf->Speed |
 80029c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7f1b      	ldrb	r3, [r3, #28]
 80029c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	791b      	ldrb	r3, [r3, #4]
 80029d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029de:	2a00      	cmp	r2, #0
 80029e0:	d102      	bne.n	80029e8 <ETH_SetMACConfig+0x88>
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	e000      	b.n	80029ea <ETH_SetMACConfig+0x8a>
 80029e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	7bdb      	ldrb	r3, [r3, #15]
 80029f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a02:	4313      	orrs	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7fe ffc2 	bl	80019a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a36:	4013      	ands	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d101      	bne.n	8002a4e <ETH_SetMACConfig+0xee>
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	e000      	b.n	8002a50 <ETH_SetMACConfig+0xf0>
 8002a4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a5e:	2a01      	cmp	r2, #1
 8002a60:	d101      	bne.n	8002a66 <ETH_SetMACConfig+0x106>
 8002a62:	2208      	movs	r2, #8
 8002a64:	e000      	b.n	8002a68 <ETH_SetMACConfig+0x108>
 8002a66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a70:	2a01      	cmp	r2, #1
 8002a72:	d101      	bne.n	8002a78 <ETH_SetMACConfig+0x118>
 8002a74:	2204      	movs	r2, #4
 8002a76:	e000      	b.n	8002a7a <ETH_SetMACConfig+0x11a>
 8002a78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	d101      	bne.n	8002a8a <ETH_SetMACConfig+0x12a>
 8002a86:	2202      	movs	r2, #2
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0x12c>
 8002a8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7fe ff7d 	bl	80019a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	ff20810f 	.word	0xff20810f

08002ac0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <ETH_SetDMAConfig+0x110>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7b1b      	ldrb	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <ETH_SetDMAConfig+0x2c>
 8002ae6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aea:	e000      	b.n	8002aee <ETH_SetDMAConfig+0x2e>
 8002aec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7b5b      	ldrb	r3, [r3, #13]
 8002af2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002af4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	7f52      	ldrb	r2, [r2, #29]
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d102      	bne.n	8002b04 <ETH_SetDMAConfig+0x44>
 8002afe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b02:	e000      	b.n	8002b06 <ETH_SetDMAConfig+0x46>
 8002b04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7b9b      	ldrb	r3, [r3, #14]
 8002b0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	7f1b      	ldrb	r3, [r3, #28]
 8002b1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7f9b      	ldrb	r3, [r3, #30]
 8002b22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b34:	4313      	orrs	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe ff24 	bl	80019a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b64:	461a      	mov	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	791b      	ldrb	r3, [r3, #4]
 8002b6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ba6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7fe fef5 	bl	80019a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	f8de3f23 	.word	0xf8de3f23

08002bd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0a6      	sub	sp, #152	; 0x98
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c10:	2300      	movs	r3, #0
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fe86 	bl	8002960 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c88:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ff08 	bl	8002ac0 <ETH_SetDMAConfig>
}
 8002cb0:	bf00      	nop
 8002cb2:	3798      	adds	r7, #152	; 0x98
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3305      	adds	r3, #5
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	3204      	adds	r2, #4
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <ETH_MACAddressConfig+0x68>)
 8002cda:	4413      	add	r3, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	061a      	lsls	r2, r3, #24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3302      	adds	r3, #2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <ETH_MACAddressConfig+0x6c>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	6013      	str	r3, [r2, #0]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40028040 	.word	0x40028040
 8002d24:	40028044 	.word	0x40028044

08002d28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e03e      	b.n	8002db4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68d9      	ldr	r1, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	3206      	adds	r2, #6
 8002d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d80c      	bhi.n	8002d98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68d9      	ldr	r1, [r3, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e004      	b.n	8002da2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d9bd      	bls.n	8002d36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dcc:	611a      	str	r2, [r3, #16]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e046      	b.n	8002e76 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6919      	ldr	r1, [r3, #16]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e24:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002e2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	3212      	adds	r2, #18
 8002e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d80c      	bhi.n	8002e66 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e004      	b.n	8002e70 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d9b5      	bls.n	8002de8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea6:	60da      	str	r2, [r3, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e175      	b.n	80031c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8164 	bne.w	80031ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d005      	beq.n	8002f0a <HAL_GPIO_Init+0x56>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d017      	beq.n	8002fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80be 	beq.w	80031ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_GPIO_Init+0x324>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4a65      	ldr	r2, [pc, #404]	; (80031d8 <HAL_GPIO_Init+0x324>)
 8003044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003048:	6453      	str	r3, [r2, #68]	; 0x44
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003056:	4a61      	ldr	r2, [pc, #388]	; (80031dc <HAL_GPIO_Init+0x328>)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_GPIO_Init+0x32c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d037      	beq.n	80030f2 <HAL_GPIO_Init+0x23e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_GPIO_Init+0x330>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_GPIO_Init+0x23a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <HAL_GPIO_Init+0x334>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x236>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a55      	ldr	r2, [pc, #340]	; (80031ec <HAL_GPIO_Init+0x338>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x232>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a54      	ldr	r2, [pc, #336]	; (80031f0 <HAL_GPIO_Init+0x33c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x22e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a53      	ldr	r2, [pc, #332]	; (80031f4 <HAL_GPIO_Init+0x340>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x22a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_GPIO_Init+0x344>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x226>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a51      	ldr	r2, [pc, #324]	; (80031fc <HAL_GPIO_Init+0x348>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x222>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_GPIO_Init+0x34c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x21e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <HAL_GPIO_Init+0x350>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x21a>
 80030ca:	2309      	movs	r3, #9
 80030cc:	e012      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ce:	230a      	movs	r3, #10
 80030d0:	e010      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e00e      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030d6:	2307      	movs	r3, #7
 80030d8:	e00c      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030da:	2306      	movs	r3, #6
 80030dc:	e00a      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030de:	2305      	movs	r3, #5
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x240>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003104:	4935      	ldr	r1, [pc, #212]	; (80031dc <HAL_GPIO_Init+0x328>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_GPIO_Init+0x354>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x354>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_GPIO_Init+0x354>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_GPIO_Init+0x354>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_GPIO_Init+0x354>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_GPIO_Init+0x354>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_GPIO_Init+0x354>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_GPIO_Init+0x354>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f ae86 	bls.w	8002ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40021400 	.word	0x40021400
 80031f8:	40021800 	.word	0x40021800
 80031fc:	40021c00 	.word	0x40021c00
 8003200:	40022000 	.word	0x40022000
 8003204:	40022400 	.word	0x40022400
 8003208:	40013c00 	.word	0x40013c00

0800320c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e001      	b.n	800322e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003258:	e003      	b.n	8003262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	041a      	lsls	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe f81a 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	e006      	b.n	80032f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d104      	bne.n	800330a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_I2C_Init+0x11c>)
 8003316:	430b      	orrs	r3, r1
 8003318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	02008000 	.word	0x02008000

08003390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d138      	bne.n	8003418 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e032      	b.n	800341a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b20      	cmp	r3, #32
 800343a:	d139      	bne.n	80034b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003446:	2302      	movs	r3, #2
 8003448:	e033      	b.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2224      	movs	r2, #36	; 0x24
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003478:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c0:	b08f      	sub	sp, #60	; 0x3c
 80034c2:	af0a      	add	r7, sp, #40	; 0x28
 80034c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e116      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f00c fc4c 	bl	800fd88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f005 fb9d 	bl	8008c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	687e      	ldr	r6, [r7, #4]
 800351c:	466d      	mov	r5, sp
 800351e:	f106 0410 	add.w	r4, r6, #16
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003532:	1d33      	adds	r3, r6, #4
 8003534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f005 fa7e 	bl	8008a38 <USB_CoreInit>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0d7      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f005 fb8b 	bl	8008c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e04a      	b.n	80035f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333d      	adds	r3, #61	; 0x3d
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	333c      	adds	r3, #60	; 0x3c
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	b298      	uxth	r0, r3
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3344      	adds	r3, #68	; 0x44
 800359c:	4602      	mov	r2, r0
 800359e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3340      	adds	r3, #64	; 0x40
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3348      	adds	r3, #72	; 0x48
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334c      	adds	r3, #76	; 0x4c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3354      	adds	r3, #84	; 0x54
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	3301      	adds	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3af      	bcc.n	8003560 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e044      	b.n	8003690 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3301      	adds	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3b5      	bcc.n	8003606 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	687e      	ldr	r6, [r7, #4]
 80036a2:	466d      	mov	r5, sp
 80036a4:	f106 0410 	add.w	r4, r6, #16
 80036a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b8:	1d33      	adds	r3, r6, #4
 80036ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036bc:	6838      	ldr	r0, [r7, #0]
 80036be:	f005 fb23 	bl	8008d08 <USB_DevInit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e014      	b.n	80036fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 f97b 	bl	80049e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 fc71 	bl	8009fde <USB_DevDisconnect>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003706 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_PCD_Start+0x16>
 8003718:	2302      	movs	r3, #2
 800371a:	e012      	b.n	8003742 <HAL_PCD_Start+0x3c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f005 fa7f 	bl	8008c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f006 fc32 	bl	8009f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b08d      	sub	sp, #52	; 0x34
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f006 fcf0 	bl	800a146 <USB_GetMode>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	f040 84b7 	bne.w	80040dc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 fc54 	bl	800a020 <USB_ReadInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 84ad 	beq.w	80040da <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f006 fc41 	bl	800a020 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d107      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f002 0202 	and.w	r2, r2, #2
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 fc2f 	bl	800a020 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d161      	bne.n	8003890 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0210 	bic.w	r2, r2, #16
 80037da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	0c5b      	lsrs	r3, r3, #17
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	2b02      	cmp	r3, #2
 8003806:	d124      	bne.n	8003852 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d035      	beq.n	8003880 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800381e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	6a38      	ldr	r0, [r7, #32]
 8003828:	f006 fa66 	bl	8009cf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003838:	441a      	add	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384a:	441a      	add	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e016      	b.n	8003880 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	0c5b      	lsrs	r3, r3, #17
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	2b06      	cmp	r3, #6
 800385c:	d110      	bne.n	8003880 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003864:	2208      	movs	r2, #8
 8003866:	4619      	mov	r1, r3
 8003868:	6a38      	ldr	r0, [r7, #32]
 800386a:	f006 fa45 	bl	8009cf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387a:	441a      	add	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0210 	orr.w	r2, r2, #16
 800388e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f006 fbc3 	bl	800a020 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038a4:	f040 80a7 	bne.w	80039f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f006 fbc8 	bl	800a046 <USB_ReadDevAllOutEpInterrupt>
 80038b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038b8:	e099      	b.n	80039ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 808e 	beq.w	80039e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f006 fbec 	bl	800a0ae <USB_ReadDevOutEPInterrupt>
 80038d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fef0 	bl	80046dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	461a      	mov	r2, r3
 8003914:	2308      	movs	r3, #8
 8003916:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 ffc6 	bl	80048ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	461a      	mov	r2, r3
 8003938:	2310      	movs	r3, #16
 800393a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d030      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d109      	bne.n	8003966 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003964:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	78db      	ldrb	r3, [r3, #3]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f00c fb1d 	bl	800ffd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	2302      	movs	r3, #2
 80039a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2320      	movs	r3, #32
 80039c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f47f af62 	bne.w	80038ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f006 fb10 	bl	800a020 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a0a:	f040 80db 	bne.w	8003bc4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f006 fb31 	bl	800a07a <USB_ReadDevAllInEpInterrupt>
 8003a18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a1e:	e0cd      	b.n	8003bbc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80c2 	beq.w	8003bb0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f006 fb57 	bl	800a0ea <USB_ReadDevInEPInterrupt>
 8003a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d057      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	2201      	movs	r2, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a68:	4013      	ands	r3, r2
 8003a6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d132      	bne.n	8003aec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334c      	adds	r3, #76	; 0x4c
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4403      	add	r3, r0
 8003aa6:	3348      	adds	r3, #72	; 0x48
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4419      	add	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	334c      	adds	r3, #76	; 0x4c
 8003abc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d113      	bne.n	8003aec <HAL_PCD_IRQHandler+0x3a2>
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3354      	adds	r3, #84	; 0x54
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f006 fb60 	bl	800a1ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f00c f9e7 	bl	800fec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2308      	movs	r3, #8
 8003b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	461a      	mov	r2, r3
 8003b48:	2340      	movs	r3, #64	; 0x40
 8003b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b58:	6a38      	ldr	r0, [r7, #32]
 8003b5a:	f005 fa33 	bl	8008fc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	3338      	adds	r3, #56	; 0x38
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	78db      	ldrb	r3, [r3, #3]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f00c fa34 	bl	800fff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fd08 	bl	80045c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f47f af2e 	bne.w	8003a20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f006 fa29 	bl	800a020 <USB_ReadInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd8:	d122      	bne.n	8003c20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c00:	2100      	movs	r1, #0
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f00c fbae 	bl	8010364 <HAL_PCDEx_LPM_Callback>
 8003c08:	e002      	b.n	8003c10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f00c f9d2 	bl	800ffb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f006 f9fb 	bl	800a020 <USB_ReadInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c34:	d112      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f00c f98e 	bl	800ff68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f006 f9dd 	bl	800a020 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d121      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c80:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d111      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f00c fb5b 	bl	8010364 <HAL_PCDEx_LPM_Callback>
 8003cae:	e002      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f00c f959 	bl	800ff68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 f9b0 	bl	800a020 <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	f040 80b7 	bne.w	8003e3c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f005 f96b 	bl	8008fc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf2:	e046      	b.n	8003d82 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	461a      	mov	r2, r3
 8003d02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	461a      	mov	r2, r3
 8003d36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	3301      	adds	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d3b3      	bcc.n	8003cf4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db8:	f043 030b 	orr.w	r3, r3, #11
 8003dbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f043 030b 	orr.w	r3, r3, #11
 8003dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd4:	e015      	b.n	8003e02 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	4619      	mov	r1, r3
 8003de6:	f242 032b 	movw	r3, #8235	; 0x202b
 8003dea:	4313      	orrs	r3, r2
 8003dec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f043 030b 	orr.w	r3, r3, #11
 8003e00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e26:	461a      	mov	r2, r3
 8003e28:	f006 f9c0 	bl	800a1ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f006 f8ed 	bl	800a020 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e50:	d124      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f006 f984 	bl	800a164 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f005 f92c 	bl	80090be <USB_GetDevSpeed>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681c      	ldr	r4, [r3, #0]
 8003e72:	f001 facd 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8003e76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4620      	mov	r0, r4
 8003e82:	f004 fe31 	bl	8008ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f00c f845 	bl	800ff16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f006 f8bd 	bl	800a020 <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10a      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f00c f822 	bl	800fefa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f002 0208 	and.w	r2, r2, #8
 8003ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f006 f8a8 	bl	800a020 <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d122      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e014      	b.n	8003f16 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fb27 	bl	800455e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	3301      	adds	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3e5      	bcc.n	8003eec <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f006 f87b 	bl	800a020 <USB_ReadInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f34:	d13b      	bne.n	8003fae <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f36:	2301      	movs	r3, #1
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e02b      	b.n	8003f94 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3340      	adds	r3, #64	; 0x40
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	da12      	bge.n	8003f8e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	333f      	adds	r3, #63	; 0x3f
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fae8 	bl	800455e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3ce      	bcc.n	8003f3c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f006 f834 	bl	800a020 <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc2:	d155      	bne.n	8004070 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc8:	e045      	b.n	8004056 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d12e      	bne.n	8004050 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ff2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da2b      	bge.n	8004050 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004004:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404c:	6053      	str	r3, [r2, #4]
            break;
 800404e:	e007      	b.n	8004060 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	3301      	adds	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	429a      	cmp	r2, r3
 800405e:	d3b4      	bcc.n	8003fca <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800406e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f005 ffd3 	bl	800a020 <USB_ReadInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d10a      	bne.n	800409c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f00b ffc6 	bl	8010018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800409a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f005 ffbd 	bl	800a020 <USB_ReadInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d115      	bne.n	80040dc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f00b ffb6 	bl	8010034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	e000      	b.n	80040dc <HAL_PCD_IRQHandler+0x992>
      return;
 80040da:	bf00      	nop
    }
  }
}
 80040dc:	3734      	adds	r7, #52	; 0x34
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}

080040e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_PCD_SetAddress+0x1a>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e013      	b.n	8004124 <HAL_PCD_SetAddress+0x42>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f005 ff1b 	bl	8009f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	70fb      	strb	r3, [r7, #3]
 800413e:	460b      	mov	r3, r1
 8004140:	803b      	strh	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800414a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da0f      	bge.n	8004172 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	3338      	adds	r3, #56	; 0x38
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	705a      	strb	r2, [r3, #1]
 8004170:	e00f      	b.n	8004192 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800419e:	883a      	ldrh	r2, [r7, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	78ba      	ldrb	r2, [r7, #2]
 80041a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	785b      	ldrb	r3, [r3, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041bc:	78bb      	ldrb	r3, [r7, #2]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d102      	bne.n	80041c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_PCD_EP_Open+0xaa>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e00e      	b.n	80041f4 <HAL_PCD_EP_Open+0xc8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 ff8f 	bl	8009108 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041f2:	7afb      	ldrb	r3, [r7, #11]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	da0f      	bge.n	8004230 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	3338      	adds	r3, #56	; 0x38
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4413      	add	r3, r2
 8004224:	3304      	adds	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	705a      	strb	r2, [r3, #1]
 800422e:	e00f      	b.n	8004250 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 020f 	and.w	r2, r3, #15
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_PCD_EP_Close+0x6e>
 8004266:	2302      	movs	r3, #2
 8004268:	e00e      	b.n	8004288 <HAL_PCD_EP_Close+0x8c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	4618      	mov	r0, r3
 800427a:	f004 ffcd 	bl	8009218 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a0:	7afb      	ldrb	r3, [r7, #11]
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6979      	ldr	r1, [r7, #20]
 8004304:	f005 fab4 	bl	8009870 <USB_EP0StartXfer>
 8004308:	e008      	b.n	800431c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	f005 f85a 	bl	80093d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004348:	681b      	ldr	r3, [r3, #0]
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	460b      	mov	r3, r1
 8004364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	f003 020f 	and.w	r2, r3, #15
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	3338      	adds	r3, #56	; 0x38
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	3304      	adds	r3, #4
 800437c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2201      	movs	r2, #1
 8004394:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004396:	7afb      	ldrb	r3, [r7, #11]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043b0:	7afb      	ldrb	r3, [r7, #11]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	f005 fa52 	bl	8009870 <USB_EP0StartXfer>
 80043cc:	e008      	b.n	80043e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	f004 fff8 	bl	80093d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d901      	bls.n	8004408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e050      	b.n	80044aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da0f      	bge.n	8004430 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3338      	adds	r3, #56	; 0x38
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	705a      	strb	r2, [r3, #1]
 800442e:	e00d      	b.n	800444c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	3304      	adds	r3, #4
 8004444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_PCD_EP_SetStall+0x82>
 8004468:	2302      	movs	r3, #2
 800446a:	e01e      	b.n	80044aa <HAL_PCD_EP_SetStall+0xc0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	4618      	mov	r0, r3
 800447c:	f005 fc94 	bl	8009da8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	b2d9      	uxtb	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800449a:	461a      	mov	r2, r3
 800449c:	f005 fe86 	bl	800a1ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d901      	bls.n	80044d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e042      	b.n	8004556 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da0f      	bge.n	80044f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 020f 	and.w	r2, r3, #15
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	3338      	adds	r3, #56	; 0x38
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4413      	add	r3, r2
 80044ec:	3304      	adds	r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	705a      	strb	r2, [r3, #1]
 80044f6:	e00f      	b.n	8004518 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_PCD_EP_ClrStall+0x86>
 8004534:	2302      	movs	r3, #2
 8004536:	e00e      	b.n	8004556 <HAL_PCD_EP_ClrStall+0xa4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68f9      	ldr	r1, [r7, #12]
 8004546:	4618      	mov	r0, r3
 8004548:	f005 fc9c 	bl	8009e84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800456a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0c      	bge.n	800458c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	3338      	adds	r3, #56	; 0x38
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e00c      	b.n	80045a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 020f 	and.w	r2, r3, #15
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	3304      	adds	r3, #4
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f005 fabb 	bl	8009b28 <USB_EPStopXfer>
 80045b2:	4603      	mov	r3, r0
 80045b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045b6:	7afb      	ldrb	r3, [r7, #11]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3338      	adds	r3, #56	; 0x38
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1a      	ldr	r2, [r3, #32]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d901      	bls.n	80045f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e06c      	b.n	80046d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	429a      	cmp	r2, r3
 800460c:	d902      	bls.n	8004614 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	3303      	adds	r3, #3
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800461c:	e02b      	b.n	8004676 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	429a      	cmp	r2, r3
 8004632:	d902      	bls.n	800463a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3303      	adds	r3, #3
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6919      	ldr	r1, [r3, #16]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004652:	b2db      	uxtb	r3, r3
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4603      	mov	r3, r0
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f005 fb0f 	bl	8009c7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	b29b      	uxth	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	429a      	cmp	r2, r3
 800468a:	d809      	bhi.n	80046a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004694:	429a      	cmp	r2, r3
 8004696:	d203      	bcs.n	80046a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1be      	bne.n	800461e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d811      	bhi.n	80046d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	2201      	movs	r2, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	6939      	ldr	r1, [r7, #16]
 80046c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046cc:	4013      	ands	r3, r2
 80046ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	333c      	adds	r3, #60	; 0x3c
 80046f4:	3304      	adds	r3, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d17b      	bne.n	800480a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4a61      	ldr	r2, [pc, #388]	; (80048a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	f240 80b9 	bls.w	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80b3 	beq.w	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004744:	6093      	str	r3, [r2, #8]
 8004746:	e0a7      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	461a      	mov	r2, r3
 8004760:	2320      	movs	r3, #32
 8004762:	6093      	str	r3, [r2, #8]
 8004764:	e098      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	f040 8093 	bne.w	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4a4b      	ldr	r2, [pc, #300]	; (80048a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d90f      	bls.n	800479a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	6093      	str	r3, [r2, #8]
 8004798:	e07e      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4413      	add	r3, r2
 80047ac:	3304      	adds	r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	440b      	add	r3, r1
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d114      	bne.n	80047fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047e4:	461a      	mov	r2, r3
 80047e6:	2101      	movs	r1, #1
 80047e8:	f005 fce0 	bl	800a1ac <USB_EP0_OutStart>
 80047ec:	e006      	b.n	80047fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f00b fb44 	bl	800fe90 <HAL_PCD_DataOutStageCallback>
 8004808:	e046      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d124      	bne.n	800485c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	461a      	mov	r2, r3
 800482a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482e:	6093      	str	r3, [r2, #8]
 8004830:	e032      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	2320      	movs	r3, #32
 800484c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f00b fb1b 	bl	800fe90 <HAL_PCD_DataOutStageCallback>
 800485a:	e01d      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d114      	bne.n	800488c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004884:	461a      	mov	r2, r3
 8004886:	2100      	movs	r1, #0
 8004888:	f005 fc90 	bl	800a1ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f00b fafc 	bl	800fe90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	4f54300a 	.word	0x4f54300a
 80048a8:	4f54310a 	.word	0x4f54310a

080048ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	333c      	adds	r3, #60	; 0x3c
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <PCD_EP_OutSetupPacket_int+0x88>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d90e      	bls.n	8004900 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f00b fab3 	bl	800fe6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <PCD_EP_OutSetupPacket_int+0x88>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d90c      	bls.n	8004928 <PCD_EP_OutSetupPacket_int+0x7c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004920:	461a      	mov	r2, r3
 8004922:	2101      	movs	r1, #1
 8004924:	f005 fc42 	bl	800a1ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	4f54300a 	.word	0x4f54300a

08004938 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
 8004944:	4613      	mov	r3, r2
 8004946:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004956:	883b      	ldrh	r3, [r7, #0]
 8004958:	0419      	lsls	r1, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	430a      	orrs	r2, r1
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
 8004964:	e028      	b.n	80049b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e00d      	b.n	8004996 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3340      	adds	r3, #64	; 0x40
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	3301      	adds	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	3b01      	subs	r3, #1
 800499c:	429a      	cmp	r2, r3
 800499e:	d3ec      	bcc.n	800497a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049a0:	883b      	ldrh	r3, [r7, #0]
 80049a2:	0418      	lsls	r0, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4302      	orrs	r2, r0
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_PCDEx_ActivateLPM+0x44>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	10000003 	.word	0x10000003

08004a30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a5e:	f7fc ff95 	bl	800198c <HAL_GetTick>
 8004a62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a64:	e009      	b.n	8004a7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a66:	f7fc ff91 	bl	800198c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a74:	d901      	bls.n	8004a7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e022      	b.n	8004ac0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d1ee      	bne.n	8004a66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a94:	f7fc ff7a 	bl	800198c <HAL_GetTick>
 8004a98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a9a:	e009      	b.n	8004ab0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a9c:	f7fc ff76 	bl	800198c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aaa:	d901      	bls.n	8004ab0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e007      	b.n	8004ac0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004abc:	d1ee      	bne.n	8004a9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40007000 	.word	0x40007000

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e29b      	b.n	800501e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8087 	beq.w	8004c02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af4:	4b96      	ldr	r3, [pc, #600]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d00c      	beq.n	8004b1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b00:	4b93      	ldr	r3, [pc, #588]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d112      	bne.n	8004b32 <HAL_RCC_OscConfig+0x62>
 8004b0c:	4b90      	ldr	r3, [pc, #576]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b18:	d10b      	bne.n	8004b32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1a:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d06c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x130>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d168      	bne.n	8004c00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e275      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7a>
 8004b3c:	4b84      	ldr	r3, [pc, #528]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a83      	ldr	r2, [pc, #524]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e02e      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x9c>
 8004b52:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b7c      	ldr	r3, [pc, #496]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7b      	ldr	r2, [pc, #492]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc0>
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a75      	ldr	r2, [pc, #468]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b73      	ldr	r3, [pc, #460]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a72      	ldr	r2, [pc, #456]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b90:	4b6f      	ldr	r3, [pc, #444]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a6e      	ldr	r2, [pc, #440]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a6b      	ldr	r2, [pc, #428]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fc feec 	bl	800198c <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fc fee8 	bl	800198c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e229      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xe8>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fed8 	bl	800198c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fc fed4 	bl	800198c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e215      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x110>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d069      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c0e:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1a:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d11c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x190>
 8004c26:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e1e9      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	493d      	ldr	r1, [pc, #244]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	e040      	b.n	8004ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d023      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c68:	4b39      	ldr	r3, [pc, #228]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a38      	ldr	r2, [pc, #224]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fc fe8a 	bl	800198c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fc fe86 	bl	800198c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1c7      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4929      	ldr	r1, [pc, #164]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
 8004cae:	e018      	b.n	8004ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fc fe66 	bl	800198c <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fc fe62 	bl	800198c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1a3      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d038      	beq.n	8004d60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d019      	beq.n	8004d2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf6:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fc fe43 	bl	800198c <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fc fe3f 	bl	800198c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e180      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x23a>
 8004d28:	e01a      	b.n	8004d60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <HAL_RCC_OscConfig+0x280>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fc fe29 	bl	800198c <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3e:	f7fc fe25 	bl	800198c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d903      	bls.n	8004d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e166      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
 8004d50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ee      	bne.n	8004d3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a4 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6e:	4b8c      	ldr	r3, [pc, #560]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	4b89      	ldr	r3, [pc, #548]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a88      	ldr	r2, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b86      	ldr	r3, [pc, #536]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d96:	4b83      	ldr	r3, [pc, #524]	; (8004fa4 <HAL_RCC_OscConfig+0x4d4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004da2:	4b80      	ldr	r3, [pc, #512]	; (8004fa4 <HAL_RCC_OscConfig+0x4d4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a7f      	ldr	r2, [pc, #508]	; (8004fa4 <HAL_RCC_OscConfig+0x4d4>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fc fded 	bl	800198c <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fc fde9 	bl	800198c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b64      	cmp	r3, #100	; 0x64
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e12a      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	4b76      	ldr	r3, [pc, #472]	; (8004fa4 <HAL_RCC_OscConfig+0x4d4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x31a>
 8004ddc:	4b70      	ldr	r3, [pc, #448]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a6f      	ldr	r2, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	e02d      	b.n	8004e46 <HAL_RCC_OscConfig+0x376>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x33c>
 8004df2:	4b6b      	ldr	r3, [pc, #428]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfe:	4b68      	ldr	r3, [pc, #416]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a67      	ldr	r2, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	e01c      	b.n	8004e46 <HAL_RCC_OscConfig+0x376>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d10c      	bne.n	8004e2e <HAL_RCC_OscConfig+0x35e>
 8004e14:	4b62      	ldr	r3, [pc, #392]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a61      	ldr	r2, [pc, #388]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	4a5e      	ldr	r2, [pc, #376]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2c:	e00b      	b.n	8004e46 <HAL_RCC_OscConfig+0x376>
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a5b      	ldr	r2, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a58      	ldr	r2, [pc, #352]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e40:	f023 0304 	bic.w	r3, r3, #4
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fc fd9d 	bl	800198c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fc fd99 	bl	800198c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0d8      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ee      	beq.n	8004e56 <HAL_RCC_OscConfig+0x386>
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fc fd87 	bl	800198c <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fc fd83 	bl	800198c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0c2      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e98:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a3c      	ldr	r2, [pc, #240]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80ae 	beq.w	800501c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec0:	4b37      	ldr	r3, [pc, #220]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d06d      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d14b      	bne.n	8004f6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed4:	4b32      	ldr	r3, [pc, #200]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fd54 	bl	800198c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fc fd50 	bl	800198c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e091      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	071b      	lsls	r3, r3, #28
 8004f32:	491b      	ldr	r1, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fd22 	bl	800198c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc fd1e 	bl	800198c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e05f      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x47c>
 8004f6a:	e057      	b.n	800501c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fc fd08 	bl	800198c <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fc fd04 	bl	800198c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e045      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4b0>
 8004f9e:	e03d      	b.n	800501c <HAL_RCC_OscConfig+0x54c>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <HAL_RCC_OscConfig+0x558>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d030      	beq.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d129      	bne.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d122      	bne.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d119      	bne.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d10f      	bne.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d107      	bne.n	8005018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0d0      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005044:	4b6a      	ldr	r3, [pc, #424]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d910      	bls.n	8005074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b67      	ldr	r3, [pc, #412]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 020f 	bic.w	r2, r3, #15
 800505a:	4965      	ldr	r1, [pc, #404]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b63      	ldr	r3, [pc, #396]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0b8      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800508c:	4b59      	ldr	r3, [pc, #356]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a58      	ldr	r2, [pc, #352]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a4:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a52      	ldr	r2, [pc, #328]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b0:	4b50      	ldr	r3, [pc, #320]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	494d      	ldr	r1, [pc, #308]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d040      	beq.n	8005150 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	4b47      	ldr	r3, [pc, #284]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d115      	bne.n	800510e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e07f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ee:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e073      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fe:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06b      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510e:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 0203 	bic.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4936      	ldr	r1, [pc, #216]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005120:	f7fc fc34 	bl	800198c <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	e00a      	b.n	800513e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005128:	f7fc fc30 	bl	800198c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e053      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 020c 	and.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	429a      	cmp	r2, r3
 800514e:	d1eb      	bne.n	8005128 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d210      	bcs.n	8005180 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 020f 	bic.w	r2, r3, #15
 8005166:	4922      	ldr	r1, [pc, #136]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e032      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4916      	ldr	r1, [pc, #88]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	490e      	ldr	r1, [pc, #56]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051be:	f000 f821 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 80051c2:	4602      	mov	r2, r0
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	490a      	ldr	r1, [pc, #40]	; (80051f8 <HAL_RCC_ClockConfig+0x1cc>)
 80051d0:	5ccb      	ldrb	r3, [r1, r3]
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <HAL_RCC_ClockConfig+0x1d0>)
 80051d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <HAL_RCC_ClockConfig+0x1d4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc fa6c 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023c00 	.word	0x40023c00
 80051f4:	40023800 	.word	0x40023800
 80051f8:	08010944 	.word	0x08010944
 80051fc:	20000000 	.word	0x20000000
 8005200:	20000004 	.word	0x20000004

08005204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b094      	sub	sp, #80	; 0x50
 800520a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	647b      	str	r3, [r7, #68]	; 0x44
 8005210:	2300      	movs	r3, #0
 8005212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005214:	2300      	movs	r3, #0
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800521c:	4b79      	ldr	r3, [pc, #484]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d00d      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x40>
 8005228:	2b08      	cmp	r3, #8
 800522a:	f200 80e1 	bhi.w	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x34>
 8005232:	2b04      	cmp	r3, #4
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x3a>
 8005236:	e0db      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b73      	ldr	r3, [pc, #460]	; (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523c:	e0db      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <HAL_RCC_GetSysClockFreq+0x208>)
 8005240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005242:	e0d8      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005244:	4b6f      	ldr	r3, [pc, #444]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800524e:	4b6d      	ldr	r3, [pc, #436]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d063      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b6a      	ldr	r3, [pc, #424]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38
 8005264:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	633b      	str	r3, [r7, #48]	; 0x30
 800526e:	2300      	movs	r3, #0
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
 8005272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005276:	4622      	mov	r2, r4
 8005278:	462b      	mov	r3, r5
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	0159      	lsls	r1, r3, #5
 8005284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005288:	0150      	lsls	r0, r2, #5
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4621      	mov	r1, r4
 8005290:	1a51      	subs	r1, r2, r1
 8005292:	6139      	str	r1, [r7, #16]
 8005294:	4629      	mov	r1, r5
 8005296:	eb63 0301 	sbc.w	r3, r3, r1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052a8:	4659      	mov	r1, fp
 80052aa:	018b      	lsls	r3, r1, #6
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052b2:	4651      	mov	r1, sl
 80052b4:	018a      	lsls	r2, r1, #6
 80052b6:	4651      	mov	r1, sl
 80052b8:	ebb2 0801 	subs.w	r8, r2, r1
 80052bc:	4659      	mov	r1, fp
 80052be:	eb63 0901 	sbc.w	r9, r3, r1
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d6:	4690      	mov	r8, r2
 80052d8:	4699      	mov	r9, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	eb18 0303 	adds.w	r3, r8, r3
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	462b      	mov	r3, r5
 80052e4:	eb49 0303 	adc.w	r3, r9, r3
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052f6:	4629      	mov	r1, r5
 80052f8:	024b      	lsls	r3, r1, #9
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005300:	4621      	mov	r1, r4
 8005302:	024a      	lsls	r2, r1, #9
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530a:	2200      	movs	r2, #0
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005314:	f7fa ff94 	bl	8000240 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4613      	mov	r3, r2
 800531e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005320:	e058      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	2200      	movs	r2, #0
 800532a:	4618      	mov	r0, r3
 800532c:	4611      	mov	r1, r2
 800532e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005332:	623b      	str	r3, [r7, #32]
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
 8005338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534e:	0150      	lsls	r0, r2, #5
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4641      	mov	r1, r8
 8005356:	ebb2 0a01 	subs.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800536c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005374:	ebb2 040a 	subs.w	r4, r2, sl
 8005378:	eb63 050b 	sbc.w	r5, r3, fp
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	00eb      	lsls	r3, r5, #3
 8005386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800538a:	00e2      	lsls	r2, r4, #3
 800538c:	4614      	mov	r4, r2
 800538e:	461d      	mov	r5, r3
 8005390:	4643      	mov	r3, r8
 8005392:	18e3      	adds	r3, r4, r3
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	464b      	mov	r3, r9
 8005398:	eb45 0303 	adc.w	r3, r5, r3
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053aa:	4629      	mov	r1, r5
 80053ac:	028b      	lsls	r3, r1, #10
 80053ae:	4621      	mov	r1, r4
 80053b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053b4:	4621      	mov	r1, r4
 80053b6:	028a      	lsls	r2, r1, #10
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053be:	2200      	movs	r2, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	61fa      	str	r2, [r7, #28]
 80053c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c8:	f7fa ff3a 	bl	8000240 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80053e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3750      	adds	r7, #80	; 0x50
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800
 8005408:	00f42400 	.word	0x00f42400
 800540c:	007a1200 	.word	0x007a1200

08005410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HAL_RCC_GetHCLKFreq+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000000 	.word	0x20000000

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800542c:	f7ff fff0 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0a9b      	lsrs	r3, r3, #10
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40023800 	.word	0x40023800
 800544c:	08010954 	.word	0x08010954

08005450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005454:	f7ff ffdc 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0b5b      	lsrs	r3, r3, #13
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	08010954 	.word	0x08010954

08005478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	220f      	movs	r2, #15
 8005486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_GetClockConfig+0x5c>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0203 	and.w	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005494:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <HAL_RCC_GetClockConfig+0x5c>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_GetClockConfig+0x5c>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <HAL_RCC_GetClockConfig+0x60>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40023c00 	.word	0x40023c00

080054dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005504:	4b69      	ldr	r3, [pc, #420]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a68      	ldr	r2, [pc, #416]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800550e:	6093      	str	r3, [r2, #8]
 8005510:	4b66      	ldr	r3, [pc, #408]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	4964      	ldr	r1, [pc, #400]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d017      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005536:	4b5d      	ldr	r3, [pc, #372]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005544:	4959      	ldr	r1, [pc, #356]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d017      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005572:	4b4e      	ldr	r3, [pc, #312]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	494a      	ldr	r1, [pc, #296]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005590:	d101      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005592:	2301      	movs	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 808b 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	4b3a      	ldr	r3, [pc, #232]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	4a39      	ldr	r2, [pc, #228]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ca:	6413      	str	r3, [r2, #64]	; 0x40
 80055cc:	4b37      	ldr	r3, [pc, #220]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055d8:	4b35      	ldr	r3, [pc, #212]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fc f9d2 	bl	800198c <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fc f9ce 	bl	800198c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e38f      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560a:	4b28      	ldr	r3, [pc, #160]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d035      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	d02e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005628:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005632:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d114      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fc f996 	bl	800198c <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005662:	e00a      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fc f992 	bl	800198c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e351      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0ee      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005692:	d111      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	4901      	ldr	r1, [pc, #4]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
 80056aa:	e00b      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40007000 	.word	0x40007000
 80056b4:	0ffffcff 	.word	0x0ffffcff
 80056b8:	4bac      	ldr	r3, [pc, #688]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	4aab      	ldr	r2, [pc, #684]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056c2:	6093      	str	r3, [r2, #8]
 80056c4:	4ba9      	ldr	r3, [pc, #676]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	49a6      	ldr	r1, [pc, #664]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d010      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056e2:	4ba2      	ldr	r3, [pc, #648]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e8:	4aa0      	ldr	r2, [pc, #640]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80056f2:	4b9e      	ldr	r3, [pc, #632]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	499b      	ldr	r1, [pc, #620]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005710:	4b96      	ldr	r3, [pc, #600]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800571e:	4993      	ldr	r1, [pc, #588]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005732:	4b8e      	ldr	r3, [pc, #568]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005740:	498a      	ldr	r1, [pc, #552]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005754:	4b85      	ldr	r3, [pc, #532]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	4982      	ldr	r1, [pc, #520]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005776:	4b7d      	ldr	r3, [pc, #500]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4979      	ldr	r1, [pc, #484]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005798:	4b74      	ldr	r3, [pc, #464]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	4971      	ldr	r1, [pc, #452]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ba:	4b6c      	ldr	r3, [pc, #432]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f023 020c 	bic.w	r2, r3, #12
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	4968      	ldr	r1, [pc, #416]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057dc:	4b63      	ldr	r3, [pc, #396]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	4960      	ldr	r1, [pc, #384]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057fe:	4b5b      	ldr	r3, [pc, #364]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	4957      	ldr	r1, [pc, #348]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005820:	4b52      	ldr	r3, [pc, #328]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	494f      	ldr	r1, [pc, #316]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005842:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	4946      	ldr	r1, [pc, #280]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	493e      	ldr	r1, [pc, #248]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005886:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	4935      	ldr	r1, [pc, #212]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058a8:	4b30      	ldr	r3, [pc, #192]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b6:	492d      	ldr	r1, [pc, #180]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058ca:	4b28      	ldr	r3, [pc, #160]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d8:	4924      	ldr	r1, [pc, #144]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e8:	d101      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80058ea:	2301      	movs	r3, #1
 80058ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590a:	4b18      	ldr	r3, [pc, #96]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005918:	4914      	ldr	r1, [pc, #80]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593c:	490b      	ldr	r1, [pc, #44]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00f      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005956:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005960:	4902      	ldr	r1, [pc, #8]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800597c:	4b8a      	ldr	r3, [pc, #552]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800597e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005982:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	4986      	ldr	r1, [pc, #536]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059a0:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	497d      	ldr	r1, [pc, #500]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d006      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80d6 	beq.w	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059cc:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a75      	ldr	r2, [pc, #468]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d8:	f7fb ffd8 	bl	800198c <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059e0:	f7fb ffd4 	bl	800198c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e195      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059f2:	4b6d      	ldr	r3, [pc, #436]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d021      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11d      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a12:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	0e1b      	lsrs	r3, r3, #24
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	019a      	lsls	r2, r3, #6
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	071b      	lsls	r3, r3, #28
 8005a46:	4958      	ldr	r1, [pc, #352]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02e      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a78:	d129      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a7a:	4b4b      	ldr	r3, [pc, #300]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a88:	4b47      	ldr	r3, [pc, #284]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8e:	0f1b      	lsrs	r3, r3, #28
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	019a      	lsls	r2, r3, #6
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	493e      	ldr	r1, [pc, #248]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ab6:	4b3c      	ldr	r3, [pc, #240]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abc:	f023 021f 	bic.w	r2, r3, #31
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4938      	ldr	r1, [pc, #224]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01d      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ada:	4b33      	ldr	r3, [pc, #204]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aee:	0f1b      	lsrs	r3, r3, #28
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	019a      	lsls	r2, r3, #6
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	431a      	orrs	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	071b      	lsls	r3, r3, #28
 8005b0e:	4926      	ldr	r1, [pc, #152]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d011      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	071b      	lsls	r3, r3, #28
 8005b3e:	491a      	ldr	r1, [pc, #104]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b52:	f7fb ff1b 	bl	800198c <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b5a:	f7fb ff17 	bl	800198c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b64      	cmp	r3, #100	; 0x64
 8005b66:	d901      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0d8      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	f040 80ce 	bne.w	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fb fefe 	bl	800198c <HAL_GetTick>
 8005b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b92:	e00b      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b94:	f7fb fefa 	bl	800198c <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d904      	bls.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0bb      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb8:	d0ec      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02e      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d12a      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005be2:	4b51      	ldr	r3, [pc, #324]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bf0:	4b4d      	ldr	r3, [pc, #308]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	0f1b      	lsrs	r3, r3, #28
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	019a      	lsls	r2, r3, #6
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	061b      	lsls	r3, r3, #24
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	4944      	ldr	r1, [pc, #272]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	493d      	ldr	r1, [pc, #244]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c4c:	d11d      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c4e:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	0e1b      	lsrs	r3, r3, #24
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c5c:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	019a      	lsls	r2, r3, #6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	431a      	orrs	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	071b      	lsls	r3, r3, #28
 8005c82:	4929      	ldr	r1, [pc, #164]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d028      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	0e1b      	lsrs	r3, r3, #24
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ca4:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	019a      	lsls	r2, r3, #6
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	061b      	lsls	r3, r3, #24
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	071b      	lsls	r3, r3, #28
 8005cca:	4917      	ldr	r1, [pc, #92]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4911      	ldr	r1, [pc, #68]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fb fe4a 	bl	800198c <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cfc:	f7fb fe46 	bl	800198c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	; 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e007      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1a:	d1ef      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800

08005d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e09d      	b.n	8005e7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4e:	d009      	beq.n	8005d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	61da      	str	r2, [r3, #28]
 8005d56:	e005      	b.n	8005d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fb06 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005da4:	d902      	bls.n	8005dac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e002      	b.n	8005db2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dba:	d007      	beq.n	8005dcc <HAL_SPI_Init+0xa0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	ea42 0103 	orr.w	r1, r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	f003 0204 	and.w	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e48:	ea42 0103 	orr.w	r1, r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e049      	b.n	8005f28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fb fb21 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f000 ffbd 	bl	8006e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d001      	beq.n	8005f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e054      	b.n	8005ff2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a26      	ldr	r2, [pc, #152]	; (8006000 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a22      	ldr	r2, [pc, #136]	; (8006004 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a21      	ldr	r2, [pc, #132]	; (8006008 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1f      	ldr	r2, [pc, #124]	; (800600c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d115      	bne.n	8005fdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <HAL_TIM_Base_Start_IT+0xec>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d015      	beq.n	8005fee <HAL_TIM_Base_Start_IT+0xbe>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d011      	beq.n	8005fee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	e008      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e000      	b.n	8005ff0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800
 800601c:	00010007 	.word	0x00010007

08006020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e049      	b.n	80060c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f841 	bl	80060ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 feee 	bl	8006e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_IC_Start+0x1a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	e023      	b.n	8006146 <HAL_TIM_IC_Start+0x62>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d104      	bne.n	800610e <HAL_TIM_IC_Start+0x2a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800610a:	b2db      	uxtb	r3, r3
 800610c:	e01b      	b.n	8006146 <HAL_TIM_IC_Start+0x62>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d104      	bne.n	800611e <HAL_TIM_IC_Start+0x3a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611a:	b2db      	uxtb	r3, r3
 800611c:	e013      	b.n	8006146 <HAL_TIM_IC_Start+0x62>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b0c      	cmp	r3, #12
 8006122:	d104      	bne.n	800612e <HAL_TIM_IC_Start+0x4a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	e00b      	b.n	8006146 <HAL_TIM_IC_Start+0x62>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d104      	bne.n	800613e <HAL_TIM_IC_Start+0x5a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e003      	b.n	8006146 <HAL_TIM_IC_Start+0x62>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006144:	b2db      	uxtb	r3, r3
 8006146:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <HAL_TIM_IC_Start+0x74>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e013      	b.n	8006180 <HAL_TIM_IC_Start+0x9c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d104      	bne.n	8006168 <HAL_TIM_IC_Start+0x84>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e00b      	b.n	8006180 <HAL_TIM_IC_Start+0x9c>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d104      	bne.n	8006178 <HAL_TIM_IC_Start+0x94>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e003      	b.n	8006180 <HAL_TIM_IC_Start+0x9c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800617e:	b2db      	uxtb	r3, r3
 8006180:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d102      	bne.n	800618e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e097      	b.n	80062c2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_IC_Start+0xbe>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a0:	e023      	b.n	80061ea <HAL_TIM_IC_Start+0x106>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_IC_Start+0xce>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	e01b      	b.n	80061ea <HAL_TIM_IC_Start+0x106>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_IC_Start+0xde>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	e013      	b.n	80061ea <HAL_TIM_IC_Start+0x106>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_IC_Start+0xee>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_IC_Start+0x106>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_IC_Start+0xfe>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e0:	e003      	b.n	80061ea <HAL_TIM_IC_Start+0x106>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_IC_Start+0x116>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f8:	e013      	b.n	8006222 <HAL_TIM_IC_Start+0x13e>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d104      	bne.n	800620a <HAL_TIM_IC_Start+0x126>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006208:	e00b      	b.n	8006222 <HAL_TIM_IC_Start+0x13e>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d104      	bne.n	800621a <HAL_TIM_IC_Start+0x136>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006218:	e003      	b.n	8006222 <HAL_TIM_IC_Start+0x13e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f001 f900 	bl	8007430 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <HAL_TIM_IC_Start+0x1e8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d022      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d01d      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <HAL_TIM_IC_Start+0x1ec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_TIM_IC_Start+0x1f0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <HAL_TIM_IC_Start+0x1f4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <HAL_TIM_IC_Start+0x1f8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_TIM_IC_Start+0x1fc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_IC_Start+0x19c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <HAL_TIM_IC_Start+0x200>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d115      	bne.n	80062ac <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_TIM_IC_Start+0x204>)
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d015      	beq.n	80062be <HAL_TIM_IC_Start+0x1da>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d011      	beq.n	80062be <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	e008      	b.n	80062be <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e000      	b.n	80062c0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40001800 	.word	0x40001800
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f896 	bl	8007430 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	f241 1311 	movw	r3, #4369	; 0x1111
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10f      	bne.n	8006334 <HAL_TIM_IC_Stop+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	f240 4344 	movw	r3, #1092	; 0x444
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IC_Stop+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <HAL_TIM_IC_Stop+0x58>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006342:	e023      	b.n	800638c <HAL_TIM_IC_Stop+0xa0>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b04      	cmp	r3, #4
 8006348:	d104      	bne.n	8006354 <HAL_TIM_IC_Stop+0x68>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006352:	e01b      	b.n	800638c <HAL_TIM_IC_Stop+0xa0>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b08      	cmp	r3, #8
 8006358:	d104      	bne.n	8006364 <HAL_TIM_IC_Stop+0x78>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006362:	e013      	b.n	800638c <HAL_TIM_IC_Stop+0xa0>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d104      	bne.n	8006374 <HAL_TIM_IC_Stop+0x88>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006372:	e00b      	b.n	800638c <HAL_TIM_IC_Stop+0xa0>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b10      	cmp	r3, #16
 8006378:	d104      	bne.n	8006384 <HAL_TIM_IC_Stop+0x98>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006382:	e003      	b.n	800638c <HAL_TIM_IC_Stop+0xa0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_TIM_IC_Stop+0xb0>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800639a:	e013      	b.n	80063c4 <HAL_TIM_IC_Stop+0xd8>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d104      	bne.n	80063ac <HAL_TIM_IC_Stop+0xc0>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063aa:	e00b      	b.n	80063c4 <HAL_TIM_IC_Stop+0xd8>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d104      	bne.n	80063bc <HAL_TIM_IC_Stop+0xd0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ba:	e003      	b.n	80063c4 <HAL_TIM_IC_Stop+0xd8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_IC_Start_IT+0x1e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	e023      	b.n	8006436 <HAL_TIM_IC_Start_IT+0x66>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_IC_Start_IT+0x2e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	e01b      	b.n	8006436 <HAL_TIM_IC_Start_IT+0x66>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d104      	bne.n	800640e <HAL_TIM_IC_Start_IT+0x3e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e013      	b.n	8006436 <HAL_TIM_IC_Start_IT+0x66>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b0c      	cmp	r3, #12
 8006412:	d104      	bne.n	800641e <HAL_TIM_IC_Start_IT+0x4e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	e00b      	b.n	8006436 <HAL_TIM_IC_Start_IT+0x66>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b10      	cmp	r3, #16
 8006422:	d104      	bne.n	800642e <HAL_TIM_IC_Start_IT+0x5e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800642a:	b2db      	uxtb	r3, r3
 800642c:	e003      	b.n	8006436 <HAL_TIM_IC_Start_IT+0x66>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006434:	b2db      	uxtb	r3, r3
 8006436:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <HAL_TIM_IC_Start_IT+0x78>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e013      	b.n	8006470 <HAL_TIM_IC_Start_IT+0xa0>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b04      	cmp	r3, #4
 800644c:	d104      	bne.n	8006458 <HAL_TIM_IC_Start_IT+0x88>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e00b      	b.n	8006470 <HAL_TIM_IC_Start_IT+0xa0>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d104      	bne.n	8006468 <HAL_TIM_IC_Start_IT+0x98>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e003      	b.n	8006470 <HAL_TIM_IC_Start_IT+0xa0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800646e:	b2db      	uxtb	r3, r3
 8006470:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006478:	7b7b      	ldrb	r3, [r7, #13]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0e2      	b.n	8006648 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_TIM_IC_Start_IT+0xc2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006490:	e023      	b.n	80064da <HAL_TIM_IC_Start_IT+0x10a>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_IC_Start_IT+0xd2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a0:	e01b      	b.n	80064da <HAL_TIM_IC_Start_IT+0x10a>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_IC_Start_IT+0xe2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b0:	e013      	b.n	80064da <HAL_TIM_IC_Start_IT+0x10a>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_IC_Start_IT+0xf2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c0:	e00b      	b.n	80064da <HAL_TIM_IC_Start_IT+0x10a>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_IC_Start_IT+0x102>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d0:	e003      	b.n	80064da <HAL_TIM_IC_Start_IT+0x10a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <HAL_TIM_IC_Start_IT+0x11a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e8:	e013      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x142>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_IC_Start_IT+0x12a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f8:	e00b      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x142>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d104      	bne.n	800650a <HAL_TIM_IC_Start_IT+0x13a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006508:	e003      	b.n	8006512 <HAL_TIM_IC_Start_IT+0x142>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b0c      	cmp	r3, #12
 8006516:	d841      	bhi.n	800659c <HAL_TIM_IC_Start_IT+0x1cc>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_TIM_IC_Start_IT+0x150>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006555 	.word	0x08006555
 8006524:	0800659d 	.word	0x0800659d
 8006528:	0800659d 	.word	0x0800659d
 800652c:	0800659d 	.word	0x0800659d
 8006530:	08006567 	.word	0x08006567
 8006534:	0800659d 	.word	0x0800659d
 8006538:	0800659d 	.word	0x0800659d
 800653c:	0800659d 	.word	0x0800659d
 8006540:	08006579 	.word	0x08006579
 8006544:	0800659d 	.word	0x0800659d
 8006548:	0800659d 	.word	0x0800659d
 800654c:	0800659d 	.word	0x0800659d
 8006550:	0800658b 	.word	0x0800658b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0202 	orr.w	r2, r2, #2
 8006562:	60da      	str	r2, [r3, #12]
      break;
 8006564:	e01d      	b.n	80065a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0204 	orr.w	r2, r2, #4
 8006574:	60da      	str	r2, [r3, #12]
      break;
 8006576:	e014      	b.n	80065a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0208 	orr.w	r2, r2, #8
 8006586:	60da      	str	r2, [r3, #12]
      break;
 8006588:	e00b      	b.n	80065a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0210 	orr.w	r2, r2, #16
 8006598:	60da      	str	r2, [r3, #12]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d14e      	bne.n	8006646 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 ff3d 	bl	8007430 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_TIM_IC_Start_IT+0x280>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a21      	ldr	r2, [pc, #132]	; (8006654 <HAL_TIM_IC_Start_IT+0x284>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <HAL_TIM_IC_Start_IT+0x288>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1e      	ldr	r2, [pc, #120]	; (800665c <HAL_TIM_IC_Start_IT+0x28c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <HAL_TIM_IC_Start_IT+0x290>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <HAL_TIM_IC_Start_IT+0x294>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIM_IC_Start_IT+0x236>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <HAL_TIM_IC_Start_IT+0x298>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d115      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	4b17      	ldr	r3, [pc, #92]	; (800666c <HAL_TIM_IC_Start_IT+0x29c>)
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b06      	cmp	r3, #6
 8006616:	d015      	beq.n	8006644 <HAL_TIM_IC_Start_IT+0x274>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661e:	d011      	beq.n	8006644 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006630:	e008      	b.n	8006644 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e000      	b.n	8006646 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40010000 	.word	0x40010000
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00
 8006660:	40010400 	.word	0x40010400
 8006664:	40014000 	.word	0x40014000
 8006668:	40001800 	.word	0x40001800
 800666c:	00010007 	.word	0x00010007

08006670 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b0c      	cmp	r3, #12
 8006682:	d841      	bhi.n	8006708 <HAL_TIM_IC_Stop_IT+0x98>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <HAL_TIM_IC_Stop_IT+0x1c>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066c1 	.word	0x080066c1
 8006690:	08006709 	.word	0x08006709
 8006694:	08006709 	.word	0x08006709
 8006698:	08006709 	.word	0x08006709
 800669c:	080066d3 	.word	0x080066d3
 80066a0:	08006709 	.word	0x08006709
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006709 	.word	0x08006709
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	08006709 	.word	0x08006709
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006709 	.word	0x08006709
 80066bc:	080066f7 	.word	0x080066f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0202 	bic.w	r2, r2, #2
 80066ce:	60da      	str	r2, [r3, #12]
      break;
 80066d0:	e01d      	b.n	800670e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0204 	bic.w	r2, r2, #4
 80066e0:	60da      	str	r2, [r3, #12]
      break;
 80066e2:	e014      	b.n	800670e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0208 	bic.w	r2, r2, #8
 80066f2:	60da      	str	r2, [r3, #12]
      break;
 80066f4:	e00b      	b.n	800670e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0210 	bic.w	r2, r2, #16
 8006704:	60da      	str	r2, [r3, #12]
      break;
 8006706:	e002      	b.n	800670e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	bf00      	nop
  }

  if (status == HAL_OK)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d166      	bne.n	80067e2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fe87 	bl	8007430 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	f241 1311 	movw	r3, #4369	; 0x1111
 800672c:	4013      	ands	r3, r2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <HAL_TIM_IC_Stop_IT+0xe2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	f240 4344 	movw	r3, #1092	; 0x444
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IC_Stop_IT+0xe2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0201 	bic.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <HAL_TIM_IC_Stop_IT+0xf2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006760:	e023      	b.n	80067aa <HAL_TIM_IC_Stop_IT+0x13a>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d104      	bne.n	8006772 <HAL_TIM_IC_Stop_IT+0x102>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006770:	e01b      	b.n	80067aa <HAL_TIM_IC_Stop_IT+0x13a>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d104      	bne.n	8006782 <HAL_TIM_IC_Stop_IT+0x112>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006780:	e013      	b.n	80067aa <HAL_TIM_IC_Stop_IT+0x13a>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b0c      	cmp	r3, #12
 8006786:	d104      	bne.n	8006792 <HAL_TIM_IC_Stop_IT+0x122>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006790:	e00b      	b.n	80067aa <HAL_TIM_IC_Stop_IT+0x13a>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b10      	cmp	r3, #16
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_IC_Stop_IT+0x132>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a0:	e003      	b.n	80067aa <HAL_TIM_IC_Stop_IT+0x13a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_IC_Stop_IT+0x14a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b8:	e013      	b.n	80067e2 <HAL_TIM_IC_Stop_IT+0x172>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d104      	bne.n	80067ca <HAL_TIM_IC_Stop_IT+0x15a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c8:	e00b      	b.n	80067e2 <HAL_TIM_IC_Stop_IT+0x172>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d104      	bne.n	80067da <HAL_TIM_IC_Stop_IT+0x16a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067d8:	e003      	b.n	80067e2 <HAL_TIM_IC_Stop_IT+0x172>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0202 	mvn.w	r2, #2
 8006818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f003 fd64 	bl	800a2fc <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fae4 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 faeb 	bl	8006e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0204 	mvn.w	r2, #4
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f003 fd3a 	bl	800a2fc <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 faba 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fac1 	bl	8006e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f003 fd10 	bl	800a2fc <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa90 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa97 	bl	8006e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0210 	mvn.w	r2, #16
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2208      	movs	r2, #8
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f003 fce6 	bl	800a2fc <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa66 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa6d 	bl	8006e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fa fb2c 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fe08 	bl	80075ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fdfb 	bl	80075c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa1b 	bl	8006e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0220 	mvn.w	r2, #32
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fdbb 	bl	8007598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e088      	b.n	8006b5a <HAL_TIM_IC_ConfigChannel+0x130>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11b      	bne.n	8006a8e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f000 fb1f 	bl	80070a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 020c 	bic.w	r2, r2, #12
 8006a78:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6999      	ldr	r1, [r3, #24]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
 8006a8c:	e060      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d11c      	bne.n	8006ace <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f000 fba3 	bl	80071ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ab6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
 8006acc:	e040      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6819      	ldr	r1, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f000 fbf0 	bl	80072c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 020c 	bic.w	r2, r2, #12
 8006af6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69d9      	ldr	r1, [r3, #28]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	61da      	str	r2, [r3, #28]
 8006b0a:	e021      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d11c      	bne.n	8006b4c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f000 fc0d 	bl	8007340 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69d9      	ldr	r1, [r3, #28]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	021a      	lsls	r2, r3, #8
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	61da      	str	r2, [r3, #28]
 8006b4a:	e001      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIM_ConfigClockSource+0x1c>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e0b4      	b.n	8006cea <HAL_TIM_ConfigClockSource+0x186>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4b56      	ldr	r3, [pc, #344]	; (8006cf4 <HAL_TIM_ConfigClockSource+0x190>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb8:	d03e      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0xd4>
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbe:	f200 8087 	bhi.w	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	f000 8086 	beq.w	8006cd6 <HAL_TIM_ConfigClockSource+0x172>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d87f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d01a      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0xa6>
 8006bd4:	2b70      	cmp	r3, #112	; 0x70
 8006bd6:	d87b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d050      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x11a>
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d877      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b50      	cmp	r3, #80	; 0x50
 8006be2:	d03c      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0xfa>
 8006be4:	2b50      	cmp	r3, #80	; 0x50
 8006be6:	d873      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d058      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x13a>
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d86f      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d064      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006bf4:	2b30      	cmp	r3, #48	; 0x30
 8006bf6:	d86b      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d060      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d867      	bhi.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05c      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d05a      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x15a>
 8006c08:	e062      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f000 fbe9 	bl	80073f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]
      break;
 8006c36:	e04f      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6899      	ldr	r1, [r3, #8]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f000 fbd2 	bl	80073f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5a:	609a      	str	r2, [r3, #8]
      break;
 8006c5c:	e03c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fa90 	bl	8007190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2150      	movs	r1, #80	; 0x50
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fb9f 	bl	80073ba <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e02c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 faec 	bl	8007268 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2160      	movs	r1, #96	; 0x60
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fb8f 	bl	80073ba <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e01c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fa70 	bl	8007190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fb7f 	bl	80073ba <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e00c      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f000 fb76 	bl	80073ba <TIM_ITRx_SetConfig>
      break;
 8006cce:	e003      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e000      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	fffeff88 	.word	0xfffeff88

08006cf8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e031      	b.n	8006d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f92c 	bl	8006f80 <TIM_SlaveTimer_SetConfig>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e018      	b.n	8006d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b0c      	cmp	r3, #12
 8006d8e:	d831      	bhi.n	8006df4 <HAL_TIM_ReadCapturedValue+0x78>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006df5 	.word	0x08006df5
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006df5 	.word	0x08006df5
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006deb 	.word	0x08006deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	60fb      	str	r3, [r7, #12]

      break;
 8006dd4:	e00f      	b.n	8006df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	60fb      	str	r3, [r7, #12]

      break;
 8006dde:	e00a      	b.n	8006df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	60fb      	str	r3, [r7, #12]

      break;
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	60fb      	str	r3, [r7, #12]

      break;
 8006df2:	e000      	b.n	8006df6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006df4:	bf00      	nop
  }

  return tmpreg;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a40      	ldr	r2, [pc, #256]	; (8006f54 <TIM_Base_SetConfig+0x114>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d013      	beq.n	8006e80 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5e:	d00f      	beq.n	8006e80 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3d      	ldr	r2, [pc, #244]	; (8006f58 <TIM_Base_SetConfig+0x118>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a3c      	ldr	r2, [pc, #240]	; (8006f5c <TIM_Base_SetConfig+0x11c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a3b      	ldr	r2, [pc, #236]	; (8006f60 <TIM_Base_SetConfig+0x120>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a3a      	ldr	r2, [pc, #232]	; (8006f64 <TIM_Base_SetConfig+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d108      	bne.n	8006e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2f      	ldr	r2, [pc, #188]	; (8006f54 <TIM_Base_SetConfig+0x114>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d02b      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea0:	d027      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2c      	ldr	r2, [pc, #176]	; (8006f58 <TIM_Base_SetConfig+0x118>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d023      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2b      	ldr	r2, [pc, #172]	; (8006f5c <TIM_Base_SetConfig+0x11c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01f      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <TIM_Base_SetConfig+0x120>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01b      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a29      	ldr	r2, [pc, #164]	; (8006f64 <TIM_Base_SetConfig+0x124>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d017      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a28      	ldr	r2, [pc, #160]	; (8006f68 <TIM_Base_SetConfig+0x128>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a27      	ldr	r2, [pc, #156]	; (8006f6c <TIM_Base_SetConfig+0x12c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <TIM_Base_SetConfig+0x130>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a25      	ldr	r2, [pc, #148]	; (8006f74 <TIM_Base_SetConfig+0x134>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d007      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <TIM_Base_SetConfig+0x138>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <TIM_Base_SetConfig+0x13c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d108      	bne.n	8006f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <TIM_Base_SetConfig+0x114>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_Base_SetConfig+0xf8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a0c      	ldr	r2, [pc, #48]	; (8006f64 <TIM_Base_SetConfig+0x124>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d103      	bne.n	8006f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	615a      	str	r2, [r3, #20]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800
 8006f74:	40001800 	.word	0x40001800
 8006f78:	40001c00 	.word	0x40001c00
 8006f7c:	40002000 	.word	0x40002000

08006f80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <TIM_SlaveTimer_SetConfig+0x124>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b70      	cmp	r3, #112	; 0x70
 8006fc8:	d01a      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x80>
 8006fca:	2b70      	cmp	r3, #112	; 0x70
 8006fcc:	d860      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006fce:	2b60      	cmp	r3, #96	; 0x60
 8006fd0:	d054      	beq.n	800707c <TIM_SlaveTimer_SetConfig+0xfc>
 8006fd2:	2b60      	cmp	r3, #96	; 0x60
 8006fd4:	d85c      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006fd6:	2b50      	cmp	r3, #80	; 0x50
 8006fd8:	d046      	beq.n	8007068 <TIM_SlaveTimer_SetConfig+0xe8>
 8006fda:	2b50      	cmp	r3, #80	; 0x50
 8006fdc:	d858      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d019      	beq.n	8007016 <TIM_SlaveTimer_SetConfig+0x96>
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d854      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	d055      	beq.n	8007096 <TIM_SlaveTimer_SetConfig+0x116>
 8006fea:	2b30      	cmp	r3, #48	; 0x30
 8006fec:	d850      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d051      	beq.n	8007096 <TIM_SlaveTimer_SetConfig+0x116>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d84c      	bhi.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04d      	beq.n	8007096 <TIM_SlaveTimer_SetConfig+0x116>
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d04b      	beq.n	8007096 <TIM_SlaveTimer_SetConfig+0x116>
 8006ffe:	e047      	b.n	8007090 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68d9      	ldr	r1, [r3, #12]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f000 f9ee 	bl	80073f0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007014:	e040      	b.n	8007098 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d101      	bne.n	8007022 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e03b      	b.n	800709a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007048:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4313      	orrs	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
      break;
 8007066:	e017      	b.n	8007098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6899      	ldr	r1, [r3, #8]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	461a      	mov	r2, r3
 8007076:	f000 f88b 	bl	8007190 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800707a:	e00d      	b.n	8007098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6899      	ldr	r1, [r3, #8]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	461a      	mov	r2, r3
 800708a:	f000 f8ed 	bl	8007268 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800708e:	e003      	b.n	8007098 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
      break;
 8007094:	e000      	b.n	8007098 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007096:	bf00      	nop
  }

  return status;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	fffefff8 	.word	0xfffefff8

080070a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0201 	bic.w	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4a28      	ldr	r2, [pc, #160]	; (8007174 <TIM_TI1_SetConfig+0xcc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01b      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d017      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <TIM_TI1_SetConfig+0xd0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4a24      	ldr	r2, [pc, #144]	; (800717c <TIM_TI1_SetConfig+0xd4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00f      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4a23      	ldr	r2, [pc, #140]	; (8007180 <TIM_TI1_SetConfig+0xd8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a22      	ldr	r2, [pc, #136]	; (8007184 <TIM_TI1_SetConfig+0xdc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4a21      	ldr	r2, [pc, #132]	; (8007188 <TIM_TI1_SetConfig+0xe0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_TI1_SetConfig+0x66>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a20      	ldr	r2, [pc, #128]	; (800718c <TIM_TI1_SetConfig+0xe4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <TIM_TI1_SetConfig+0x6a>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <TIM_TI1_SetConfig+0x6c>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e003      	b.n	8007132 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	b2db      	uxtb	r3, r3
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f023 030a 	bic.w	r3, r3, #10
 800714c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f003 030a 	and.w	r3, r3, #10
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40010400 	.word	0x40010400
 8007188:	40014000 	.word	0x40014000
 800718c:	40001800 	.word	0x40001800

08007190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f023 0201 	bic.w	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 030a 	bic.w	r3, r3, #10
 80071cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0210 	bic.w	r2, r3, #16
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	b29b      	uxth	r3, r3
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007240:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f023 0210 	bic.w	r2, r3, #16
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007292:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	031b      	lsls	r3, r3, #12
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0303 	bic.w	r3, r3, #3
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007304:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	b2db      	uxtb	r3, r3
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800737e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	031b      	lsls	r3, r3, #12
 8007384:	b29b      	uxth	r3, r3
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007392:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	031b      	lsls	r3, r3, #12
 8007398:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f043 0307 	orr.w	r3, r3, #7
 80073dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	609a      	str	r2, [r3, #8]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800740a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	021a      	lsls	r2, r3, #8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	431a      	orrs	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4313      	orrs	r3, r2
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2201      	movs	r2, #1
 8007444:	fa02 f303 	lsl.w	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1a      	ldr	r2, [r3, #32]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	43db      	mvns	r3, r3
 8007452:	401a      	ands	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	fa01 f303 	lsl.w	r3, r1, r3
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e06d      	b.n	8007570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a30      	ldr	r2, [pc, #192]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d108      	bne.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a20      	ldr	r2, [pc, #128]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d022      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d01d      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1a      	ldr	r2, [pc, #104]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a15      	ldr	r2, [pc, #84]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a16      	ldr	r2, [pc, #88]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a15      	ldr	r2, [pc, #84]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d10c      	bne.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	4313      	orrs	r3, r2
 8007554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40010000 	.word	0x40010000
 8007580:	40010400 	.word	0x40010400
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40014000 	.word	0x40014000
 8007594:	40001800 	.word	0x40001800

08007598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e040      	b.n	8007668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f9 ffc6 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2224      	movs	r2, #36	; 0x24
 8007600:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fb46 	bl	8007ca4 <UART_SetConfig>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e022      	b.n	8007668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fd9e 	bl	800816c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800763e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800764e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fe25 	bl	80082b0 <UART_CheckIdleState>
 8007666:	4603      	mov	r3, r0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b0ba      	sub	sp, #232	; 0xe8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800769a:	f640 030f 	movw	r3, #2063	; 0x80f
 800769e:	4013      	ands	r3, r2
 80076a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d115      	bne.n	80076d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00f      	beq.n	80076d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d009      	beq.n	80076d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 82ac 	beq.w	8007c26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
      }
      return;
 80076d6:	e2a6      	b.n	8007c26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8117 	beq.w	8007910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076f2:	4b85      	ldr	r3, [pc, #532]	; (8007908 <HAL_UART_IRQHandler+0x298>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 810a 	beq.w	8007910 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <HAL_UART_IRQHandler+0xbc>
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007722:	f043 0201 	orr.w	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d011      	beq.n	800775c <HAL_UART_IRQHandler+0xec>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2202      	movs	r2, #2
 800774a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007752:	f043 0204 	orr.w	r2, r3, #4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d011      	beq.n	800778c <HAL_UART_IRQHandler+0x11c>
 8007768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2204      	movs	r2, #4
 800777a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007782:	f043 0202 	orr.w	r2, r3, #2
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d017      	beq.n	80077c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2208      	movs	r2, #8
 80077b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077be:	f043 0208 	orr.w	r2, r3, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <HAL_UART_IRQHandler+0x18a>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8212 	beq.w	8007c2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00d      	beq.n	800782e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d005      	beq.n	8007852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800784a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800784e:	2b00      	cmp	r3, #0
 8007850:	d04f      	beq.n	80078f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 ff06 	bl	8008664 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d141      	bne.n	80078ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800787c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007892:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800789e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1d9      	bne.n	8007866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d013      	beq.n	80078e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	4a13      	ldr	r2, [pc, #76]	; (800790c <HAL_UART_IRQHandler+0x29c>)
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fa fd42 	bl	8002350 <HAL_DMA_Abort_IT>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d017      	beq.n	8007902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	e00f      	b.n	8007902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9ca 	bl	8007c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e00b      	b.n	8007902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f9c6 	bl	8007c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	e007      	b.n	8007902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9c2 	bl	8007c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007900:	e193      	b.n	8007c2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007902:	bf00      	nop
    return;
 8007904:	e191      	b.n	8007c2a <HAL_UART_IRQHandler+0x5ba>
 8007906:	bf00      	nop
 8007908:	04000120 	.word	0x04000120
 800790c:	08008911 	.word	0x08008911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	2b01      	cmp	r3, #1
 8007916:	f040 814c 	bne.w	8007bb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8145 	beq.w	8007bb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 813e 	beq.w	8007bb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2210      	movs	r2, #16
 800793c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	f040 80b6 	bne.w	8007aba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800795a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8165 	beq.w	8007c2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800796a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800796e:	429a      	cmp	r2, r3
 8007970:	f080 815d 	bcs.w	8007c2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800797a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007988:	f000 8086 	beq.w	8007a98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1da      	bne.n	800798c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e1      	bne.n	80079d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e3      	bne.n	8007a12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fa fbec 	bl	8002270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fc52 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab8:	e0b9      	b.n	8007c2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80ab 	beq.w	8007c32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80a6 	beq.w	8007c32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b08:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e4      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b40:	633a      	str	r2, [r7, #48]	; 0x30
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e3      	bne.n	8007b1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	617b      	str	r3, [r7, #20]
   return(result);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e4      	bne.n	8007b68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f002 fbd6 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bb0:	e03f      	b.n	8007c32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <HAL_UART_IRQHandler+0x56c>
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f85b 	bl	8007c90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bda:	e02d      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01c      	beq.n	8007c36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
    }
    return;
 8007c04:	e017      	b.n	8007c36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d012      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fe8c 	bl	800893c <UART_EndTransmit_IT>
    return;
 8007c24:	e008      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007c26:	bf00      	nop
 8007c28:	e006      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007c2a:	bf00      	nop
 8007c2c:	e004      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007c2e:	bf00      	nop
 8007c30:	e002      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007c36:	bf00      	nop
  }

}
 8007c38:	37e8      	adds	r7, #232	; 0xe8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop

08007c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4ba6      	ldr	r3, [pc, #664]	; (8007f68 <UART_SetConfig+0x2c4>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	6979      	ldr	r1, [r7, #20]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a94      	ldr	r2, [pc, #592]	; (8007f6c <UART_SetConfig+0x2c8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d120      	bne.n	8007d62 <UART_SetConfig+0xbe>
 8007d20:	4b93      	ldr	r3, [pc, #588]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d816      	bhi.n	8007d5c <UART_SetConfig+0xb8>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x90>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d51 	.word	0x08007d51
 8007d3c:	08007d4b 	.word	0x08007d4b
 8007d40:	08007d57 	.word	0x08007d57
 8007d44:	2301      	movs	r3, #1
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e150      	b.n	8007fec <UART_SetConfig+0x348>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e14d      	b.n	8007fec <UART_SetConfig+0x348>
 8007d50:	2304      	movs	r3, #4
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e14a      	b.n	8007fec <UART_SetConfig+0x348>
 8007d56:	2308      	movs	r3, #8
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e147      	b.n	8007fec <UART_SetConfig+0x348>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e144      	b.n	8007fec <UART_SetConfig+0x348>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a83      	ldr	r2, [pc, #524]	; (8007f74 <UART_SetConfig+0x2d0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d132      	bne.n	8007dd2 <UART_SetConfig+0x12e>
 8007d6c:	4b80      	ldr	r3, [pc, #512]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f003 030c 	and.w	r3, r3, #12
 8007d76:	2b0c      	cmp	r3, #12
 8007d78:	d828      	bhi.n	8007dcc <UART_SetConfig+0x128>
 8007d7a:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0xdc>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007db5 	.word	0x08007db5
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007dcd 	.word	0x08007dcd
 8007d8c:	08007dcd 	.word	0x08007dcd
 8007d90:	08007dc1 	.word	0x08007dc1
 8007d94:	08007dcd 	.word	0x08007dcd
 8007d98:	08007dcd 	.word	0x08007dcd
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dbb 	.word	0x08007dbb
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007dcd 	.word	0x08007dcd
 8007db0:	08007dc7 	.word	0x08007dc7
 8007db4:	2300      	movs	r3, #0
 8007db6:	77fb      	strb	r3, [r7, #31]
 8007db8:	e118      	b.n	8007fec <UART_SetConfig+0x348>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	77fb      	strb	r3, [r7, #31]
 8007dbe:	e115      	b.n	8007fec <UART_SetConfig+0x348>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e112      	b.n	8007fec <UART_SetConfig+0x348>
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	77fb      	strb	r3, [r7, #31]
 8007dca:	e10f      	b.n	8007fec <UART_SetConfig+0x348>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e10c      	b.n	8007fec <UART_SetConfig+0x348>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a68      	ldr	r2, [pc, #416]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d120      	bne.n	8007e1e <UART_SetConfig+0x17a>
 8007ddc:	4b64      	ldr	r3, [pc, #400]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007de6:	2b30      	cmp	r3, #48	; 0x30
 8007de8:	d013      	beq.n	8007e12 <UART_SetConfig+0x16e>
 8007dea:	2b30      	cmp	r3, #48	; 0x30
 8007dec:	d814      	bhi.n	8007e18 <UART_SetConfig+0x174>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d009      	beq.n	8007e06 <UART_SetConfig+0x162>
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d810      	bhi.n	8007e18 <UART_SetConfig+0x174>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <UART_SetConfig+0x15c>
 8007dfa:	2b10      	cmp	r3, #16
 8007dfc:	d006      	beq.n	8007e0c <UART_SetConfig+0x168>
 8007dfe:	e00b      	b.n	8007e18 <UART_SetConfig+0x174>
 8007e00:	2300      	movs	r3, #0
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e0f2      	b.n	8007fec <UART_SetConfig+0x348>
 8007e06:	2302      	movs	r3, #2
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e0ef      	b.n	8007fec <UART_SetConfig+0x348>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e0ec      	b.n	8007fec <UART_SetConfig+0x348>
 8007e12:	2308      	movs	r3, #8
 8007e14:	77fb      	strb	r3, [r7, #31]
 8007e16:	e0e9      	b.n	8007fec <UART_SetConfig+0x348>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e0e6      	b.n	8007fec <UART_SetConfig+0x348>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a56      	ldr	r2, [pc, #344]	; (8007f7c <UART_SetConfig+0x2d8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d120      	bne.n	8007e6a <UART_SetConfig+0x1c6>
 8007e28:	4b51      	ldr	r3, [pc, #324]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e32:	2bc0      	cmp	r3, #192	; 0xc0
 8007e34:	d013      	beq.n	8007e5e <UART_SetConfig+0x1ba>
 8007e36:	2bc0      	cmp	r3, #192	; 0xc0
 8007e38:	d814      	bhi.n	8007e64 <UART_SetConfig+0x1c0>
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d009      	beq.n	8007e52 <UART_SetConfig+0x1ae>
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d810      	bhi.n	8007e64 <UART_SetConfig+0x1c0>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <UART_SetConfig+0x1a8>
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d006      	beq.n	8007e58 <UART_SetConfig+0x1b4>
 8007e4a:	e00b      	b.n	8007e64 <UART_SetConfig+0x1c0>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e0cc      	b.n	8007fec <UART_SetConfig+0x348>
 8007e52:	2302      	movs	r3, #2
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e0c9      	b.n	8007fec <UART_SetConfig+0x348>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e0c6      	b.n	8007fec <UART_SetConfig+0x348>
 8007e5e:	2308      	movs	r3, #8
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e0c3      	b.n	8007fec <UART_SetConfig+0x348>
 8007e64:	2310      	movs	r3, #16
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e0c0      	b.n	8007fec <UART_SetConfig+0x348>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a44      	ldr	r2, [pc, #272]	; (8007f80 <UART_SetConfig+0x2dc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d125      	bne.n	8007ec0 <UART_SetConfig+0x21c>
 8007e74:	4b3e      	ldr	r3, [pc, #248]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e82:	d017      	beq.n	8007eb4 <UART_SetConfig+0x210>
 8007e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e88:	d817      	bhi.n	8007eba <UART_SetConfig+0x216>
 8007e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8e:	d00b      	beq.n	8007ea8 <UART_SetConfig+0x204>
 8007e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e94:	d811      	bhi.n	8007eba <UART_SetConfig+0x216>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <UART_SetConfig+0x1fe>
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9e:	d006      	beq.n	8007eae <UART_SetConfig+0x20a>
 8007ea0:	e00b      	b.n	8007eba <UART_SetConfig+0x216>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	77fb      	strb	r3, [r7, #31]
 8007ea6:	e0a1      	b.n	8007fec <UART_SetConfig+0x348>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e09e      	b.n	8007fec <UART_SetConfig+0x348>
 8007eae:	2304      	movs	r3, #4
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e09b      	b.n	8007fec <UART_SetConfig+0x348>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e098      	b.n	8007fec <UART_SetConfig+0x348>
 8007eba:	2310      	movs	r3, #16
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e095      	b.n	8007fec <UART_SetConfig+0x348>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a2f      	ldr	r2, [pc, #188]	; (8007f84 <UART_SetConfig+0x2e0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d125      	bne.n	8007f16 <UART_SetConfig+0x272>
 8007eca:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ed8:	d017      	beq.n	8007f0a <UART_SetConfig+0x266>
 8007eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ede:	d817      	bhi.n	8007f10 <UART_SetConfig+0x26c>
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee4:	d00b      	beq.n	8007efe <UART_SetConfig+0x25a>
 8007ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eea:	d811      	bhi.n	8007f10 <UART_SetConfig+0x26c>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <UART_SetConfig+0x254>
 8007ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef4:	d006      	beq.n	8007f04 <UART_SetConfig+0x260>
 8007ef6:	e00b      	b.n	8007f10 <UART_SetConfig+0x26c>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e076      	b.n	8007fec <UART_SetConfig+0x348>
 8007efe:	2302      	movs	r3, #2
 8007f00:	77fb      	strb	r3, [r7, #31]
 8007f02:	e073      	b.n	8007fec <UART_SetConfig+0x348>
 8007f04:	2304      	movs	r3, #4
 8007f06:	77fb      	strb	r3, [r7, #31]
 8007f08:	e070      	b.n	8007fec <UART_SetConfig+0x348>
 8007f0a:	2308      	movs	r3, #8
 8007f0c:	77fb      	strb	r3, [r7, #31]
 8007f0e:	e06d      	b.n	8007fec <UART_SetConfig+0x348>
 8007f10:	2310      	movs	r3, #16
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e06a      	b.n	8007fec <UART_SetConfig+0x348>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <UART_SetConfig+0x2e4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d138      	bne.n	8007f92 <UART_SetConfig+0x2ee>
 8007f20:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f2e:	d017      	beq.n	8007f60 <UART_SetConfig+0x2bc>
 8007f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f34:	d82a      	bhi.n	8007f8c <UART_SetConfig+0x2e8>
 8007f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3a:	d00b      	beq.n	8007f54 <UART_SetConfig+0x2b0>
 8007f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f40:	d824      	bhi.n	8007f8c <UART_SetConfig+0x2e8>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <UART_SetConfig+0x2aa>
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4a:	d006      	beq.n	8007f5a <UART_SetConfig+0x2b6>
 8007f4c:	e01e      	b.n	8007f8c <UART_SetConfig+0x2e8>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	77fb      	strb	r3, [r7, #31]
 8007f52:	e04b      	b.n	8007fec <UART_SetConfig+0x348>
 8007f54:	2302      	movs	r3, #2
 8007f56:	77fb      	strb	r3, [r7, #31]
 8007f58:	e048      	b.n	8007fec <UART_SetConfig+0x348>
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	77fb      	strb	r3, [r7, #31]
 8007f5e:	e045      	b.n	8007fec <UART_SetConfig+0x348>
 8007f60:	2308      	movs	r3, #8
 8007f62:	77fb      	strb	r3, [r7, #31]
 8007f64:	e042      	b.n	8007fec <UART_SetConfig+0x348>
 8007f66:	bf00      	nop
 8007f68:	efff69f3 	.word	0xefff69f3
 8007f6c:	40011000 	.word	0x40011000
 8007f70:	40023800 	.word	0x40023800
 8007f74:	40004400 	.word	0x40004400
 8007f78:	40004800 	.word	0x40004800
 8007f7c:	40004c00 	.word	0x40004c00
 8007f80:	40005000 	.word	0x40005000
 8007f84:	40011400 	.word	0x40011400
 8007f88:	40007800 	.word	0x40007800
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e02c      	b.n	8007fec <UART_SetConfig+0x348>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a72      	ldr	r2, [pc, #456]	; (8008160 <UART_SetConfig+0x4bc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d125      	bne.n	8007fe8 <UART_SetConfig+0x344>
 8007f9c:	4b71      	ldr	r3, [pc, #452]	; (8008164 <UART_SetConfig+0x4c0>)
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007faa:	d017      	beq.n	8007fdc <UART_SetConfig+0x338>
 8007fac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fb0:	d817      	bhi.n	8007fe2 <UART_SetConfig+0x33e>
 8007fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb6:	d00b      	beq.n	8007fd0 <UART_SetConfig+0x32c>
 8007fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fbc:	d811      	bhi.n	8007fe2 <UART_SetConfig+0x33e>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <UART_SetConfig+0x326>
 8007fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc6:	d006      	beq.n	8007fd6 <UART_SetConfig+0x332>
 8007fc8:	e00b      	b.n	8007fe2 <UART_SetConfig+0x33e>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	77fb      	strb	r3, [r7, #31]
 8007fce:	e00d      	b.n	8007fec <UART_SetConfig+0x348>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	77fb      	strb	r3, [r7, #31]
 8007fd4:	e00a      	b.n	8007fec <UART_SetConfig+0x348>
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	77fb      	strb	r3, [r7, #31]
 8007fda:	e007      	b.n	8007fec <UART_SetConfig+0x348>
 8007fdc:	2308      	movs	r3, #8
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e004      	b.n	8007fec <UART_SetConfig+0x348>
 8007fe2:	2310      	movs	r3, #16
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e001      	b.n	8007fec <UART_SetConfig+0x348>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff4:	d15b      	bne.n	80080ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ff6:	7ffb      	ldrb	r3, [r7, #31]
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d828      	bhi.n	800804e <UART_SetConfig+0x3aa>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x360>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	08008029 	.word	0x08008029
 8008008:	08008031 	.word	0x08008031
 800800c:	08008039 	.word	0x08008039
 8008010:	0800804f 	.word	0x0800804f
 8008014:	0800803f 	.word	0x0800803f
 8008018:	0800804f 	.word	0x0800804f
 800801c:	0800804f 	.word	0x0800804f
 8008020:	0800804f 	.word	0x0800804f
 8008024:	08008047 	.word	0x08008047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008028:	f7fd f9fe 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 800802c:	61b8      	str	r0, [r7, #24]
        break;
 800802e:	e013      	b.n	8008058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008030:	f7fd fa0e 	bl	8005450 <HAL_RCC_GetPCLK2Freq>
 8008034:	61b8      	str	r0, [r7, #24]
        break;
 8008036:	e00f      	b.n	8008058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008038:	4b4b      	ldr	r3, [pc, #300]	; (8008168 <UART_SetConfig+0x4c4>)
 800803a:	61bb      	str	r3, [r7, #24]
        break;
 800803c:	e00c      	b.n	8008058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803e:	f7fd f8e1 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 8008042:	61b8      	str	r0, [r7, #24]
        break;
 8008044:	e008      	b.n	8008058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804a:	61bb      	str	r3, [r7, #24]
        break;
 800804c:	e004      	b.n	8008058 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77bb      	strb	r3, [r7, #30]
        break;
 8008056:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d074      	beq.n	8008148 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	005a      	lsls	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	441a      	add	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d916      	bls.n	80080a8 <UART_SetConfig+0x404>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d212      	bcs.n	80080a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f023 030f 	bic.w	r3, r3, #15
 800808a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	b29a      	uxth	r2, r3
 8008098:	89fb      	ldrh	r3, [r7, #14]
 800809a:	4313      	orrs	r3, r2
 800809c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	89fa      	ldrh	r2, [r7, #14]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e04f      	b.n	8008148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	77bb      	strb	r3, [r7, #30]
 80080ac:	e04c      	b.n	8008148 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080ae:	7ffb      	ldrb	r3, [r7, #31]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d828      	bhi.n	8008106 <UART_SetConfig+0x462>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <UART_SetConfig+0x418>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e1 	.word	0x080080e1
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080f1 	.word	0x080080f1
 80080c8:	08008107 	.word	0x08008107
 80080cc:	080080f7 	.word	0x080080f7
 80080d0:	08008107 	.word	0x08008107
 80080d4:	08008107 	.word	0x08008107
 80080d8:	08008107 	.word	0x08008107
 80080dc:	080080ff 	.word	0x080080ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e0:	f7fd f9a2 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 80080e4:	61b8      	str	r0, [r7, #24]
        break;
 80080e6:	e013      	b.n	8008110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e8:	f7fd f9b2 	bl	8005450 <HAL_RCC_GetPCLK2Freq>
 80080ec:	61b8      	str	r0, [r7, #24]
        break;
 80080ee:	e00f      	b.n	8008110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f0:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <UART_SetConfig+0x4c4>)
 80080f2:	61bb      	str	r3, [r7, #24]
        break;
 80080f4:	e00c      	b.n	8008110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f6:	f7fd f885 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 80080fa:	61b8      	str	r0, [r7, #24]
        break;
 80080fc:	e008      	b.n	8008110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008102:	61bb      	str	r3, [r7, #24]
        break;
 8008104:	e004      	b.n	8008110 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	77bb      	strb	r3, [r7, #30]
        break;
 800810e:	bf00      	nop
    }

    if (pclk != 0U)
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085a      	lsrs	r2, r3, #1
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	441a      	add	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b0f      	cmp	r3, #15
 800812e:	d909      	bls.n	8008144 <UART_SetConfig+0x4a0>
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008136:	d205      	bcs.n	8008144 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	e001      	b.n	8008148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008154:	7fbb      	ldrb	r3, [r7, #30]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	40007c00 	.word	0x40007c00
 8008164:	40023800 	.word	0x40023800
 8008168:	00f42400 	.word	0x00f42400

0800816c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01a      	beq.n	8008282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800826a:	d10a      	bne.n	8008282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]
  }
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082c0:	f7f9 fb64 	bl	800198c <HAL_GetTick>
 80082c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d10e      	bne.n	80082f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f831 	bl	800834a <UART_WaitOnFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e027      	b.n	8008342 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d10e      	bne.n	800831e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f81b 	bl	800834a <UART_WaitOnFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e011      	b.n	8008342 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b09c      	sub	sp, #112	; 0x70
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	4613      	mov	r3, r2
 8008358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835a:	e0a7      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008362:	f000 80a3 	beq.w	80084ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008366:	f7f9 fb11 	bl	800198c <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008372:	429a      	cmp	r2, r3
 8008374:	d302      	bcc.n	800837c <UART_WaitOnFlagUntilTimeout+0x32>
 8008376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008378:	2b00      	cmp	r3, #0
 800837a:	d13f      	bne.n	80083fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008390:	667b      	str	r3, [r7, #100]	; 0x64
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800839a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800839c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e6      	bne.n	800837c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	f023 0301 	bic.w	r3, r3, #1
 80083c4:	663b      	str	r3, [r7, #96]	; 0x60
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80083d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e5      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2220      	movs	r2, #32
 80083e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e068      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d050      	beq.n	80084ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008418:	d148      	bne.n	80084ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008422:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
 8008444:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	613b      	str	r3, [r7, #16]
   return(result);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f023 0301 	bic.w	r3, r3, #1
 800846c:	66bb      	str	r3, [r7, #104]	; 0x68
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008476:	623a      	str	r2, [r7, #32]
 8008478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	69f9      	ldr	r1, [r7, #28]
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	61bb      	str	r3, [r7, #24]
   return(result);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e010      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f43f af48 	beq.w	800835c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3770      	adds	r7, #112	; 0x70
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b096      	sub	sp, #88	; 0x58
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2222      	movs	r2, #34	; 0x22
 8008500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008508:	2b00      	cmp	r3, #0
 800850a:	d028      	beq.n	800855e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008510:	4a3e      	ldr	r2, [pc, #248]	; (800860c <UART_Start_Receive_DMA+0x134>)
 8008512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008518:	4a3d      	ldr	r2, [pc, #244]	; (8008610 <UART_Start_Receive_DMA+0x138>)
 800851a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008520:	4a3c      	ldr	r2, [pc, #240]	; (8008614 <UART_Start_Receive_DMA+0x13c>)
 8008522:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008528:	2200      	movs	r2, #0
 800852a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3324      	adds	r3, #36	; 0x24
 8008536:	4619      	mov	r1, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853c:	461a      	mov	r2, r3
 800853e:	88fb      	ldrh	r3, [r7, #6]
 8008540:	f7f9 fe36 	bl	80021b0 <HAL_DMA_Start_IT>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2210      	movs	r2, #16
 800854e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e051      	b.n	8008602 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d018      	beq.n	8008598 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857a:	657b      	str	r3, [r7, #84]	; 0x54
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
 8008586:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800858a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e6      	bne.n	8008566 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3308      	adds	r3, #8
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	653b      	str	r3, [r7, #80]	; 0x50
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3308      	adds	r3, #8
 80085b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085b8:	637a      	str	r2, [r7, #52]	; 0x34
 80085ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e5      	bne.n	8008598 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	613b      	str	r3, [r7, #16]
   return(result);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ec:	623a      	str	r2, [r7, #32]
 80085ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	69f9      	ldr	r1, [r7, #28]
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e5      	bne.n	80085cc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3758      	adds	r7, #88	; 0x58
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	0800872d 	.word	0x0800872d
 8008610:	08008855 	.word	0x08008855
 8008614:	08008893 	.word	0x08008893

08008618 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b089      	sub	sp, #36	; 0x24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	60bb      	str	r3, [r7, #8]
   return(result);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6979      	ldr	r1, [r7, #20]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	613b      	str	r3, [r7, #16]
   return(result);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e6      	bne.n	8008620 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008658:	bf00      	nop
 800865a:	3724      	adds	r7, #36	; 0x24
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008664:	b480      	push	{r7}
 8008666:	b095      	sub	sp, #84	; 0x54
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868a:	643b      	str	r3, [r7, #64]	; 0x40
 800868c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e6      	bne.n	800866c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d118      	bne.n	800870c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f023 0310 	bic.w	r3, r3, #16
 80086ee:	647b      	str	r3, [r7, #68]	; 0x44
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6979      	ldr	r1, [r7, #20]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	613b      	str	r3, [r7, #16]
   return(result);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2220      	movs	r2, #32
 8008710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008720:	bf00      	nop
 8008722:	3754      	adds	r7, #84	; 0x54
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b09c      	sub	sp, #112	; 0x70
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008742:	d071      	beq.n	8008828 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	2200      	movs	r2, #0
 8008748:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800874c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800875a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008760:	66bb      	str	r3, [r7, #104]	; 0x68
 8008762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800876a:	65bb      	str	r3, [r7, #88]	; 0x58
 800876c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	667b      	str	r3, [r7, #100]	; 0x64
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800879e:	647a      	str	r2, [r7, #68]	; 0x44
 80087a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	623b      	str	r3, [r7, #32]
   return(result);
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	663b      	str	r3, [r7, #96]	; 0x60
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087d2:	633a      	str	r2, [r7, #48]	; 0x30
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e5      	bne.n	80087b2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	2220      	movs	r2, #32
 80087ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d118      	bne.n	8008828 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60fb      	str	r3, [r7, #12]
   return(result);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0310 	bic.w	r3, r3, #16
 800880a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	69b9      	ldr	r1, [r7, #24]
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	617b      	str	r3, [r7, #20]
   return(result);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e6      	bne.n	80087f6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882a:	2200      	movs	r2, #0
 800882c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008832:	2b01      	cmp	r3, #1
 8008834:	d107      	bne.n	8008846 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800883c:	4619      	mov	r1, r3
 800883e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008840:	f001 fd8c 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008844:	e002      	b.n	800884c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008846:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008848:	f7ff fa04 	bl	8007c54 <HAL_UART_RxCpltCallback>
}
 800884c:	bf00      	nop
 800884e:	3770      	adds	r7, #112	; 0x70
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008860:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886c:	2b01      	cmp	r3, #1
 800886e:	d109      	bne.n	8008884 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008876:	085b      	lsrs	r3, r3, #1
 8008878:	b29b      	uxth	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f001 fd6d 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008882:	e002      	b.n	800888a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff f9ef 	bl	8007c68 <HAL_UART_RxHalfCpltCallback>
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b8:	2b80      	cmp	r3, #128	; 0x80
 80088ba:	d109      	bne.n	80088d0 <UART_DMAError+0x3e>
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b21      	cmp	r3, #33	; 0x21
 80088c0:	d106      	bne.n	80088d0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f7ff fea4 	bl	8008618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d109      	bne.n	80088f2 <UART_DMAError+0x60>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b22      	cmp	r3, #34	; 0x22
 80088e2:	d106      	bne.n	80088f2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80088ec:	6978      	ldr	r0, [r7, #20]
 80088ee:	f7ff feb9 	bl	8008664 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f8:	f043 0210 	orr.w	r2, r3, #16
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	f7ff f9ba 	bl	8007c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008908:	bf00      	nop
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7ff f9a4 	bl	8007c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008934:	bf00      	nop
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	60bb      	str	r3, [r7, #8]
   return(result);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	613b      	str	r3, [r7, #16]
   return(result);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e6      	bne.n	8008944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff f95c 	bl	8007c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008988:	bf00      	nop
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08c      	sub	sp, #48	; 0x30
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d142      	bne.n	8008a2e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e03b      	b.n	8008a30 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	461a      	mov	r2, r3
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fd84 	bl	80084d8 <UART_Start_Receive_DMA>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d124      	bne.n	8008a28 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d11d      	bne.n	8008a22 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2210      	movs	r2, #16
 80089ec:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	617b      	str	r3, [r7, #20]
   return(result);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f043 0310 	orr.w	r3, r3, #16
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6a39      	ldr	r1, [r7, #32]
 8008a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e6      	bne.n	80089ee <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008a20:	e002      	b.n	8008a28 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a2c:	e000      	b.n	8008a30 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008a2e:	2302      	movs	r3, #2
  }
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3730      	adds	r7, #48	; 0x30
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a38:	b084      	sub	sp, #16
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	f107 001c 	add.w	r0, r7, #28
 8008a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d120      	bne.n	8008a92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <USB_CoreInit+0xac>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d105      	bne.n	8008a86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fbee 	bl	800a268 <USB_CoreReset>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
 8008a90:	e010      	b.n	8008ab4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fbe2 	bl	800a268 <USB_CoreReset>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d10b      	bne.n	8008ad2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f043 0206 	orr.w	r2, r3, #6
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ade:	b004      	add	sp, #16
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	ffbdffbf 	.word	0xffbdffbf

08008ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d165      	bne.n	8008bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4a41      	ldr	r2, [pc, #260]	; (8008c04 <USB_SetTurnaroundTime+0x11c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d906      	bls.n	8008b12 <USB_SetTurnaroundTime+0x2a>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a40      	ldr	r2, [pc, #256]	; (8008c08 <USB_SetTurnaroundTime+0x120>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d202      	bcs.n	8008b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b0c:	230f      	movs	r3, #15
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e062      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4a3c      	ldr	r2, [pc, #240]	; (8008c08 <USB_SetTurnaroundTime+0x120>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d306      	bcc.n	8008b28 <USB_SetTurnaroundTime+0x40>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <USB_SetTurnaroundTime+0x124>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d202      	bcs.n	8008b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b22:	230e      	movs	r3, #14
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	e057      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4a38      	ldr	r2, [pc, #224]	; (8008c0c <USB_SetTurnaroundTime+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d306      	bcc.n	8008b3e <USB_SetTurnaroundTime+0x56>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <USB_SetTurnaroundTime+0x128>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d202      	bcs.n	8008b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b38:	230d      	movs	r3, #13
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e04c      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a33      	ldr	r2, [pc, #204]	; (8008c10 <USB_SetTurnaroundTime+0x128>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d306      	bcc.n	8008b54 <USB_SetTurnaroundTime+0x6c>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a32      	ldr	r2, [pc, #200]	; (8008c14 <USB_SetTurnaroundTime+0x12c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d802      	bhi.n	8008b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b4e:	230c      	movs	r3, #12
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e041      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4a2f      	ldr	r2, [pc, #188]	; (8008c14 <USB_SetTurnaroundTime+0x12c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d906      	bls.n	8008b6a <USB_SetTurnaroundTime+0x82>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a2e      	ldr	r2, [pc, #184]	; (8008c18 <USB_SetTurnaroundTime+0x130>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d802      	bhi.n	8008b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b64:	230b      	movs	r3, #11
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e036      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <USB_SetTurnaroundTime+0x130>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d906      	bls.n	8008b80 <USB_SetTurnaroundTime+0x98>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <USB_SetTurnaroundTime+0x134>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d802      	bhi.n	8008b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b7a:	230a      	movs	r3, #10
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e02b      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <USB_SetTurnaroundTime+0x134>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d906      	bls.n	8008b96 <USB_SetTurnaroundTime+0xae>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a25      	ldr	r2, [pc, #148]	; (8008c20 <USB_SetTurnaroundTime+0x138>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d202      	bcs.n	8008b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b90:	2309      	movs	r3, #9
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e020      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a21      	ldr	r2, [pc, #132]	; (8008c20 <USB_SetTurnaroundTime+0x138>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d306      	bcc.n	8008bac <USB_SetTurnaroundTime+0xc4>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <USB_SetTurnaroundTime+0x13c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d802      	bhi.n	8008bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e015      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <USB_SetTurnaroundTime+0x13c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d906      	bls.n	8008bc2 <USB_SetTurnaroundTime+0xda>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <USB_SetTurnaroundTime+0x140>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d202      	bcs.n	8008bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bbc:	2307      	movs	r3, #7
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e00a      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e007      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bce:	2309      	movs	r3, #9
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e001      	b.n	8008bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bd4:	2309      	movs	r3, #9
 8008bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	029b      	lsls	r3, r3, #10
 8008bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	00d8acbf 	.word	0x00d8acbf
 8008c08:	00e4e1c0 	.word	0x00e4e1c0
 8008c0c:	00f42400 	.word	0x00f42400
 8008c10:	01067380 	.word	0x01067380
 8008c14:	011a499f 	.word	0x011a499f
 8008c18:	01312cff 	.word	0x01312cff
 8008c1c:	014ca43f 	.word	0x014ca43f
 8008c20:	016e3600 	.word	0x016e3600
 8008c24:	01a6ab1f 	.word	0x01a6ab1f
 8008c28:	01e84800 	.word	0x01e84800

08008c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f043 0201 	orr.w	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f023 0201 	bic.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d115      	bne.n	8008cbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f7f8 fe80 	bl	80019a4 <HAL_Delay>
      ms++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fa4b 	bl	800a146 <USB_GetMode>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d01e      	beq.n	8008cf4 <USB_SetCurrentMode+0x84>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b31      	cmp	r3, #49	; 0x31
 8008cba:	d9f0      	bls.n	8008c9e <USB_SetCurrentMode+0x2e>
 8008cbc:	e01a      	b.n	8008cf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d115      	bne.n	8008cf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	f7f8 fe67 	bl	80019a4 <HAL_Delay>
      ms++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fa32 	bl	800a146 <USB_GetMode>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <USB_SetCurrentMode+0x84>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b31      	cmp	r3, #49	; 0x31
 8008cec:	d9f0      	bls.n	8008cd0 <USB_SetCurrentMode+0x60>
 8008cee:	e001      	b.n	8008cf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e005      	b.n	8008d00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b32      	cmp	r3, #50	; 0x32
 8008cf8:	d101      	bne.n	8008cfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e000      	b.n	8008d00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d08:	b084      	sub	sp, #16
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d22:	2300      	movs	r3, #0
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	e009      	b.n	8008d3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3340      	adds	r3, #64	; 0x40
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	2b0e      	cmp	r3, #14
 8008d40:	d9f2      	bls.n	8008d28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11c      	bne.n	8008d82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d56:	f043 0302 	orr.w	r3, r3, #2
 8008d5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e005      	b.n	8008d8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d94:	461a      	mov	r2, r3
 8008d96:	2300      	movs	r3, #0
 8008d98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da0:	4619      	mov	r1, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da8:	461a      	mov	r2, r3
 8008daa:	680b      	ldr	r3, [r1, #0]
 8008dac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d10c      	bne.n	8008dce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d104      	bne.n	8008dc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dba:	2100      	movs	r1, #0
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f965 	bl	800908c <USB_SetDevSpeed>
 8008dc2:	e008      	b.n	8008dd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f960 	bl	800908c <USB_SetDevSpeed>
 8008dcc:	e003      	b.n	8008dd6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dce:	2103      	movs	r1, #3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f95b 	bl	800908c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dd6:	2110      	movs	r1, #16
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f8f3 	bl	8008fc4 <USB_FlushTxFifo>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f91f 	bl	800902c <USB_FlushRxFifo>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e16:	461a      	mov	r2, r3
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	e043      	b.n	8008eaa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e38:	d118      	bne.n	8008e6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	e013      	b.n	8008e7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	461a      	mov	r2, r3
 8008e64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	e008      	b.n	8008e7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	461a      	mov	r2, r3
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ea2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d3b7      	bcc.n	8008e22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	e043      	b.n	8008f40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ece:	d118      	bne.n	8008f02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e013      	b.n	8008f14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e008      	b.n	8008f14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f20:	461a      	mov	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3b7      	bcc.n	8008eb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f043 0210 	orr.w	r2, r3, #16
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <USB_DevInit+0x2b4>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f043 0208 	orr.w	r2, r3, #8
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d105      	bne.n	8008fac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <USB_DevInit+0x2b8>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb8:	b004      	add	sp, #16
 8008fba:	4770      	bx	lr
 8008fbc:	803c3800 	.word	0x803c3800
 8008fc0:	40000004 	.word	0x40000004

08008fc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a13      	ldr	r2, [pc, #76]	; (8009028 <USB_FlushTxFifo+0x64>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d901      	bls.n	8008fe4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e01b      	b.n	800901c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	daf2      	bge.n	8008fd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	019b      	lsls	r3, r3, #6
 8008ff4:	f043 0220 	orr.w	r2, r3, #32
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3301      	adds	r3, #1
 8009000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <USB_FlushTxFifo+0x64>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d901      	bls.n	800900e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e006      	b.n	800901c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b20      	cmp	r3, #32
 8009018:	d0f0      	beq.n	8008ffc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	00030d40 	.word	0x00030d40

0800902c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4a11      	ldr	r2, [pc, #68]	; (8009088 <USB_FlushRxFifo+0x5c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d901      	bls.n	800904a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e018      	b.n	800907c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	daf2      	bge.n	8009038 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2210      	movs	r2, #16
 800905a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a08      	ldr	r2, [pc, #32]	; (8009088 <USB_FlushRxFifo+0x5c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d901      	bls.n	800906e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e006      	b.n	800907c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b10      	cmp	r3, #16
 8009078:	d0f0      	beq.n	800905c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	00030d40 	.word	0x00030d40

0800908c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ac:	4313      	orrs	r3, r2
 80090ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090be:	b480      	push	{r7}
 80090c0:	b087      	sub	sp, #28
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090de:	2300      	movs	r3, #0
 80090e0:	75fb      	strb	r3, [r7, #23]
 80090e2:	e00a      	b.n	80090fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d002      	beq.n	80090f0 <USB_GetDevSpeed+0x32>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b06      	cmp	r3, #6
 80090ee:	d102      	bne.n	80090f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090f0:	2302      	movs	r3, #2
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	e001      	b.n	80090fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090f6:	230f      	movs	r3, #15
 80090f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d139      	bne.n	8009198 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f303 	lsl.w	r3, r1, r3
 800913a:	b29b      	uxth	r3, r3
 800913c:	68f9      	ldr	r1, [r7, #12]
 800913e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009142:	4313      	orrs	r3, r2
 8009144:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d153      	bne.n	8009204 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009178:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	059b      	lsls	r3, r3, #22
 800917e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009180:	431a      	orrs	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	0159      	lsls	r1, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	440b      	add	r3, r1
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	4619      	mov	r1, r3
 8009190:	4b20      	ldr	r3, [pc, #128]	; (8009214 <USB_ActivateEndpoint+0x10c>)
 8009192:	4313      	orrs	r3, r2
 8009194:	600b      	str	r3, [r1, #0]
 8009196:	e035      	b.n	8009204 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	2101      	movs	r1, #1
 80091aa:	fa01 f303 	lsl.w	r3, r1, r3
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	68f9      	ldr	r1, [r7, #12]
 80091b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b6:	4313      	orrs	r3, r2
 80091b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d119      	bne.n	8009204 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	791b      	ldrb	r3, [r3, #4]
 80091ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ec:	430b      	orrs	r3, r1
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	0159      	lsls	r1, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	440b      	add	r3, r1
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	4619      	mov	r1, r3
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <USB_ActivateEndpoint+0x10c>)
 8009200:	4313      	orrs	r3, r2
 8009202:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	10008000 	.word	0x10008000

08009218 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d161      	bne.n	80092f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924a:	d11f      	bne.n	800928c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800926a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800928a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	2101      	movs	r1, #1
 800929e:	fa01 f303 	lsl.w	r3, r1, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	43db      	mvns	r3, r3
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ac:	4013      	ands	r3, r2
 80092ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	69da      	ldr	r2, [r3, #28]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	2101      	movs	r1, #1
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d0:	4013      	ands	r3, r2
 80092d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	0159      	lsls	r1, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	440b      	add	r3, r1
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	4619      	mov	r1, r3
 80092f0:	4b35      	ldr	r3, [pc, #212]	; (80093c8 <USB_DeactivateEndpoint+0x1b0>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	600b      	str	r3, [r1, #0]
 80092f6:	e060      	b.n	80093ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800930a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800930e:	d11f      	bne.n	8009350 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	440a      	add	r2, r1
 8009326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800932e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800934e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	2101      	movs	r1, #1
 8009362:	fa01 f303 	lsl.w	r3, r1, r3
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	43db      	mvns	r3, r3
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009370:	4013      	ands	r3, r2
 8009372:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	69da      	ldr	r2, [r3, #28]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	2101      	movs	r1, #1
 8009386:	fa01 f303 	lsl.w	r3, r1, r3
 800938a:	041b      	lsls	r3, r3, #16
 800938c:	43db      	mvns	r3, r3
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009394:	4013      	ands	r3, r2
 8009396:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	0159      	lsls	r1, r3, #5
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	440b      	add	r3, r1
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	4619      	mov	r1, r3
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <USB_DeactivateEndpoint+0x1b4>)
 80093b6:	4013      	ands	r3, r2
 80093b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	ec337800 	.word	0xec337800
 80093cc:	eff37800 	.word	0xeff37800

080093d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	; 0x28
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f040 8163 	bne.w	80096b8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d132      	bne.n	8009460 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	0159      	lsls	r1, r3, #5
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	440b      	add	r3, r1
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	4619      	mov	r1, r3
 8009416:	4ba5      	ldr	r3, [pc, #660]	; (80096ac <USB_EPStartXfer+0x2dc>)
 8009418:	4013      	ands	r3, r2
 800941a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800943a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	0159      	lsls	r1, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	440b      	add	r3, r1
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	4619      	mov	r1, r3
 8009458:	4b95      	ldr	r3, [pc, #596]	; (80096b0 <USB_EPStartXfer+0x2e0>)
 800945a:	4013      	ands	r3, r2
 800945c:	610b      	str	r3, [r1, #16]
 800945e:	e074      	b.n	800954a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	0159      	lsls	r1, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	440b      	add	r3, r1
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	4619      	mov	r1, r3
 800947c:	4b8c      	ldr	r3, [pc, #560]	; (80096b0 <USB_EPStartXfer+0x2e0>)
 800947e:	4013      	ands	r3, r2
 8009480:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	0159      	lsls	r1, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	440b      	add	r3, r1
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	4619      	mov	r1, r3
 800949e:	4b83      	ldr	r3, [pc, #524]	; (80096ac <USB_EPStartXfer+0x2dc>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6999      	ldr	r1, [r3, #24]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	440b      	add	r3, r1
 80094bc:	1e59      	subs	r1, r3, #1
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80094c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094c8:	4b7a      	ldr	r3, [pc, #488]	; (80096b4 <USB_EPStartXfer+0x2e4>)
 80094ca:	400b      	ands	r3, r1
 80094cc:	69b9      	ldr	r1, [r7, #24]
 80094ce:	0148      	lsls	r0, r1, #5
 80094d0:	69f9      	ldr	r1, [r7, #28]
 80094d2:	4401      	add	r1, r0
 80094d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094d8:	4313      	orrs	r3, r2
 80094da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f2:	69b9      	ldr	r1, [r7, #24]
 80094f4:	0148      	lsls	r0, r1, #5
 80094f6:	69f9      	ldr	r1, [r7, #28]
 80094f8:	4401      	add	r1, r0
 80094fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094fe:	4313      	orrs	r3, r2
 8009500:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	791b      	ldrb	r3, [r3, #4]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d11f      	bne.n	800954a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009528:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	0151      	lsls	r1, r2, #5
 800953c:	69fa      	ldr	r2, [r7, #28]
 800953e:	440a      	add	r2, r1
 8009540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009548:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d14b      	bne.n	80095e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009564:	461a      	mov	r2, r3
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	791b      	ldrb	r3, [r3, #4]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d128      	bne.n	80095c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	2b00      	cmp	r3, #0
 8009582:	d110      	bne.n	80095a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	440a      	add	r2, r1
 800959a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e00f      	b.n	80095c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	0151      	lsls	r1, r2, #5
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	440a      	add	r2, r1
 80095dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	e137      	b.n	8009858 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009606:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	791b      	ldrb	r3, [r3, #4]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d015      	beq.n	800963c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 811f 	beq.w	8009858 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	2101      	movs	r1, #1
 800962c:	fa01 f303 	lsl.w	r3, r1, r3
 8009630:	69f9      	ldr	r1, [r7, #28]
 8009632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009636:	4313      	orrs	r3, r2
 8009638:	634b      	str	r3, [r1, #52]	; 0x34
 800963a:	e10d      	b.n	8009858 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	d110      	bne.n	800966e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	e00f      	b.n	800968e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	440a      	add	r2, r1
 8009684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6919      	ldr	r1, [r3, #16]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	b298      	uxth	r0, r3
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4603      	mov	r3, r0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 faea 	bl	8009c7c <USB_WritePacket>
 80096a8:	e0d6      	b.n	8009858 <USB_EPStartXfer+0x488>
 80096aa:	bf00      	nop
 80096ac:	e007ffff 	.word	0xe007ffff
 80096b0:	fff80000 	.word	0xfff80000
 80096b4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	0159      	lsls	r1, r3, #5
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	440b      	add	r3, r1
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	4619      	mov	r1, r3
 80096d4:	4b63      	ldr	r3, [pc, #396]	; (8009864 <USB_EPStartXfer+0x494>)
 80096d6:	4013      	ands	r3, r2
 80096d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	0159      	lsls	r1, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	440b      	add	r3, r1
 80096f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f4:	4619      	mov	r1, r3
 80096f6:	4b5c      	ldr	r3, [pc, #368]	; (8009868 <USB_EPStartXfer+0x498>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d123      	bne.n	800974c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	0148      	lsls	r0, r1, #5
 800971e:	69f9      	ldr	r1, [r7, #28]
 8009720:	4401      	add	r1, r0
 8009722:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009726:	4313      	orrs	r3, r2
 8009728:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	0151      	lsls	r1, r2, #5
 800973c:	69fa      	ldr	r2, [r7, #28]
 800973e:	440a      	add	r2, r1
 8009740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009748:	6113      	str	r3, [r2, #16]
 800974a:	e037      	b.n	80097bc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	4413      	add	r3, r2
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	8afa      	ldrh	r2, [r7, #22]
 8009768:	fb03 f202 	mul.w	r2, r3, r2
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	8afb      	ldrh	r3, [r7, #22]
 8009780:	04d9      	lsls	r1, r3, #19
 8009782:	4b3a      	ldr	r3, [pc, #232]	; (800986c <USB_EPStartXfer+0x49c>)
 8009784:	400b      	ands	r3, r1
 8009786:	69b9      	ldr	r1, [r7, #24]
 8009788:	0148      	lsls	r0, r1, #5
 800978a:	69f9      	ldr	r1, [r7, #28]
 800978c:	4401      	add	r1, r0
 800978e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009792:	4313      	orrs	r3, r2
 8009794:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097ac:	69b9      	ldr	r1, [r7, #24]
 80097ae:	0148      	lsls	r0, r1, #5
 80097b0:	69f9      	ldr	r1, [r7, #28]
 80097b2:	4401      	add	r1, r0
 80097b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b8:	4313      	orrs	r3, r2
 80097ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d10d      	bne.n	80097de <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	6919      	ldr	r1, [r3, #16]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	460a      	mov	r2, r1
 80097dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d128      	bne.n	8009838 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d110      	bne.n	8009818 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e00f      	b.n	8009838 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009836:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	fff80000 	.word	0xfff80000
 8009868:	e007ffff 	.word	0xe007ffff
 800986c:	1ff80000 	.word	0x1ff80000

08009870 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	2b01      	cmp	r3, #1
 800988e:	f040 80ce 	bne.w	8009a2e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d132      	bne.n	8009900 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	0159      	lsls	r1, r3, #5
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	440b      	add	r3, r1
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	4619      	mov	r1, r3
 80098b6:	4b9a      	ldr	r3, [pc, #616]	; (8009b20 <USB_EP0StartXfer+0x2b0>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	0159      	lsls	r1, r3, #5
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	440b      	add	r3, r1
 80098f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f6:	4619      	mov	r1, r3
 80098f8:	4b8a      	ldr	r3, [pc, #552]	; (8009b24 <USB_EP0StartXfer+0x2b4>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	610b      	str	r3, [r1, #16]
 80098fe:	e04e      	b.n	800999e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	691a      	ldr	r2, [r3, #16]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	0159      	lsls	r1, r3, #5
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	440b      	add	r3, r1
 8009916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991a:	4619      	mov	r1, r3
 800991c:	4b81      	ldr	r3, [pc, #516]	; (8009b24 <USB_EP0StartXfer+0x2b4>)
 800991e:	4013      	ands	r3, r2
 8009920:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	0159      	lsls	r1, r3, #5
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	440b      	add	r3, r1
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	4619      	mov	r1, r3
 800993e:	4b78      	ldr	r3, [pc, #480]	; (8009b20 <USB_EP0StartXfer+0x2b0>)
 8009940:	4013      	ands	r3, r2
 8009942:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	429a      	cmp	r2, r3
 800994e:	d903      	bls.n	8009958 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	691a      	ldr	r2, [r3, #16]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800998e:	6939      	ldr	r1, [r7, #16]
 8009990:	0148      	lsls	r0, r1, #5
 8009992:	6979      	ldr	r1, [r7, #20]
 8009994:	4401      	add	r1, r0
 8009996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800999a:	4313      	orrs	r3, r2
 800999c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d11e      	bne.n	80099e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d009      	beq.n	80099c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	461a      	mov	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	e097      	b.n	8009b12 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8083 	beq.w	8009b12 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a22:	6979      	ldr	r1, [r7, #20]
 8009a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	634b      	str	r3, [r1, #52]	; 0x34
 8009a2c:	e071      	b.n	8009b12 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	0159      	lsls	r1, r3, #5
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	440b      	add	r3, r1
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4b36      	ldr	r3, [pc, #216]	; (8009b24 <USB_EP0StartXfer+0x2b4>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	691a      	ldr	r2, [r3, #16]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	0159      	lsls	r1, r3, #5
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	440b      	add	r3, r1
 8009a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <USB_EP0StartXfer+0x2b0>)
 8009a6e:	4013      	ands	r3, r2
 8009a70:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	0151      	lsls	r1, r2, #5
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	440a      	add	r2, r1
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab6:	691a      	ldr	r2, [r3, #16]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ac0:	6939      	ldr	r1, [r7, #16]
 8009ac2:	0148      	lsls	r0, r1, #5
 8009ac4:	6979      	ldr	r1, [r7, #20]
 8009ac6:	4401      	add	r1, r0
 8009ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009acc:	4313      	orrs	r3, r2
 8009ace:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d10d      	bne.n	8009af2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d009      	beq.n	8009af2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6919      	ldr	r1, [r3, #16]
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aee:	460a      	mov	r2, r1
 8009af0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	e007ffff 	.word	0xe007ffff
 8009b24:	fff80000 	.word	0xfff80000

08009b28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d14a      	bne.n	8009bdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b5e:	f040 8086 	bne.w	8009c6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	0151      	lsls	r1, r2, #5
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ba8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3301      	adds	r3, #1
 8009bae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d902      	bls.n	8009bc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8009bbe:	e056      	b.n	8009c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd8:	d0e7      	beq.n	8009baa <USB_EPStopXfer+0x82>
 8009bda:	e048      	b.n	8009c6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf4:	d13b      	bne.n	8009c6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d902      	bls.n	8009c54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	75fb      	strb	r3, [r7, #23]
          break;
 8009c52:	e00c      	b.n	8009c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c6c:	d0e7      	beq.n	8009c3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b089      	sub	sp, #36	; 0x24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4611      	mov	r1, r2
 8009c88:	461a      	mov	r2, r3
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	71fb      	strb	r3, [r7, #7]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d123      	bne.n	8009cea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ca2:	88bb      	ldrh	r3, [r7, #4]
 8009ca4:	3303      	adds	r3, #3
 8009ca6:	089b      	lsrs	r3, r3, #2
 8009ca8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	e018      	b.n	8009ce2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	031a      	lsls	r2, r3, #12
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d3e2      	bcc.n	8009cb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3724      	adds	r7, #36	; 0x24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b08b      	sub	sp, #44	; 0x2c
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	089b      	lsrs	r3, r3, #2
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	f003 0303 	and.w	r3, r3, #3
 8009d1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	623b      	str	r3, [r7, #32]
 8009d22:	e014      	b.n	8009d4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	3301      	adds	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	3301      	adds	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	3301      	adds	r3, #1
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	3301      	adds	r3, #1
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	623b      	str	r3, [r7, #32]
 8009d4e:	6a3a      	ldr	r2, [r7, #32]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d3e6      	bcc.n	8009d24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d56:	8bfb      	ldrh	r3, [r7, #30]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01e      	beq.n	8009d9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d66:	461a      	mov	r2, r3
 8009d68:	f107 0310 	add.w	r3, r7, #16
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	701a      	strb	r2, [r3, #0]
      i++;
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	3301      	adds	r3, #1
 8009d86:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d8e:	8bfb      	ldrh	r3, [r7, #30]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d94:	8bfb      	ldrh	r3, [r7, #30]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1ea      	bne.n	8009d70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	372c      	adds	r7, #44	; 0x2c
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d12c      	bne.n	8009e1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	db12      	blt.n	8009dfc <USB_EPSetStall+0x54>
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00f      	beq.n	8009dfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	e02b      	b.n	8009e76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	db12      	blt.n	8009e56 <USB_EPSetStall+0xae>
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00f      	beq.n	8009e56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	0151      	lsls	r1, r2, #5
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	440a      	add	r2, r1
 8009e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d128      	bne.n	8009ef2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	0151      	lsls	r1, r2, #5
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	440a      	add	r2, r1
 8009eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ebe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	791b      	ldrb	r3, [r3, #4]
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d003      	beq.n	8009ed0 <USB_EPClearStall+0x4c>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d138      	bne.n	8009f42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	0151      	lsls	r1, r2, #5
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	e027      	b.n	8009f42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	0151      	lsls	r1, r2, #5
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	440a      	add	r2, r1
 8009f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	791b      	ldrb	r3, [r3, #4]
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d003      	beq.n	8009f22 <USB_EPClearStall+0x9e>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	791b      	ldrb	r3, [r3, #4]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d10f      	bne.n	8009f42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f84:	68f9      	ldr	r1, [r7, #12]
 8009f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fca:	f023 0302 	bic.w	r3, r3, #2
 8009fce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a00c:	f043 0302 	orr.w	r3, r3, #2
 800a010:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4013      	ands	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a038:	68fb      	ldr	r3, [r7, #12]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a046:	b480      	push	{r7}
 800a048:	b085      	sub	sp, #20
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	4013      	ands	r3, r2
 800a068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	0c1b      	lsrs	r3, r3, #16
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b085      	sub	sp, #20
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	4013      	ands	r3, r2
 800a09c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	b29b      	uxth	r3, r3
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0be:	78fb      	ldrb	r3, [r7, #3]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4013      	ands	r3, r2
 800a0da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b087      	sub	sp, #28
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	f003 030f 	and.w	r3, r3, #15
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	4313      	orrs	r3, r2
 800a122:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4013      	ands	r3, r2
 800a136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a138:	68bb      	ldr	r3, [r7, #8]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	f003 0301 	and.w	r3, r3, #1
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
	...

0800a164 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17e:	4619      	mov	r1, r3
 800a180:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <USB_ActivateSetup+0x44>)
 800a182:	4013      	ands	r3, r2
 800a184:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	fffff800 	.word	0xfffff800

0800a1ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	333c      	adds	r3, #60	; 0x3c
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	4a26      	ldr	r2, [pc, #152]	; (800a264 <USB_EP0_OutStart+0xb8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d90a      	bls.n	800a1e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1e0:	d101      	bne.n	800a1e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e037      	b.n	800a256 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a214:	f043 0318 	orr.w	r3, r3, #24
 800a218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a228:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a22c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10f      	bne.n	800a254 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	371c      	adds	r7, #28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	4f54300a 	.word	0x4f54300a

0800a268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4a13      	ldr	r2, [pc, #76]	; (800a2cc <USB_CoreReset+0x64>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d901      	bls.n	800a286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e01b      	b.n	800a2be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	daf2      	bge.n	800a274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f043 0201 	orr.w	r2, r3, #1
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4a09      	ldr	r2, [pc, #36]	; (800a2cc <USB_CoreReset+0x64>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d901      	bls.n	800a2b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e006      	b.n	800a2be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d0f0      	beq.n	800a29e <USB_CoreReset+0x36>

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	00030d40 	.word	0x00030d40

0800a2d0 <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;

uint8_t HiL_Init_MSGQ (void) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	200a      	movs	r0, #10
 800a2da:	f002 fc35 	bl	800cb48 <osMessageQueueNew>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4a05      	ldr	r2, [pc, #20]	; (800a2f8 <HiL_Init_MSGQ+0x28>)
 800a2e2:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <HiL_Init_MSGQ+0x28>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <HiL_Init_MSGQ+0x20>
	  return -1;
 800a2ec:	23ff      	movs	r3, #255	; 0xff
 800a2ee:	e000      	b.n	800a2f2 <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200006d8 	.word	0x200006d8

0800a2fc <HAL_TIM_IC_CaptureCallback>:
uint8_t uart_main_buffer[HIL_UART_BUFFER_SIZE] = "Default";
extern uint8_t uart_rx_buffer[HIL_UART_BUFFER_SIZE];
extern UART_HandleTypeDef huart7;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising and falling edges
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a10      	ldr	r2, [pc, #64]	; (800a34c <HAL_TIM_IC_CaptureCallback+0x50>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d11a      	bne.n	800a344 <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		//#define TIMER_CLOCK_FREQ 96000000 // APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 732 Hz
																				// -> Tested lowest measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 800a30e:	2100      	movs	r1, #0
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7fc fd33 	bl	8006d7c <HAL_TIM_ReadCapturedValue>
 800a316:	4603      	mov	r3, r0
 800a318:	3301      	adds	r3, #1
 800a31a:	4a0d      	ldr	r2, [pc, #52]	; (800a350 <HAL_TIM_IC_CaptureCallback+0x54>)
 800a31c:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800a31e:	2104      	movs	r1, #4
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7fc fd2b 	bl	8006d7c <HAL_TIM_ReadCapturedValue>
 800a326:	4603      	mov	r3, r0
 800a328:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <HAL_TIM_IC_CaptureCallback+0x58>)
 800a32a:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 800a32c:	4b09      	ldr	r3, [pc, #36]	; (800a354 <HAL_TIM_IC_CaptureCallback+0x58>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2264      	movs	r2, #100	; 0x64
 800a332:	fb03 f202 	mul.w	r2, r3, r2
 800a336:	4b06      	ldr	r3, [pc, #24]	; (800a350 <HAL_TIM_IC_CaptureCallback+0x54>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800a342:	701a      	strb	r2, [r3, #0]
	}
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	40010000 	.word	0x40010000
 800a350:	200007b8 	.word	0x200007b8
 800a354:	200007bc 	.word	0x200007bc
 800a358:	200007c0 	.word	0x200007c0

0800a35c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a08      	ldr	r2, [pc, #32]	; (800a390 <HAL_UARTEx_RxEventCallback+0x34>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10a      	bne.n	800a388 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(uart_main_buffer,uart_rx_buffer,Size);
 800a372:	887b      	ldrh	r3, [r7, #2]
 800a374:	461a      	mov	r2, r3
 800a376:	4907      	ldr	r1, [pc, #28]	; (800a394 <HAL_UARTEx_RxEventCallback+0x38>)
 800a378:	4807      	ldr	r0, [pc, #28]	; (800a398 <HAL_UARTEx_RxEventCallback+0x3c>)
 800a37a:	f006 f8af 	bl	80104dc <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800a37e:	2280      	movs	r2, #128	; 0x80
 800a380:	4904      	ldr	r1, [pc, #16]	; (800a394 <HAL_UARTEx_RxEventCallback+0x38>)
 800a382:	4806      	ldr	r0, [pc, #24]	; (800a39c <HAL_UARTEx_RxEventCallback+0x40>)
 800a384:	f7fe fb04 	bl	8008990 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	40007800 	.word	0x40007800
 800a394:	200006dc 	.word	0x200006dc
 800a398:	2000000c 	.word	0x2000000c
 800a39c:	200005dc 	.word	0x200005dc

0800a3a0 <HiL_controller_copy_array>:

static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	e009      	b.n	800a3c2 <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	441a      	add	r2, r3
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	7811      	ldrb	r1, [r2, #0]
 800a3b8:	4a07      	ldr	r2, [pc, #28]	; (800a3d8 <HiL_controller_copy_array+0x38>)
 800a3ba:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	73fb      	strb	r3, [r7, #15]
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d9f2      	bls.n	800a3ae <HiL_controller_copy_array+0xe>
	}
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	200007c4 	.word	0x200007c4

0800a3dc <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 800a3e4:	4b32      	ldr	r3, [pc, #200]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 800a3ea:	4b31      	ldr	r3, [pc, #196]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ffd5 	bl	800a3a0 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d847      	bhi.n	800a48e <HiL_controller_read_message+0xb2>
 800a3fe:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <HiL_controller_read_message+0x28>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a41b 	.word	0x0800a41b
 800a40c:	0800a449 	.word	0x0800a449
 800a410:	0800a477 	.word	0x0800a477
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800a414:	f000 f84e 	bl	800a4b4 <HiL_controller_send_message>
			break;
 800a418:	e045      	b.n	800a4a6 <HiL_controller_read_message+0xca>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800a41e:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f000 f8db 	bl	800a5e4 <HiL_mcu_commands_binary_action>
 800a42e:	4603      	mov	r3, r0
 800a430:	461a      	mov	r2, r3
 800a432:	4b1f      	ldr	r3, [pc, #124]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a434:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a436:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a43c:	7852      	ldrb	r2, [r2, #1]
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f895 	bl	800a570 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 800a446:	e02e      	b.n	800a4a6 <HiL_controller_read_message+0xca>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800a44c:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	f000 f8a0 	bl	800a59c <HiL_mcu_commands_potentiometer_emulator>
 800a45c:	4603      	mov	r3, r0
 800a45e:	461a      	mov	r2, r3
 800a460:	4b13      	ldr	r3, [pc, #76]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a462:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a464:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	4a11      	ldr	r2, [pc, #68]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a46a:	7852      	ldrb	r2, [r2, #1]
 800a46c:	4611      	mov	r1, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 f87e 	bl	800a570 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 800a474:	e017      	b.n	800a4a6 <HiL_controller_read_message+0xca>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800a476:	4b0e      	ldr	r3, [pc, #56]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a478:	2202      	movs	r2, #2
 800a47a:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	4a0b      	ldr	r2, [pc, #44]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a482:	7852      	ldrb	r2, [r2, #1]
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f872 	bl	800a570 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800a48c:	e00b      	b.n	800a4a6 <HiL_controller_read_message+0xca>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a490:	2201      	movs	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a494:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4a05      	ldr	r2, [pc, #20]	; (800a4b0 <HiL_controller_read_message+0xd4>)
 800a49a:	7852      	ldrb	r2, [r2, #1]
 800a49c:	4611      	mov	r1, r2
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f866 	bl	800a570 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200007c8 	.word	0x200007c8

0800a4b4 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800a4ba:	4b2b      	ldr	r3, [pc, #172]	; (800a568 <HiL_controller_send_message+0xb4>)
 800a4bc:	785b      	ldrb	r3, [r3, #1]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d027      	beq.n	800a512 <HiL_controller_send_message+0x5e>
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	dc43      	bgt.n	800a54e <HiL_controller_send_message+0x9a>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HiL_controller_send_message+0x1c>
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d012      	beq.n	800a4f4 <HiL_controller_send_message+0x40>
 800a4ce:	e03e      	b.n	800a54e <HiL_controller_send_message+0x9a>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <HiL_controller_send_message+0xb4>)
 800a4d2:	789b      	ldrb	r3, [r3, #2]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f92f 	bl	800a738 <HiL_mcu_commands_binary_status>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4b23      	ldr	r3, [pc, #140]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a4e0:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a4e2:	4b22      	ldr	r3, [pc, #136]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4a21      	ldr	r2, [pc, #132]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a4e8:	7852      	ldrb	r2, [r2, #1]
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f83f 	bl	800a570 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800a4f2:	e034      	b.n	800a55e <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_PWM:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800a4f4:	f000 f9aa 	bl	800a84c <HiL_mcu_commands_PWM_measure>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b1b      	ldr	r3, [pc, #108]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a4fe:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a500:	4b1a      	ldr	r3, [pc, #104]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	4a19      	ldr	r2, [pc, #100]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a506:	7852      	ldrb	r2, [r2, #1]
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f830 	bl	800a570 <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800a510:	e025      	b.n	800a55e <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_DATA_STREAMS:

			if (recieved_data[CONTROLLER_GET_OBJECT] == DATA_STREAM_OBJECTS_UART)
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <HiL_controller_send_message+0xb4>)
 800a514:	789b      	ldrb	r3, [r3, #2]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d119      	bne.n	800a54e <HiL_controller_send_message+0x9a>
			{

				uint16_t function_return = HiL_mcu_commands_UART_handler(recieved_data[CONTROLLER_GET_ACTION]);
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <HiL_controller_send_message+0xb4>)
 800a51c:	78db      	ldrb	r3, [r3, #3]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f9b2 	bl	800a888 <HiL_mcu_commands_UART_handler>
 800a524:	4603      	mov	r3, r0
 800a526:	80fb      	strh	r3, [r7, #6]

				controller_reply[CONTROLLER_VALUE1] =  function_return       & 0xff;
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a52e:	701a      	strb	r2, [r3, #0]
				controller_reply[CONTROLLER_VALUE2] = (function_return >> 8) & 0xff;
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b29b      	uxth	r3, r3
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a53a:	705a      	strb	r2, [r3, #1]

				HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a542:	7852      	ldrb	r2, [r2, #1]
 800a544:	4611      	mov	r1, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f812 	bl	800a570 <HiL_gateway_transmit_message>
										     controller_reply[CONTROLLER_VALUE2]);

				break;
 800a54c:	e007      	b.n	800a55e <HiL_controller_send_message+0xaa>



		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800a54e:	4b07      	ldr	r3, [pc, #28]	; (800a56c <HiL_controller_send_message+0xb8>)
 800a550:	2202      	movs	r2, #2
 800a552:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 800a554:	2120      	movs	r1, #32
 800a556:	2000      	movs	r0, #0
 800a558:	f000 f80a 	bl	800a570 <HiL_gateway_transmit_message>
	}
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200007c4 	.word	0x200007c4
 800a56c:	200007c8 	.word	0x200007c8

0800a570 <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	460a      	mov	r2, r1
 800a57a:	71fb      	strb	r3, [r7, #7]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800a584:	79bb      	ldrb	r3, [r7, #6]
 800a586:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 800a588:	f107 030c 	add.w	r3, r7, #12
 800a58c:	2102      	movs	r1, #2
 800a58e:	4618      	mov	r0, r3
 800a590:	f005 faa0 	bl	800fad4 <CDC_Transmit_FS>
}
 800a594:	bf00      	nop
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HiL_mcu_commands_potentiometer_emulator>:
uint8_t uart_main_buffer_pointer = 0;



uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	71fb      	strb	r3, [r7, #7]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	79bb      	ldrb	r3, [r7, #6]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	021b      	lsls	r3, r3, #8
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800a5bc:	89fb      	ldrh	r3, [r7, #14]
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c2:	d301      	bcc.n	800a5c8 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e006      	b.n	800a5d6 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4804      	ldr	r0, [pc, #16]	; (800a5e0 <HiL_mcu_commands_potentiometer_emulator+0x44>)
 800a5d0:	f7f7 fcb8 	bl	8001f44 <HAL_DAC_SetValue>
	return 0;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200003b0 	.word	0x200003b0

0800a5e4 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	460a      	mov	r2, r1
 800a5ee:	71fb      	strb	r3, [r7, #7]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 800a5f4:	79bb      	ldrb	r3, [r7, #6]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d102      	bne.n	800a600 <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	73fb      	strb	r3, [r7, #15]
 800a5fe:	e007      	b.n	800a610 <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 800a600:	79bb      	ldrb	r3, [r7, #6]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d102      	bne.n	800a60c <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800a606:	2300      	movs	r3, #0
 800a608:	73fb      	strb	r3, [r7, #15]
 800a60a:	e001      	b.n	800a610 <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800a60c:	2303      	movs	r3, #3
 800a60e:	e082      	b.n	800a716 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	2b0c      	cmp	r3, #12
 800a614:	d87c      	bhi.n	800a710 <HiL_mcu_commands_binary_action+0x12c>
 800a616:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <HiL_mcu_commands_binary_action+0x38>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a651 	.word	0x0800a651
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a671 	.word	0x0800a671
 800a628:	0800a67f 	.word	0x0800a67f
 800a62c:	0800a68f 	.word	0x0800a68f
 800a630:	0800a69d 	.word	0x0800a69d
 800a634:	0800a6ab 	.word	0x0800a6ab
 800a638:	0800a6b9 	.word	0x0800a6b9
 800a63c:	0800a6c7 	.word	0x0800a6c7
 800a640:	0800a6d5 	.word	0x0800a6d5
 800a644:	0800a6e5 	.word	0x0800a6e5
 800a648:	0800a6f3 	.word	0x0800a6f3
 800a64c:	0800a703 	.word	0x0800a703
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	461a      	mov	r2, r3
 800a654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a658:	4831      	ldr	r0, [pc, #196]	; (800a720 <HiL_mcu_commands_binary_action+0x13c>)
 800a65a:	f7f8 fdef 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a65e:	e059      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	461a      	mov	r2, r3
 800a664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a668:	482d      	ldr	r0, [pc, #180]	; (800a720 <HiL_mcu_commands_binary_action+0x13c>)
 800a66a:	f7f8 fde7 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a66e:	e051      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	461a      	mov	r2, r3
 800a674:	2110      	movs	r1, #16
 800a676:	482a      	ldr	r0, [pc, #168]	; (800a720 <HiL_mcu_commands_binary_action+0x13c>)
 800a678:	f7f8 fde0 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a67c:	e04a      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	461a      	mov	r2, r3
 800a682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a686:	4826      	ldr	r0, [pc, #152]	; (800a720 <HiL_mcu_commands_binary_action+0x13c>)
 800a688:	f7f8 fdd8 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a68c:	e042      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	461a      	mov	r2, r3
 800a692:	2108      	movs	r1, #8
 800a694:	4823      	ldr	r0, [pc, #140]	; (800a724 <HiL_mcu_commands_binary_action+0x140>)
 800a696:	f7f8 fdd1 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a69a:	e03b      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	2104      	movs	r1, #4
 800a6a2:	4820      	ldr	r0, [pc, #128]	; (800a724 <HiL_mcu_commands_binary_action+0x140>)
 800a6a4:	f7f8 fdca 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6a8:	e034      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	2110      	movs	r1, #16
 800a6b0:	481d      	ldr	r0, [pc, #116]	; (800a728 <HiL_mcu_commands_binary_action+0x144>)
 800a6b2:	f7f8 fdc3 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6b6:	e02d      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	2120      	movs	r1, #32
 800a6be:	481a      	ldr	r0, [pc, #104]	; (800a728 <HiL_mcu_commands_binary_action+0x144>)
 800a6c0:	f7f8 fdbc 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6c4:	e026      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	2140      	movs	r1, #64	; 0x40
 800a6cc:	4816      	ldr	r0, [pc, #88]	; (800a728 <HiL_mcu_commands_binary_action+0x144>)
 800a6ce:	f7f8 fdb5 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6d2:	e01f      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6dc:	4813      	ldr	r0, [pc, #76]	; (800a72c <HiL_mcu_commands_binary_action+0x148>)
 800a6de:	f7f8 fdad 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6e2:	e017      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	2180      	movs	r1, #128	; 0x80
 800a6ea:	4811      	ldr	r0, [pc, #68]	; (800a730 <HiL_mcu_commands_binary_action+0x14c>)
 800a6ec:	f7f8 fda6 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a6f0:	e010      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6fa:	480e      	ldr	r0, [pc, #56]	; (800a734 <HiL_mcu_commands_binary_action+0x150>)
 800a6fc:	f7f8 fd9e 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a700:	e008      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	461a      	mov	r2, r3
 800a706:	2104      	movs	r1, #4
 800a708:	4807      	ldr	r0, [pc, #28]	; (800a728 <HiL_mcu_commands_binary_action+0x144>)
 800a70a:	f7f8 fd97 	bl	800323c <HAL_GPIO_WritePin>
			break;
 800a70e:	e001      	b.n	800a714 <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800a710:	2302      	movs	r3, #2
 800a712:	e000      	b.n	800a716 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800a714:	2300      	movs	r3, #0
	
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	40020400 	.word	0x40020400
 800a724:	40021800 	.word	0x40021800
 800a728:	40020c00 	.word	0x40020c00
 800a72c:	40020800 	.word	0x40020800
 800a730:	40021400 	.word	0x40021400
 800a734:	40020000 	.word	0x40020000

0800a738 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	2b0c      	cmp	r3, #12
 800a746:	d870      	bhi.n	800a82a <HiL_mcu_commands_binary_status+0xf2>
 800a748:	a201      	add	r2, pc, #4	; (adr r2, 800a750 <HiL_mcu_commands_binary_status+0x18>)
 800a74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74e:	bf00      	nop
 800a750:	0800a785 	.word	0x0800a785
 800a754:	0800a793 	.word	0x0800a793
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7ad 	.word	0x0800a7ad
 800a760:	0800a7bb 	.word	0x0800a7bb
 800a764:	0800a7c7 	.word	0x0800a7c7
 800a768:	0800a7d3 	.word	0x0800a7d3
 800a76c:	0800a7df 	.word	0x0800a7df
 800a770:	0800a7eb 	.word	0x0800a7eb
 800a774:	0800a7f7 	.word	0x0800a7f7
 800a778:	0800a805 	.word	0x0800a805
 800a77c:	0800a811 	.word	0x0800a811
 800a780:	0800a81f 	.word	0x0800a81f
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800a784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a788:	482a      	ldr	r0, [pc, #168]	; (800a834 <HiL_mcu_commands_binary_status+0xfc>)
 800a78a:	f7f8 fd3f 	bl	800320c <HAL_GPIO_ReadPin>
 800a78e:	4603      	mov	r3, r0
 800a790:	e04c      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800a792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a796:	4827      	ldr	r0, [pc, #156]	; (800a834 <HiL_mcu_commands_binary_status+0xfc>)
 800a798:	f7f8 fd38 	bl	800320c <HAL_GPIO_ReadPin>
 800a79c:	4603      	mov	r3, r0
 800a79e:	e045      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800a7a0:	2110      	movs	r1, #16
 800a7a2:	4824      	ldr	r0, [pc, #144]	; (800a834 <HiL_mcu_commands_binary_status+0xfc>)
 800a7a4:	f7f8 fd32 	bl	800320c <HAL_GPIO_ReadPin>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	e03f      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800a7ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a7b0:	4820      	ldr	r0, [pc, #128]	; (800a834 <HiL_mcu_commands_binary_status+0xfc>)
 800a7b2:	f7f8 fd2b 	bl	800320c <HAL_GPIO_ReadPin>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	e038      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800a7ba:	2108      	movs	r1, #8
 800a7bc:	481e      	ldr	r0, [pc, #120]	; (800a838 <HiL_mcu_commands_binary_status+0x100>)
 800a7be:	f7f8 fd25 	bl	800320c <HAL_GPIO_ReadPin>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	e032      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	481b      	ldr	r0, [pc, #108]	; (800a838 <HiL_mcu_commands_binary_status+0x100>)
 800a7ca:	f7f8 fd1f 	bl	800320c <HAL_GPIO_ReadPin>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	e02c      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800a7d2:	2110      	movs	r1, #16
 800a7d4:	4819      	ldr	r0, [pc, #100]	; (800a83c <HiL_mcu_commands_binary_status+0x104>)
 800a7d6:	f7f8 fd19 	bl	800320c <HAL_GPIO_ReadPin>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e026      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800a7de:	2120      	movs	r1, #32
 800a7e0:	4816      	ldr	r0, [pc, #88]	; (800a83c <HiL_mcu_commands_binary_status+0x104>)
 800a7e2:	f7f8 fd13 	bl	800320c <HAL_GPIO_ReadPin>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	e020      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800a7ea:	2140      	movs	r1, #64	; 0x40
 800a7ec:	4813      	ldr	r0, [pc, #76]	; (800a83c <HiL_mcu_commands_binary_status+0x104>)
 800a7ee:	f7f8 fd0d 	bl	800320c <HAL_GPIO_ReadPin>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	e01a      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 800a7f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7fa:	4811      	ldr	r0, [pc, #68]	; (800a840 <HiL_mcu_commands_binary_status+0x108>)
 800a7fc:	f7f8 fd06 	bl	800320c <HAL_GPIO_ReadPin>
 800a800:	4603      	mov	r3, r0
 800a802:	e013      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800a804:	2180      	movs	r1, #128	; 0x80
 800a806:	480f      	ldr	r0, [pc, #60]	; (800a844 <HiL_mcu_commands_binary_status+0x10c>)
 800a808:	f7f8 fd00 	bl	800320c <HAL_GPIO_ReadPin>
 800a80c:	4603      	mov	r3, r0
 800a80e:	e00d      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 800a810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a814:	480c      	ldr	r0, [pc, #48]	; (800a848 <HiL_mcu_commands_binary_status+0x110>)
 800a816:	f7f8 fcf9 	bl	800320c <HAL_GPIO_ReadPin>
 800a81a:	4603      	mov	r3, r0
 800a81c:	e006      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 800a81e:	2104      	movs	r1, #4
 800a820:	4806      	ldr	r0, [pc, #24]	; (800a83c <HiL_mcu_commands_binary_status+0x104>)
 800a822:	f7f8 fcf3 	bl	800320c <HAL_GPIO_ReadPin>
 800a826:	4603      	mov	r3, r0
 800a828:	e000      	b.n	800a82c <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800a82a:	2302      	movs	r3, #2

	}
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	40020400 	.word	0x40020400
 800a838:	40021800 	.word	0x40021800
 800a83c:	40020c00 	.word	0x40020c00
 800a840:	40020800 	.word	0x40020800
 800a844:	40021400 	.word	0x40021400
 800a848:	40020000 	.word	0x40020000

0800a84c <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800a850:	2100      	movs	r1, #0
 800a852:	480b      	ldr	r0, [pc, #44]	; (800a880 <HiL_mcu_commands_PWM_measure+0x34>)
 800a854:	f7fb fdbc 	bl	80063d0 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800a858:	2104      	movs	r1, #4
 800a85a:	4809      	ldr	r0, [pc, #36]	; (800a880 <HiL_mcu_commands_PWM_measure+0x34>)
 800a85c:	f7fb fc42 	bl	80060e4 <HAL_TIM_IC_Start>

		osDelay(1);				//	Wait for  pwm-period to complete. Smallest tick time is currently 1 millisecond. PWM freq is 8 kHz, so this is slow
 800a860:	2001      	movs	r0, #1
 800a862:	f002 f943 	bl	800caec <osDelay>

												   // Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800a866:	2100      	movs	r1, #0
 800a868:	4805      	ldr	r0, [pc, #20]	; (800a880 <HiL_mcu_commands_PWM_measure+0x34>)
 800a86a:	f7fb ff01 	bl	8006670 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800a86e:	2104      	movs	r1, #4
 800a870:	4803      	ldr	r0, [pc, #12]	; (800a880 <HiL_mcu_commands_PWM_measure+0x34>)
 800a872:	f7fb fd3b 	bl	80062ec <HAL_TIM_IC_Stop>

		return Duty;
 800a876:	4b03      	ldr	r3, [pc, #12]	; (800a884 <HiL_mcu_commands_PWM_measure+0x38>)
 800a878:	781b      	ldrb	r3, [r3, #0]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000590 	.word	0x20000590
 800a884:	200007c0 	.word	0x200007c0

0800a888 <HiL_mcu_commands_UART_handler>:


uint16_t HiL_mcu_commands_UART_handler (uint8_t controller_get_action)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	71fb      	strb	r3, [r7, #7]
	if (controller_get_action == 0)
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <HiL_mcu_commands_UART_handler+0x1a>
	{
		uart_main_buffer_pointer = 0;
 800a898:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <HiL_mcu_commands_UART_handler+0x54>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
		return 0<<12; // transaction status: all good
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e016      	b.n	800a8d0 <HiL_mcu_commands_UART_handler+0x48>
	}
	else
	{
		uint16_t return_value = uart_main_buffer[uart_main_buffer_pointer];
 800a8a2:	4b0e      	ldr	r3, [pc, #56]	; (800a8dc <HiL_mcu_commands_UART_handler+0x54>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <HiL_mcu_commands_UART_handler+0x58>)
 800a8aa:	5c9b      	ldrb	r3, [r3, r2]
 800a8ac:	81fb      	strh	r3, [r7, #14]

		if (return_value != 0)
 800a8ae:	89fb      	ldrh	r3, [r7, #14]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <HiL_mcu_commands_UART_handler+0x46>
		{
			uart_main_buffer_pointer = (uart_main_buffer_pointer < HIL_UART_BUFFER_SIZE ? uart_main_buffer_pointer+1 : 0);
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <HiL_mcu_commands_UART_handler+0x54>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	db04      	blt.n	800a8c8 <HiL_mcu_commands_UART_handler+0x40>
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <HiL_mcu_commands_UART_handler+0x54>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	e000      	b.n	800a8ca <HiL_mcu_commands_UART_handler+0x42>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <HiL_mcu_commands_UART_handler+0x54>)
 800a8cc:	7013      	strb	r3, [r2, #0]
		}

		return return_value;
 800a8ce:	89fb      	ldrh	r3, [r7, #14]
	}

}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	200007ca 	.word	0x200007ca
 800a8e0:	2000000c 	.word	0x2000000c

0800a8e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a8f4:	f005 fde2 	bl	80104bc <malloc>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d109      	bne.n	800a916 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	32b0      	adds	r2, #176	; 0xb0
 800a90c:	2100      	movs	r1, #0
 800a90e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a912:	2302      	movs	r3, #2
 800a914:	e0d4      	b.n	800aac0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a916:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a91a:	2100      	movs	r1, #0
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f005 fdeb 	bl	80104f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	32b0      	adds	r2, #176	; 0xb0
 800a92c:	68f9      	ldr	r1, [r7, #12]
 800a92e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	32b0      	adds	r2, #176	; 0xb0
 800a93c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	7c1b      	ldrb	r3, [r3, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d138      	bne.n	800a9c0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a94e:	4b5e      	ldr	r3, [pc, #376]	; (800aac8 <USBD_CDC_Init+0x1e4>)
 800a950:	7819      	ldrb	r1, [r3, #0]
 800a952:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a956:	2202      	movs	r2, #2
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f005 fbe0 	bl	801011e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a95e:	4b5a      	ldr	r3, [pc, #360]	; (800aac8 <USBD_CDC_Init+0x1e4>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	f003 020f 	and.w	r2, r3, #15
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	440b      	add	r3, r1
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	2201      	movs	r2, #1
 800a976:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a978:	4b54      	ldr	r3, [pc, #336]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800a97a:	7819      	ldrb	r1, [r3, #0]
 800a97c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a980:	2202      	movs	r2, #2
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f005 fbcb 	bl	801011e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a988:	4b50      	ldr	r3, [pc, #320]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 020f 	and.w	r2, r3, #15
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	440b      	add	r3, r1
 800a99c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a9a4:	4b4a      	ldr	r3, [pc, #296]	; (800aad0 <USBD_CDC_Init+0x1ec>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	f003 020f 	and.w	r2, r3, #15
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	3326      	adds	r3, #38	; 0x26
 800a9ba:	2210      	movs	r2, #16
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e035      	b.n	800aa2c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a9c0:	4b41      	ldr	r3, [pc, #260]	; (800aac8 <USBD_CDC_Init+0x1e4>)
 800a9c2:	7819      	ldrb	r1, [r3, #0]
 800a9c4:	2340      	movs	r3, #64	; 0x40
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f005 fba8 	bl	801011e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a9ce:	4b3e      	ldr	r3, [pc, #248]	; (800aac8 <USBD_CDC_Init+0x1e4>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	f003 020f 	and.w	r2, r3, #15
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9e8:	4b38      	ldr	r3, [pc, #224]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800a9ea:	7819      	ldrb	r1, [r3, #0]
 800a9ec:	2340      	movs	r3, #64	; 0x40
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f005 fb94 	bl	801011e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9f6:	4b35      	ldr	r3, [pc, #212]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f003 020f 	and.w	r2, r3, #15
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa0e:	2201      	movs	r2, #1
 800aa10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa12:	4b2f      	ldr	r3, [pc, #188]	; (800aad0 <USBD_CDC_Init+0x1ec>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	f003 020f 	and.w	r2, r3, #15
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	440b      	add	r3, r1
 800aa26:	3326      	adds	r3, #38	; 0x26
 800aa28:	2210      	movs	r2, #16
 800aa2a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <USBD_CDC_Init+0x1ec>)
 800aa2e:	7819      	ldrb	r1, [r3, #0]
 800aa30:	2308      	movs	r3, #8
 800aa32:	2203      	movs	r2, #3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f005 fb72 	bl	801011e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aa3a:	4b25      	ldr	r3, [pc, #148]	; (800aad0 <USBD_CDC_Init+0x1ec>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 020f 	and.w	r2, r3, #15
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	440b      	add	r3, r1
 800aa4e:	3324      	adds	r3, #36	; 0x24
 800aa50:	2201      	movs	r2, #1
 800aa52:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	33b0      	adds	r3, #176	; 0xb0
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	e018      	b.n	800aac0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7c1b      	ldrb	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10a      	bne.n	800aaac <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800aa98:	7819      	ldrb	r1, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f005 fc29 	bl	80102fc <USBD_LL_PrepareReceive>
 800aaaa:	e008      	b.n	800aabe <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aaac:	4b07      	ldr	r3, [pc, #28]	; (800aacc <USBD_CDC_Init+0x1e8>)
 800aaae:	7819      	ldrb	r1, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f005 fc1f 	bl	80102fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20000113 	.word	0x20000113
 800aacc:	20000114 	.word	0x20000114
 800aad0:	20000115 	.word	0x20000115

0800aad4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aae0:	4b3a      	ldr	r3, [pc, #232]	; (800abcc <USBD_CDC_DeInit+0xf8>)
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f005 fb3f 	bl	801016a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aaec:	4b37      	ldr	r3, [pc, #220]	; (800abcc <USBD_CDC_DeInit+0xf8>)
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	f003 020f 	and.w	r2, r3, #15
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	440b      	add	r3, r1
 800ab00:	3324      	adds	r3, #36	; 0x24
 800ab02:	2200      	movs	r2, #0
 800ab04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ab06:	4b32      	ldr	r3, [pc, #200]	; (800abd0 <USBD_CDC_DeInit+0xfc>)
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f005 fb2c 	bl	801016a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ab12:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <USBD_CDC_DeInit+0xfc>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	f003 020f 	and.w	r2, r3, #15
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	440b      	add	r3, r1
 800ab26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ab2e:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <USBD_CDC_DeInit+0x100>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f005 fb18 	bl	801016a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ab3a:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <USBD_CDC_DeInit+0x100>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 020f 	and.w	r2, r3, #15
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	3324      	adds	r3, #36	; 0x24
 800ab50:	2200      	movs	r2, #0
 800ab52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab54:	4b1f      	ldr	r3, [pc, #124]	; (800abd4 <USBD_CDC_DeInit+0x100>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 020f 	and.w	r2, r3, #15
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	440b      	add	r3, r1
 800ab68:	3326      	adds	r3, #38	; 0x26
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	32b0      	adds	r2, #176	; 0xb0
 800ab78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01f      	beq.n	800abc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	33b0      	adds	r3, #176	; 0xb0
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32b0      	adds	r2, #176	; 0xb0
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f005 fc92 	bl	80104cc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	32b0      	adds	r2, #176	; 0xb0
 800abb2:	2100      	movs	r1, #0
 800abb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20000113 	.word	0x20000113
 800abd0:	20000114 	.word	0x20000114
 800abd4:	20000115 	.word	0x20000115

0800abd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	32b0      	adds	r2, #176	; 0xb0
 800abec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e0bf      	b.n	800ad88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d050      	beq.n	800acb6 <USBD_CDC_Setup+0xde>
 800ac14:	2b20      	cmp	r3, #32
 800ac16:	f040 80af 	bne.w	800ad78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	88db      	ldrh	r3, [r3, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d03a      	beq.n	800ac98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b25b      	sxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	da1b      	bge.n	800ac64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	33b0      	adds	r3, #176	; 0xb0
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ac42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	88d2      	ldrh	r2, [r2, #6]
 800ac48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	2b07      	cmp	r3, #7
 800ac50:	bf28      	it	cs
 800ac52:	2307      	movcs	r3, #7
 800ac54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	89fa      	ldrh	r2, [r7, #14]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 fdad 	bl	800c7bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac62:	e090      	b.n	800ad86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	785a      	ldrb	r2, [r3, #1]
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	88db      	ldrh	r3, [r3, #6]
 800ac72:	2b3f      	cmp	r3, #63	; 0x3f
 800ac74:	d803      	bhi.n	800ac7e <USBD_CDC_Setup+0xa6>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	88db      	ldrh	r3, [r3, #6]
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	e000      	b.n	800ac80 <USBD_CDC_Setup+0xa8>
 800ac7e:	2240      	movs	r2, #64	; 0x40
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac86:	6939      	ldr	r1, [r7, #16]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 fdbf 	bl	800c814 <USBD_CtlPrepareRx>
      break;
 800ac96:	e076      	b.n	800ad86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	33b0      	adds	r3, #176	; 0xb0
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	7850      	ldrb	r0, [r2, #1]
 800acae:	2200      	movs	r2, #0
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	4798      	blx	r3
      break;
 800acb4:	e067      	b.n	800ad86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2b0b      	cmp	r3, #11
 800acbc:	d851      	bhi.n	800ad62 <USBD_CDC_Setup+0x18a>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <USBD_CDC_Setup+0xec>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800acf5 	.word	0x0800acf5
 800acc8:	0800ad71 	.word	0x0800ad71
 800accc:	0800ad63 	.word	0x0800ad63
 800acd0:	0800ad63 	.word	0x0800ad63
 800acd4:	0800ad63 	.word	0x0800ad63
 800acd8:	0800ad63 	.word	0x0800ad63
 800acdc:	0800ad63 	.word	0x0800ad63
 800ace0:	0800ad63 	.word	0x0800ad63
 800ace4:	0800ad63 	.word	0x0800ad63
 800ace8:	0800ad63 	.word	0x0800ad63
 800acec:	0800ad1f 	.word	0x0800ad1f
 800acf0:	0800ad49 	.word	0x0800ad49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d107      	bne.n	800ad10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad00:	f107 030a 	add.w	r3, r7, #10
 800ad04:	2202      	movs	r2, #2
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fd57 	bl	800c7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad0e:	e032      	b.n	800ad76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 fce1 	bl	800c6da <USBD_CtlError>
            ret = USBD_FAIL;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	75fb      	strb	r3, [r7, #23]
          break;
 800ad1c:	e02b      	b.n	800ad76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d107      	bne.n	800ad3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad2a:	f107 030d 	add.w	r3, r7, #13
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fd42 	bl	800c7bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad38:	e01d      	b.n	800ad76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 fccc 	bl	800c6da <USBD_CtlError>
            ret = USBD_FAIL;
 800ad42:	2303      	movs	r3, #3
 800ad44:	75fb      	strb	r3, [r7, #23]
          break;
 800ad46:	e016      	b.n	800ad76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d00f      	beq.n	800ad74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fcbf 	bl	800c6da <USBD_CtlError>
            ret = USBD_FAIL;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad60:	e008      	b.n	800ad74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 fcb8 	bl	800c6da <USBD_CtlError>
          ret = USBD_FAIL;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ad6e:	e002      	b.n	800ad76 <USBD_CDC_Setup+0x19e>
          break;
 800ad70:	bf00      	nop
 800ad72:	e008      	b.n	800ad86 <USBD_CDC_Setup+0x1ae>
          break;
 800ad74:	bf00      	nop
      }
      break;
 800ad76:	e006      	b.n	800ad86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f001 fcad 	bl	800c6da <USBD_CtlError>
      ret = USBD_FAIL;
 800ad80:	2303      	movs	r3, #3
 800ad82:	75fb      	strb	r3, [r7, #23]
      break;
 800ad84:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ada2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	32b0      	adds	r2, #176	; 0xb0
 800adae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e065      	b.n	800ae86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	32b0      	adds	r2, #176	; 0xb0
 800adc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	3318      	adds	r3, #24
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d02f      	beq.n	800ae44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	f003 020f 	and.w	r2, r3, #15
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	3318      	adds	r3, #24
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	f003 010f 	and.w	r1, r3, #15
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	460b      	mov	r3, r1
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	440b      	add	r3, r1
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4403      	add	r3, r0
 800ae0c:	3348      	adds	r3, #72	; 0x48
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae14:	fb01 f303 	mul.w	r3, r1, r3
 800ae18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d112      	bne.n	800ae44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	f003 020f 	and.w	r2, r3, #15
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	440b      	add	r3, r1
 800ae30:	3318      	adds	r3, #24
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae36:	78f9      	ldrb	r1, [r7, #3]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f005 fa3c 	bl	80102ba <USBD_LL_Transmit>
 800ae42:	e01f      	b.n	800ae84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	33b0      	adds	r3, #176	; 0xb0
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d010      	beq.n	800ae84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	33b0      	adds	r3, #176	; 0xb0
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ae80:	78fa      	ldrb	r2, [r7, #3]
 800ae82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	32b0      	adds	r2, #176	; 0xb0
 800aea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	32b0      	adds	r2, #176	; 0xb0
 800aeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e01a      	b.n	800aef6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f005 fa3a 	bl	801033e <USBD_LL_GetRxDataSize>
 800aeca:	4602      	mov	r2, r0
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	33b0      	adds	r3, #176	; 0xb0
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aef0:	4611      	mov	r1, r2
 800aef2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	32b0      	adds	r2, #176	; 0xb0
 800af10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e025      	b.n	800af6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	33b0      	adds	r3, #176	; 0xb0
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d01a      	beq.n	800af6a <USBD_CDC_EP0_RxReady+0x6c>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800af3a:	2bff      	cmp	r3, #255	; 0xff
 800af3c:	d015      	beq.n	800af6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	33b0      	adds	r3, #176	; 0xb0
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800af56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af5e:	b292      	uxth	r2, r2
 800af60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	22ff      	movs	r2, #255	; 0xff
 800af66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af7c:	2182      	movs	r1, #130	; 0x82
 800af7e:	4818      	ldr	r0, [pc, #96]	; (800afe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af80:	f000 fd49 	bl	800ba16 <USBD_GetEpDesc>
 800af84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af86:	2101      	movs	r1, #1
 800af88:	4815      	ldr	r0, [pc, #84]	; (800afe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af8a:	f000 fd44 	bl	800ba16 <USBD_GetEpDesc>
 800af8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af90:	2181      	movs	r1, #129	; 0x81
 800af92:	4813      	ldr	r0, [pc, #76]	; (800afe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af94:	f000 fd3f 	bl	800ba16 <USBD_GetEpDesc>
 800af98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2210      	movs	r2, #16
 800afa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d006      	beq.n	800afba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2200      	movs	r2, #0
 800afb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afb4:	711a      	strb	r2, [r3, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d006      	beq.n	800afce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc8:	711a      	strb	r2, [r3, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2243      	movs	r2, #67	; 0x43
 800afd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afd4:	4b02      	ldr	r3, [pc, #8]	; (800afe0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200000d0 	.word	0x200000d0

0800afe4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afec:	2182      	movs	r1, #130	; 0x82
 800afee:	4818      	ldr	r0, [pc, #96]	; (800b050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aff0:	f000 fd11 	bl	800ba16 <USBD_GetEpDesc>
 800aff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aff6:	2101      	movs	r1, #1
 800aff8:	4815      	ldr	r0, [pc, #84]	; (800b050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800affa:	f000 fd0c 	bl	800ba16 <USBD_GetEpDesc>
 800affe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b000:	2181      	movs	r1, #129	; 0x81
 800b002:	4813      	ldr	r0, [pc, #76]	; (800b050 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b004:	f000 fd07 	bl	800ba16 <USBD_GetEpDesc>
 800b008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2210      	movs	r2, #16
 800b014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	2200      	movs	r2, #0
 800b020:	711a      	strb	r2, [r3, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f042 0202 	orr.w	r2, r2, #2
 800b028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d006      	beq.n	800b03e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	711a      	strb	r2, [r3, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f042 0202 	orr.w	r2, r2, #2
 800b03c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2243      	movs	r2, #67	; 0x43
 800b042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b044:	4b02      	ldr	r3, [pc, #8]	; (800b050 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200000d0 	.word	0x200000d0

0800b054 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b05c:	2182      	movs	r1, #130	; 0x82
 800b05e:	4818      	ldr	r0, [pc, #96]	; (800b0c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b060:	f000 fcd9 	bl	800ba16 <USBD_GetEpDesc>
 800b064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b066:	2101      	movs	r1, #1
 800b068:	4815      	ldr	r0, [pc, #84]	; (800b0c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b06a:	f000 fcd4 	bl	800ba16 <USBD_GetEpDesc>
 800b06e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b070:	2181      	movs	r1, #129	; 0x81
 800b072:	4813      	ldr	r0, [pc, #76]	; (800b0c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b074:	f000 fccf 	bl	800ba16 <USBD_GetEpDesc>
 800b078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2210      	movs	r2, #16
 800b084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	2200      	movs	r2, #0
 800b090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b094:	711a      	strb	r2, [r3, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0a8:	711a      	strb	r2, [r3, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2243      	movs	r2, #67	; 0x43
 800b0b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0b4:	4b02      	ldr	r3, [pc, #8]	; (800b0c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	200000d0 	.word	0x200000d0

0800b0c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	220a      	movs	r2, #10
 800b0d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0d2:	4b03      	ldr	r3, [pc, #12]	; (800b0e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	2000008c 	.word	0x2000008c

0800b0e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e009      	b.n	800b10c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	33b0      	adds	r3, #176	; 0xb0
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	32b0      	adds	r2, #176	; 0xb0
 800b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b132:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e008      	b.n	800b150 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32b0      	adds	r2, #176	; 0xb0
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d101      	bne.n	800b180 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e004      	b.n	800b18a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
	...

0800b198 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32b0      	adds	r2, #176	; 0xb0
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e025      	b.n	800b20a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d11f      	bne.n	800b208 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b1d0:	4b10      	ldr	r3, [pc, #64]	; (800b214 <USBD_CDC_TransmitPacket+0x7c>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 020f 	and.w	r2, r3, #15
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4403      	add	r3, r0
 800b1ea:	3318      	adds	r3, #24
 800b1ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <USBD_CDC_TransmitPacket+0x7c>)
 800b1f0:	7819      	ldrb	r1, [r3, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f005 f85b 	bl	80102ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000113 	.word	0x20000113

0800b218 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32b0      	adds	r2, #176	; 0xb0
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32b0      	adds	r2, #176	; 0xb0
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b242:	2303      	movs	r3, #3
 800b244:	e018      	b.n	800b278 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7c1b      	ldrb	r3, [r3, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b24e:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <USBD_CDC_ReceivePacket+0x68>)
 800b250:	7819      	ldrb	r1, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f005 f84d 	bl	80102fc <USBD_LL_PrepareReceive>
 800b262:	e008      	b.n	800b276 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <USBD_CDC_ReceivePacket+0x68>)
 800b266:	7819      	ldrb	r1, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f005 f843 	bl	80102fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20000114 	.word	0x20000114

0800b284 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	e01f      	b.n	800b2dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	79fa      	ldrb	r2, [r7, #7]
 800b2ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f004 febd 	bl	8010050 <USBD_LL_Init>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e025      	b.n	800b348 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	32ae      	adds	r2, #174	; 0xae
 800b30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00f      	beq.n	800b338 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	32ae      	adds	r2, #174	; 0xae
 800b322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	f107 020e 	add.w	r2, r7, #14
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	4602      	mov	r2, r0
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f004 fec5 	bl	80100e8 <USBD_LL_Start>
 800b35e:	4603      	mov	r3, r0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b372:	4618      	mov	r0, r3
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	460b      	mov	r3, r1
 800b388:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d009      	beq.n	800b3ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	78fa      	ldrb	r2, [r7, #3]
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4798      	blx	r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 f932 	bl	800c666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b410:	461a      	mov	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b41e:	f003 031f 	and.w	r3, r3, #31
 800b422:	2b02      	cmp	r3, #2
 800b424:	d01a      	beq.n	800b45c <USBD_LL_SetupStage+0x72>
 800b426:	2b02      	cmp	r3, #2
 800b428:	d822      	bhi.n	800b470 <USBD_LL_SetupStage+0x86>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <USBD_LL_SetupStage+0x4a>
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d00a      	beq.n	800b448 <USBD_LL_SetupStage+0x5e>
 800b432:	e01d      	b.n	800b470 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fb5f 	bl	800bb00 <USBD_StdDevReq>
 800b442:	4603      	mov	r3, r0
 800b444:	73fb      	strb	r3, [r7, #15]
      break;
 800b446:	e020      	b.n	800b48a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fbc7 	bl	800bbe4 <USBD_StdItfReq>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
      break;
 800b45a:	e016      	b.n	800b48a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fc29 	bl	800bcbc <USBD_StdEPReq>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
      break;
 800b46e:	e00c      	b.n	800b48a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b476:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f004 fe92 	bl	80101a8 <USBD_LL_StallEP>
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
      break;
 800b488:	bf00      	nop
  }

  return ret;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	460b      	mov	r3, r1
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d16e      	bne.n	800b58a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	f040 8098 	bne.w	800b5f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d913      	bls.n	800b4f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	689a      	ldr	r2, [r3, #8]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	1ad2      	subs	r2, r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	bf28      	it	cs
 800b4e6:	4613      	movcs	r3, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f001 f9ae 	bl	800c84e <USBD_CtlContinueRx>
 800b4f2:	e07d      	b.n	800b5f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4fa:	f003 031f 	and.w	r3, r3, #31
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d014      	beq.n	800b52c <USBD_LL_DataOutStage+0x98>
 800b502:	2b02      	cmp	r3, #2
 800b504:	d81d      	bhi.n	800b542 <USBD_LL_DataOutStage+0xae>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <USBD_LL_DataOutStage+0x7c>
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d003      	beq.n	800b516 <USBD_LL_DataOutStage+0x82>
 800b50e:	e018      	b.n	800b542 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	75bb      	strb	r3, [r7, #22]
            break;
 800b514:	e018      	b.n	800b548 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	4619      	mov	r1, r3
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fa5e 	bl	800b9e2 <USBD_CoreFindIF>
 800b526:	4603      	mov	r3, r0
 800b528:	75bb      	strb	r3, [r7, #22]
            break;
 800b52a:	e00d      	b.n	800b548 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b532:	b2db      	uxtb	r3, r3
 800b534:	4619      	mov	r1, r3
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 fa60 	bl	800b9fc <USBD_CoreFindEP>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75bb      	strb	r3, [r7, #22]
            break;
 800b540:	e002      	b.n	800b548 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	75bb      	strb	r3, [r7, #22]
            break;
 800b546:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b548:	7dbb      	ldrb	r3, [r7, #22]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d119      	bne.n	800b582 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b03      	cmp	r3, #3
 800b558:	d113      	bne.n	800b582 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b55a:	7dba      	ldrb	r2, [r7, #22]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	32ae      	adds	r2, #174	; 0xae
 800b560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00b      	beq.n	800b582 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b56a:	7dba      	ldrb	r2, [r7, #22]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b572:	7dba      	ldrb	r2, [r7, #22]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	32ae      	adds	r2, #174	; 0xae
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f001 f974 	bl	800c870 <USBD_CtlSendStatus>
 800b588:	e032      	b.n	800b5f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b58a:	7afb      	ldrb	r3, [r7, #11]
 800b58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b590:	b2db      	uxtb	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 fa31 	bl	800b9fc <USBD_CoreFindEP>
 800b59a:	4603      	mov	r3, r0
 800b59c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b59e:	7dbb      	ldrb	r3, [r7, #22]
 800b5a0:	2bff      	cmp	r3, #255	; 0xff
 800b5a2:	d025      	beq.n	800b5f0 <USBD_LL_DataOutStage+0x15c>
 800b5a4:	7dbb      	ldrb	r3, [r7, #22]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d122      	bne.n	800b5f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d117      	bne.n	800b5e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b5b6:	7dba      	ldrb	r2, [r7, #22]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	32ae      	adds	r2, #174	; 0xae
 800b5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00f      	beq.n	800b5e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b5c6:	7dba      	ldrb	r2, [r7, #22]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b5ce:	7dba      	ldrb	r2, [r7, #22]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	32ae      	adds	r2, #174	; 0xae
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	7afa      	ldrb	r2, [r7, #11]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	4798      	blx	r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	e000      	b.n	800b5f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b086      	sub	sp, #24
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	460b      	mov	r3, r1
 800b604:	607a      	str	r2, [r7, #4]
 800b606:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b608:	7afb      	ldrb	r3, [r7, #11]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d16f      	bne.n	800b6ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3314      	adds	r3, #20
 800b612:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d15a      	bne.n	800b6d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	689a      	ldr	r2, [r3, #8]
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	429a      	cmp	r2, r3
 800b628:	d914      	bls.n	800b654 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f001 f8d6 	bl	800c7f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b646:	2300      	movs	r3, #0
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f004 fe55 	bl	80102fc <USBD_LL_PrepareReceive>
 800b652:	e03f      	b.n	800b6d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	68da      	ldr	r2, [r3, #12]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d11c      	bne.n	800b69a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b668:	429a      	cmp	r2, r3
 800b66a:	d316      	bcc.n	800b69a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b676:	429a      	cmp	r2, r3
 800b678:	d20f      	bcs.n	800b69a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b67a:	2200      	movs	r2, #0
 800b67c:	2100      	movs	r1, #0
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f001 f8b7 	bl	800c7f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b68c:	2300      	movs	r3, #0
 800b68e:	2200      	movs	r2, #0
 800b690:	2100      	movs	r1, #0
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f004 fe32 	bl	80102fc <USBD_LL_PrepareReceive>
 800b698:	e01c      	b.n	800b6d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d10f      	bne.n	800b6c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d009      	beq.n	800b6c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6c6:	2180      	movs	r1, #128	; 0x80
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f004 fd6d 	bl	80101a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f001 f8e1 	bl	800c896 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d03a      	beq.n	800b754 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff fe42 	bl	800b368 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6ec:	e032      	b.n	800b754 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b6ee:	7afb      	ldrb	r3, [r7, #11]
 800b6f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f97f 	bl	800b9fc <USBD_CoreFindEP>
 800b6fe:	4603      	mov	r3, r0
 800b700:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	2bff      	cmp	r3, #255	; 0xff
 800b706:	d025      	beq.n	800b754 <USBD_LL_DataInStage+0x15a>
 800b708:	7dfb      	ldrb	r3, [r7, #23]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d122      	bne.n	800b754 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b03      	cmp	r3, #3
 800b718:	d11c      	bne.n	800b754 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b71a:	7dfa      	ldrb	r2, [r7, #23]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	32ae      	adds	r2, #174	; 0xae
 800b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d014      	beq.n	800b754 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b72a:	7dfa      	ldrb	r2, [r7, #23]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b732:	7dfa      	ldrb	r2, [r7, #23]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	32ae      	adds	r2, #174	; 0xae
 800b738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	7afa      	ldrb	r2, [r7, #11]
 800b740:	4611      	mov	r1, r2
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	4798      	blx	r3
 800b746:	4603      	mov	r3, r0
 800b748:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b74a:	7dbb      	ldrb	r3, [r7, #22]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b750:	7dbb      	ldrb	r3, [r7, #22]
 800b752:	e000      	b.n	800b756 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d014      	beq.n	800b7c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00e      	beq.n	800b7c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6852      	ldr	r2, [r2, #4]
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	4798      	blx	r3
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7c4:	2340      	movs	r3, #64	; 0x40
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f004 fca7 	bl	801011e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2240      	movs	r2, #64	; 0x40
 800b7dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7e0:	2340      	movs	r3, #64	; 0x40
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2180      	movs	r1, #128	; 0x80
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f004 fc99 	bl	801011e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2240      	movs	r2, #64	; 0x40
 800b7f6:	621a      	str	r2, [r3, #32]

  return ret;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	78fa      	ldrb	r2, [r7, #3]
 800b812:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b830:	b2da      	uxtb	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2204      	movs	r2, #4
 800b83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d106      	bne.n	800b870 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d110      	bne.n	800b8b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	32ae      	adds	r2, #174	; 0xae
 800b8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e01c      	b.n	800b91a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d115      	bne.n	800b918 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	32ae      	adds	r2, #174	; 0xae
 800b8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	32ae      	adds	r2, #174	; 0xae
 800b90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	78fa      	ldrb	r2, [r7, #3]
 800b912:	4611      	mov	r1, r2
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	32ae      	adds	r2, #174	; 0xae
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b940:	2303      	movs	r3, #3
 800b942:	e01c      	b.n	800b97e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d115      	bne.n	800b97c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	; 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00b      	beq.n	800b97c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	; 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	4611      	mov	r1, r2
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b986:	b480      	push	{r7}
 800b988:	b083      	sub	sp, #12
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00e      	beq.n	800b9d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6852      	ldr	r2, [r2, #4]
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	4798      	blx	r3
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b086      	sub	sp, #24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	885b      	ldrh	r3, [r3, #2]
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d920      	bls.n	800ba80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba46:	e013      	b.n	800ba70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba48:	f107 030a 	add.w	r3, r7, #10
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6978      	ldr	r0, [r7, #20]
 800ba50:	f000 f81b 	bl	800ba8a <USBD_GetNextDesc>
 800ba54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d108      	bne.n	800ba70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	789b      	ldrb	r3, [r3, #2]
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d008      	beq.n	800ba7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	885b      	ldrh	r3, [r3, #2]
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	897b      	ldrh	r3, [r7, #10]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d8e5      	bhi.n	800ba48 <USBD_GetEpDesc+0x32>
 800ba7c:	e000      	b.n	800ba80 <USBD_GetEpDesc+0x6a>
          break;
 800ba7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba80:	693b      	ldr	r3, [r7, #16]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	881a      	ldrh	r2, [r3, #0]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4413      	add	r3, r2
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4413      	add	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bab6:	68fb      	ldr	r3, [r7, #12]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	3301      	adds	r3, #1
 800bada:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bae2:	8a3b      	ldrh	r3, [r7, #16]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	b21a      	sxth	r2, r3
 800bae8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baec:	4313      	orrs	r3, r2
 800baee:	b21b      	sxth	r3, r3
 800baf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800baf2:	89fb      	ldrh	r3, [r7, #14]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	371c      	adds	r7, #28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d005      	beq.n	800bb26 <USBD_StdDevReq+0x26>
 800bb1a:	2b40      	cmp	r3, #64	; 0x40
 800bb1c:	d857      	bhi.n	800bbce <USBD_StdDevReq+0xce>
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00f      	beq.n	800bb42 <USBD_StdDevReq+0x42>
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d153      	bne.n	800bbce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	32ae      	adds	r2, #174	; 0xae
 800bb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	4798      	blx	r3
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb40:	e04a      	b.n	800bbd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	785b      	ldrb	r3, [r3, #1]
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d83b      	bhi.n	800bbc2 <USBD_StdDevReq+0xc2>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <USBD_StdDevReq+0x50>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bba5 	.word	0x0800bba5
 800bb54:	0800bbb9 	.word	0x0800bbb9
 800bb58:	0800bbc3 	.word	0x0800bbc3
 800bb5c:	0800bbaf 	.word	0x0800bbaf
 800bb60:	0800bbc3 	.word	0x0800bbc3
 800bb64:	0800bb83 	.word	0x0800bb83
 800bb68:	0800bb79 	.word	0x0800bb79
 800bb6c:	0800bbc3 	.word	0x0800bbc3
 800bb70:	0800bb9b 	.word	0x0800bb9b
 800bb74:	0800bb8d 	.word	0x0800bb8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa3c 	bl	800bff8 <USBD_GetDescriptor>
          break;
 800bb80:	e024      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fbcb 	bl	800c320 <USBD_SetAddress>
          break;
 800bb8a:	e01f      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fc0a 	bl	800c3a8 <USBD_SetConfig>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]
          break;
 800bb98:	e018      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fcad 	bl	800c4fc <USBD_GetConfig>
          break;
 800bba2:	e013      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fcde 	bl	800c568 <USBD_GetStatus>
          break;
 800bbac:	e00e      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fd0d 	bl	800c5d0 <USBD_SetFeature>
          break;
 800bbb6:	e009      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fd31 	bl	800c622 <USBD_ClrFeature>
          break;
 800bbc0:	e004      	b.n	800bbcc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fd88 	bl	800c6da <USBD_CtlError>
          break;
 800bbca:	bf00      	nop
      }
      break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fd82 	bl	800c6da <USBD_CtlError>
      break;
 800bbd6:	bf00      	nop
  }

  return ret;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop

0800bbe4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbfa:	2b40      	cmp	r3, #64	; 0x40
 800bbfc:	d005      	beq.n	800bc0a <USBD_StdItfReq+0x26>
 800bbfe:	2b40      	cmp	r3, #64	; 0x40
 800bc00:	d852      	bhi.n	800bca8 <USBD_StdItfReq+0xc4>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <USBD_StdItfReq+0x26>
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	d14e      	bne.n	800bca8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	3b01      	subs	r3, #1
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d840      	bhi.n	800bc9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	889b      	ldrh	r3, [r3, #4]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d836      	bhi.n	800bc90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	889b      	ldrh	r3, [r3, #4]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff fed9 	bl	800b9e2 <USBD_CoreFindIF>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	2bff      	cmp	r3, #255	; 0xff
 800bc38:	d01d      	beq.n	800bc76 <USBD_StdItfReq+0x92>
 800bc3a:	7bbb      	ldrb	r3, [r7, #14]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11a      	bne.n	800bc76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc40:	7bba      	ldrb	r2, [r7, #14]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32ae      	adds	r2, #174	; 0xae
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00f      	beq.n	800bc70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc50:	7bba      	ldrb	r2, [r7, #14]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc58:	7bba      	ldrb	r2, [r7, #14]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	32ae      	adds	r2, #174	; 0xae
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc6e:	e004      	b.n	800bc7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc70:	2303      	movs	r3, #3
 800bc72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc74:	e001      	b.n	800bc7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc76:	2303      	movs	r3, #3
 800bc78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	88db      	ldrh	r3, [r3, #6]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d110      	bne.n	800bca4 <USBD_StdItfReq+0xc0>
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10d      	bne.n	800bca4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fdf1 	bl	800c870 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc8e:	e009      	b.n	800bca4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fd21 	bl	800c6da <USBD_CtlError>
          break;
 800bc98:	e004      	b.n	800bca4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fd1c 	bl	800c6da <USBD_CtlError>
          break;
 800bca2:	e000      	b.n	800bca6 <USBD_StdItfReq+0xc2>
          break;
 800bca4:	bf00      	nop
      }
      break;
 800bca6:	e004      	b.n	800bcb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fd15 	bl	800c6da <USBD_CtlError>
      break;
 800bcb0:	bf00      	nop
  }

  return ret;
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	889b      	ldrh	r3, [r3, #4]
 800bcce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcd8:	2b40      	cmp	r3, #64	; 0x40
 800bcda:	d007      	beq.n	800bcec <USBD_StdEPReq+0x30>
 800bcdc:	2b40      	cmp	r3, #64	; 0x40
 800bcde:	f200 817f 	bhi.w	800bfe0 <USBD_StdEPReq+0x324>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d02a      	beq.n	800bd3c <USBD_StdEPReq+0x80>
 800bce6:	2b20      	cmp	r3, #32
 800bce8:	f040 817a 	bne.w	800bfe0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bcec:	7bbb      	ldrb	r3, [r7, #14]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe83 	bl	800b9fc <USBD_CoreFindEP>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcfa:	7b7b      	ldrb	r3, [r7, #13]
 800bcfc:	2bff      	cmp	r3, #255	; 0xff
 800bcfe:	f000 8174 	beq.w	800bfea <USBD_StdEPReq+0x32e>
 800bd02:	7b7b      	ldrb	r3, [r7, #13]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f040 8170 	bne.w	800bfea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd0a:	7b7a      	ldrb	r2, [r7, #13]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd12:	7b7a      	ldrb	r2, [r7, #13]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	32ae      	adds	r2, #174	; 0xae
 800bd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 8163 	beq.w	800bfea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd24:	7b7a      	ldrb	r2, [r7, #13]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	32ae      	adds	r2, #174	; 0xae
 800bd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	4798      	blx	r3
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd3a:	e156      	b.n	800bfea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	785b      	ldrb	r3, [r3, #1]
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d008      	beq.n	800bd56 <USBD_StdEPReq+0x9a>
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	f300 8145 	bgt.w	800bfd4 <USBD_StdEPReq+0x318>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 809b 	beq.w	800be86 <USBD_StdEPReq+0x1ca>
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d03c      	beq.n	800bdce <USBD_StdEPReq+0x112>
 800bd54:	e13e      	b.n	800bfd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d002      	beq.n	800bd68 <USBD_StdEPReq+0xac>
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d016      	beq.n	800bd94 <USBD_StdEPReq+0xd8>
 800bd66:	e02c      	b.n	800bdc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00d      	beq.n	800bd8a <USBD_StdEPReq+0xce>
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	2b80      	cmp	r3, #128	; 0x80
 800bd72:	d00a      	beq.n	800bd8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f004 fa15 	bl	80101a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd7e:	2180      	movs	r1, #128	; 0x80
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f004 fa11 	bl	80101a8 <USBD_LL_StallEP>
 800bd86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd88:	e020      	b.n	800bdcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fca4 	bl	800c6da <USBD_CtlError>
              break;
 800bd92:	e01b      	b.n	800bdcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	885b      	ldrh	r3, [r3, #2]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10e      	bne.n	800bdba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00b      	beq.n	800bdba <USBD_StdEPReq+0xfe>
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	2b80      	cmp	r3, #128	; 0x80
 800bda6:	d008      	beq.n	800bdba <USBD_StdEPReq+0xfe>
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	88db      	ldrh	r3, [r3, #6]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f004 f9f7 	bl	80101a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fd58 	bl	800c870 <USBD_CtlSendStatus>

              break;
 800bdc0:	e004      	b.n	800bdcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fc88 	bl	800c6da <USBD_CtlError>
              break;
 800bdca:	bf00      	nop
          }
          break;
 800bdcc:	e107      	b.n	800bfde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d002      	beq.n	800bde0 <USBD_StdEPReq+0x124>
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d016      	beq.n	800be0c <USBD_StdEPReq+0x150>
 800bdde:	e04b      	b.n	800be78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00d      	beq.n	800be02 <USBD_StdEPReq+0x146>
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b80      	cmp	r3, #128	; 0x80
 800bdea:	d00a      	beq.n	800be02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f004 f9d9 	bl	80101a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdf6:	2180      	movs	r1, #128	; 0x80
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f004 f9d5 	bl	80101a8 <USBD_LL_StallEP>
 800bdfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be00:	e040      	b.n	800be84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fc68 	bl	800c6da <USBD_CtlError>
              break;
 800be0a:	e03b      	b.n	800be84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	885b      	ldrh	r3, [r3, #2]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d136      	bne.n	800be82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d004      	beq.n	800be28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f004 f9df 	bl	80101e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fd21 	bl	800c870 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fde2 	bl	800b9fc <USBD_CoreFindEP>
 800be38:	4603      	mov	r3, r0
 800be3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be3c:	7b7b      	ldrb	r3, [r7, #13]
 800be3e:	2bff      	cmp	r3, #255	; 0xff
 800be40:	d01f      	beq.n	800be82 <USBD_StdEPReq+0x1c6>
 800be42:	7b7b      	ldrb	r3, [r7, #13]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11c      	bne.n	800be82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be48:	7b7a      	ldrb	r2, [r7, #13]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be50:	7b7a      	ldrb	r2, [r7, #13]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32ae      	adds	r2, #174	; 0xae
 800be56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d010      	beq.n	800be82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be60:	7b7a      	ldrb	r2, [r7, #13]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	32ae      	adds	r2, #174	; 0xae
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	4798      	blx	r3
 800be72:	4603      	mov	r3, r0
 800be74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be76:	e004      	b.n	800be82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fc2d 	bl	800c6da <USBD_CtlError>
              break;
 800be80:	e000      	b.n	800be84 <USBD_StdEPReq+0x1c8>
              break;
 800be82:	bf00      	nop
          }
          break;
 800be84:	e0ab      	b.n	800bfde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d002      	beq.n	800be98 <USBD_StdEPReq+0x1dc>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d032      	beq.n	800befc <USBD_StdEPReq+0x240>
 800be96:	e097      	b.n	800bfc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be98:	7bbb      	ldrb	r3, [r7, #14]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d007      	beq.n	800beae <USBD_StdEPReq+0x1f2>
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b80      	cmp	r3, #128	; 0x80
 800bea2:	d004      	beq.n	800beae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fc17 	bl	800c6da <USBD_CtlError>
                break;
 800beac:	e091      	b.n	800bfd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	da0b      	bge.n	800bece <USBD_StdEPReq+0x212>
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	3310      	adds	r3, #16
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	4413      	add	r3, r2
 800beca:	3304      	adds	r3, #4
 800becc:	e00b      	b.n	800bee6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	4413      	add	r3, r2
 800bee4:	3304      	adds	r3, #4
 800bee6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2202      	movs	r2, #2
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fc61 	bl	800c7bc <USBD_CtlSendData>
              break;
 800befa:	e06a      	b.n	800bfd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800befc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	da11      	bge.n	800bf28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	f003 020f 	and.w	r2, r3, #15
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	440b      	add	r3, r1
 800bf16:	3324      	adds	r3, #36	; 0x24
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d117      	bne.n	800bf4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fbda 	bl	800c6da <USBD_CtlError>
                  break;
 800bf26:	e054      	b.n	800bfd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	f003 020f 	and.w	r2, r3, #15
 800bf2e:	6879      	ldr	r1, [r7, #4]
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fbc7 	bl	800c6da <USBD_CtlError>
                  break;
 800bf4c:	e041      	b.n	800bfd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da0b      	bge.n	800bf6e <USBD_StdEPReq+0x2b2>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	3310      	adds	r3, #16
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	4413      	add	r3, r2
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	e00b      	b.n	800bf86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf6e:	7bbb      	ldrb	r3, [r7, #14]
 800bf70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	4413      	add	r3, r2
 800bf84:	3304      	adds	r3, #4
 800bf86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <USBD_StdEPReq+0x2d8>
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	2b80      	cmp	r3, #128	; 0x80
 800bf92:	d103      	bne.n	800bf9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	e00e      	b.n	800bfba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f004 f93f 	bl	8010224 <USBD_LL_IsStallEP>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	e002      	b.n	800bfba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fbfb 	bl	800c7bc <USBD_CtlSendData>
              break;
 800bfc6:	e004      	b.n	800bfd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fb85 	bl	800c6da <USBD_CtlError>
              break;
 800bfd0:	bf00      	nop
          }
          break;
 800bfd2:	e004      	b.n	800bfde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fb7f 	bl	800c6da <USBD_CtlError>
          break;
 800bfdc:	bf00      	nop
      }
      break;
 800bfde:	e005      	b.n	800bfec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fb79 	bl	800c6da <USBD_CtlError>
      break;
 800bfe8:	e000      	b.n	800bfec <USBD_StdEPReq+0x330>
      break;
 800bfea:	bf00      	nop
  }

  return ret;
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	885b      	ldrh	r3, [r3, #2]
 800c012:	0a1b      	lsrs	r3, r3, #8
 800c014:	b29b      	uxth	r3, r3
 800c016:	3b01      	subs	r3, #1
 800c018:	2b0e      	cmp	r3, #14
 800c01a:	f200 8152 	bhi.w	800c2c2 <USBD_GetDescriptor+0x2ca>
 800c01e:	a201      	add	r2, pc, #4	; (adr r2, 800c024 <USBD_GetDescriptor+0x2c>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c095 	.word	0x0800c095
 800c028:	0800c0ad 	.word	0x0800c0ad
 800c02c:	0800c0ed 	.word	0x0800c0ed
 800c030:	0800c2c3 	.word	0x0800c2c3
 800c034:	0800c2c3 	.word	0x0800c2c3
 800c038:	0800c263 	.word	0x0800c263
 800c03c:	0800c28f 	.word	0x0800c28f
 800c040:	0800c2c3 	.word	0x0800c2c3
 800c044:	0800c2c3 	.word	0x0800c2c3
 800c048:	0800c2c3 	.word	0x0800c2c3
 800c04c:	0800c2c3 	.word	0x0800c2c3
 800c050:	0800c2c3 	.word	0x0800c2c3
 800c054:	0800c2c3 	.word	0x0800c2c3
 800c058:	0800c2c3 	.word	0x0800c2c3
 800c05c:	0800c061 	.word	0x0800c061
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	7c12      	ldrb	r2, [r2, #16]
 800c078:	f107 0108 	add.w	r1, r7, #8
 800c07c:	4610      	mov	r0, r2
 800c07e:	4798      	blx	r3
 800c080:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c082:	e126      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fb27 	bl	800c6da <USBD_CtlError>
        err++;
 800c08c:	7afb      	ldrb	r3, [r7, #11]
 800c08e:	3301      	adds	r3, #1
 800c090:	72fb      	strb	r3, [r7, #11]
      break;
 800c092:	e11e      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7c12      	ldrb	r2, [r2, #16]
 800c0a0:	f107 0108 	add.w	r1, r7, #8
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4798      	blx	r3
 800c0a8:	60f8      	str	r0, [r7, #12]
      break;
 800c0aa:	e112      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	7c1b      	ldrb	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10d      	bne.n	800c0d0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0bc:	f107 0208 	add.w	r2, r7, #8
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	4798      	blx	r3
 800c0c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0ce:	e100      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d8:	f107 0208 	add.w	r2, r7, #8
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4798      	blx	r3
 800c0e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	701a      	strb	r2, [r3, #0]
      break;
 800c0ea:	e0f2      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	885b      	ldrh	r3, [r3, #2]
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b05      	cmp	r3, #5
 800c0f4:	f200 80ac 	bhi.w	800c250 <USBD_GetDescriptor+0x258>
 800c0f8:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <USBD_GetDescriptor+0x108>)
 800c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fe:	bf00      	nop
 800c100:	0800c119 	.word	0x0800c119
 800c104:	0800c14d 	.word	0x0800c14d
 800c108:	0800c181 	.word	0x0800c181
 800c10c:	0800c1b5 	.word	0x0800c1b5
 800c110:	0800c1e9 	.word	0x0800c1e9
 800c114:	0800c21d 	.word	0x0800c21d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	7c12      	ldrb	r2, [r2, #16]
 800c130:	f107 0108 	add.w	r1, r7, #8
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
 800c138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c13a:	e091      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 facb 	bl	800c6da <USBD_CtlError>
            err++;
 800c144:	7afb      	ldrb	r3, [r7, #11]
 800c146:	3301      	adds	r3, #1
 800c148:	72fb      	strb	r3, [r7, #11]
          break;
 800c14a:	e089      	b.n	800c260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	7c12      	ldrb	r2, [r2, #16]
 800c164:	f107 0108 	add.w	r1, r7, #8
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c16e:	e077      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fab1 	bl	800c6da <USBD_CtlError>
            err++;
 800c178:	7afb      	ldrb	r3, [r7, #11]
 800c17a:	3301      	adds	r3, #1
 800c17c:	72fb      	strb	r3, [r7, #11]
          break;
 800c17e:	e06f      	b.n	800c260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00b      	beq.n	800c1a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	7c12      	ldrb	r2, [r2, #16]
 800c198:	f107 0108 	add.w	r1, r7, #8
 800c19c:	4610      	mov	r0, r2
 800c19e:	4798      	blx	r3
 800c1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1a2:	e05d      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fa97 	bl	800c6da <USBD_CtlError>
            err++;
 800c1ac:	7afb      	ldrb	r3, [r7, #11]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1b2:	e055      	b.n	800c260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	7c12      	ldrb	r2, [r2, #16]
 800c1cc:	f107 0108 	add.w	r1, r7, #8
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	4798      	blx	r3
 800c1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d6:	e043      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa7d 	bl	800c6da <USBD_CtlError>
            err++;
 800c1e0:	7afb      	ldrb	r3, [r7, #11]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1e6:	e03b      	b.n	800c260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00b      	beq.n	800c20c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	7c12      	ldrb	r2, [r2, #16]
 800c200:	f107 0108 	add.w	r1, r7, #8
 800c204:	4610      	mov	r0, r2
 800c206:	4798      	blx	r3
 800c208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c20a:	e029      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fa63 	bl	800c6da <USBD_CtlError>
            err++;
 800c214:	7afb      	ldrb	r3, [r7, #11]
 800c216:	3301      	adds	r3, #1
 800c218:	72fb      	strb	r3, [r7, #11]
          break;
 800c21a:	e021      	b.n	800c260 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00b      	beq.n	800c240 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	7c12      	ldrb	r2, [r2, #16]
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
 800c23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c23e:	e00f      	b.n	800c260 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fa49 	bl	800c6da <USBD_CtlError>
            err++;
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	3301      	adds	r3, #1
 800c24c:	72fb      	strb	r3, [r7, #11]
          break;
 800c24e:	e007      	b.n	800c260 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa41 	bl	800c6da <USBD_CtlError>
          err++;
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	3301      	adds	r3, #1
 800c25c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c25e:	bf00      	nop
      }
      break;
 800c260:	e037      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	7c1b      	ldrb	r3, [r3, #16]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c272:	f107 0208 	add.w	r2, r7, #8
 800c276:	4610      	mov	r0, r2
 800c278:	4798      	blx	r3
 800c27a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c27c:	e029      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fa2a 	bl	800c6da <USBD_CtlError>
        err++;
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	3301      	adds	r3, #1
 800c28a:	72fb      	strb	r3, [r7, #11]
      break;
 800c28c:	e021      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	7c1b      	ldrb	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10d      	bne.n	800c2b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	f107 0208 	add.w	r2, r7, #8
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	4798      	blx	r3
 800c2a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	2207      	movs	r2, #7
 800c2ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2b0:	e00f      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa10 	bl	800c6da <USBD_CtlError>
        err++;
 800c2ba:	7afb      	ldrb	r3, [r7, #11]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	72fb      	strb	r3, [r7, #11]
      break;
 800c2c0:	e007      	b.n	800c2d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fa08 	bl	800c6da <USBD_CtlError>
      err++;
 800c2ca:	7afb      	ldrb	r3, [r7, #11]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c2d0:	bf00      	nop
  }

  if (err != 0U)
 800c2d2:	7afb      	ldrb	r3, [r7, #11]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11e      	bne.n	800c316 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	88db      	ldrh	r3, [r3, #6]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d016      	beq.n	800c30e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c2e0:	893b      	ldrh	r3, [r7, #8]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00e      	beq.n	800c304 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88da      	ldrh	r2, [r3, #6]
 800c2ea:	893b      	ldrh	r3, [r7, #8]
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	bf28      	it	cs
 800c2f0:	4613      	movcs	r3, r2
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2f6:	893b      	ldrh	r3, [r7, #8]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68f9      	ldr	r1, [r7, #12]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fa5d 	bl	800c7bc <USBD_CtlSendData>
 800c302:	e009      	b.n	800c318 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f9e7 	bl	800c6da <USBD_CtlError>
 800c30c:	e004      	b.n	800c318 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 faae 	bl	800c870 <USBD_CtlSendStatus>
 800c314:	e000      	b.n	800c318 <USBD_GetDescriptor+0x320>
    return;
 800c316:	bf00      	nop
  }
}
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop

0800c320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	889b      	ldrh	r3, [r3, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d131      	bne.n	800c396 <USBD_SetAddress+0x76>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	88db      	ldrh	r3, [r3, #6]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d12d      	bne.n	800c396 <USBD_SetAddress+0x76>
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	885b      	ldrh	r3, [r3, #2]
 800c33e:	2b7f      	cmp	r3, #127	; 0x7f
 800c340:	d829      	bhi.n	800c396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	885b      	ldrh	r3, [r3, #2]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c34c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b03      	cmp	r3, #3
 800c358:	d104      	bne.n	800c364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f9bc 	bl	800c6da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c362:	e01d      	b.n	800c3a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7bfa      	ldrb	r2, [r7, #15]
 800c368:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f003 ff83 	bl	801027c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa7a 	bl	800c870 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2202      	movs	r2, #2
 800c386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38a:	e009      	b.n	800c3a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c394:	e004      	b.n	800c3a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f99e 	bl	800c6da <USBD_CtlError>
  }
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	885b      	ldrh	r3, [r3, #2]
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	4b4e      	ldr	r3, [pc, #312]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c3be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3c0:	4b4d      	ldr	r3, [pc, #308]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d905      	bls.n	800c3d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f985 	bl	800c6da <USBD_CtlError>
    return USBD_FAIL;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	e08c      	b.n	800c4ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d002      	beq.n	800c3e6 <USBD_SetConfig+0x3e>
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d029      	beq.n	800c438 <USBD_SetConfig+0x90>
 800c3e4:	e075      	b.n	800c4d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3e6:	4b44      	ldr	r3, [pc, #272]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d020      	beq.n	800c430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3ee:	4b42      	ldr	r3, [pc, #264]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3f8:	4b3f      	ldr	r3, [pc, #252]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7fe ffbd 	bl	800b37e <USBD_SetClassConfig>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d008      	beq.n	800c420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f962 	bl	800c6da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2202      	movs	r2, #2
 800c41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c41e:	e065      	b.n	800c4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fa25 	bl	800c870 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2203      	movs	r2, #3
 800c42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c42e:	e05d      	b.n	800c4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fa1d 	bl	800c870 <USBD_CtlSendStatus>
      break;
 800c436:	e059      	b.n	800c4ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c438:	4b2f      	ldr	r3, [pc, #188]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d112      	bne.n	800c466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c448:	4b2b      	ldr	r3, [pc, #172]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c452:	4b29      	ldr	r3, [pc, #164]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7fe ffac 	bl	800b3b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fa06 	bl	800c870 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c464:	e042      	b.n	800c4ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c466:	4b24      	ldr	r3, [pc, #144]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d02a      	beq.n	800c4ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	4619      	mov	r1, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7fe ff9a 	bl	800b3b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c482:	4b1d      	ldr	r3, [pc, #116]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	461a      	mov	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c48c:	4b1a      	ldr	r3, [pc, #104]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7fe ff73 	bl	800b37e <USBD_SetClassConfig>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00f      	beq.n	800c4c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f918 	bl	800c6da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fe ff7f 	bl	800b3b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4c0:	e014      	b.n	800c4ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f9d4 	bl	800c870 <USBD_CtlSendStatus>
      break;
 800c4c8:	e010      	b.n	800c4ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f9d0 	bl	800c870 <USBD_CtlSendStatus>
      break;
 800c4d0:	e00c      	b.n	800c4ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f900 	bl	800c6da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <USBD_SetConfig+0x150>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7fe ff68 	bl	800b3b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ea:	bf00      	nop
  }

  return ret;
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	200007cb 	.word	0x200007cb

0800c4fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	88db      	ldrh	r3, [r3, #6]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d004      	beq.n	800c518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f8e2 	bl	800c6da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c516:	e023      	b.n	800c560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	2b02      	cmp	r3, #2
 800c522:	dc02      	bgt.n	800c52a <USBD_GetConfig+0x2e>
 800c524:	2b00      	cmp	r3, #0
 800c526:	dc03      	bgt.n	800c530 <USBD_GetConfig+0x34>
 800c528:	e015      	b.n	800c556 <USBD_GetConfig+0x5a>
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d00b      	beq.n	800c546 <USBD_GetConfig+0x4a>
 800c52e:	e012      	b.n	800c556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3308      	adds	r3, #8
 800c53a:	2201      	movs	r2, #1
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f93c 	bl	800c7bc <USBD_CtlSendData>
        break;
 800c544:	e00c      	b.n	800c560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3304      	adds	r3, #4
 800c54a:	2201      	movs	r2, #1
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f934 	bl	800c7bc <USBD_CtlSendData>
        break;
 800c554:	e004      	b.n	800c560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f8be 	bl	800c6da <USBD_CtlError>
        break;
 800c55e:	bf00      	nop
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	3b01      	subs	r3, #1
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d81e      	bhi.n	800c5be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	88db      	ldrh	r3, [r3, #6]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d004      	beq.n	800c592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f8a5 	bl	800c6da <USBD_CtlError>
        break;
 800c590:	e01a      	b.n	800c5c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f043 0202 	orr.w	r2, r3, #2
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	330c      	adds	r3, #12
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 f900 	bl	800c7bc <USBD_CtlSendData>
      break;
 800c5bc:	e004      	b.n	800c5c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f88a 	bl	800c6da <USBD_CtlError>
      break;
 800c5c6:	bf00      	nop
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	885b      	ldrh	r3, [r3, #2]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d107      	bne.n	800c5f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f940 	bl	800c870 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5f0:	e013      	b.n	800c61a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	885b      	ldrh	r3, [r3, #2]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d10b      	bne.n	800c612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	889b      	ldrh	r3, [r3, #4]
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	b29b      	uxth	r3, r3
 800c602:	b2da      	uxtb	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f930 	bl	800c870 <USBD_CtlSendStatus>
}
 800c610:	e003      	b.n	800c61a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f860 	bl	800c6da <USBD_CtlError>
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b082      	sub	sp, #8
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c632:	b2db      	uxtb	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	2b02      	cmp	r3, #2
 800c638:	d80b      	bhi.n	800c652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d10c      	bne.n	800c65c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f910 	bl	800c870 <USBD_CtlSendStatus>
      }
      break;
 800c650:	e004      	b.n	800c65c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f840 	bl	800c6da <USBD_CtlError>
      break;
 800c65a:	e000      	b.n	800c65e <USBD_ClrFeature+0x3c>
      break;
 800c65c:	bf00      	nop
  }
}
 800c65e:	bf00      	nop
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	781a      	ldrb	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	3301      	adds	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	781a      	ldrb	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3301      	adds	r3, #1
 800c68e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f7ff fa17 	bl	800bac4 <SWAPBYTE>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fa0a 	bl	800bac4 <SWAPBYTE>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff f9fd 	bl	800bac4 <SWAPBYTE>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	80da      	strh	r2, [r3, #6]
}
 800c6d2:	bf00      	nop
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6e4:	2180      	movs	r1, #128	; 0x80
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f003 fd5e 	bl	80101a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f003 fd5a 	bl	80101a8 <USBD_LL_StallEP>
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d036      	beq.n	800c780 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c716:	6938      	ldr	r0, [r7, #16]
 800c718:	f000 f836 	bl	800c788 <USBD_GetLen>
 800c71c:	4603      	mov	r3, r0
 800c71e:	3301      	adds	r3, #1
 800c720:	b29b      	uxth	r3, r3
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	b29a      	uxth	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	4413      	add	r3, r2
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	701a      	strb	r2, [r3, #0]
  idx++;
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	3301      	adds	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	4413      	add	r3, r2
 800c742:	2203      	movs	r2, #3
 800c744:	701a      	strb	r2, [r3, #0]
  idx++;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	3301      	adds	r3, #1
 800c74a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c74c:	e013      	b.n	800c776 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c74e:	7dfb      	ldrb	r3, [r7, #23]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	4413      	add	r3, r2
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	7812      	ldrb	r2, [r2, #0]
 800c758:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	3301      	adds	r3, #1
 800c75e:	613b      	str	r3, [r7, #16]
    idx++;
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	3301      	adds	r3, #1
 800c764:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	4413      	add	r3, r2
 800c76c:	2200      	movs	r2, #0
 800c76e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	3301      	adds	r3, #1
 800c774:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e7      	bne.n	800c74e <USBD_GetString+0x52>
 800c77e:	e000      	b.n	800c782 <USBD_GetString+0x86>
    return;
 800c780:	bf00      	nop
  }
}
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c790:	2300      	movs	r3, #0
 800c792:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c798:	e005      	b.n	800c7a6 <USBD_GetLen+0x1e>
  {
    len++;
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
 800c79c:	3301      	adds	r3, #1
 800c79e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1f5      	bne.n	800c79a <USBD_GetLen+0x12>
  }

  return len;
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f003 fd69 	bl	80102ba <USBD_LL_Transmit>

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	2100      	movs	r1, #0
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f003 fd58 	bl	80102ba <USBD_LL_Transmit>

  return USBD_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2203      	movs	r2, #3
 800c824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	2100      	movs	r1, #0
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f003 fd5c 	bl	80102fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	2100      	movs	r1, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f003 fd4b 	bl	80102fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c880:	2300      	movs	r3, #0
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f003 fd17 	bl	80102ba <USBD_LL_Transmit>

  return USBD_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2205      	movs	r2, #5
 800c8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f003 fd25 	bl	80102fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c8c0:	bf00      	nop
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
	...

0800c8cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8d2:	f3ef 8305 	mrs	r3, IPSR
 800c8d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10f      	bne.n	800c8fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8de:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e2:	607b      	str	r3, [r7, #4]
  return(result);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d105      	bne.n	800c8f6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c8ea:	f3ef 8311 	mrs	r3, BASEPRI
 800c8ee:	603b      	str	r3, [r7, #0]
  return(result);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d007      	beq.n	800c906 <osKernelInitialize+0x3a>
 800c8f6:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <osKernelInitialize+0x64>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d103      	bne.n	800c906 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c8fe:	f06f 0305 	mvn.w	r3, #5
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e00c      	b.n	800c920 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c906:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <osKernelInitialize+0x64>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c90e:	4b08      	ldr	r3, [pc, #32]	; (800c930 <osKernelInitialize+0x64>)
 800c910:	2201      	movs	r2, #1
 800c912:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c914:	2300      	movs	r3, #0
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	e002      	b.n	800c920 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c91a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c91e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c920:	68fb      	ldr	r3, [r7, #12]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	200007cc 	.word	0x200007cc

0800c934 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c93a:	f3ef 8305 	mrs	r3, IPSR
 800c93e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c940:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10f      	bne.n	800c966 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c946:	f3ef 8310 	mrs	r3, PRIMASK
 800c94a:	607b      	str	r3, [r7, #4]
  return(result);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c952:	f3ef 8311 	mrs	r3, BASEPRI
 800c956:	603b      	str	r3, [r7, #0]
  return(result);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d007      	beq.n	800c96e <osKernelStart+0x3a>
 800c95e:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <osKernelStart+0x68>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d103      	bne.n	800c96e <osKernelStart+0x3a>
    stat = osErrorISR;
 800c966:	f06f 0305 	mvn.w	r3, #5
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	e010      	b.n	800c990 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c96e:	4b0b      	ldr	r3, [pc, #44]	; (800c99c <osKernelStart+0x68>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d109      	bne.n	800c98a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c976:	f7ff ffa1 	bl	800c8bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c97a:	4b08      	ldr	r3, [pc, #32]	; (800c99c <osKernelStart+0x68>)
 800c97c:	2202      	movs	r2, #2
 800c97e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c980:	f001 fafe 	bl	800df80 <vTaskStartScheduler>
      stat = osOK;
 800c984:	2300      	movs	r3, #0
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e002      	b.n	800c990 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c98e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c990:	68fb      	ldr	r3, [r7, #12]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	200007cc 	.word	0x200007cc

0800c9a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b090      	sub	sp, #64	; 0x40
 800c9a4:	af04      	add	r7, sp, #16
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b0:	f3ef 8305 	mrs	r3, IPSR
 800c9b4:	61fb      	str	r3, [r7, #28]
  return(result);
 800c9b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 8090 	bne.w	800cade <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9be:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c2:	61bb      	str	r3, [r7, #24]
  return(result);
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9ca:	f3ef 8311 	mrs	r3, BASEPRI
 800c9ce:	617b      	str	r3, [r7, #20]
  return(result);
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <osThreadNew+0x3e>
 800c9d6:	4b44      	ldr	r3, [pc, #272]	; (800cae8 <osThreadNew+0x148>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d07f      	beq.n	800cade <osThreadNew+0x13e>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d07c      	beq.n	800cade <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c9e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c9ea:	2318      	movs	r3, #24
 800c9ec:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9f6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d045      	beq.n	800ca8a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d002      	beq.n	800ca0c <osThreadNew+0x6c>
        name = attr->name;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d008      	beq.n	800ca32 <osThreadNew+0x92>
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	2b38      	cmp	r3, #56	; 0x38
 800ca24:	d805      	bhi.n	800ca32 <osThreadNew+0x92>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <osThreadNew+0x96>
        return (NULL);
 800ca32:	2300      	movs	r3, #0
 800ca34:	e054      	b.n	800cae0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	089b      	lsrs	r3, r3, #2
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00e      	beq.n	800ca6c <osThreadNew+0xcc>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	2bbb      	cmp	r3, #187	; 0xbb
 800ca54:	d90a      	bls.n	800ca6c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <osThreadNew+0xcc>
        mem = 1;
 800ca66:	2301      	movs	r3, #1
 800ca68:	623b      	str	r3, [r7, #32]
 800ca6a:	e010      	b.n	800ca8e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10c      	bne.n	800ca8e <osThreadNew+0xee>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d108      	bne.n	800ca8e <osThreadNew+0xee>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d104      	bne.n	800ca8e <osThreadNew+0xee>
          mem = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	623b      	str	r3, [r7, #32]
 800ca88:	e001      	b.n	800ca8e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d110      	bne.n	800cab6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca9c:	9202      	str	r2, [sp, #8]
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f001 f872 	bl	800db94 <xTaskCreateStatic>
 800cab0:	4603      	mov	r3, r0
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	e013      	b.n	800cade <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d110      	bne.n	800cade <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	f107 0310 	add.w	r3, r7, #16
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f001 f8c3 	bl	800dc5a <xTaskCreate>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d001      	beq.n	800cade <osThreadNew+0x13e>
          hTask = NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cade:	693b      	ldr	r3, [r7, #16]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3730      	adds	r7, #48	; 0x30
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	200007cc 	.word	0x200007cc

0800caec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf4:	f3ef 8305 	mrs	r3, IPSR
 800caf8:	613b      	str	r3, [r7, #16]
  return(result);
 800cafa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10f      	bne.n	800cb20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb00:	f3ef 8310 	mrs	r3, PRIMASK
 800cb04:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d105      	bne.n	800cb18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb0c:	f3ef 8311 	mrs	r3, BASEPRI
 800cb10:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d007      	beq.n	800cb28 <osDelay+0x3c>
 800cb18:	4b0a      	ldr	r3, [pc, #40]	; (800cb44 <osDelay+0x58>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d103      	bne.n	800cb28 <osDelay+0x3c>
    stat = osErrorISR;
 800cb20:	f06f 0305 	mvn.w	r3, #5
 800cb24:	617b      	str	r3, [r7, #20]
 800cb26:	e007      	b.n	800cb38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 f9ee 	bl	800df14 <vTaskDelay>
    }
  }

  return (stat);
 800cb38:	697b      	ldr	r3, [r7, #20]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	200007cc 	.word	0x200007cc

0800cb48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb58:	f3ef 8305 	mrs	r3, IPSR
 800cb5c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d16f      	bne.n	800cc44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb64:	f3ef 8310 	mrs	r3, PRIMASK
 800cb68:	617b      	str	r3, [r7, #20]
  return(result);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb70:	f3ef 8311 	mrs	r3, BASEPRI
 800cb74:	613b      	str	r3, [r7, #16]
  return(result);
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <osMessageQueueNew+0x3c>
 800cb7c:	4b34      	ldr	r3, [pc, #208]	; (800cc50 <osMessageQueueNew+0x108>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d05f      	beq.n	800cc44 <osMessageQueueNew+0xfc>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d05c      	beq.n	800cc44 <osMessageQueueNew+0xfc>
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d059      	beq.n	800cc44 <osMessageQueueNew+0xfc>
    mem = -1;
 800cb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d029      	beq.n	800cbf0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d012      	beq.n	800cbca <osMessageQueueNew+0x82>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	2b4f      	cmp	r3, #79	; 0x4f
 800cbaa:	d90e      	bls.n	800cbca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	695a      	ldr	r2, [r3, #20]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	fb01 f303 	mul.w	r3, r1, r3
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d302      	bcc.n	800cbca <osMessageQueueNew+0x82>
        mem = 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	623b      	str	r3, [r7, #32]
 800cbc8:	e014      	b.n	800cbf4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d110      	bne.n	800cbf4 <osMessageQueueNew+0xac>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10c      	bne.n	800cbf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d108      	bne.n	800cbf4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <osMessageQueueNew+0xac>
          mem = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	623b      	str	r3, [r7, #32]
 800cbee:	e001      	b.n	800cbf4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cbf4:	6a3b      	ldr	r3, [r7, #32]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d10b      	bne.n	800cc12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	691a      	ldr	r2, [r3, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	2100      	movs	r1, #0
 800cc04:	9100      	str	r1, [sp, #0]
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f000 fa5b 	bl	800d0c4 <xQueueGenericCreateStatic>
 800cc0e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc10:	e008      	b.n	800cc24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d105      	bne.n	800cc24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cc18:	2200      	movs	r2, #0
 800cc1a:	68b9      	ldr	r1, [r7, #8]
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f000 fad3 	bl	800d1c8 <xQueueGenericCreate>
 800cc22:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00c      	beq.n	800cc44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <osMessageQueueNew+0xf0>
        name = attr->name;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	e001      	b.n	800cc3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cc3c:	69f9      	ldr	r1, [r7, #28]
 800cc3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc40:	f000 ff4a 	bl	800dad8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3728      	adds	r7, #40	; 0x28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	200007cc 	.word	0x200007cc

0800cc54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08a      	sub	sp, #40	; 0x28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	603b      	str	r3, [r7, #0]
 800cc60:	4613      	mov	r3, r2
 800cc62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc6c:	f3ef 8305 	mrs	r3, IPSR
 800cc70:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc72:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10f      	bne.n	800cc98 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc78:	f3ef 8310 	mrs	r3, PRIMASK
 800cc7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d105      	bne.n	800cc90 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc84:	f3ef 8311 	mrs	r3, BASEPRI
 800cc88:	617b      	str	r3, [r7, #20]
  return(result);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d02c      	beq.n	800ccea <osMessageQueuePut+0x96>
 800cc90:	4b28      	ldr	r3, [pc, #160]	; (800cd34 <osMessageQueuePut+0xe0>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d128      	bne.n	800ccea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d005      	beq.n	800ccaa <osMessageQueuePut+0x56>
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <osMessageQueuePut+0x56>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ccaa:	f06f 0303 	mvn.w	r3, #3
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ccb0:	e039      	b.n	800cd26 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ccb6:	f107 0210 	add.w	r2, r7, #16
 800ccba:	2300      	movs	r3, #0
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	6a38      	ldr	r0, [r7, #32]
 800ccc0:	f000 fbee 	bl	800d4a0 <xQueueGenericSendFromISR>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d003      	beq.n	800ccd2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ccca:	f06f 0302 	mvn.w	r3, #2
 800ccce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ccd0:	e029      	b.n	800cd26 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d026      	beq.n	800cd26 <osMessageQueuePut+0xd2>
 800ccd8:	4b17      	ldr	r3, [pc, #92]	; (800cd38 <osMessageQueuePut+0xe4>)
 800ccda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cce8:	e01d      	b.n	800cd26 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <osMessageQueuePut+0xa2>
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ccf6:	f06f 0303 	mvn.w	r3, #3
 800ccfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ccfc:	e014      	b.n	800cd28 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ccfe:	2300      	movs	r3, #0
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	6a38      	ldr	r0, [r7, #32]
 800cd06:	f000 fac5 	bl	800d294 <xQueueGenericSend>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d00b      	beq.n	800cd28 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800cd16:	f06f 0301 	mvn.w	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd1c:	e004      	b.n	800cd28 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800cd1e:	f06f 0302 	mvn.w	r3, #2
 800cd22:	627b      	str	r3, [r7, #36]	; 0x24
 800cd24:	e000      	b.n	800cd28 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3728      	adds	r7, #40	; 0x28
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	200007cc 	.word	0x200007cc
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd52:	f3ef 8305 	mrs	r3, IPSR
 800cd56:	61fb      	str	r3, [r7, #28]
  return(result);
 800cd58:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10f      	bne.n	800cd7e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd5e:	f3ef 8310 	mrs	r3, PRIMASK
 800cd62:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d105      	bne.n	800cd76 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd6a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd6e:	617b      	str	r3, [r7, #20]
  return(result);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d02c      	beq.n	800cdd0 <osMessageQueueGet+0x94>
 800cd76:	4b28      	ldr	r3, [pc, #160]	; (800ce18 <osMessageQueueGet+0xdc>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b02      	cmp	r3, #2
 800cd7c:	d128      	bne.n	800cdd0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d005      	beq.n	800cd90 <osMessageQueueGet+0x54>
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <osMessageQueueGet+0x54>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800cd90:	f06f 0303 	mvn.w	r3, #3
 800cd94:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd96:	e038      	b.n	800ce0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cd9c:	f107 0310 	add.w	r3, r7, #16
 800cda0:	461a      	mov	r2, r3
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	6a38      	ldr	r0, [r7, #32]
 800cda6:	f000 fd01 	bl	800d7ac <xQueueReceiveFromISR>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d003      	beq.n	800cdb8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800cdb0:	f06f 0302 	mvn.w	r3, #2
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cdb6:	e028      	b.n	800ce0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d025      	beq.n	800ce0a <osMessageQueueGet+0xce>
 800cdbe:	4b17      	ldr	r3, [pc, #92]	; (800ce1c <osMessageQueueGet+0xe0>)
 800cdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cdce:	e01c      	b.n	800ce0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <osMessageQueueGet+0xa0>
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800cddc:	f06f 0303 	mvn.w	r3, #3
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
 800cde2:	e013      	b.n	800ce0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	6a38      	ldr	r0, [r7, #32]
 800cdea:	f000 fbf9 	bl	800d5e0 <xQueueReceive>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d00b      	beq.n	800ce0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800cdfa:	f06f 0301 	mvn.w	r3, #1
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ce00:	e004      	b.n	800ce0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ce02:	f06f 0302 	mvn.w	r3, #2
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
 800ce08:	e000      	b.n	800ce0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3728      	adds	r7, #40	; 0x28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	200007cc 	.word	0x200007cc
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4a07      	ldr	r2, [pc, #28]	; (800ce4c <vApplicationGetIdleTaskMemory+0x2c>)
 800ce30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	4a06      	ldr	r2, [pc, #24]	; (800ce50 <vApplicationGetIdleTaskMemory+0x30>)
 800ce36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce3e:	601a      	str	r2, [r3, #0]
}
 800ce40:	bf00      	nop
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	200007d0 	.word	0x200007d0
 800ce50:	2000088c 	.word	0x2000088c

0800ce54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4a07      	ldr	r2, [pc, #28]	; (800ce80 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	4a06      	ldr	r2, [pc, #24]	; (800ce84 <vApplicationGetTimerTaskMemory+0x30>)
 800ce6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	20000c8c 	.word	0x20000c8c
 800ce84:	20000d48 	.word	0x20000d48

0800ce88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f103 0208 	add.w	r2, r3, #8
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f103 0208 	add.w	r2, r3, #8
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f103 0208 	add.w	r2, r3, #8
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cee2:	b480      	push	{r7}
 800cee4:	b085      	sub	sp, #20
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	601a      	str	r2, [r3, #0]
}
 800cf1e:	bf00      	nop
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b085      	sub	sp, #20
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf40:	d103      	bne.n	800cf4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	e00c      	b.n	800cf64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	e002      	b.n	800cf58 <vListInsert+0x2e>
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d2f6      	bcs.n	800cf52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	601a      	str	r2, [r3, #0]
}
 800cf90:	bf00      	nop
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	6892      	ldr	r2, [r2, #8]
 800cfb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	6852      	ldr	r2, [r2, #4]
 800cfbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d103      	bne.n	800cfd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	1e5a      	subs	r2, r3, #1
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10c      	bne.n	800d01e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d008:	b672      	cpsid	i
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	b662      	cpsie	i
 800d018:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d01a:	bf00      	nop
 800d01c:	e7fe      	b.n	800d01c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d01e:	f002 f96d 	bl	800f2fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d02e:	fb01 f303 	mul.w	r3, r1, r3
 800d032:	441a      	add	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2200      	movs	r2, #0
 800d03c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04e:	3b01      	subs	r3, #1
 800d050:	68f9      	ldr	r1, [r7, #12]
 800d052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d054:	fb01 f303 	mul.w	r3, r1, r3
 800d058:	441a      	add	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	22ff      	movs	r2, #255	; 0xff
 800d062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	22ff      	movs	r2, #255	; 0xff
 800d06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d114      	bne.n	800d09e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d01a      	beq.n	800d0b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3310      	adds	r3, #16
 800d080:	4618      	mov	r0, r3
 800d082:	f001 fa25 	bl	800e4d0 <xTaskRemoveFromEventList>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d012      	beq.n	800d0b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d08c:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <xQueueGenericReset+0xd0>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	e009      	b.n	800d0b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3310      	adds	r3, #16
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff fef0 	bl	800ce88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3324      	adds	r3, #36	; 0x24
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff feeb 	bl	800ce88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0b2:	f002 f957 	bl	800f364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0b6:	2301      	movs	r3, #1
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	e000ed04 	.word	0xe000ed04

0800d0c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08e      	sub	sp, #56	; 0x38
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10c      	bne.n	800d0f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	b672      	cpsid	i
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	b662      	cpsie	i
 800d0ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10c      	bne.n	800d112 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	b672      	cpsid	i
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	b662      	cpsie	i
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d10e:	bf00      	nop
 800d110:	e7fe      	b.n	800d110 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <xQueueGenericCreateStatic+0x5a>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <xQueueGenericCreateStatic+0x5e>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueGenericCreateStatic+0x60>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10c      	bne.n	800d142 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	b672      	cpsid	i
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	b662      	cpsie	i
 800d13c:	623b      	str	r3, [r7, #32]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <xQueueGenericCreateStatic+0x8a>
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <xQueueGenericCreateStatic+0x8e>
 800d14e:	2301      	movs	r3, #1
 800d150:	e000      	b.n	800d154 <xQueueGenericCreateStatic+0x90>
 800d152:	2300      	movs	r3, #0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10c      	bne.n	800d172 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15c:	b672      	cpsid	i
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	b662      	cpsie	i
 800d16c:	61fb      	str	r3, [r7, #28]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d172:	2350      	movs	r3, #80	; 0x50
 800d174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b50      	cmp	r3, #80	; 0x50
 800d17a:	d00c      	beq.n	800d196 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	b672      	cpsid	i
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	b662      	cpsie	i
 800d190:	61bb      	str	r3, [r7, #24]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00d      	beq.n	800d1be <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f847 	bl	800d24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3730      	adds	r7, #48	; 0x30
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10c      	bne.n	800d1f6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	b672      	cpsid	i
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	b662      	cpsie	i
 800d1f0:	613b      	str	r3, [r7, #16]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	61fb      	str	r3, [r7, #28]
 800d200:	e004      	b.n	800d20c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	fb02 f303 	mul.w	r3, r2, r3
 800d20a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	3350      	adds	r3, #80	; 0x50
 800d210:	4618      	mov	r0, r3
 800d212:	f002 f99f 	bl	800f554 <pvPortMalloc>
 800d216:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d011      	beq.n	800d242 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	3350      	adds	r3, #80	; 0x50
 800d226:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d230:	79fa      	ldrb	r2, [r7, #7]
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4613      	mov	r3, r2
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	68b9      	ldr	r1, [r7, #8]
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f000 f805 	bl	800d24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d242:	69bb      	ldr	r3, [r7, #24]
	}
 800d244:	4618      	mov	r0, r3
 800d246:	3720      	adds	r7, #32
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d103      	bne.n	800d268 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	69ba      	ldr	r2, [r7, #24]
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	e002      	b.n	800d26e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d27a:	2101      	movs	r1, #1
 800d27c:	69b8      	ldr	r0, [r7, #24]
 800d27e:	f7ff feb7 	bl	800cff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	78fa      	ldrb	r2, [r7, #3]
 800d286:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d28a:	bf00      	nop
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08e      	sub	sp, #56	; 0x38
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10c      	bne.n	800d2ca <xQueueGenericSend+0x36>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	b672      	cpsid	i
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	b662      	cpsie	i
 800d2c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <xQueueGenericSend+0x44>
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <xQueueGenericSend+0x48>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e000      	b.n	800d2de <xQueueGenericSend+0x4a>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10c      	bne.n	800d2fc <xQueueGenericSend+0x68>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	b672      	cpsid	i
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	b662      	cpsie	i
 800d2f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d103      	bne.n	800d30a <xQueueGenericSend+0x76>
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <xQueueGenericSend+0x7a>
 800d30a:	2301      	movs	r3, #1
 800d30c:	e000      	b.n	800d310 <xQueueGenericSend+0x7c>
 800d30e:	2300      	movs	r3, #0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10c      	bne.n	800d32e <xQueueGenericSend+0x9a>
	__asm volatile
 800d314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d318:	b672      	cpsid	i
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	b662      	cpsie	i
 800d328:	623b      	str	r3, [r7, #32]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d32e:	f001 fa99 	bl	800e864 <xTaskGetSchedulerState>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <xQueueGenericSend+0xaa>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <xQueueGenericSend+0xae>
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <xQueueGenericSend+0xb0>
 800d342:	2300      	movs	r3, #0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10c      	bne.n	800d362 <xQueueGenericSend+0xce>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	b672      	cpsid	i
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	b662      	cpsie	i
 800d35c:	61fb      	str	r3, [r7, #28]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d362:	f001 ffcb 	bl	800f2fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36e:	429a      	cmp	r2, r3
 800d370:	d302      	bcc.n	800d378 <xQueueGenericSend+0xe4>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d129      	bne.n	800d3cc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d37e:	f000 fa9b 	bl	800d8b8 <prvCopyDataToQueue>
 800d382:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38e:	3324      	adds	r3, #36	; 0x24
 800d390:	4618      	mov	r0, r3
 800d392:	f001 f89d 	bl	800e4d0 <xTaskRemoveFromEventList>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d013      	beq.n	800d3c4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d39c:	4b3f      	ldr	r3, [pc, #252]	; (800d49c <xQueueGenericSend+0x208>)
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	e00a      	b.n	800d3c4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3b4:	4b39      	ldr	r3, [pc, #228]	; (800d49c <xQueueGenericSend+0x208>)
 800d3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3c4:	f001 ffce 	bl	800f364 <vPortExitCritical>
				return pdPASS;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e063      	b.n	800d494 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d103      	bne.n	800d3da <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3d2:	f001 ffc7 	bl	800f364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e05c      	b.n	800d494 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3e0:	f107 0314 	add.w	r3, r7, #20
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f001 f8d9 	bl	800e59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3ee:	f001 ffb9 	bl	800f364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3f2:	f000 fe39 	bl	800e068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3f6:	f001 ff81 	bl	800f2fc <vPortEnterCritical>
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d400:	b25b      	sxtb	r3, r3
 800d402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d406:	d103      	bne.n	800d410 <xQueueGenericSend+0x17c>
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d416:	b25b      	sxtb	r3, r3
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d41c:	d103      	bne.n	800d426 <xQueueGenericSend+0x192>
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d426:	f001 ff9d 	bl	800f364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d42a:	1d3a      	adds	r2, r7, #4
 800d42c:	f107 0314 	add.w	r3, r7, #20
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f001 f8c8 	bl	800e5c8 <xTaskCheckForTimeOut>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d124      	bne.n	800d488 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d43e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d440:	f000 fb32 	bl	800daa8 <prvIsQueueFull>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d018      	beq.n	800d47c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	3310      	adds	r3, #16
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f000 ffe8 	bl	800e428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d45a:	f000 fabd 	bl	800d9d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d45e:	f000 fe11 	bl	800e084 <xTaskResumeAll>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	f47f af7c 	bne.w	800d362 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <xQueueGenericSend+0x208>)
 800d46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	e772      	b.n	800d362 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47e:	f000 faab 	bl	800d9d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d482:	f000 fdff 	bl	800e084 <xTaskResumeAll>
 800d486:	e76c      	b.n	800d362 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d48a:	f000 faa5 	bl	800d9d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d48e:	f000 fdf9 	bl	800e084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d494:	4618      	mov	r0, r3
 800d496:	3738      	adds	r7, #56	; 0x38
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08e      	sub	sp, #56	; 0x38
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10c      	bne.n	800d4d2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	b672      	cpsid	i
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	b662      	cpsie	i
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d103      	bne.n	800d4e0 <xQueueGenericSendFromISR+0x40>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <xQueueGenericSendFromISR+0x44>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e000      	b.n	800d4e6 <xQueueGenericSendFromISR+0x46>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10c      	bne.n	800d504 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	b672      	cpsid	i
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	b662      	cpsie	i
 800d4fe:	623b      	str	r3, [r7, #32]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d103      	bne.n	800d512 <xQueueGenericSendFromISR+0x72>
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d101      	bne.n	800d516 <xQueueGenericSendFromISR+0x76>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <xQueueGenericSendFromISR+0x78>
 800d516:	2300      	movs	r3, #0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10c      	bne.n	800d536 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	b672      	cpsid	i
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	b662      	cpsie	i
 800d530:	61fb      	str	r3, [r7, #28]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d536:	f001 ffc9 	bl	800f4cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d53a:	f3ef 8211 	mrs	r2, BASEPRI
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	b672      	cpsid	i
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	b662      	cpsie	i
 800d552:	61ba      	str	r2, [r7, #24]
 800d554:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d556:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d558:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d562:	429a      	cmp	r2, r3
 800d564:	d302      	bcc.n	800d56c <xQueueGenericSendFromISR+0xcc>
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d12c      	bne.n	800d5c6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	68b9      	ldr	r1, [r7, #8]
 800d57a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d57c:	f000 f99c 	bl	800d8b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d580:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d588:	d112      	bne.n	800d5b0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d016      	beq.n	800d5c0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d594:	3324      	adds	r3, #36	; 0x24
 800d596:	4618      	mov	r0, r3
 800d598:	f000 ff9a 	bl	800e4d0 <xTaskRemoveFromEventList>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00e      	beq.n	800d5c0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00b      	beq.n	800d5c0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e007      	b.n	800d5c0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	b25a      	sxtb	r2, r3
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d5c4:	e001      	b.n	800d5ca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5cc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d5d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3738      	adds	r7, #56	; 0x38
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08c      	sub	sp, #48	; 0x30
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10c      	bne.n	800d614 <xQueueReceive+0x34>
	__asm volatile
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	b672      	cpsid	i
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	b662      	cpsie	i
 800d60e:	623b      	str	r3, [r7, #32]
}
 800d610:	bf00      	nop
 800d612:	e7fe      	b.n	800d612 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d103      	bne.n	800d622 <xQueueReceive+0x42>
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <xQueueReceive+0x46>
 800d622:	2301      	movs	r3, #1
 800d624:	e000      	b.n	800d628 <xQueueReceive+0x48>
 800d626:	2300      	movs	r3, #0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10c      	bne.n	800d646 <xQueueReceive+0x66>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	b672      	cpsid	i
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	b662      	cpsie	i
 800d640:	61fb      	str	r3, [r7, #28]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d646:	f001 f90d 	bl	800e864 <xTaskGetSchedulerState>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <xQueueReceive+0x76>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <xQueueReceive+0x7a>
 800d656:	2301      	movs	r3, #1
 800d658:	e000      	b.n	800d65c <xQueueReceive+0x7c>
 800d65a:	2300      	movs	r3, #0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10c      	bne.n	800d67a <xQueueReceive+0x9a>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	b672      	cpsid	i
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	b662      	cpsie	i
 800d674:	61bb      	str	r3, [r7, #24]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d67a:	f001 fe3f 	bl	800f2fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	2b00      	cmp	r3, #0
 800d688:	d01f      	beq.n	800d6ca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d68e:	f000 f97d 	bl	800d98c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	1e5a      	subs	r2, r3, #1
 800d696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00f      	beq.n	800d6c2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	3310      	adds	r3, #16
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 ff12 	bl	800e4d0 <xTaskRemoveFromEventList>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d007      	beq.n	800d6c2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6b2:	4b3d      	ldr	r3, [pc, #244]	; (800d7a8 <xQueueReceive+0x1c8>)
 800d6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6c2:	f001 fe4f 	bl	800f364 <vPortExitCritical>
				return pdPASS;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e069      	b.n	800d79e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6d0:	f001 fe48 	bl	800f364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e062      	b.n	800d79e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d106      	bne.n	800d6ec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6de:	f107 0310 	add.w	r3, r7, #16
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 ff5a 	bl	800e59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6ec:	f001 fe3a 	bl	800f364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6f0:	f000 fcba 	bl	800e068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6f4:	f001 fe02 	bl	800f2fc <vPortEnterCritical>
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6fe:	b25b      	sxtb	r3, r3
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d704:	d103      	bne.n	800d70e <xQueueReceive+0x12e>
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d714:	b25b      	sxtb	r3, r3
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d71a:	d103      	bne.n	800d724 <xQueueReceive+0x144>
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d724:	f001 fe1e 	bl	800f364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d728:	1d3a      	adds	r2, r7, #4
 800d72a:	f107 0310 	add.w	r3, r7, #16
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f000 ff49 	bl	800e5c8 <xTaskCheckForTimeOut>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d123      	bne.n	800d784 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73e:	f000 f99d 	bl	800da7c <prvIsQueueEmpty>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d017      	beq.n	800d778 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	3324      	adds	r3, #36	; 0x24
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	4611      	mov	r1, r2
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fe69 	bl	800e428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d758:	f000 f93e 	bl	800d9d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d75c:	f000 fc92 	bl	800e084 <xTaskResumeAll>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d189      	bne.n	800d67a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d766:	4b10      	ldr	r3, [pc, #64]	; (800d7a8 <xQueueReceive+0x1c8>)
 800d768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	e780      	b.n	800d67a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77a:	f000 f92d 	bl	800d9d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d77e:	f000 fc81 	bl	800e084 <xTaskResumeAll>
 800d782:	e77a      	b.n	800d67a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d786:	f000 f927 	bl	800d9d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d78a:	f000 fc7b 	bl	800e084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d790:	f000 f974 	bl	800da7c <prvIsQueueEmpty>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	f43f af6f 	beq.w	800d67a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3730      	adds	r7, #48	; 0x30
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	; 0x38
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	b672      	cpsid	i
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	b662      	cpsie	i
 800d7d6:	623b      	str	r3, [r7, #32]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d103      	bne.n	800d7ea <xQueueReceiveFromISR+0x3e>
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <xQueueReceiveFromISR+0x42>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e000      	b.n	800d7f0 <xQueueReceiveFromISR+0x44>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10c      	bne.n	800d80e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	b672      	cpsid	i
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	b662      	cpsie	i
 800d808:	61fb      	str	r3, [r7, #28]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d80e:	f001 fe5d 	bl	800f4cc <vPortValidateInterruptPriority>
	__asm volatile
 800d812:	f3ef 8211 	mrs	r2, BASEPRI
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	b672      	cpsid	i
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	b662      	cpsie	i
 800d82a:	61ba      	str	r2, [r7, #24]
 800d82c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d82e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d02f      	beq.n	800d89e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d84c:	f000 f89e 	bl	800d98c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	1e5a      	subs	r2, r3, #1
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d858:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d860:	d112      	bne.n	800d888 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d016      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	3310      	adds	r3, #16
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fe2e 	bl	800e4d0 <xTaskRemoveFromEventList>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00e      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00b      	beq.n	800d898 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	e007      	b.n	800d898 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d88c:	3301      	adds	r3, #1
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	b25a      	sxtb	r2, r3
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d898:	2301      	movs	r3, #1
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
 800d89c:	e001      	b.n	800d8a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	f383 8811 	msr	BASEPRI, r3
}
 800d8ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3738      	adds	r7, #56	; 0x38
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10d      	bne.n	800d8f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d14d      	bne.n	800d97a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 ffdc 	bl	800e8a0 <xTaskPriorityDisinherit>
 800d8e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	609a      	str	r2, [r3, #8]
 800d8f0:	e043      	b.n	800d97a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d119      	bne.n	800d92c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6858      	ldr	r0, [r3, #4]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d900:	461a      	mov	r2, r3
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	f002 fdea 	bl	80104dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	441a      	add	r2, r3
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d32b      	bcc.n	800d97a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	605a      	str	r2, [r3, #4]
 800d92a:	e026      	b.n	800d97a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	68d8      	ldr	r0, [r3, #12]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d934:	461a      	mov	r2, r3
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	f002 fdd0 	bl	80104dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	68da      	ldr	r2, [r3, #12]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	425b      	negs	r3, r3
 800d946:	441a      	add	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68da      	ldr	r2, [r3, #12]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	429a      	cmp	r2, r3
 800d956:	d207      	bcs.n	800d968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	689a      	ldr	r2, [r3, #8]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d960:	425b      	negs	r3, r3
 800d962:	441a      	add	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d105      	bne.n	800d97a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	3b01      	subs	r3, #1
 800d978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d982:	697b      	ldr	r3, [r7, #20]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d018      	beq.n	800d9d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68da      	ldr	r2, [r3, #12]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a6:	441a      	add	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d303      	bcc.n	800d9c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68d9      	ldr	r1, [r3, #12]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	6838      	ldr	r0, [r7, #0]
 800d9cc:	f002 fd86 	bl	80104dc <memcpy>
	}
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9e0:	f001 fc8c 	bl	800f2fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9ec:	e011      	b.n	800da12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d012      	beq.n	800da1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	3324      	adds	r3, #36	; 0x24
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fd68 	bl	800e4d0 <xTaskRemoveFromEventList>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da06:	f000 fe45 	bl	800e694 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da16:	2b00      	cmp	r3, #0
 800da18:	dce9      	bgt.n	800d9ee <prvUnlockQueue+0x16>
 800da1a:	e000      	b.n	800da1e <prvUnlockQueue+0x46>
					break;
 800da1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	22ff      	movs	r2, #255	; 0xff
 800da22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da26:	f001 fc9d 	bl	800f364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da2a:	f001 fc67 	bl	800f2fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da36:	e011      	b.n	800da5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d012      	beq.n	800da66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3310      	adds	r3, #16
 800da44:	4618      	mov	r0, r3
 800da46:	f000 fd43 	bl	800e4d0 <xTaskRemoveFromEventList>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da50:	f000 fe20 	bl	800e694 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da54:	7bbb      	ldrb	r3, [r7, #14]
 800da56:	3b01      	subs	r3, #1
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dce9      	bgt.n	800da38 <prvUnlockQueue+0x60>
 800da64:	e000      	b.n	800da68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	22ff      	movs	r2, #255	; 0xff
 800da6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da70:	f001 fc78 	bl	800f364 <vPortExitCritical>
}
 800da74:	bf00      	nop
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da84:	f001 fc3a 	bl	800f2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da90:	2301      	movs	r3, #1
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e001      	b.n	800da9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da96:	2300      	movs	r3, #0
 800da98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da9a:	f001 fc63 	bl	800f364 <vPortExitCritical>

	return xReturn;
 800da9e:	68fb      	ldr	r3, [r7, #12]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dab0:	f001 fc24 	bl	800f2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d102      	bne.n	800dac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dac0:	2301      	movs	r3, #1
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e001      	b.n	800daca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800daca:	f001 fc4b 	bl	800f364 <vPortExitCritical>

	return xReturn;
 800dace:	68fb      	ldr	r3, [r7, #12]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
 800dae6:	e014      	b.n	800db12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dae8:	4a0f      	ldr	r2, [pc, #60]	; (800db28 <vQueueAddToRegistry+0x50>)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10b      	bne.n	800db0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800daf4:	490c      	ldr	r1, [pc, #48]	; (800db28 <vQueueAddToRegistry+0x50>)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dafe:	4a0a      	ldr	r2, [pc, #40]	; (800db28 <vQueueAddToRegistry+0x50>)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	4413      	add	r3, r2
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db0a:	e006      	b.n	800db1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3301      	adds	r3, #1
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b07      	cmp	r3, #7
 800db16:	d9e7      	bls.n	800dae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	20001548 	.word	0x20001548

0800db2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800db3c:	f001 fbde 	bl	800f2fc <vPortEnterCritical>
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db46:	b25b      	sxtb	r3, r3
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db4c:	d103      	bne.n	800db56 <vQueueWaitForMessageRestricted+0x2a>
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db5c:	b25b      	sxtb	r3, r3
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db62:	d103      	bne.n	800db6c <vQueueWaitForMessageRestricted+0x40>
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db6c:	f001 fbfa 	bl	800f364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	3324      	adds	r3, #36	; 0x24
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	68b9      	ldr	r1, [r7, #8]
 800db80:	4618      	mov	r0, r3
 800db82:	f000 fc77 	bl	800e474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db86:	6978      	ldr	r0, [r7, #20]
 800db88:	f7ff ff26 	bl	800d9d8 <prvUnlockQueue>
	}
 800db8c:	bf00      	nop
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08e      	sub	sp, #56	; 0x38
 800db98:	af04      	add	r7, sp, #16
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10c      	bne.n	800dbc2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbac:	b672      	cpsid	i
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	b662      	cpsie	i
 800dbbc:	623b      	str	r3, [r7, #32]
}
 800dbbe:	bf00      	nop
 800dbc0:	e7fe      	b.n	800dbc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10c      	bne.n	800dbe2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	b672      	cpsid	i
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	b662      	cpsie	i
 800dbdc:	61fb      	str	r3, [r7, #28]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dbe2:	23bc      	movs	r3, #188	; 0xbc
 800dbe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	2bbc      	cmp	r3, #188	; 0xbc
 800dbea:	d00c      	beq.n	800dc06 <xTaskCreateStatic+0x72>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	b672      	cpsid	i
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	b662      	cpsie	i
 800dc00:	61bb      	str	r3, [r7, #24]
}
 800dc02:	bf00      	nop
 800dc04:	e7fe      	b.n	800dc04 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d01e      	beq.n	800dc4c <xTaskCreateStatic+0xb8>
 800dc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d01b      	beq.n	800dc4c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	2202      	movs	r2, #2
 800dc22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc26:	2300      	movs	r3, #0
 800dc28:	9303      	str	r3, [sp, #12]
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	9302      	str	r3, [sp, #8]
 800dc2e:	f107 0314 	add.w	r3, r7, #20
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	68b9      	ldr	r1, [r7, #8]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f000 f850 	bl	800dce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc46:	f000 f8f5 	bl	800de34 <prvAddNewTaskToReadyList>
 800dc4a:	e001      	b.n	800dc50 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc50:	697b      	ldr	r3, [r7, #20]
	}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3728      	adds	r7, #40	; 0x28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b08c      	sub	sp, #48	; 0x30
 800dc5e:	af04      	add	r7, sp, #16
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	603b      	str	r3, [r7, #0]
 800dc66:	4613      	mov	r3, r2
 800dc68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc6a:	88fb      	ldrh	r3, [r7, #6]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f001 fc70 	bl	800f554 <pvPortMalloc>
 800dc74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00e      	beq.n	800dc9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc7c:	20bc      	movs	r0, #188	; 0xbc
 800dc7e:	f001 fc69 	bl	800f554 <pvPortMalloc>
 800dc82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	631a      	str	r2, [r3, #48]	; 0x30
 800dc90:	e005      	b.n	800dc9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc92:	6978      	ldr	r0, [r7, #20]
 800dc94:	f001 fd28 	bl	800f6e8 <vPortFree>
 800dc98:	e001      	b.n	800dc9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d017      	beq.n	800dcd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dcac:	88fa      	ldrh	r2, [r7, #6]
 800dcae:	2300      	movs	r3, #0
 800dcb0:	9303      	str	r3, [sp, #12]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	9302      	str	r3, [sp, #8]
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	68b9      	ldr	r1, [r7, #8]
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f000 f80e 	bl	800dce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcc8:	69f8      	ldr	r0, [r7, #28]
 800dcca:	f000 f8b3 	bl	800de34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	61bb      	str	r3, [r7, #24]
 800dcd2:	e002      	b.n	800dcda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dcd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dcda:	69bb      	ldr	r3, [r7, #24]
	}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	21a5      	movs	r1, #165	; 0xa5
 800dcfe:	f002 fbfb 	bl	80104f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dd0c:	440b      	add	r3, r1
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	f023 0307 	bic.w	r3, r3, #7
 800dd1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	f003 0307 	and.w	r3, r3, #7
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00c      	beq.n	800dd40 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	b672      	cpsid	i
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	b662      	cpsie	i
 800dd3a:	617b      	str	r3, [r7, #20]
}
 800dd3c:	bf00      	nop
 800dd3e:	e7fe      	b.n	800dd3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d01f      	beq.n	800dd86 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd46:	2300      	movs	r3, #0
 800dd48:	61fb      	str	r3, [r7, #28]
 800dd4a:	e012      	b.n	800dd72 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	4413      	add	r3, r2
 800dd52:	7819      	ldrb	r1, [r3, #0]
 800dd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	4413      	add	r3, r2
 800dd5a:	3334      	adds	r3, #52	; 0x34
 800dd5c:	460a      	mov	r2, r1
 800dd5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	4413      	add	r3, r2
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	61fb      	str	r3, [r7, #28]
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b0f      	cmp	r3, #15
 800dd76:	d9e9      	bls.n	800dd4c <prvInitialiseNewTask+0x68>
 800dd78:	e000      	b.n	800dd7c <prvInitialiseNewTask+0x98>
			{
				break;
 800dd7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd84:	e003      	b.n	800dd8e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	2b37      	cmp	r3, #55	; 0x37
 800dd92:	d901      	bls.n	800dd98 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd94:	2337      	movs	r3, #55	; 0x37
 800dd96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dda2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	2200      	movs	r2, #0
 800dda8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	3304      	adds	r3, #4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff f88a 	bl	800cec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	3318      	adds	r3, #24
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7ff f885 	bl	800cec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde6:	3354      	adds	r3, #84	; 0x54
 800dde8:	2260      	movs	r2, #96	; 0x60
 800ddea:	2100      	movs	r1, #0
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 fb83 	bl	80104f8 <memset>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	4a0c      	ldr	r2, [pc, #48]	; (800de28 <prvInitialiseNewTask+0x144>)
 800ddf6:	659a      	str	r2, [r3, #88]	; 0x58
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	4a0c      	ldr	r2, [pc, #48]	; (800de2c <prvInitialiseNewTask+0x148>)
 800ddfc:	65da      	str	r2, [r3, #92]	; 0x5c
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	4a0b      	ldr	r2, [pc, #44]	; (800de30 <prvInitialiseNewTask+0x14c>)
 800de02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	68f9      	ldr	r1, [r7, #12]
 800de08:	69b8      	ldr	r0, [r7, #24]
 800de0a:	f001 f96b 	bl	800f0e4 <pxPortInitialiseStack>
 800de0e:	4602      	mov	r2, r0
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de20:	bf00      	nop
 800de22:	3720      	adds	r7, #32
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08010984 	.word	0x08010984
 800de2c:	080109a4 	.word	0x080109a4
 800de30:	08010964 	.word	0x08010964

0800de34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de3c:	f001 fa5e 	bl	800f2fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de40:	4b2d      	ldr	r3, [pc, #180]	; (800def8 <prvAddNewTaskToReadyList+0xc4>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	4a2c      	ldr	r2, [pc, #176]	; (800def8 <prvAddNewTaskToReadyList+0xc4>)
 800de48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de4a:	4b2c      	ldr	r3, [pc, #176]	; (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de52:	4a2a      	ldr	r2, [pc, #168]	; (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de58:	4b27      	ldr	r3, [pc, #156]	; (800def8 <prvAddNewTaskToReadyList+0xc4>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d110      	bne.n	800de82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de60:	f000 fc3c 	bl	800e6dc <prvInitialiseTaskLists>
 800de64:	e00d      	b.n	800de82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de66:	4b26      	ldr	r3, [pc, #152]	; (800df00 <prvAddNewTaskToReadyList+0xcc>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d109      	bne.n	800de82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de6e:	4b23      	ldr	r3, [pc, #140]	; (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de78:	429a      	cmp	r2, r3
 800de7a:	d802      	bhi.n	800de82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de7c:	4a1f      	ldr	r2, [pc, #124]	; (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de82:	4b20      	ldr	r3, [pc, #128]	; (800df04 <prvAddNewTaskToReadyList+0xd0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3301      	adds	r3, #1
 800de88:	4a1e      	ldr	r2, [pc, #120]	; (800df04 <prvAddNewTaskToReadyList+0xd0>)
 800de8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800de8c:	4b1d      	ldr	r3, [pc, #116]	; (800df04 <prvAddNewTaskToReadyList+0xd0>)
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b1b      	ldr	r3, [pc, #108]	; (800df08 <prvAddNewTaskToReadyList+0xd4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <prvAddNewTaskToReadyList+0x74>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a18      	ldr	r2, [pc, #96]	; (800df08 <prvAddNewTaskToReadyList+0xd4>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a15      	ldr	r2, [pc, #84]	; (800df0c <prvAddNewTaskToReadyList+0xd8>)
 800deb6:	441a      	add	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7ff f80f 	bl	800cee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dec4:	f001 fa4e 	bl	800f364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dec8:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <prvAddNewTaskToReadyList+0xcc>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00e      	beq.n	800deee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ded0:	4b0a      	ldr	r3, [pc, #40]	; (800defc <prvAddNewTaskToReadyList+0xc8>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deda:	429a      	cmp	r2, r3
 800dedc:	d207      	bcs.n	800deee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dede:	4b0c      	ldr	r3, [pc, #48]	; (800df10 <prvAddNewTaskToReadyList+0xdc>)
 800dee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800deee:	bf00      	nop
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20001a5c 	.word	0x20001a5c
 800defc:	20001588 	.word	0x20001588
 800df00:	20001a68 	.word	0x20001a68
 800df04:	20001a78 	.word	0x20001a78
 800df08:	20001a64 	.word	0x20001a64
 800df0c:	2000158c 	.word	0x2000158c
 800df10:	e000ed04 	.word	0xe000ed04

0800df14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df1c:	2300      	movs	r3, #0
 800df1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d019      	beq.n	800df5a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df26:	4b14      	ldr	r3, [pc, #80]	; (800df78 <vTaskDelay+0x64>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00c      	beq.n	800df48 <vTaskDelay+0x34>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	b672      	cpsid	i
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	b662      	cpsie	i
 800df42:	60bb      	str	r3, [r7, #8]
}
 800df44:	bf00      	nop
 800df46:	e7fe      	b.n	800df46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800df48:	f000 f88e 	bl	800e068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df4c:	2100      	movs	r1, #0
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fd18 	bl	800e984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df54:	f000 f896 	bl	800e084 <xTaskResumeAll>
 800df58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d107      	bne.n	800df70 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800df60:	4b06      	ldr	r3, [pc, #24]	; (800df7c <vTaskDelay+0x68>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df70:	bf00      	nop
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	20001a84 	.word	0x20001a84
 800df7c:	e000ed04 	.word	0xe000ed04

0800df80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b08a      	sub	sp, #40	; 0x28
 800df84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df86:	2300      	movs	r3, #0
 800df88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df8e:	463a      	mov	r2, r7
 800df90:	1d39      	adds	r1, r7, #4
 800df92:	f107 0308 	add.w	r3, r7, #8
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe ff42 	bl	800ce20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	9202      	str	r2, [sp, #8]
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	460a      	mov	r2, r1
 800dfae:	4926      	ldr	r1, [pc, #152]	; (800e048 <vTaskStartScheduler+0xc8>)
 800dfb0:	4826      	ldr	r0, [pc, #152]	; (800e04c <vTaskStartScheduler+0xcc>)
 800dfb2:	f7ff fdef 	bl	800db94 <xTaskCreateStatic>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4a25      	ldr	r2, [pc, #148]	; (800e050 <vTaskStartScheduler+0xd0>)
 800dfba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dfbc:	4b24      	ldr	r3, [pc, #144]	; (800e050 <vTaskStartScheduler+0xd0>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	617b      	str	r3, [r7, #20]
 800dfc8:	e001      	b.n	800dfce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d102      	bne.n	800dfda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dfd4:	f000 fd2a 	bl	800ea2c <xTimerCreateTimerTask>
 800dfd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d11d      	bne.n	800e01c <vTaskStartScheduler+0x9c>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	613b      	str	r3, [r7, #16]
}
 800dff6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dff8:	4b16      	ldr	r3, [pc, #88]	; (800e054 <vTaskStartScheduler+0xd4>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	3354      	adds	r3, #84	; 0x54
 800dffe:	4a16      	ldr	r2, [pc, #88]	; (800e058 <vTaskStartScheduler+0xd8>)
 800e000:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e002:	4b16      	ldr	r3, [pc, #88]	; (800e05c <vTaskStartScheduler+0xdc>)
 800e004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e00a:	4b15      	ldr	r3, [pc, #84]	; (800e060 <vTaskStartScheduler+0xe0>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e010:	4b14      	ldr	r3, [pc, #80]	; (800e064 <vTaskStartScheduler+0xe4>)
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e016:	f001 f8f3 	bl	800f200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e01a:	e010      	b.n	800e03e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e022:	d10c      	bne.n	800e03e <vTaskStartScheduler+0xbe>
	__asm volatile
 800e024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e028:	b672      	cpsid	i
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	b662      	cpsie	i
 800e038:	60fb      	str	r3, [r7, #12]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <vTaskStartScheduler+0xbc>
}
 800e03e:	bf00      	nop
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	08010834 	.word	0x08010834
 800e04c:	0800e6ad 	.word	0x0800e6ad
 800e050:	20001a80 	.word	0x20001a80
 800e054:	20001588 	.word	0x20001588
 800e058:	20000190 	.word	0x20000190
 800e05c:	20001a7c 	.word	0x20001a7c
 800e060:	20001a68 	.word	0x20001a68
 800e064:	20001a60 	.word	0x20001a60

0800e068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e068:	b480      	push	{r7}
 800e06a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e06c:	4b04      	ldr	r3, [pc, #16]	; (800e080 <vTaskSuspendAll+0x18>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3301      	adds	r3, #1
 800e072:	4a03      	ldr	r2, [pc, #12]	; (800e080 <vTaskSuspendAll+0x18>)
 800e074:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e076:	bf00      	nop
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	20001a84 	.word	0x20001a84

0800e084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e08e:	2300      	movs	r3, #0
 800e090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e092:	4b43      	ldr	r3, [pc, #268]	; (800e1a0 <xTaskResumeAll+0x11c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10c      	bne.n	800e0b4 <xTaskResumeAll+0x30>
	__asm volatile
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	b672      	cpsid	i
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	b662      	cpsie	i
 800e0ae:	603b      	str	r3, [r7, #0]
}
 800e0b0:	bf00      	nop
 800e0b2:	e7fe      	b.n	800e0b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0b4:	f001 f922 	bl	800f2fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0b8:	4b39      	ldr	r3, [pc, #228]	; (800e1a0 <xTaskResumeAll+0x11c>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	4a38      	ldr	r2, [pc, #224]	; (800e1a0 <xTaskResumeAll+0x11c>)
 800e0c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0c2:	4b37      	ldr	r3, [pc, #220]	; (800e1a0 <xTaskResumeAll+0x11c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d162      	bne.n	800e190 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0ca:	4b36      	ldr	r3, [pc, #216]	; (800e1a4 <xTaskResumeAll+0x120>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d05e      	beq.n	800e190 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d2:	e02f      	b.n	800e134 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d4:	4b34      	ldr	r3, [pc, #208]	; (800e1a8 <xTaskResumeAll+0x124>)
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3318      	adds	r3, #24
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe ff5b 	bl	800cf9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe ff56 	bl	800cf9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f4:	4b2d      	ldr	r3, [pc, #180]	; (800e1ac <xTaskResumeAll+0x128>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d903      	bls.n	800e104 <xTaskResumeAll+0x80>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e100:	4a2a      	ldr	r2, [pc, #168]	; (800e1ac <xTaskResumeAll+0x128>)
 800e102:	6013      	str	r3, [r2, #0]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4a27      	ldr	r2, [pc, #156]	; (800e1b0 <xTaskResumeAll+0x12c>)
 800e112:	441a      	add	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3304      	adds	r3, #4
 800e118:	4619      	mov	r1, r3
 800e11a:	4610      	mov	r0, r2
 800e11c:	f7fe fee1 	bl	800cee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e124:	4b23      	ldr	r3, [pc, #140]	; (800e1b4 <xTaskResumeAll+0x130>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d302      	bcc.n	800e134 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800e12e:	4b22      	ldr	r3, [pc, #136]	; (800e1b8 <xTaskResumeAll+0x134>)
 800e130:	2201      	movs	r2, #1
 800e132:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e134:	4b1c      	ldr	r3, [pc, #112]	; (800e1a8 <xTaskResumeAll+0x124>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1cb      	bne.n	800e0d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e142:	f000 fb6f 	bl	800e824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e146:	4b1d      	ldr	r3, [pc, #116]	; (800e1bc <xTaskResumeAll+0x138>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d010      	beq.n	800e174 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e152:	f000 f847 	bl	800e1e4 <xTaskIncrementTick>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800e15c:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <xTaskResumeAll+0x134>)
 800e15e:	2201      	movs	r2, #1
 800e160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3b01      	subs	r3, #1
 800e166:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1f1      	bne.n	800e152 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800e16e:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <xTaskResumeAll+0x138>)
 800e170:	2200      	movs	r2, #0
 800e172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e174:	4b10      	ldr	r3, [pc, #64]	; (800e1b8 <xTaskResumeAll+0x134>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d009      	beq.n	800e190 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e180:	4b0f      	ldr	r3, [pc, #60]	; (800e1c0 <xTaskResumeAll+0x13c>)
 800e182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e186:	601a      	str	r2, [r3, #0]
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e190:	f001 f8e8 	bl	800f364 <vPortExitCritical>

	return xAlreadyYielded;
 800e194:	68bb      	ldr	r3, [r7, #8]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20001a84 	.word	0x20001a84
 800e1a4:	20001a5c 	.word	0x20001a5c
 800e1a8:	20001a1c 	.word	0x20001a1c
 800e1ac:	20001a64 	.word	0x20001a64
 800e1b0:	2000158c 	.word	0x2000158c
 800e1b4:	20001588 	.word	0x20001588
 800e1b8:	20001a70 	.word	0x20001a70
 800e1bc:	20001a6c 	.word	0x20001a6c
 800e1c0:	e000ed04 	.word	0xe000ed04

0800e1c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1ca:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <xTaskGetTickCount+0x1c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1d0:	687b      	ldr	r3, [r7, #4]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	20001a60 	.word	0x20001a60

0800e1e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ee:	4b50      	ldr	r3, [pc, #320]	; (800e330 <xTaskIncrementTick+0x14c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f040 808b 	bne.w	800e30e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1f8:	4b4e      	ldr	r3, [pc, #312]	; (800e334 <xTaskIncrementTick+0x150>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e200:	4a4c      	ldr	r2, [pc, #304]	; (800e334 <xTaskIncrementTick+0x150>)
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d122      	bne.n	800e252 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e20c:	4b4a      	ldr	r3, [pc, #296]	; (800e338 <xTaskIncrementTick+0x154>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00c      	beq.n	800e230 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	b672      	cpsid	i
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	b662      	cpsie	i
 800e22a:	603b      	str	r3, [r7, #0]
}
 800e22c:	bf00      	nop
 800e22e:	e7fe      	b.n	800e22e <xTaskIncrementTick+0x4a>
 800e230:	4b41      	ldr	r3, [pc, #260]	; (800e338 <xTaskIncrementTick+0x154>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	60fb      	str	r3, [r7, #12]
 800e236:	4b41      	ldr	r3, [pc, #260]	; (800e33c <xTaskIncrementTick+0x158>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a3f      	ldr	r2, [pc, #252]	; (800e338 <xTaskIncrementTick+0x154>)
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	4a3f      	ldr	r2, [pc, #252]	; (800e33c <xTaskIncrementTick+0x158>)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6013      	str	r3, [r2, #0]
 800e244:	4b3e      	ldr	r3, [pc, #248]	; (800e340 <xTaskIncrementTick+0x15c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3301      	adds	r3, #1
 800e24a:	4a3d      	ldr	r2, [pc, #244]	; (800e340 <xTaskIncrementTick+0x15c>)
 800e24c:	6013      	str	r3, [r2, #0]
 800e24e:	f000 fae9 	bl	800e824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e252:	4b3c      	ldr	r3, [pc, #240]	; (800e344 <xTaskIncrementTick+0x160>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	693a      	ldr	r2, [r7, #16]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d349      	bcc.n	800e2f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e25c:	4b36      	ldr	r3, [pc, #216]	; (800e338 <xTaskIncrementTick+0x154>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d104      	bne.n	800e270 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e266:	4b37      	ldr	r3, [pc, #220]	; (800e344 <xTaskIncrementTick+0x160>)
 800e268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e26c:	601a      	str	r2, [r3, #0]
					break;
 800e26e:	e03f      	b.n	800e2f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e270:	4b31      	ldr	r3, [pc, #196]	; (800e338 <xTaskIncrementTick+0x154>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	d203      	bcs.n	800e290 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e288:	4a2e      	ldr	r2, [pc, #184]	; (800e344 <xTaskIncrementTick+0x160>)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e28e:	e02f      	b.n	800e2f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	3304      	adds	r3, #4
 800e294:	4618      	mov	r0, r3
 800e296:	f7fe fe81 	bl	800cf9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d004      	beq.n	800e2ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	3318      	adds	r3, #24
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe fe78 	bl	800cf9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b0:	4b25      	ldr	r3, [pc, #148]	; (800e348 <xTaskIncrementTick+0x164>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d903      	bls.n	800e2c0 <xTaskIncrementTick+0xdc>
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	4a22      	ldr	r2, [pc, #136]	; (800e348 <xTaskIncrementTick+0x164>)
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	4413      	add	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4a1f      	ldr	r2, [pc, #124]	; (800e34c <xTaskIncrementTick+0x168>)
 800e2ce:	441a      	add	r2, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7fe fe03 	bl	800cee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e0:	4b1b      	ldr	r3, [pc, #108]	; (800e350 <xTaskIncrementTick+0x16c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d3b8      	bcc.n	800e25c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2ee:	e7b5      	b.n	800e25c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e2f0:	4b17      	ldr	r3, [pc, #92]	; (800e350 <xTaskIncrementTick+0x16c>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f6:	4915      	ldr	r1, [pc, #84]	; (800e34c <xTaskIncrementTick+0x168>)
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	440b      	add	r3, r1
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d907      	bls.n	800e318 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800e308:	2301      	movs	r3, #1
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	e004      	b.n	800e318 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e30e:	4b11      	ldr	r3, [pc, #68]	; (800e354 <xTaskIncrementTick+0x170>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a0f      	ldr	r2, [pc, #60]	; (800e354 <xTaskIncrementTick+0x170>)
 800e316:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <xTaskIncrementTick+0x174>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d001      	beq.n	800e324 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800e320:	2301      	movs	r3, #1
 800e322:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e324:	697b      	ldr	r3, [r7, #20]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	20001a84 	.word	0x20001a84
 800e334:	20001a60 	.word	0x20001a60
 800e338:	20001a14 	.word	0x20001a14
 800e33c:	20001a18 	.word	0x20001a18
 800e340:	20001a74 	.word	0x20001a74
 800e344:	20001a7c 	.word	0x20001a7c
 800e348:	20001a64 	.word	0x20001a64
 800e34c:	2000158c 	.word	0x2000158c
 800e350:	20001588 	.word	0x20001588
 800e354:	20001a6c 	.word	0x20001a6c
 800e358:	20001a70 	.word	0x20001a70

0800e35c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e362:	4b2b      	ldr	r3, [pc, #172]	; (800e410 <vTaskSwitchContext+0xb4>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e36a:	4b2a      	ldr	r3, [pc, #168]	; (800e414 <vTaskSwitchContext+0xb8>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e370:	e048      	b.n	800e404 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800e372:	4b28      	ldr	r3, [pc, #160]	; (800e414 <vTaskSwitchContext+0xb8>)
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e378:	4b27      	ldr	r3, [pc, #156]	; (800e418 <vTaskSwitchContext+0xbc>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	e012      	b.n	800e3a6 <vTaskSwitchContext+0x4a>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10c      	bne.n	800e3a0 <vTaskSwitchContext+0x44>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	b672      	cpsid	i
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	b662      	cpsie	i
 800e39a:	607b      	str	r3, [r7, #4]
}
 800e39c:	bf00      	nop
 800e39e:	e7fe      	b.n	800e39e <vTaskSwitchContext+0x42>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	491d      	ldr	r1, [pc, #116]	; (800e41c <vTaskSwitchContext+0xc0>)
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0e2      	beq.n	800e380 <vTaskSwitchContext+0x24>
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4a15      	ldr	r2, [pc, #84]	; (800e41c <vTaskSwitchContext+0xc0>)
 800e3c6:	4413      	add	r3, r2
 800e3c8:	60bb      	str	r3, [r7, #8]
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	605a      	str	r2, [r3, #4]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d104      	bne.n	800e3ea <vTaskSwitchContext+0x8e>
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	605a      	str	r2, [r3, #4]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	4a0b      	ldr	r2, [pc, #44]	; (800e420 <vTaskSwitchContext+0xc4>)
 800e3f2:	6013      	str	r3, [r2, #0]
 800e3f4:	4a08      	ldr	r2, [pc, #32]	; (800e418 <vTaskSwitchContext+0xbc>)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <vTaskSwitchContext+0xc4>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3354      	adds	r3, #84	; 0x54
 800e400:	4a08      	ldr	r2, [pc, #32]	; (800e424 <vTaskSwitchContext+0xc8>)
 800e402:	6013      	str	r3, [r2, #0]
}
 800e404:	bf00      	nop
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	20001a84 	.word	0x20001a84
 800e414:	20001a70 	.word	0x20001a70
 800e418:	20001a64 	.word	0x20001a64
 800e41c:	2000158c 	.word	0x2000158c
 800e420:	20001588 	.word	0x20001588
 800e424:	20000190 	.word	0x20000190

0800e428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10c      	bne.n	800e452 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	b672      	cpsid	i
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	b662      	cpsie	i
 800e44c:	60fb      	str	r3, [r7, #12]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <vTaskPlaceOnEventList+0x48>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3318      	adds	r3, #24
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7fe fd65 	bl	800cf2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e460:	2101      	movs	r1, #1
 800e462:	6838      	ldr	r0, [r7, #0]
 800e464:	f000 fa8e 	bl	800e984 <prvAddCurrentTaskToDelayedList>
}
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	20001588 	.word	0x20001588

0800e474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10c      	bne.n	800e4a0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	b672      	cpsid	i
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	b662      	cpsie	i
 800e49a:	617b      	str	r3, [r7, #20]
}
 800e49c:	bf00      	nop
 800e49e:	e7fe      	b.n	800e49e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4a0:	4b0a      	ldr	r3, [pc, #40]	; (800e4cc <vTaskPlaceOnEventListRestricted+0x58>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3318      	adds	r3, #24
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7fe fd1a 	bl	800cee2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4ba:	6879      	ldr	r1, [r7, #4]
 800e4bc:	68b8      	ldr	r0, [r7, #8]
 800e4be:	f000 fa61 	bl	800e984 <prvAddCurrentTaskToDelayedList>
	}
 800e4c2:	bf00      	nop
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20001588 	.word	0x20001588

0800e4d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10c      	bne.n	800e500 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ea:	b672      	cpsid	i
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	b662      	cpsie	i
 800e4fa:	60fb      	str	r3, [r7, #12]
}
 800e4fc:	bf00      	nop
 800e4fe:	e7fe      	b.n	800e4fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	3318      	adds	r3, #24
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fd49 	bl	800cf9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e50a:	4b1e      	ldr	r3, [pc, #120]	; (800e584 <xTaskRemoveFromEventList+0xb4>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d11d      	bne.n	800e54e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	3304      	adds	r3, #4
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fd40 	bl	800cf9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e520:	4b19      	ldr	r3, [pc, #100]	; (800e588 <xTaskRemoveFromEventList+0xb8>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	429a      	cmp	r2, r3
 800e526:	d903      	bls.n	800e530 <xTaskRemoveFromEventList+0x60>
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	4a16      	ldr	r2, [pc, #88]	; (800e588 <xTaskRemoveFromEventList+0xb8>)
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e534:	4613      	mov	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4413      	add	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4a13      	ldr	r2, [pc, #76]	; (800e58c <xTaskRemoveFromEventList+0xbc>)
 800e53e:	441a      	add	r2, r3
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	3304      	adds	r3, #4
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f7fe fccb 	bl	800cee2 <vListInsertEnd>
 800e54c:	e005      	b.n	800e55a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	3318      	adds	r3, #24
 800e552:	4619      	mov	r1, r3
 800e554:	480e      	ldr	r0, [pc, #56]	; (800e590 <xTaskRemoveFromEventList+0xc0>)
 800e556:	f7fe fcc4 	bl	800cee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55e:	4b0d      	ldr	r3, [pc, #52]	; (800e594 <xTaskRemoveFromEventList+0xc4>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e564:	429a      	cmp	r2, r3
 800e566:	d905      	bls.n	800e574 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e56c:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <xTaskRemoveFromEventList+0xc8>)
 800e56e:	2201      	movs	r2, #1
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	e001      	b.n	800e578 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e578:	697b      	ldr	r3, [r7, #20]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20001a84 	.word	0x20001a84
 800e588:	20001a64 	.word	0x20001a64
 800e58c:	2000158c 	.word	0x2000158c
 800e590:	20001a1c 	.word	0x20001a1c
 800e594:	20001588 	.word	0x20001588
 800e598:	20001a70 	.word	0x20001a70

0800e59c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5a4:	4b06      	ldr	r3, [pc, #24]	; (800e5c0 <vTaskInternalSetTimeOutState+0x24>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <vTaskInternalSetTimeOutState+0x28>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	605a      	str	r2, [r3, #4]
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	20001a74 	.word	0x20001a74
 800e5c4:	20001a60 	.word	0x20001a60

0800e5c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10c      	bne.n	800e5f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5dc:	b672      	cpsid	i
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	b662      	cpsie	i
 800e5ec:	613b      	str	r3, [r7, #16]
}
 800e5ee:	bf00      	nop
 800e5f0:	e7fe      	b.n	800e5f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10c      	bne.n	800e612 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	b672      	cpsid	i
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	b662      	cpsie	i
 800e60c:	60fb      	str	r3, [r7, #12]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e612:	f000 fe73 	bl	800f2fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e616:	4b1d      	ldr	r3, [pc, #116]	; (800e68c <xTaskCheckForTimeOut+0xc4>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	69ba      	ldr	r2, [r7, #24]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e62e:	d102      	bne.n	800e636 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e630:	2300      	movs	r3, #0
 800e632:	61fb      	str	r3, [r7, #28]
 800e634:	e023      	b.n	800e67e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	4b15      	ldr	r3, [pc, #84]	; (800e690 <xTaskCheckForTimeOut+0xc8>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d007      	beq.n	800e652 <xTaskCheckForTimeOut+0x8a>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	69ba      	ldr	r2, [r7, #24]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d302      	bcc.n	800e652 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	61fb      	str	r3, [r7, #28]
 800e650:	e015      	b.n	800e67e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d20b      	bcs.n	800e674 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	1ad2      	subs	r2, r2, r3
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff ff97 	bl	800e59c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e66e:	2300      	movs	r3, #0
 800e670:	61fb      	str	r3, [r7, #28]
 800e672:	e004      	b.n	800e67e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e67e:	f000 fe71 	bl	800f364 <vPortExitCritical>

	return xReturn;
 800e682:	69fb      	ldr	r3, [r7, #28]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3720      	adds	r7, #32
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20001a60 	.word	0x20001a60
 800e690:	20001a74 	.word	0x20001a74

0800e694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e694:	b480      	push	{r7}
 800e696:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e698:	4b03      	ldr	r3, [pc, #12]	; (800e6a8 <vTaskMissedYield+0x14>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	601a      	str	r2, [r3, #0]
}
 800e69e:	bf00      	nop
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	20001a70 	.word	0x20001a70

0800e6ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6b4:	f000 f852 	bl	800e75c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6b8:	4b06      	ldr	r3, [pc, #24]	; (800e6d4 <prvIdleTask+0x28>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d9f9      	bls.n	800e6b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6c0:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <prvIdleTask+0x2c>)
 800e6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6d0:	e7f0      	b.n	800e6b4 <prvIdleTask+0x8>
 800e6d2:	bf00      	nop
 800e6d4:	2000158c 	.word	0x2000158c
 800e6d8:	e000ed04 	.word	0xe000ed04

0800e6dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	607b      	str	r3, [r7, #4]
 800e6e6:	e00c      	b.n	800e702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4a12      	ldr	r2, [pc, #72]	; (800e73c <prvInitialiseTaskLists+0x60>)
 800e6f4:	4413      	add	r3, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe fbc6 	bl	800ce88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3301      	adds	r3, #1
 800e700:	607b      	str	r3, [r7, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b37      	cmp	r3, #55	; 0x37
 800e706:	d9ef      	bls.n	800e6e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e708:	480d      	ldr	r0, [pc, #52]	; (800e740 <prvInitialiseTaskLists+0x64>)
 800e70a:	f7fe fbbd 	bl	800ce88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e70e:	480d      	ldr	r0, [pc, #52]	; (800e744 <prvInitialiseTaskLists+0x68>)
 800e710:	f7fe fbba 	bl	800ce88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e714:	480c      	ldr	r0, [pc, #48]	; (800e748 <prvInitialiseTaskLists+0x6c>)
 800e716:	f7fe fbb7 	bl	800ce88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e71a:	480c      	ldr	r0, [pc, #48]	; (800e74c <prvInitialiseTaskLists+0x70>)
 800e71c:	f7fe fbb4 	bl	800ce88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e720:	480b      	ldr	r0, [pc, #44]	; (800e750 <prvInitialiseTaskLists+0x74>)
 800e722:	f7fe fbb1 	bl	800ce88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e726:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <prvInitialiseTaskLists+0x78>)
 800e728:	4a05      	ldr	r2, [pc, #20]	; (800e740 <prvInitialiseTaskLists+0x64>)
 800e72a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <prvInitialiseTaskLists+0x7c>)
 800e72e:	4a05      	ldr	r2, [pc, #20]	; (800e744 <prvInitialiseTaskLists+0x68>)
 800e730:	601a      	str	r2, [r3, #0]
}
 800e732:	bf00      	nop
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	2000158c 	.word	0x2000158c
 800e740:	200019ec 	.word	0x200019ec
 800e744:	20001a00 	.word	0x20001a00
 800e748:	20001a1c 	.word	0x20001a1c
 800e74c:	20001a30 	.word	0x20001a30
 800e750:	20001a48 	.word	0x20001a48
 800e754:	20001a14 	.word	0x20001a14
 800e758:	20001a18 	.word	0x20001a18

0800e75c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e762:	e019      	b.n	800e798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e764:	f000 fdca 	bl	800f2fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e768:	4b10      	ldr	r3, [pc, #64]	; (800e7ac <prvCheckTasksWaitingTermination+0x50>)
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3304      	adds	r3, #4
 800e774:	4618      	mov	r0, r3
 800e776:	f7fe fc11 	bl	800cf9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e77a:	4b0d      	ldr	r3, [pc, #52]	; (800e7b0 <prvCheckTasksWaitingTermination+0x54>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3b01      	subs	r3, #1
 800e780:	4a0b      	ldr	r2, [pc, #44]	; (800e7b0 <prvCheckTasksWaitingTermination+0x54>)
 800e782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e784:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <prvCheckTasksWaitingTermination+0x58>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3b01      	subs	r3, #1
 800e78a:	4a0a      	ldr	r2, [pc, #40]	; (800e7b4 <prvCheckTasksWaitingTermination+0x58>)
 800e78c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e78e:	f000 fde9 	bl	800f364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f810 	bl	800e7b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e798:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <prvCheckTasksWaitingTermination+0x58>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1e1      	bne.n	800e764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7a0:	bf00      	nop
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20001a30 	.word	0x20001a30
 800e7b0:	20001a5c 	.word	0x20001a5c
 800e7b4:	20001a44 	.word	0x20001a44

0800e7b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3354      	adds	r3, #84	; 0x54
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 ff8d 	bl	80106e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d108      	bne.n	800e7e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 ff85 	bl	800f6e8 <vPortFree>
				vPortFree( pxTCB );
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 ff82 	bl	800f6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7e4:	e01a      	b.n	800e81c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d103      	bne.n	800e7f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 ff79 	bl	800f6e8 <vPortFree>
	}
 800e7f6:	e011      	b.n	800e81c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d00c      	beq.n	800e81c <prvDeleteTCB+0x64>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	b672      	cpsid	i
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	b662      	cpsie	i
 800e816:	60fb      	str	r3, [r7, #12]
}
 800e818:	bf00      	nop
 800e81a:	e7fe      	b.n	800e81a <prvDeleteTCB+0x62>
	}
 800e81c:	bf00      	nop
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e82a:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <prvResetNextTaskUnblockTime+0x38>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d104      	bne.n	800e83e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e834:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <prvResetNextTaskUnblockTime+0x3c>)
 800e836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e83a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e83c:	e008      	b.n	800e850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e83e:	4b07      	ldr	r3, [pc, #28]	; (800e85c <prvResetNextTaskUnblockTime+0x38>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	4a04      	ldr	r2, [pc, #16]	; (800e860 <prvResetNextTaskUnblockTime+0x3c>)
 800e84e:	6013      	str	r3, [r2, #0]
}
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	20001a14 	.word	0x20001a14
 800e860:	20001a7c 	.word	0x20001a7c

0800e864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e86a:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <xTaskGetSchedulerState+0x34>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d102      	bne.n	800e878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e872:	2301      	movs	r3, #1
 800e874:	607b      	str	r3, [r7, #4]
 800e876:	e008      	b.n	800e88a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e878:	4b08      	ldr	r3, [pc, #32]	; (800e89c <xTaskGetSchedulerState+0x38>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e880:	2302      	movs	r3, #2
 800e882:	607b      	str	r3, [r7, #4]
 800e884:	e001      	b.n	800e88a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e886:	2300      	movs	r3, #0
 800e888:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e88a:	687b      	ldr	r3, [r7, #4]
	}
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	20001a68 	.word	0x20001a68
 800e89c:	20001a84 	.word	0x20001a84

0800e8a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d05a      	beq.n	800e96c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8b6:	4b30      	ldr	r3, [pc, #192]	; (800e978 <xTaskPriorityDisinherit+0xd8>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	693a      	ldr	r2, [r7, #16]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d00c      	beq.n	800e8da <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c4:	b672      	cpsid	i
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	b662      	cpsie	i
 800e8d4:	60fb      	str	r3, [r7, #12]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10c      	bne.n	800e8fc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e6:	b672      	cpsid	i
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	b662      	cpsie	i
 800e8f6:	60bb      	str	r3, [r7, #8]
}
 800e8f8:	bf00      	nop
 800e8fa:	e7fe      	b.n	800e8fa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e900:	1e5a      	subs	r2, r3, #1
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e90e:	429a      	cmp	r2, r3
 800e910:	d02c      	beq.n	800e96c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e916:	2b00      	cmp	r3, #0
 800e918:	d128      	bne.n	800e96c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3304      	adds	r3, #4
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fb3c 	bl	800cf9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93c:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <xTaskPriorityDisinherit+0xdc>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d903      	bls.n	800e94c <xTaskPriorityDisinherit+0xac>
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	4a0c      	ldr	r2, [pc, #48]	; (800e97c <xTaskPriorityDisinherit+0xdc>)
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e950:	4613      	mov	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4413      	add	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4a09      	ldr	r2, [pc, #36]	; (800e980 <xTaskPriorityDisinherit+0xe0>)
 800e95a:	441a      	add	r2, r3
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	3304      	adds	r3, #4
 800e960:	4619      	mov	r1, r3
 800e962:	4610      	mov	r0, r2
 800e964:	f7fe fabd 	bl	800cee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e968:	2301      	movs	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e96c:	697b      	ldr	r3, [r7, #20]
	}
 800e96e:	4618      	mov	r0, r3
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20001588 	.word	0x20001588
 800e97c:	20001a64 	.word	0x20001a64
 800e980:	2000158c 	.word	0x2000158c

0800e984 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e98e:	4b21      	ldr	r3, [pc, #132]	; (800ea14 <prvAddCurrentTaskToDelayedList+0x90>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e994:	4b20      	ldr	r3, [pc, #128]	; (800ea18 <prvAddCurrentTaskToDelayedList+0x94>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3304      	adds	r3, #4
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fe fafe 	bl	800cf9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a6:	d10a      	bne.n	800e9be <prvAddCurrentTaskToDelayedList+0x3a>
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d007      	beq.n	800e9be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ae:	4b1a      	ldr	r3, [pc, #104]	; (800ea18 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	4819      	ldr	r0, [pc, #100]	; (800ea1c <prvAddCurrentTaskToDelayedList+0x98>)
 800e9b8:	f7fe fa93 	bl	800cee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9bc:	e026      	b.n	800ea0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9c6:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d209      	bcs.n	800e9ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d6:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	3304      	adds	r3, #4
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	f7fe faa1 	bl	800cf2a <vListInsert>
}
 800e9e8:	e010      	b.n	800ea0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ea24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fe fa97 	bl	800cf2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d202      	bcs.n	800ea0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea06:	4a08      	ldr	r2, [pc, #32]	; (800ea28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	6013      	str	r3, [r2, #0]
}
 800ea0c:	bf00      	nop
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	20001a60 	.word	0x20001a60
 800ea18:	20001588 	.word	0x20001588
 800ea1c:	20001a48 	.word	0x20001a48
 800ea20:	20001a18 	.word	0x20001a18
 800ea24:	20001a14 	.word	0x20001a14
 800ea28:	20001a7c 	.word	0x20001a7c

0800ea2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08a      	sub	sp, #40	; 0x28
 800ea30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea36:	f000 fb15 	bl	800f064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea3a:	4b1d      	ldr	r3, [pc, #116]	; (800eab0 <xTimerCreateTimerTask+0x84>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d021      	beq.n	800ea86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea4a:	1d3a      	adds	r2, r7, #4
 800ea4c:	f107 0108 	add.w	r1, r7, #8
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe f9fd 	bl	800ce54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea5a:	6879      	ldr	r1, [r7, #4]
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	9202      	str	r2, [sp, #8]
 800ea62:	9301      	str	r3, [sp, #4]
 800ea64:	2302      	movs	r3, #2
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	460a      	mov	r2, r1
 800ea6c:	4911      	ldr	r1, [pc, #68]	; (800eab4 <xTimerCreateTimerTask+0x88>)
 800ea6e:	4812      	ldr	r0, [pc, #72]	; (800eab8 <xTimerCreateTimerTask+0x8c>)
 800ea70:	f7ff f890 	bl	800db94 <xTaskCreateStatic>
 800ea74:	4603      	mov	r3, r0
 800ea76:	4a11      	ldr	r2, [pc, #68]	; (800eabc <xTimerCreateTimerTask+0x90>)
 800ea78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea7a:	4b10      	ldr	r3, [pc, #64]	; (800eabc <xTimerCreateTimerTask+0x90>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea82:	2301      	movs	r3, #1
 800ea84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10c      	bne.n	800eaa6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea90:	b672      	cpsid	i
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	b662      	cpsie	i
 800eaa0:	613b      	str	r3, [r7, #16]
}
 800eaa2:	bf00      	nop
 800eaa4:	e7fe      	b.n	800eaa4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800eaa6:	697b      	ldr	r3, [r7, #20]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3718      	adds	r7, #24
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20001ab8 	.word	0x20001ab8
 800eab4:	0801083c 	.word	0x0801083c
 800eab8:	0800ebfd 	.word	0x0800ebfd
 800eabc:	20001abc 	.word	0x20001abc

0800eac0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08a      	sub	sp, #40	; 0x28
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eace:	2300      	movs	r3, #0
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10c      	bne.n	800eaf2 <xTimerGenericCommand+0x32>
	__asm volatile
 800ead8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eadc:	b672      	cpsid	i
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	b662      	cpsie	i
 800eaec:	623b      	str	r3, [r7, #32]
}
 800eaee:	bf00      	nop
 800eaf0:	e7fe      	b.n	800eaf0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaf2:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <xTimerGenericCommand+0x9c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d02a      	beq.n	800eb50 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b05      	cmp	r3, #5
 800eb0a:	dc18      	bgt.n	800eb3e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb0c:	f7ff feaa 	bl	800e864 <xTaskGetSchedulerState>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d109      	bne.n	800eb2a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb16:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <xTimerGenericCommand+0x9c>)
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	f107 0110 	add.w	r1, r7, #16
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb22:	f7fe fbb7 	bl	800d294 <xQueueGenericSend>
 800eb26:	6278      	str	r0, [r7, #36]	; 0x24
 800eb28:	e012      	b.n	800eb50 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <xTimerGenericCommand+0x9c>)
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	f107 0110 	add.w	r1, r7, #16
 800eb32:	2300      	movs	r3, #0
 800eb34:	2200      	movs	r2, #0
 800eb36:	f7fe fbad 	bl	800d294 <xQueueGenericSend>
 800eb3a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb3c:	e008      	b.n	800eb50 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb3e:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <xTimerGenericCommand+0x9c>)
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	f107 0110 	add.w	r1, r7, #16
 800eb46:	2300      	movs	r3, #0
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	f7fe fca9 	bl	800d4a0 <xQueueGenericSendFromISR>
 800eb4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3728      	adds	r7, #40	; 0x28
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20001ab8 	.word	0x20001ab8

0800eb60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6a:	4b23      	ldr	r3, [pc, #140]	; (800ebf8 <prvProcessExpiredTimer+0x98>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fa0f 	bl	800cf9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d024      	beq.n	800ebd6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	18d1      	adds	r1, r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	6978      	ldr	r0, [r7, #20]
 800eb9a:	f000 f8d3 	bl	800ed44 <prvInsertTimerInActiveList>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d021      	beq.n	800ebe8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eba4:	2300      	movs	r3, #0
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	2100      	movs	r1, #0
 800ebae:	6978      	ldr	r0, [r7, #20]
 800ebb0:	f7ff ff86 	bl	800eac0 <xTimerGenericCommand>
 800ebb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d115      	bne.n	800ebe8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc0:	b672      	cpsid	i
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	b662      	cpsie	i
 800ebd0:	60fb      	str	r3, [r7, #12]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebdc:	f023 0301 	bic.w	r3, r3, #1
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	6a1b      	ldr	r3, [r3, #32]
 800ebec:	6978      	ldr	r0, [r7, #20]
 800ebee:	4798      	blx	r3
}
 800ebf0:	bf00      	nop
 800ebf2:	3718      	adds	r7, #24
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	20001ab0 	.word	0x20001ab0

0800ebfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec04:	f107 0308 	add.w	r3, r7, #8
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f857 	bl	800ecbc <prvGetNextExpireTime>
 800ec0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4619      	mov	r1, r3
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f000 f803 	bl	800ec20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec1a:	f000 f8d5 	bl	800edc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec1e:	e7f1      	b.n	800ec04 <prvTimerTask+0x8>

0800ec20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec2a:	f7ff fa1d 	bl	800e068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec2e:	f107 0308 	add.w	r3, r7, #8
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 f866 	bl	800ed04 <prvSampleTimeNow>
 800ec38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d130      	bne.n	800eca2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10a      	bne.n	800ec5c <prvProcessTimerOrBlockTask+0x3c>
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d806      	bhi.n	800ec5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec4e:	f7ff fa19 	bl	800e084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ff83 	bl	800eb60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec5a:	e024      	b.n	800eca6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d008      	beq.n	800ec74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec62:	4b13      	ldr	r3, [pc, #76]	; (800ecb0 <prvProcessTimerOrBlockTask+0x90>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <prvProcessTimerOrBlockTask+0x50>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e000      	b.n	800ec72 <prvProcessTimerOrBlockTask+0x52>
 800ec70:	2300      	movs	r3, #0
 800ec72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec74:	4b0f      	ldr	r3, [pc, #60]	; (800ecb4 <prvProcessTimerOrBlockTask+0x94>)
 800ec76:	6818      	ldr	r0, [r3, #0]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	4619      	mov	r1, r3
 800ec82:	f7fe ff53 	bl	800db2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec86:	f7ff f9fd 	bl	800e084 <xTaskResumeAll>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10a      	bne.n	800eca6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec90:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <prvProcessTimerOrBlockTask+0x98>)
 800ec92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	f3bf 8f6f 	isb	sy
}
 800eca0:	e001      	b.n	800eca6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eca2:	f7ff f9ef 	bl	800e084 <xTaskResumeAll>
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20001ab4 	.word	0x20001ab4
 800ecb4:	20001ab8 	.word	0x20001ab8
 800ecb8:	e000ed04 	.word	0xe000ed04

0800ecbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecc4:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <prvGetNextExpireTime+0x44>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <prvGetNextExpireTime+0x16>
 800ecce:	2201      	movs	r2, #1
 800ecd0:	e000      	b.n	800ecd4 <prvGetNextExpireTime+0x18>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <prvGetNextExpireTime+0x44>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	60fb      	str	r3, [r7, #12]
 800ecea:	e001      	b.n	800ecf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecec:	2300      	movs	r3, #0
 800ecee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	20001ab0 	.word	0x20001ab0

0800ed04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed0c:	f7ff fa5a 	bl	800e1c4 <xTaskGetTickCount>
 800ed10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed12:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <prvSampleTimeNow+0x3c>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d205      	bcs.n	800ed28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed1c:	f000 f93c 	bl	800ef98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	e002      	b.n	800ed2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed2e:	4a04      	ldr	r2, [pc, #16]	; (800ed40 <prvSampleTimeNow+0x3c>)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed34:	68fb      	ldr	r3, [r7, #12]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20001ac0 	.word	0x20001ac0

0800ed44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed52:	2300      	movs	r3, #0
 800ed54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	68ba      	ldr	r2, [r7, #8]
 800ed5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d812      	bhi.n	800ed90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d302      	bcc.n	800ed7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	e01b      	b.n	800edb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <prvInsertTimerInActiveList+0x7c>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fe f8ce 	bl	800cf2a <vListInsert>
 800ed8e:	e012      	b.n	800edb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d206      	bcs.n	800eda6 <prvInsertTimerInActiveList+0x62>
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d302      	bcc.n	800eda6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eda0:	2301      	movs	r3, #1
 800eda2:	617b      	str	r3, [r7, #20]
 800eda4:	e007      	b.n	800edb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eda6:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <prvInsertTimerInActiveList+0x80>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	3304      	adds	r3, #4
 800edae:	4619      	mov	r1, r3
 800edb0:	4610      	mov	r0, r2
 800edb2:	f7fe f8ba 	bl	800cf2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edb6:	697b      	ldr	r3, [r7, #20]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	20001ab4 	.word	0x20001ab4
 800edc4:	20001ab0 	.word	0x20001ab0

0800edc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08e      	sub	sp, #56	; 0x38
 800edcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edce:	e0d0      	b.n	800ef72 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	da1a      	bge.n	800ee0c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edd6:	1d3b      	adds	r3, r7, #4
 800edd8:	3304      	adds	r3, #4
 800edda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10c      	bne.n	800edfc <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	b672      	cpsid	i
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	b662      	cpsie	i
 800edf6:	61fb      	str	r3, [r7, #28]
}
 800edf8:	bf00      	nop
 800edfa:	e7fe      	b.n	800edfa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee02:	6850      	ldr	r0, [r2, #4]
 800ee04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee06:	6892      	ldr	r2, [r2, #8]
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f2c0 80ae 	blt.w	800ef70 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	3304      	adds	r3, #4
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe f8b9 	bl	800cf9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee2a:	463b      	mov	r3, r7
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff ff69 	bl	800ed04 <prvSampleTimeNow>
 800ee32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b09      	cmp	r3, #9
 800ee38:	f200 809b 	bhi.w	800ef72 <prvProcessReceivedCommands+0x1aa>
 800ee3c:	a201      	add	r2, pc, #4	; (adr r2, 800ee44 <prvProcessReceivedCommands+0x7c>)
 800ee3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee42:	bf00      	nop
 800ee44:	0800ee6d 	.word	0x0800ee6d
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee6d 	.word	0x0800ee6d
 800ee50:	0800eee5 	.word	0x0800eee5
 800ee54:	0800eef9 	.word	0x0800eef9
 800ee58:	0800ef47 	.word	0x0800ef47
 800ee5c:	0800ee6d 	.word	0x0800ee6d
 800ee60:	0800ee6d 	.word	0x0800ee6d
 800ee64:	0800eee5 	.word	0x0800eee5
 800ee68:	0800eef9 	.word	0x0800eef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee72:	f043 0301 	orr.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	18d1      	adds	r1, r2, r3
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee8c:	f7ff ff5a 	bl	800ed44 <prvInsertTimerInActiveList>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d06d      	beq.n	800ef72 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d062      	beq.n	800ef72 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	441a      	add	r2, r3
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	2100      	movs	r1, #0
 800eebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eebe:	f7ff fdff 	bl	800eac0 <xTimerGenericCommand>
 800eec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d153      	bne.n	800ef72 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eece:	b672      	cpsid	i
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	b662      	cpsie	i
 800eede:	61bb      	str	r3, [r7, #24]
}
 800eee0:	bf00      	nop
 800eee2:	e7fe      	b.n	800eee2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeea:	f023 0301 	bic.w	r3, r3, #1
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eef6:	e03c      	b.n	800ef72 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefe:	f043 0301 	orr.w	r3, r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10c      	bne.n	800ef32 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1c:	b672      	cpsid	i
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	b662      	cpsie	i
 800ef2c:	617b      	str	r3, [r7, #20]
}
 800ef2e:	bf00      	nop
 800ef30:	e7fe      	b.n	800ef30 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef34:	699a      	ldr	r2, [r3, #24]
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	18d1      	adds	r1, r2, r3
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef40:	f7ff ff00 	bl	800ed44 <prvInsertTimerInActiveList>
					break;
 800ef44:	e015      	b.n	800ef72 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d103      	bne.n	800ef5c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ef54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef56:	f000 fbc7 	bl	800f6e8 <vPortFree>
 800ef5a:	e00a      	b.n	800ef72 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef62:	f023 0301 	bic.w	r3, r3, #1
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef6e:	e000      	b.n	800ef72 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef72:	4b08      	ldr	r3, [pc, #32]	; (800ef94 <prvProcessReceivedCommands+0x1cc>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	1d39      	adds	r1, r7, #4
 800ef78:	2200      	movs	r2, #0
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe fb30 	bl	800d5e0 <xQueueReceive>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f47f af24 	bne.w	800edd0 <prvProcessReceivedCommands+0x8>
	}
}
 800ef88:	bf00      	nop
 800ef8a:	bf00      	nop
 800ef8c:	3730      	adds	r7, #48	; 0x30
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20001ab8 	.word	0x20001ab8

0800ef98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef9e:	e04a      	b.n	800f036 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efa0:	4b2e      	ldr	r3, [pc, #184]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efaa:	4b2c      	ldr	r3, [pc, #176]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fd ffef 	bl	800cf9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efcc:	f003 0304 	and.w	r3, r3, #4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d030      	beq.n	800f036 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4413      	add	r3, r2
 800efdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d90e      	bls.n	800f004 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff2:	4b1a      	ldr	r3, [pc, #104]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3304      	adds	r3, #4
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7fd ff94 	bl	800cf2a <vListInsert>
 800f002:	e018      	b.n	800f036 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f004:	2300      	movs	r3, #0
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	2300      	movs	r3, #0
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	2100      	movs	r1, #0
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7ff fd56 	bl	800eac0 <xTimerGenericCommand>
 800f014:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10c      	bne.n	800f036 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	b672      	cpsid	i
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	b662      	cpsie	i
 800f030:	603b      	str	r3, [r7, #0]
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f036:	4b09      	ldr	r3, [pc, #36]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d1af      	bne.n	800efa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f040:	4b06      	ldr	r3, [pc, #24]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <prvSwitchTimerLists+0xc8>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4a04      	ldr	r2, [pc, #16]	; (800f05c <prvSwitchTimerLists+0xc4>)
 800f04c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f04e:	4a04      	ldr	r2, [pc, #16]	; (800f060 <prvSwitchTimerLists+0xc8>)
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	6013      	str	r3, [r2, #0]
}
 800f054:	bf00      	nop
 800f056:	3718      	adds	r7, #24
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20001ab0 	.word	0x20001ab0
 800f060:	20001ab4 	.word	0x20001ab4

0800f064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f06a:	f000 f947 	bl	800f2fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f06e:	4b15      	ldr	r3, [pc, #84]	; (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d120      	bne.n	800f0b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f076:	4814      	ldr	r0, [pc, #80]	; (800f0c8 <prvCheckForValidListAndQueue+0x64>)
 800f078:	f7fd ff06 	bl	800ce88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f07c:	4813      	ldr	r0, [pc, #76]	; (800f0cc <prvCheckForValidListAndQueue+0x68>)
 800f07e:	f7fd ff03 	bl	800ce88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f082:	4b13      	ldr	r3, [pc, #76]	; (800f0d0 <prvCheckForValidListAndQueue+0x6c>)
 800f084:	4a10      	ldr	r2, [pc, #64]	; (800f0c8 <prvCheckForValidListAndQueue+0x64>)
 800f086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f088:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <prvCheckForValidListAndQueue+0x70>)
 800f08a:	4a10      	ldr	r2, [pc, #64]	; (800f0cc <prvCheckForValidListAndQueue+0x68>)
 800f08c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f08e:	2300      	movs	r3, #0
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <prvCheckForValidListAndQueue+0x74>)
 800f094:	4a11      	ldr	r2, [pc, #68]	; (800f0dc <prvCheckForValidListAndQueue+0x78>)
 800f096:	2110      	movs	r1, #16
 800f098:	200a      	movs	r0, #10
 800f09a:	f7fe f813 	bl	800d0c4 <xQueueGenericCreateStatic>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4a08      	ldr	r2, [pc, #32]	; (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0a4:	4b07      	ldr	r3, [pc, #28]	; (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0ac:	4b05      	ldr	r3, [pc, #20]	; (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	490b      	ldr	r1, [pc, #44]	; (800f0e0 <prvCheckForValidListAndQueue+0x7c>)
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fd10 	bl	800dad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0b8:	f000 f954 	bl	800f364 <vPortExitCritical>
}
 800f0bc:	bf00      	nop
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20001ab8 	.word	0x20001ab8
 800f0c8:	20001a88 	.word	0x20001a88
 800f0cc:	20001a9c 	.word	0x20001a9c
 800f0d0:	20001ab0 	.word	0x20001ab0
 800f0d4:	20001ab4 	.word	0x20001ab4
 800f0d8:	20001b64 	.word	0x20001b64
 800f0dc:	20001ac4 	.word	0x20001ac4
 800f0e0:	08010844 	.word	0x08010844

0800f0e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	3b04      	subs	r3, #4
 800f0f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3b04      	subs	r3, #4
 800f102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	f023 0201 	bic.w	r2, r3, #1
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3b04      	subs	r3, #4
 800f112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f114:	4a0c      	ldr	r2, [pc, #48]	; (800f148 <pxPortInitialiseStack+0x64>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3b14      	subs	r3, #20
 800f11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3b04      	subs	r3, #4
 800f12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f06f 0202 	mvn.w	r2, #2
 800f132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3b20      	subs	r3, #32
 800f138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f13a:	68fb      	ldr	r3, [r7, #12]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	0800f14d 	.word	0x0800f14d

0800f14c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f156:	4b14      	ldr	r3, [pc, #80]	; (800f1a8 <prvTaskExitError+0x5c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f15e:	d00c      	beq.n	800f17a <prvTaskExitError+0x2e>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	b672      	cpsid	i
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	b662      	cpsie	i
 800f174:	60fb      	str	r3, [r7, #12]
}
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <prvTaskExitError+0x2c>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	b672      	cpsid	i
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	b662      	cpsie	i
 800f18e:	60bb      	str	r3, [r7, #8]
}
 800f190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f192:	bf00      	nop
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0fc      	beq.n	800f194 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f19a:	bf00      	nop
 800f19c:	bf00      	nop
 800f19e:	3714      	adds	r7, #20
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr
 800f1a8:	20000118 	.word	0x20000118
 800f1ac:	00000000 	.word	0x00000000

0800f1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <pxCurrentTCBConst2>)
 800f1b2:	6819      	ldr	r1, [r3, #0]
 800f1b4:	6808      	ldr	r0, [r1, #0]
 800f1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ba:	f380 8809 	msr	PSP, r0
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f04f 0000 	mov.w	r0, #0
 800f1c6:	f380 8811 	msr	BASEPRI, r0
 800f1ca:	4770      	bx	lr
 800f1cc:	f3af 8000 	nop.w

0800f1d0 <pxCurrentTCBConst2>:
 800f1d0:	20001588 	.word	0x20001588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop

0800f1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1d8:	4808      	ldr	r0, [pc, #32]	; (800f1fc <prvPortStartFirstTask+0x24>)
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	6800      	ldr	r0, [r0, #0]
 800f1de:	f380 8808 	msr	MSP, r0
 800f1e2:	f04f 0000 	mov.w	r0, #0
 800f1e6:	f380 8814 	msr	CONTROL, r0
 800f1ea:	b662      	cpsie	i
 800f1ec:	b661      	cpsie	f
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	df00      	svc	0
 800f1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1fa:	bf00      	nop
 800f1fc:	e000ed08 	.word	0xe000ed08

0800f200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f206:	4b37      	ldr	r3, [pc, #220]	; (800f2e4 <xPortStartScheduler+0xe4>)
 800f208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	22ff      	movs	r2, #255	; 0xff
 800f216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	4b2f      	ldr	r3, [pc, #188]	; (800f2e8 <xPortStartScheduler+0xe8>)
 800f22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f22e:	4b2f      	ldr	r3, [pc, #188]	; (800f2ec <xPortStartScheduler+0xec>)
 800f230:	2207      	movs	r2, #7
 800f232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f234:	e009      	b.n	800f24a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f236:	4b2d      	ldr	r3, [pc, #180]	; (800f2ec <xPortStartScheduler+0xec>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	4a2b      	ldr	r2, [pc, #172]	; (800f2ec <xPortStartScheduler+0xec>)
 800f23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	b2db      	uxtb	r3, r3
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f24a:	78fb      	ldrb	r3, [r7, #3]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f252:	2b80      	cmp	r3, #128	; 0x80
 800f254:	d0ef      	beq.n	800f236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f256:	4b25      	ldr	r3, [pc, #148]	; (800f2ec <xPortStartScheduler+0xec>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f1c3 0307 	rsb	r3, r3, #7
 800f25e:	2b04      	cmp	r3, #4
 800f260:	d00c      	beq.n	800f27c <xPortStartScheduler+0x7c>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	b672      	cpsid	i
 800f268:	f383 8811 	msr	BASEPRI, r3
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	b662      	cpsie	i
 800f276:	60bb      	str	r3, [r7, #8]
}
 800f278:	bf00      	nop
 800f27a:	e7fe      	b.n	800f27a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f27c:	4b1b      	ldr	r3, [pc, #108]	; (800f2ec <xPortStartScheduler+0xec>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	021b      	lsls	r3, r3, #8
 800f282:	4a1a      	ldr	r2, [pc, #104]	; (800f2ec <xPortStartScheduler+0xec>)
 800f284:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f286:	4b19      	ldr	r3, [pc, #100]	; (800f2ec <xPortStartScheduler+0xec>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f28e:	4a17      	ldr	r2, [pc, #92]	; (800f2ec <xPortStartScheduler+0xec>)
 800f290:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	b2da      	uxtb	r2, r3
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f29a:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <xPortStartScheduler+0xf0>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a14      	ldr	r2, [pc, #80]	; (800f2f0 <xPortStartScheduler+0xf0>)
 800f2a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2a6:	4b12      	ldr	r3, [pc, #72]	; (800f2f0 <xPortStartScheduler+0xf0>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a11      	ldr	r2, [pc, #68]	; (800f2f0 <xPortStartScheduler+0xf0>)
 800f2ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2b2:	f000 f8dd 	bl	800f470 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2b6:	4b0f      	ldr	r3, [pc, #60]	; (800f2f4 <xPortStartScheduler+0xf4>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2bc:	f000 f8fc 	bl	800f4b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f2c0:	4b0d      	ldr	r3, [pc, #52]	; (800f2f8 <xPortStartScheduler+0xf8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a0c      	ldr	r2, [pc, #48]	; (800f2f8 <xPortStartScheduler+0xf8>)
 800f2c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2cc:	f7ff ff84 	bl	800f1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2d0:	f7ff f844 	bl	800e35c <vTaskSwitchContext>
	prvTaskExitError();
 800f2d4:	f7ff ff3a 	bl	800f14c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	e000e400 	.word	0xe000e400
 800f2e8:	20001bb4 	.word	0x20001bb4
 800f2ec:	20001bb8 	.word	0x20001bb8
 800f2f0:	e000ed20 	.word	0xe000ed20
 800f2f4:	20000118 	.word	0x20000118
 800f2f8:	e000ef34 	.word	0xe000ef34

0800f2fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
	__asm volatile
 800f302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f306:	b672      	cpsid	i
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	b662      	cpsie	i
 800f316:	607b      	str	r3, [r7, #4]
}
 800f318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f31a:	4b10      	ldr	r3, [pc, #64]	; (800f35c <vPortEnterCritical+0x60>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3301      	adds	r3, #1
 800f320:	4a0e      	ldr	r2, [pc, #56]	; (800f35c <vPortEnterCritical+0x60>)
 800f322:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f324:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <vPortEnterCritical+0x60>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d111      	bne.n	800f350 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f32c:	4b0c      	ldr	r3, [pc, #48]	; (800f360 <vPortEnterCritical+0x64>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00c      	beq.n	800f350 <vPortEnterCritical+0x54>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33a:	b672      	cpsid	i
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	b662      	cpsie	i
 800f34a:	603b      	str	r3, [r7, #0]
}
 800f34c:	bf00      	nop
 800f34e:	e7fe      	b.n	800f34e <vPortEnterCritical+0x52>
	}
}
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	20000118 	.word	0x20000118
 800f360:	e000ed04 	.word	0xe000ed04

0800f364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f36a:	4b13      	ldr	r3, [pc, #76]	; (800f3b8 <vPortExitCritical+0x54>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d10c      	bne.n	800f38c <vPortExitCritical+0x28>
	__asm volatile
 800f372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f376:	b672      	cpsid	i
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	b662      	cpsie	i
 800f386:	607b      	str	r3, [r7, #4]
}
 800f388:	bf00      	nop
 800f38a:	e7fe      	b.n	800f38a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f38c:	4b0a      	ldr	r3, [pc, #40]	; (800f3b8 <vPortExitCritical+0x54>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3b01      	subs	r3, #1
 800f392:	4a09      	ldr	r2, [pc, #36]	; (800f3b8 <vPortExitCritical+0x54>)
 800f394:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f396:	4b08      	ldr	r3, [pc, #32]	; (800f3b8 <vPortExitCritical+0x54>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d105      	bne.n	800f3aa <vPortExitCritical+0x46>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	f383 8811 	msr	BASEPRI, r3
}
 800f3a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3aa:	bf00      	nop
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	20000118 	.word	0x20000118
 800f3bc:	00000000 	.word	0x00000000

0800f3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3c0:	f3ef 8009 	mrs	r0, PSP
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	4b15      	ldr	r3, [pc, #84]	; (800f420 <pxCurrentTCBConst>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	f01e 0f10 	tst.w	lr, #16
 800f3d0:	bf08      	it	eq
 800f3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3da:	6010      	str	r0, [r2, #0]
 800f3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3e4:	b672      	cpsid	i
 800f3e6:	f380 8811 	msr	BASEPRI, r0
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	b662      	cpsie	i
 800f3f4:	f7fe ffb2 	bl	800e35c <vTaskSwitchContext>
 800f3f8:	f04f 0000 	mov.w	r0, #0
 800f3fc:	f380 8811 	msr	BASEPRI, r0
 800f400:	bc09      	pop	{r0, r3}
 800f402:	6819      	ldr	r1, [r3, #0]
 800f404:	6808      	ldr	r0, [r1, #0]
 800f406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40a:	f01e 0f10 	tst.w	lr, #16
 800f40e:	bf08      	it	eq
 800f410:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f414:	f380 8809 	msr	PSP, r0
 800f418:	f3bf 8f6f 	isb	sy
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop

0800f420 <pxCurrentTCBConst>:
 800f420:	20001588 	.word	0x20001588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f424:	bf00      	nop
 800f426:	bf00      	nop

0800f428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	b672      	cpsid	i
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	b662      	cpsie	i
 800f442:	607b      	str	r3, [r7, #4]
}
 800f444:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f446:	f7fe fecd 	bl	800e1e4 <xTaskIncrementTick>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f450:	4b06      	ldr	r3, [pc, #24]	; (800f46c <SysTick_Handler+0x44>)
 800f452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f456:	601a      	str	r2, [r3, #0]
 800f458:	2300      	movs	r3, #0
 800f45a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	f383 8811 	msr	BASEPRI, r3
}
 800f462:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f464:	bf00      	nop
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	e000ed04 	.word	0xe000ed04

0800f470 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f474:	4b0b      	ldr	r3, [pc, #44]	; (800f4a4 <vPortSetupTimerInterrupt+0x34>)
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f47a:	4b0b      	ldr	r3, [pc, #44]	; (800f4a8 <vPortSetupTimerInterrupt+0x38>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <vPortSetupTimerInterrupt+0x3c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a0a      	ldr	r2, [pc, #40]	; (800f4b0 <vPortSetupTimerInterrupt+0x40>)
 800f486:	fba2 2303 	umull	r2, r3, r2, r3
 800f48a:	099b      	lsrs	r3, r3, #6
 800f48c:	4a09      	ldr	r2, [pc, #36]	; (800f4b4 <vPortSetupTimerInterrupt+0x44>)
 800f48e:	3b01      	subs	r3, #1
 800f490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f492:	4b04      	ldr	r3, [pc, #16]	; (800f4a4 <vPortSetupTimerInterrupt+0x34>)
 800f494:	2207      	movs	r2, #7
 800f496:	601a      	str	r2, [r3, #0]
}
 800f498:	bf00      	nop
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	e000e010 	.word	0xe000e010
 800f4a8:	e000e018 	.word	0xe000e018
 800f4ac:	20000000 	.word	0x20000000
 800f4b0:	10624dd3 	.word	0x10624dd3
 800f4b4:	e000e014 	.word	0xe000e014

0800f4b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4c8 <vPortEnableVFP+0x10>
 800f4bc:	6801      	ldr	r1, [r0, #0]
 800f4be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4c2:	6001      	str	r1, [r0, #0]
 800f4c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4c6:	bf00      	nop
 800f4c8:	e000ed88 	.word	0xe000ed88

0800f4cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4d2:	f3ef 8305 	mrs	r3, IPSR
 800f4d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b0f      	cmp	r3, #15
 800f4dc:	d916      	bls.n	800f50c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4de:	4a19      	ldr	r2, [pc, #100]	; (800f544 <vPortValidateInterruptPriority+0x78>)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4e8:	4b17      	ldr	r3, [pc, #92]	; (800f548 <vPortValidateInterruptPriority+0x7c>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	7afa      	ldrb	r2, [r7, #11]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d20c      	bcs.n	800f50c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f6:	b672      	cpsid	i
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	b662      	cpsie	i
 800f506:	607b      	str	r3, [r7, #4]
}
 800f508:	bf00      	nop
 800f50a:	e7fe      	b.n	800f50a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f50c:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <vPortValidateInterruptPriority+0x80>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f514:	4b0e      	ldr	r3, [pc, #56]	; (800f550 <vPortValidateInterruptPriority+0x84>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d90c      	bls.n	800f536 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f520:	b672      	cpsid	i
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	b662      	cpsie	i
 800f530:	603b      	str	r3, [r7, #0]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <vPortValidateInterruptPriority+0x68>
	}
 800f536:	bf00      	nop
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	e000e3f0 	.word	0xe000e3f0
 800f548:	20001bb4 	.word	0x20001bb4
 800f54c:	e000ed0c 	.word	0xe000ed0c
 800f550:	20001bb8 	.word	0x20001bb8

0800f554 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08a      	sub	sp, #40	; 0x28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f560:	f7fe fd82 	bl	800e068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f564:	4b5b      	ldr	r3, [pc, #364]	; (800f6d4 <pvPortMalloc+0x180>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f56c:	f000 f91a 	bl	800f7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f570:	4b59      	ldr	r3, [pc, #356]	; (800f6d8 <pvPortMalloc+0x184>)
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4013      	ands	r3, r2
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f040 8092 	bne.w	800f6a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d01f      	beq.n	800f5c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f584:	2208      	movs	r2, #8
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4413      	add	r3, r2
 800f58a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f003 0307 	and.w	r3, r3, #7
 800f592:	2b00      	cmp	r3, #0
 800f594:	d016      	beq.n	800f5c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f023 0307 	bic.w	r3, r3, #7
 800f59c:	3308      	adds	r3, #8
 800f59e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f003 0307 	and.w	r3, r3, #7
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00c      	beq.n	800f5c4 <pvPortMalloc+0x70>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	b672      	cpsid	i
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	b662      	cpsie	i
 800f5be:	617b      	str	r3, [r7, #20]
}
 800f5c0:	bf00      	nop
 800f5c2:	e7fe      	b.n	800f5c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d06b      	beq.n	800f6a2 <pvPortMalloc+0x14e>
 800f5ca:	4b44      	ldr	r3, [pc, #272]	; (800f6dc <pvPortMalloc+0x188>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d866      	bhi.n	800f6a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5d4:	4b42      	ldr	r3, [pc, #264]	; (800f6e0 <pvPortMalloc+0x18c>)
 800f5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5d8:	4b41      	ldr	r3, [pc, #260]	; (800f6e0 <pvPortMalloc+0x18c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5de:	e004      	b.n	800f5ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d903      	bls.n	800f5fc <pvPortMalloc+0xa8>
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1f1      	bne.n	800f5e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5fc:	4b35      	ldr	r3, [pc, #212]	; (800f6d4 <pvPortMalloc+0x180>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f602:	429a      	cmp	r2, r3
 800f604:	d04d      	beq.n	800f6a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f606:	6a3b      	ldr	r3, [r7, #32]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2208      	movs	r2, #8
 800f60c:	4413      	add	r3, r2
 800f60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	685a      	ldr	r2, [r3, #4]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	1ad2      	subs	r2, r2, r3
 800f620:	2308      	movs	r3, #8
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	429a      	cmp	r2, r3
 800f626:	d921      	bls.n	800f66c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4413      	add	r3, r2
 800f62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	f003 0307 	and.w	r3, r3, #7
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00c      	beq.n	800f654 <pvPortMalloc+0x100>
	__asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63e:	b672      	cpsid	i
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	b662      	cpsie	i
 800f64e:	613b      	str	r3, [r7, #16]
}
 800f650:	bf00      	nop
 800f652:	e7fe      	b.n	800f652 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	685a      	ldr	r2, [r3, #4]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	1ad2      	subs	r2, r2, r3
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f666:	69b8      	ldr	r0, [r7, #24]
 800f668:	f000 f8fe 	bl	800f868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f66c:	4b1b      	ldr	r3, [pc, #108]	; (800f6dc <pvPortMalloc+0x188>)
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	1ad3      	subs	r3, r2, r3
 800f676:	4a19      	ldr	r2, [pc, #100]	; (800f6dc <pvPortMalloc+0x188>)
 800f678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f67a:	4b18      	ldr	r3, [pc, #96]	; (800f6dc <pvPortMalloc+0x188>)
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	4b19      	ldr	r3, [pc, #100]	; (800f6e4 <pvPortMalloc+0x190>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d203      	bcs.n	800f68e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <pvPortMalloc+0x188>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a16      	ldr	r2, [pc, #88]	; (800f6e4 <pvPortMalloc+0x190>)
 800f68c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <pvPortMalloc+0x184>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	431a      	orrs	r2, r3
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6a2:	f7fe fcef 	bl	800e084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	f003 0307 	and.w	r3, r3, #7
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00c      	beq.n	800f6ca <pvPortMalloc+0x176>
	__asm volatile
 800f6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b4:	b672      	cpsid	i
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	b662      	cpsie	i
 800f6c4:	60fb      	str	r3, [r7, #12]
}
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <pvPortMalloc+0x174>
	return pvReturn;
 800f6ca:	69fb      	ldr	r3, [r7, #28]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3728      	adds	r7, #40	; 0x28
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	200057c4 	.word	0x200057c4
 800f6d8:	200057d0 	.word	0x200057d0
 800f6dc:	200057c8 	.word	0x200057c8
 800f6e0:	200057bc 	.word	0x200057bc
 800f6e4:	200057cc 	.word	0x200057cc

0800f6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d04c      	beq.n	800f794 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6fa:	2308      	movs	r3, #8
 800f6fc:	425b      	negs	r3, r3
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	4413      	add	r3, r2
 800f702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	685a      	ldr	r2, [r3, #4]
 800f70c:	4b23      	ldr	r3, [pc, #140]	; (800f79c <vPortFree+0xb4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4013      	ands	r3, r2
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10c      	bne.n	800f730 <vPortFree+0x48>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71a:	b672      	cpsid	i
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	b662      	cpsie	i
 800f72a:	60fb      	str	r3, [r7, #12]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d00c      	beq.n	800f752 <vPortFree+0x6a>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	b672      	cpsid	i
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	b662      	cpsie	i
 800f74c:	60bb      	str	r3, [r7, #8]
}
 800f74e:	bf00      	nop
 800f750:	e7fe      	b.n	800f750 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	4b11      	ldr	r3, [pc, #68]	; (800f79c <vPortFree+0xb4>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4013      	ands	r3, r2
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d019      	beq.n	800f794 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d115      	bne.n	800f794 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <vPortFree+0xb4>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	43db      	mvns	r3, r3
 800f772:	401a      	ands	r2, r3
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f778:	f7fe fc76 	bl	800e068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	4b07      	ldr	r3, [pc, #28]	; (800f7a0 <vPortFree+0xb8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4413      	add	r3, r2
 800f786:	4a06      	ldr	r2, [pc, #24]	; (800f7a0 <vPortFree+0xb8>)
 800f788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f78a:	6938      	ldr	r0, [r7, #16]
 800f78c:	f000 f86c 	bl	800f868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f790:	f7fe fc78 	bl	800e084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f794:	bf00      	nop
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	200057d0 	.word	0x200057d0
 800f7a0:	200057c8 	.word	0x200057c8

0800f7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7b0:	4b27      	ldr	r3, [pc, #156]	; (800f850 <prvHeapInit+0xac>)
 800f7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f003 0307 	and.w	r3, r3, #7
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00c      	beq.n	800f7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3307      	adds	r3, #7
 800f7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f023 0307 	bic.w	r3, r3, #7
 800f7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7cc:	68ba      	ldr	r2, [r7, #8]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	4a1f      	ldr	r2, [pc, #124]	; (800f850 <prvHeapInit+0xac>)
 800f7d4:	4413      	add	r3, r2
 800f7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7dc:	4a1d      	ldr	r2, [pc, #116]	; (800f854 <prvHeapInit+0xb0>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7e2:	4b1c      	ldr	r3, [pc, #112]	; (800f854 <prvHeapInit+0xb0>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7f0:	2208      	movs	r2, #8
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	1a9b      	subs	r3, r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f023 0307 	bic.w	r3, r3, #7
 800f7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	4a15      	ldr	r2, [pc, #84]	; (800f858 <prvHeapInit+0xb4>)
 800f804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f806:	4b14      	ldr	r3, [pc, #80]	; (800f858 <prvHeapInit+0xb4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f80e:	4b12      	ldr	r3, [pc, #72]	; (800f858 <prvHeapInit+0xb4>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2200      	movs	r2, #0
 800f814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	1ad2      	subs	r2, r2, r3
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f824:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <prvHeapInit+0xb4>)
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4a0a      	ldr	r2, [pc, #40]	; (800f85c <prvHeapInit+0xb8>)
 800f832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	4a09      	ldr	r2, [pc, #36]	; (800f860 <prvHeapInit+0xbc>)
 800f83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f83c:	4b09      	ldr	r3, [pc, #36]	; (800f864 <prvHeapInit+0xc0>)
 800f83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f842:	601a      	str	r2, [r3, #0]
}
 800f844:	bf00      	nop
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	20001bbc 	.word	0x20001bbc
 800f854:	200057bc 	.word	0x200057bc
 800f858:	200057c4 	.word	0x200057c4
 800f85c:	200057cc 	.word	0x200057cc
 800f860:	200057c8 	.word	0x200057c8
 800f864:	200057d0 	.word	0x200057d0

0800f868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f870:	4b28      	ldr	r3, [pc, #160]	; (800f914 <prvInsertBlockIntoFreeList+0xac>)
 800f872:	60fb      	str	r3, [r7, #12]
 800f874:	e002      	b.n	800f87c <prvInsertBlockIntoFreeList+0x14>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	429a      	cmp	r2, r3
 800f884:	d8f7      	bhi.n	800f876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	4413      	add	r3, r2
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	429a      	cmp	r2, r3
 800f896:	d108      	bne.n	800f8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	441a      	add	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	441a      	add	r2, r3
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d118      	bne.n	800f8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	4b15      	ldr	r3, [pc, #84]	; (800f918 <prvInsertBlockIntoFreeList+0xb0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d00d      	beq.n	800f8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	685a      	ldr	r2, [r3, #4]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	441a      	add	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	e008      	b.n	800f8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8e6:	4b0c      	ldr	r3, [pc, #48]	; (800f918 <prvInsertBlockIntoFreeList+0xb0>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	601a      	str	r2, [r3, #0]
 800f8ee:	e003      	b.n	800f8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d002      	beq.n	800f906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f906:	bf00      	nop
 800f908:	3714      	adds	r7, #20
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	200057bc 	.word	0x200057bc
 800f918:	200057c4 	.word	0x200057c4

0800f91c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f920:	2200      	movs	r2, #0
 800f922:	4912      	ldr	r1, [pc, #72]	; (800f96c <MX_USB_DEVICE_Init+0x50>)
 800f924:	4812      	ldr	r0, [pc, #72]	; (800f970 <MX_USB_DEVICE_Init+0x54>)
 800f926:	f7fb fcad 	bl	800b284 <USBD_Init>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f930:	f7f1 fb5c 	bl	8000fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f934:	490f      	ldr	r1, [pc, #60]	; (800f974 <MX_USB_DEVICE_Init+0x58>)
 800f936:	480e      	ldr	r0, [pc, #56]	; (800f970 <MX_USB_DEVICE_Init+0x54>)
 800f938:	f7fb fcd4 	bl	800b2e4 <USBD_RegisterClass>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f942:	f7f1 fb53 	bl	8000fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f946:	490c      	ldr	r1, [pc, #48]	; (800f978 <MX_USB_DEVICE_Init+0x5c>)
 800f948:	4809      	ldr	r0, [pc, #36]	; (800f970 <MX_USB_DEVICE_Init+0x54>)
 800f94a:	f7fb fbcb 	bl	800b0e4 <USBD_CDC_RegisterInterface>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d001      	beq.n	800f958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f954:	f7f1 fb4a 	bl	8000fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f958:	4805      	ldr	r0, [pc, #20]	; (800f970 <MX_USB_DEVICE_Init+0x54>)
 800f95a:	f7fb fcf9 	bl	800b350 <USBD_Start>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f964:	f7f1 fb42 	bl	8000fec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f968:	bf00      	nop
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20000130 	.word	0x20000130
 800f970:	200057d4 	.word	0x200057d4
 800f974:	20000098 	.word	0x20000098
 800f978:	2000011c 	.word	0x2000011c

0800f97c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f980:	2200      	movs	r2, #0
 800f982:	4905      	ldr	r1, [pc, #20]	; (800f998 <CDC_Init_FS+0x1c>)
 800f984:	4805      	ldr	r0, [pc, #20]	; (800f99c <CDC_Init_FS+0x20>)
 800f986:	f7fb fbc7 	bl	800b118 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f98a:	4905      	ldr	r1, [pc, #20]	; (800f9a0 <CDC_Init_FS+0x24>)
 800f98c:	4803      	ldr	r0, [pc, #12]	; (800f99c <CDC_Init_FS+0x20>)
 800f98e:	f7fb fbe5 	bl	800b15c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f994:	4618      	mov	r0, r3
 800f996:	bd80      	pop	{r7, pc}
 800f998:	200062b0 	.word	0x200062b0
 800f99c:	200057d4 	.word	0x200057d4
 800f9a0:	20005ab0 	.word	0x20005ab0

0800f9a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f9a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	6039      	str	r1, [r7, #0]
 800f9be:	71fb      	strb	r3, [r7, #7]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	2b23      	cmp	r3, #35	; 0x23
 800f9c8:	d84a      	bhi.n	800fa60 <CDC_Control_FS+0xac>
 800f9ca:	a201      	add	r2, pc, #4	; (adr r2, 800f9d0 <CDC_Control_FS+0x1c>)
 800f9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d0:	0800fa61 	.word	0x0800fa61
 800f9d4:	0800fa61 	.word	0x0800fa61
 800f9d8:	0800fa61 	.word	0x0800fa61
 800f9dc:	0800fa61 	.word	0x0800fa61
 800f9e0:	0800fa61 	.word	0x0800fa61
 800f9e4:	0800fa61 	.word	0x0800fa61
 800f9e8:	0800fa61 	.word	0x0800fa61
 800f9ec:	0800fa61 	.word	0x0800fa61
 800f9f0:	0800fa61 	.word	0x0800fa61
 800f9f4:	0800fa61 	.word	0x0800fa61
 800f9f8:	0800fa61 	.word	0x0800fa61
 800f9fc:	0800fa61 	.word	0x0800fa61
 800fa00:	0800fa61 	.word	0x0800fa61
 800fa04:	0800fa61 	.word	0x0800fa61
 800fa08:	0800fa61 	.word	0x0800fa61
 800fa0c:	0800fa61 	.word	0x0800fa61
 800fa10:	0800fa61 	.word	0x0800fa61
 800fa14:	0800fa61 	.word	0x0800fa61
 800fa18:	0800fa61 	.word	0x0800fa61
 800fa1c:	0800fa61 	.word	0x0800fa61
 800fa20:	0800fa61 	.word	0x0800fa61
 800fa24:	0800fa61 	.word	0x0800fa61
 800fa28:	0800fa61 	.word	0x0800fa61
 800fa2c:	0800fa61 	.word	0x0800fa61
 800fa30:	0800fa61 	.word	0x0800fa61
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	0800fa61 	.word	0x0800fa61
 800fa3c:	0800fa61 	.word	0x0800fa61
 800fa40:	0800fa61 	.word	0x0800fa61
 800fa44:	0800fa61 	.word	0x0800fa61
 800fa48:	0800fa61 	.word	0x0800fa61
 800fa4c:	0800fa61 	.word	0x0800fa61
 800fa50:	0800fa61 	.word	0x0800fa61
 800fa54:	0800fa61 	.word	0x0800fa61
 800fa58:	0800fa61 	.word	0x0800fa61
 800fa5c:	0800fa61 	.word	0x0800fa61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa60:	bf00      	nop
  }

  return (USBD_OK);
 800fa62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	4813      	ldr	r0, [pc, #76]	; (800facc <CDC_Receive_FS+0x5c>)
 800fa7e:	f7fb fb6d 	bl	800b15c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa82:	4812      	ldr	r0, [pc, #72]	; (800facc <CDC_Receive_FS+0x5c>)
 800fa84:	f7fb fbc8 	bl	800b218 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 800fa8e:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <CDC_Receive_FS+0x60>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d015      	beq.n	800fac2 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	2204      	movs	r2, #4
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 fd2a 	bl	80104f8 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 800faa4:	7bfa      	ldrb	r2, [r7, #15]
 800faa6:	f107 0308 	add.w	r3, r7, #8
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	f000 fd15 	bl	80104dc <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 800fab2:	4b07      	ldr	r3, [pc, #28]	; (800fad0 <CDC_Receive_FS+0x60>)
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	f107 0108 	add.w	r1, r7, #8
 800faba:	2300      	movs	r3, #0
 800fabc:	2200      	movs	r2, #0
 800fabe:	f7fd f8c9 	bl	800cc54 <osMessageQueuePut>
  	}

  return (USBD_OK);
 800fac2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	200057d4 	.word	0x200057d4
 800fad0:	200006d8 	.word	0x200006d8

0800fad4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	460b      	mov	r3, r1
 800fade:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fae0:	2300      	movs	r3, #0
 800fae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fae4:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <CDC_Transmit_FS+0x48>)
 800fae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800faea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d001      	beq.n	800fafa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800faf6:	2301      	movs	r3, #1
 800faf8:	e00b      	b.n	800fb12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fafa:	887b      	ldrh	r3, [r7, #2]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	4806      	ldr	r0, [pc, #24]	; (800fb1c <CDC_Transmit_FS+0x48>)
 800fb02:	f7fb fb09 	bl	800b118 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fb06:	4805      	ldr	r0, [pc, #20]	; (800fb1c <CDC_Transmit_FS+0x48>)
 800fb08:	f7fb fb46 	bl	800b198 <USBD_CDC_TransmitPacket>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200057d4 	.word	0x200057d4

0800fb20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fb32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	371c      	adds	r7, #28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	2212      	movs	r2, #18
 800fb54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fb56:	4b03      	ldr	r3, [pc, #12]	; (800fb64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr
 800fb64:	20000150 	.word	0x20000150

0800fb68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	4603      	mov	r3, r0
 800fb70:	6039      	str	r1, [r7, #0]
 800fb72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	2204      	movs	r2, #4
 800fb78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fb7a:	4b03      	ldr	r3, [pc, #12]	; (800fb88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	20000170 	.word	0x20000170

0800fb8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	6039      	str	r1, [r7, #0]
 800fb96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d105      	bne.n	800fbaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb9e:	683a      	ldr	r2, [r7, #0]
 800fba0:	4907      	ldr	r1, [pc, #28]	; (800fbc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800fba2:	4808      	ldr	r0, [pc, #32]	; (800fbc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800fba4:	f7fc fdaa 	bl	800c6fc <USBD_GetString>
 800fba8:	e004      	b.n	800fbb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fbaa:	683a      	ldr	r2, [r7, #0]
 800fbac:	4904      	ldr	r1, [pc, #16]	; (800fbc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800fbae:	4805      	ldr	r0, [pc, #20]	; (800fbc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800fbb0:	f7fc fda4 	bl	800c6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbb4:	4b02      	ldr	r3, [pc, #8]	; (800fbc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	20006ab0 	.word	0x20006ab0
 800fbc4:	0801084c 	.word	0x0801084c

0800fbc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	4603      	mov	r3, r0
 800fbd0:	6039      	str	r1, [r7, #0]
 800fbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	4904      	ldr	r1, [pc, #16]	; (800fbe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fbd8:	4804      	ldr	r0, [pc, #16]	; (800fbec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fbda:	f7fc fd8f 	bl	800c6fc <USBD_GetString>
  return USBD_StrDesc;
 800fbde:	4b02      	ldr	r3, [pc, #8]	; (800fbe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	20006ab0 	.word	0x20006ab0
 800fbec:	08010860 	.word	0x08010860

0800fbf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	6039      	str	r1, [r7, #0]
 800fbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	221a      	movs	r2, #26
 800fc00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fc02:	f000 f855 	bl	800fcb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fc06:	4b02      	ldr	r3, [pc, #8]	; (800fc10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	20000174 	.word	0x20000174

0800fc14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fc20:	79fb      	ldrb	r3, [r7, #7]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d105      	bne.n	800fc32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	4907      	ldr	r1, [pc, #28]	; (800fc48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc2a:	4808      	ldr	r0, [pc, #32]	; (800fc4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc2c:	f7fc fd66 	bl	800c6fc <USBD_GetString>
 800fc30:	e004      	b.n	800fc3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	4904      	ldr	r1, [pc, #16]	; (800fc48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc36:	4805      	ldr	r0, [pc, #20]	; (800fc4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc38:	f7fc fd60 	bl	800c6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc3c:	4b02      	ldr	r3, [pc, #8]	; (800fc48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	20006ab0 	.word	0x20006ab0
 800fc4c:	08010874 	.word	0x08010874

0800fc50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	6039      	str	r1, [r7, #0]
 800fc5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d105      	bne.n	800fc6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	4907      	ldr	r1, [pc, #28]	; (800fc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fc66:	4808      	ldr	r0, [pc, #32]	; (800fc88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fc68:	f7fc fd48 	bl	800c6fc <USBD_GetString>
 800fc6c:	e004      	b.n	800fc78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	4904      	ldr	r1, [pc, #16]	; (800fc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fc72:	4805      	ldr	r0, [pc, #20]	; (800fc88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fc74:	f7fc fd42 	bl	800c6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc78:	4b02      	ldr	r3, [pc, #8]	; (800fc84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	20006ab0 	.word	0x20006ab0
 800fc88:	08010880 	.word	0x08010880

0800fc8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	6039      	str	r1, [r7, #0]
 800fc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	220c      	movs	r2, #12
 800fc9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fc9e:	4b03      	ldr	r3, [pc, #12]	; (800fcac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20000164 	.word	0x20000164

0800fcb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <Get_SerialNum+0x44>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fcbc:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <Get_SerialNum+0x48>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fcc2:	4b0e      	ldr	r3, [pc, #56]	; (800fcfc <Get_SerialNum+0x4c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4413      	add	r3, r2
 800fcce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d009      	beq.n	800fcea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fcd6:	2208      	movs	r2, #8
 800fcd8:	4909      	ldr	r1, [pc, #36]	; (800fd00 <Get_SerialNum+0x50>)
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f000 f814 	bl	800fd08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fce0:	2204      	movs	r2, #4
 800fce2:	4908      	ldr	r1, [pc, #32]	; (800fd04 <Get_SerialNum+0x54>)
 800fce4:	68b8      	ldr	r0, [r7, #8]
 800fce6:	f000 f80f 	bl	800fd08 <IntToUnicode>
  }
}
 800fcea:	bf00      	nop
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	1ff0f420 	.word	0x1ff0f420
 800fcf8:	1ff0f424 	.word	0x1ff0f424
 800fcfc:	1ff0f428 	.word	0x1ff0f428
 800fd00:	20000176 	.word	0x20000176
 800fd04:	20000186 	.word	0x20000186

0800fd08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b087      	sub	sp, #28
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	4613      	mov	r3, r2
 800fd14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	75fb      	strb	r3, [r7, #23]
 800fd1e:	e027      	b.n	800fd70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	0f1b      	lsrs	r3, r3, #28
 800fd24:	2b09      	cmp	r3, #9
 800fd26:	d80b      	bhi.n	800fd40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	0f1b      	lsrs	r3, r3, #28
 800fd2c:	b2da      	uxtb	r2, r3
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	4619      	mov	r1, r3
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	440b      	add	r3, r1
 800fd38:	3230      	adds	r2, #48	; 0x30
 800fd3a:	b2d2      	uxtb	r2, r2
 800fd3c:	701a      	strb	r2, [r3, #0]
 800fd3e:	e00a      	b.n	800fd56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	0f1b      	lsrs	r3, r3, #28
 800fd44:	b2da      	uxtb	r2, r3
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	005b      	lsls	r3, r3, #1
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	440b      	add	r3, r1
 800fd50:	3237      	adds	r2, #55	; 0x37
 800fd52:	b2d2      	uxtb	r2, r2
 800fd54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	011b      	lsls	r3, r3, #4
 800fd5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fd5c:	7dfb      	ldrb	r3, [r7, #23]
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	3301      	adds	r3, #1
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	4413      	add	r3, r2
 800fd66:	2200      	movs	r2, #0
 800fd68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
 800fd70:	7dfa      	ldrb	r2, [r7, #23]
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d3d3      	bcc.n	800fd20 <IntToUnicode+0x18>
  }
}
 800fd78:	bf00      	nop
 800fd7a:	bf00      	nop
 800fd7c:	371c      	adds	r7, #28
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
	...

0800fd88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b0ae      	sub	sp, #184	; 0xb8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	605a      	str	r2, [r3, #4]
 800fd9a:	609a      	str	r2, [r3, #8]
 800fd9c:	60da      	str	r2, [r3, #12]
 800fd9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fda0:	f107 0314 	add.w	r3, r7, #20
 800fda4:	2290      	movs	r2, #144	; 0x90
 800fda6:	2100      	movs	r1, #0
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 fba5 	bl	80104f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fdb6:	d151      	bne.n	800fe5c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fdb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fdbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fdc4:	f107 0314 	add.w	r3, r7, #20
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7f5 fb87 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fdd4:	f7f1 f90a 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdd8:	4b22      	ldr	r3, [pc, #136]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fddc:	4a21      	ldr	r2, [pc, #132]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fdde:	f043 0301 	orr.w	r3, r3, #1
 800fde2:	6313      	str	r3, [r2, #48]	; 0x30
 800fde4:	4b1f      	ldr	r3, [pc, #124]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde8:	f003 0301 	and.w	r3, r3, #1
 800fdec:	613b      	str	r3, [r7, #16]
 800fdee:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fdf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fdf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe04:	2303      	movs	r3, #3
 800fe06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe0a:	230a      	movs	r3, #10
 800fe0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fe14:	4619      	mov	r1, r3
 800fe16:	4814      	ldr	r0, [pc, #80]	; (800fe68 <HAL_PCD_MspInit+0xe0>)
 800fe18:	f7f3 f84c 	bl	8002eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe1c:	4b11      	ldr	r3, [pc, #68]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe20:	4a10      	ldr	r2, [pc, #64]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe26:	6353      	str	r3, [r2, #52]	; 0x34
 800fe28:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe30:	60fb      	str	r3, [r7, #12]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	4b0b      	ldr	r3, [pc, #44]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe38:	4a0a      	ldr	r2, [pc, #40]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe3e:	6453      	str	r3, [r2, #68]	; 0x44
 800fe40:	4b08      	ldr	r3, [pc, #32]	; (800fe64 <HAL_PCD_MspInit+0xdc>)
 800fe42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe48:	60bb      	str	r3, [r7, #8]
 800fe4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	2105      	movs	r1, #5
 800fe50:	2043      	movs	r0, #67	; 0x43
 800fe52:	f7f1 ff7f 	bl	8001d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe56:	2043      	movs	r0, #67	; 0x43
 800fe58:	f7f1 ff98 	bl	8001d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe5c:	bf00      	nop
 800fe5e:	37b8      	adds	r7, #184	; 0xb8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	40023800 	.word	0x40023800
 800fe68:	40020000 	.word	0x40020000

0800fe6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fe80:	4619      	mov	r1, r3
 800fe82:	4610      	mov	r0, r2
 800fe84:	f7fb fab1 	bl	800b3ea <USBD_LL_SetupStage>
}
 800fe88:	bf00      	nop
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fea2:	78fa      	ldrb	r2, [r7, #3]
 800fea4:	6879      	ldr	r1, [r7, #4]
 800fea6:	4613      	mov	r3, r2
 800fea8:	00db      	lsls	r3, r3, #3
 800feaa:	4413      	add	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	440b      	add	r3, r1
 800feb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	78fb      	ldrb	r3, [r7, #3]
 800feb8:	4619      	mov	r1, r3
 800feba:	f7fb faeb 	bl	800b494 <USBD_LL_DataOutStage>
}
 800febe:	bf00      	nop
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b082      	sub	sp, #8
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	460b      	mov	r3, r1
 800fed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fed8:	78fa      	ldrb	r2, [r7, #3]
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	4613      	mov	r3, r2
 800fede:	00db      	lsls	r3, r3, #3
 800fee0:	4413      	add	r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	440b      	add	r3, r1
 800fee6:	334c      	adds	r3, #76	; 0x4c
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	78fb      	ldrb	r3, [r7, #3]
 800feec:	4619      	mov	r1, r3
 800feee:	f7fb fb84 	bl	800b5fa <USBD_LL_DataInStage>
}
 800fef2:	bf00      	nop
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fb fcb8 	bl	800b87e <USBD_LL_SOF>
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b084      	sub	sp, #16
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d102      	bne.n	800ff30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	73fb      	strb	r3, [r7, #15]
 800ff2e:	e008      	b.n	800ff42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d102      	bne.n	800ff3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	73fb      	strb	r3, [r7, #15]
 800ff3c:	e001      	b.n	800ff42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ff3e:	f7f1 f855 	bl	8000fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff48:	7bfa      	ldrb	r2, [r7, #15]
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fb fc58 	bl	800b802 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fb fc00 	bl	800b75e <USBD_LL_Reset>
}
 800ff5e:	bf00      	nop
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
	...

0800ff68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fb fc53 	bl	800b822 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	6812      	ldr	r2, [r2, #0]
 800ff8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff8e:	f043 0301 	orr.w	r3, r3, #1
 800ff92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a1b      	ldr	r3, [r3, #32]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d005      	beq.n	800ffa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff9c:	4b04      	ldr	r3, [pc, #16]	; (800ffb0 <HAL_PCD_SuspendCallback+0x48>)
 800ff9e:	691b      	ldr	r3, [r3, #16]
 800ffa0:	4a03      	ldr	r2, [pc, #12]	; (800ffb0 <HAL_PCD_SuspendCallback+0x48>)
 800ffa2:	f043 0306 	orr.w	r3, r3, #6
 800ffa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	e000ed00 	.word	0xe000ed00

0800ffb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fb fc43 	bl	800b84e <USBD_LL_Resume>
}
 800ffc8:	bf00      	nop
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	460b      	mov	r3, r1
 800ffda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ffe2:	78fa      	ldrb	r2, [r7, #3]
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fb fc9b 	bl	800b922 <USBD_LL_IsoOUTIncomplete>
}
 800ffec:	bf00      	nop
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010006:	78fa      	ldrb	r2, [r7, #3]
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f7fb fc57 	bl	800b8be <USBD_LL_IsoINIncomplete>
}
 8010010:	bf00      	nop
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb fcad 	bl	800b986 <USBD_LL_DevConnected>
}
 801002c:	bf00      	nop
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010042:	4618      	mov	r0, r3
 8010044:	f7fb fcaa 	bl	800b99c <USBD_LL_DevDisconnected>
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d13c      	bne.n	80100da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010060:	4a20      	ldr	r2, [pc, #128]	; (80100e4 <USBD_LL_Init+0x94>)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4a1e      	ldr	r2, [pc, #120]	; (80100e4 <USBD_LL_Init+0x94>)
 801006c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010070:	4b1c      	ldr	r3, [pc, #112]	; (80100e4 <USBD_LL_Init+0x94>)
 8010072:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010078:	4b1a      	ldr	r3, [pc, #104]	; (80100e4 <USBD_LL_Init+0x94>)
 801007a:	2206      	movs	r2, #6
 801007c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801007e:	4b19      	ldr	r3, [pc, #100]	; (80100e4 <USBD_LL_Init+0x94>)
 8010080:	2202      	movs	r2, #2
 8010082:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010084:	4b17      	ldr	r3, [pc, #92]	; (80100e4 <USBD_LL_Init+0x94>)
 8010086:	2200      	movs	r2, #0
 8010088:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801008a:	4b16      	ldr	r3, [pc, #88]	; (80100e4 <USBD_LL_Init+0x94>)
 801008c:	2202      	movs	r2, #2
 801008e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010090:	4b14      	ldr	r3, [pc, #80]	; (80100e4 <USBD_LL_Init+0x94>)
 8010092:	2200      	movs	r2, #0
 8010094:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010096:	4b13      	ldr	r3, [pc, #76]	; (80100e4 <USBD_LL_Init+0x94>)
 8010098:	2200      	movs	r2, #0
 801009a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801009c:	4b11      	ldr	r3, [pc, #68]	; (80100e4 <USBD_LL_Init+0x94>)
 801009e:	2200      	movs	r2, #0
 80100a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100a2:	4b10      	ldr	r3, [pc, #64]	; (80100e4 <USBD_LL_Init+0x94>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80100a8:	4b0e      	ldr	r3, [pc, #56]	; (80100e4 <USBD_LL_Init+0x94>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80100ae:	480d      	ldr	r0, [pc, #52]	; (80100e4 <USBD_LL_Init+0x94>)
 80100b0:	f7f3 fa05 	bl	80034be <HAL_PCD_Init>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80100ba:	f7f0 ff97 	bl	8000fec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80100be:	2180      	movs	r1, #128	; 0x80
 80100c0:	4808      	ldr	r0, [pc, #32]	; (80100e4 <USBD_LL_Init+0x94>)
 80100c2:	f7f4 fc80 	bl	80049c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80100c6:	2240      	movs	r2, #64	; 0x40
 80100c8:	2100      	movs	r1, #0
 80100ca:	4806      	ldr	r0, [pc, #24]	; (80100e4 <USBD_LL_Init+0x94>)
 80100cc:	f7f4 fc34 	bl	8004938 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80100d0:	2280      	movs	r2, #128	; 0x80
 80100d2:	2101      	movs	r1, #1
 80100d4:	4803      	ldr	r0, [pc, #12]	; (80100e4 <USBD_LL_Init+0x94>)
 80100d6:	f7f4 fc2f 	bl	8004938 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	20006cb0 	.word	0x20006cb0

080100e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f4:	2300      	movs	r3, #0
 80100f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f3 fb01 	bl	8003706 <HAL_PCD_Start>
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010108:	7bfb      	ldrb	r3, [r7, #15]
 801010a:	4618      	mov	r0, r3
 801010c:	f000 f97e 	bl	801040c <USBD_Get_USB_Status>
 8010110:	4603      	mov	r3, r0
 8010112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010114:	7bbb      	ldrb	r3, [r7, #14]
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b084      	sub	sp, #16
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	4608      	mov	r0, r1
 8010128:	4611      	mov	r1, r2
 801012a:	461a      	mov	r2, r3
 801012c:	4603      	mov	r3, r0
 801012e:	70fb      	strb	r3, [r7, #3]
 8010130:	460b      	mov	r3, r1
 8010132:	70bb      	strb	r3, [r7, #2]
 8010134:	4613      	mov	r3, r2
 8010136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010146:	78bb      	ldrb	r3, [r7, #2]
 8010148:	883a      	ldrh	r2, [r7, #0]
 801014a:	78f9      	ldrb	r1, [r7, #3]
 801014c:	f7f3 ffee 	bl	800412c <HAL_PCD_EP_Open>
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	4618      	mov	r0, r3
 8010158:	f000 f958 	bl	801040c <USBD_Get_USB_Status>
 801015c:	4603      	mov	r3, r0
 801015e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010160:	7bbb      	ldrb	r3, [r7, #14]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b084      	sub	sp, #16
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	460b      	mov	r3, r1
 8010174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010184:	78fa      	ldrb	r2, [r7, #3]
 8010186:	4611      	mov	r1, r2
 8010188:	4618      	mov	r0, r3
 801018a:	f7f4 f837 	bl	80041fc <HAL_PCD_EP_Close>
 801018e:	4603      	mov	r3, r0
 8010190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	4618      	mov	r0, r3
 8010196:	f000 f939 	bl	801040c <USBD_Get_USB_Status>
 801019a:	4603      	mov	r3, r0
 801019c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801019e:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	460b      	mov	r3, r1
 80101b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101b4:	2300      	movs	r3, #0
 80101b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101c2:	78fa      	ldrb	r2, [r7, #3]
 80101c4:	4611      	mov	r1, r2
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7f4 f90f 	bl	80043ea <HAL_PCD_EP_SetStall>
 80101cc:	4603      	mov	r3, r0
 80101ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 f91a 	bl	801040c <USBD_Get_USB_Status>
 80101d8:	4603      	mov	r3, r0
 80101da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b084      	sub	sp, #16
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	460b      	mov	r3, r1
 80101f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101f2:	2300      	movs	r3, #0
 80101f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101f6:	2300      	movs	r3, #0
 80101f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010200:	78fa      	ldrb	r2, [r7, #3]
 8010202:	4611      	mov	r1, r2
 8010204:	4618      	mov	r0, r3
 8010206:	f7f4 f954 	bl	80044b2 <HAL_PCD_EP_ClrStall>
 801020a:	4603      	mov	r3, r0
 801020c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801020e:	7bfb      	ldrb	r3, [r7, #15]
 8010210:	4618      	mov	r0, r3
 8010212:	f000 f8fb 	bl	801040c <USBD_Get_USB_Status>
 8010216:	4603      	mov	r3, r0
 8010218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801021a:	7bbb      	ldrb	r3, [r7, #14]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	460b      	mov	r3, r1
 801022e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801023c:	2b00      	cmp	r3, #0
 801023e:	da0b      	bge.n	8010258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010246:	68f9      	ldr	r1, [r7, #12]
 8010248:	4613      	mov	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	4413      	add	r3, r2
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	440b      	add	r3, r1
 8010252:	333e      	adds	r3, #62	; 0x3e
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	e00b      	b.n	8010270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010258:	78fb      	ldrb	r3, [r7, #3]
 801025a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801025e:	68f9      	ldr	r1, [r7, #12]
 8010260:	4613      	mov	r3, r2
 8010262:	00db      	lsls	r3, r3, #3
 8010264:	4413      	add	r3, r2
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	440b      	add	r3, r1
 801026a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801026e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010270:	4618      	mov	r0, r3
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	460b      	mov	r3, r1
 8010286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801028c:	2300      	movs	r3, #0
 801028e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010296:	78fa      	ldrb	r2, [r7, #3]
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7f3 ff21 	bl	80040e2 <HAL_PCD_SetAddress>
 80102a0:	4603      	mov	r3, r0
 80102a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102a4:	7bfb      	ldrb	r3, [r7, #15]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f000 f8b0 	bl	801040c <USBD_Get_USB_Status>
 80102ac:	4603      	mov	r3, r0
 80102ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}

080102ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b086      	sub	sp, #24
 80102be:	af00      	add	r7, sp, #0
 80102c0:	60f8      	str	r0, [r7, #12]
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	603b      	str	r3, [r7, #0]
 80102c6:	460b      	mov	r3, r1
 80102c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80102d8:	7af9      	ldrb	r1, [r7, #11]
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	f7f4 f83a 	bl	8004356 <HAL_PCD_EP_Transmit>
 80102e2:	4603      	mov	r3, r0
 80102e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102e6:	7dfb      	ldrb	r3, [r7, #23]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f000 f88f 	bl	801040c <USBD_Get_USB_Status>
 80102ee:	4603      	mov	r3, r0
 80102f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80102f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3718      	adds	r7, #24
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	607a      	str	r2, [r7, #4]
 8010306:	603b      	str	r3, [r7, #0]
 8010308:	460b      	mov	r3, r1
 801030a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801031a:	7af9      	ldrb	r1, [r7, #11]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	f7f3 ffb6 	bl	8004290 <HAL_PCD_EP_Receive>
 8010324:	4603      	mov	r3, r0
 8010326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010328:	7dfb      	ldrb	r3, [r7, #23]
 801032a:	4618      	mov	r0, r3
 801032c:	f000 f86e 	bl	801040c <USBD_Get_USB_Status>
 8010330:	4603      	mov	r3, r0
 8010332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010334:	7dbb      	ldrb	r3, [r7, #22]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b082      	sub	sp, #8
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
 8010346:	460b      	mov	r3, r1
 8010348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010350:	78fa      	ldrb	r2, [r7, #3]
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f7f3 ffe6 	bl	8004326 <HAL_PCD_EP_GetRxCount>
 801035a:	4603      	mov	r3, r0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010370:	78fb      	ldrb	r3, [r7, #3]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <HAL_PCDEx_LPM_Callback+0x18>
 8010376:	2b01      	cmp	r3, #1
 8010378:	d01f      	beq.n	80103ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801037a:	e03b      	b.n	80103f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6a1b      	ldr	r3, [r3, #32]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d007      	beq.n	8010394 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010384:	f000 f83c 	bl	8010400 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010388:	4b1c      	ldr	r3, [pc, #112]	; (80103fc <HAL_PCDEx_LPM_Callback+0x98>)
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	4a1b      	ldr	r2, [pc, #108]	; (80103fc <HAL_PCDEx_LPM_Callback+0x98>)
 801038e:	f023 0306 	bic.w	r3, r3, #6
 8010392:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6812      	ldr	r2, [r2, #0]
 80103a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103a6:	f023 0301 	bic.w	r3, r3, #1
 80103aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb fa4b 	bl	800b84e <USBD_LL_Resume>
    break;
 80103b8:	e01c      	b.n	80103f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	6812      	ldr	r2, [r2, #0]
 80103c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103cc:	f043 0301 	orr.w	r3, r3, #1
 80103d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fb fa22 	bl	800b822 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d005      	beq.n	80103f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103e6:	4b05      	ldr	r3, [pc, #20]	; (80103fc <HAL_PCDEx_LPM_Callback+0x98>)
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	4a04      	ldr	r2, [pc, #16]	; (80103fc <HAL_PCDEx_LPM_Callback+0x98>)
 80103ec:	f043 0306 	orr.w	r3, r3, #6
 80103f0:	6113      	str	r3, [r2, #16]
    break;
 80103f2:	bf00      	nop
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	e000ed00 	.word	0xe000ed00

08010400 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010404:	f7f0 f982 	bl	800070c <SystemClock_Config>
}
 8010408:	bf00      	nop
 801040a:	bd80      	pop	{r7, pc}

0801040c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	4603      	mov	r3, r0
 8010414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010416:	2300      	movs	r3, #0
 8010418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801041a:	79fb      	ldrb	r3, [r7, #7]
 801041c:	2b03      	cmp	r3, #3
 801041e:	d817      	bhi.n	8010450 <USBD_Get_USB_Status+0x44>
 8010420:	a201      	add	r2, pc, #4	; (adr r2, 8010428 <USBD_Get_USB_Status+0x1c>)
 8010422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010426:	bf00      	nop
 8010428:	08010439 	.word	0x08010439
 801042c:	0801043f 	.word	0x0801043f
 8010430:	08010445 	.word	0x08010445
 8010434:	0801044b 	.word	0x0801044b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010438:	2300      	movs	r3, #0
 801043a:	73fb      	strb	r3, [r7, #15]
    break;
 801043c:	e00b      	b.n	8010456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801043e:	2303      	movs	r3, #3
 8010440:	73fb      	strb	r3, [r7, #15]
    break;
 8010442:	e008      	b.n	8010456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010444:	2301      	movs	r3, #1
 8010446:	73fb      	strb	r3, [r7, #15]
    break;
 8010448:	e005      	b.n	8010456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801044a:	2303      	movs	r3, #3
 801044c:	73fb      	strb	r3, [r7, #15]
    break;
 801044e:	e002      	b.n	8010456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010450:	2303      	movs	r3, #3
 8010452:	73fb      	strb	r3, [r7, #15]
    break;
 8010454:	bf00      	nop
  }
  return usb_status;
 8010456:	7bfb      	ldrb	r3, [r7, #15]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3714      	adds	r7, #20
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <__errno>:
 8010464:	4b01      	ldr	r3, [pc, #4]	; (801046c <__errno+0x8>)
 8010466:	6818      	ldr	r0, [r3, #0]
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	20000190 	.word	0x20000190

08010470 <__libc_init_array>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4d0d      	ldr	r5, [pc, #52]	; (80104a8 <__libc_init_array+0x38>)
 8010474:	4c0d      	ldr	r4, [pc, #52]	; (80104ac <__libc_init_array+0x3c>)
 8010476:	1b64      	subs	r4, r4, r5
 8010478:	10a4      	asrs	r4, r4, #2
 801047a:	2600      	movs	r6, #0
 801047c:	42a6      	cmp	r6, r4
 801047e:	d109      	bne.n	8010494 <__libc_init_array+0x24>
 8010480:	4d0b      	ldr	r5, [pc, #44]	; (80104b0 <__libc_init_array+0x40>)
 8010482:	4c0c      	ldr	r4, [pc, #48]	; (80104b4 <__libc_init_array+0x44>)
 8010484:	f000 f9a6 	bl	80107d4 <_init>
 8010488:	1b64      	subs	r4, r4, r5
 801048a:	10a4      	asrs	r4, r4, #2
 801048c:	2600      	movs	r6, #0
 801048e:	42a6      	cmp	r6, r4
 8010490:	d105      	bne.n	801049e <__libc_init_array+0x2e>
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	f855 3b04 	ldr.w	r3, [r5], #4
 8010498:	4798      	blx	r3
 801049a:	3601      	adds	r6, #1
 801049c:	e7ee      	b.n	801047c <__libc_init_array+0xc>
 801049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a2:	4798      	blx	r3
 80104a4:	3601      	adds	r6, #1
 80104a6:	e7f2      	b.n	801048e <__libc_init_array+0x1e>
 80104a8:	080109cc 	.word	0x080109cc
 80104ac:	080109cc 	.word	0x080109cc
 80104b0:	080109cc 	.word	0x080109cc
 80104b4:	080109d0 	.word	0x080109d0

080104b8 <__retarget_lock_acquire_recursive>:
 80104b8:	4770      	bx	lr

080104ba <__retarget_lock_release_recursive>:
 80104ba:	4770      	bx	lr

080104bc <malloc>:
 80104bc:	4b02      	ldr	r3, [pc, #8]	; (80104c8 <malloc+0xc>)
 80104be:	4601      	mov	r1, r0
 80104c0:	6818      	ldr	r0, [r3, #0]
 80104c2:	f000 b88d 	b.w	80105e0 <_malloc_r>
 80104c6:	bf00      	nop
 80104c8:	20000190 	.word	0x20000190

080104cc <free>:
 80104cc:	4b02      	ldr	r3, [pc, #8]	; (80104d8 <free+0xc>)
 80104ce:	4601      	mov	r1, r0
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	f000 b819 	b.w	8010508 <_free_r>
 80104d6:	bf00      	nop
 80104d8:	20000190 	.word	0x20000190

080104dc <memcpy>:
 80104dc:	440a      	add	r2, r1
 80104de:	4291      	cmp	r1, r2
 80104e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80104e4:	d100      	bne.n	80104e8 <memcpy+0xc>
 80104e6:	4770      	bx	lr
 80104e8:	b510      	push	{r4, lr}
 80104ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104f2:	4291      	cmp	r1, r2
 80104f4:	d1f9      	bne.n	80104ea <memcpy+0xe>
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <memset>:
 80104f8:	4402      	add	r2, r0
 80104fa:	4603      	mov	r3, r0
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d100      	bne.n	8010502 <memset+0xa>
 8010500:	4770      	bx	lr
 8010502:	f803 1b01 	strb.w	r1, [r3], #1
 8010506:	e7f9      	b.n	80104fc <memset+0x4>

08010508 <_free_r>:
 8010508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801050a:	2900      	cmp	r1, #0
 801050c:	d044      	beq.n	8010598 <_free_r+0x90>
 801050e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010512:	9001      	str	r0, [sp, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	f1a1 0404 	sub.w	r4, r1, #4
 801051a:	bfb8      	it	lt
 801051c:	18e4      	addlt	r4, r4, r3
 801051e:	f000 f94d 	bl	80107bc <__malloc_lock>
 8010522:	4a1e      	ldr	r2, [pc, #120]	; (801059c <_free_r+0x94>)
 8010524:	9801      	ldr	r0, [sp, #4]
 8010526:	6813      	ldr	r3, [r2, #0]
 8010528:	b933      	cbnz	r3, 8010538 <_free_r+0x30>
 801052a:	6063      	str	r3, [r4, #4]
 801052c:	6014      	str	r4, [r2, #0]
 801052e:	b003      	add	sp, #12
 8010530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010534:	f000 b948 	b.w	80107c8 <__malloc_unlock>
 8010538:	42a3      	cmp	r3, r4
 801053a:	d908      	bls.n	801054e <_free_r+0x46>
 801053c:	6825      	ldr	r5, [r4, #0]
 801053e:	1961      	adds	r1, r4, r5
 8010540:	428b      	cmp	r3, r1
 8010542:	bf01      	itttt	eq
 8010544:	6819      	ldreq	r1, [r3, #0]
 8010546:	685b      	ldreq	r3, [r3, #4]
 8010548:	1949      	addeq	r1, r1, r5
 801054a:	6021      	streq	r1, [r4, #0]
 801054c:	e7ed      	b.n	801052a <_free_r+0x22>
 801054e:	461a      	mov	r2, r3
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	b10b      	cbz	r3, 8010558 <_free_r+0x50>
 8010554:	42a3      	cmp	r3, r4
 8010556:	d9fa      	bls.n	801054e <_free_r+0x46>
 8010558:	6811      	ldr	r1, [r2, #0]
 801055a:	1855      	adds	r5, r2, r1
 801055c:	42a5      	cmp	r5, r4
 801055e:	d10b      	bne.n	8010578 <_free_r+0x70>
 8010560:	6824      	ldr	r4, [r4, #0]
 8010562:	4421      	add	r1, r4
 8010564:	1854      	adds	r4, r2, r1
 8010566:	42a3      	cmp	r3, r4
 8010568:	6011      	str	r1, [r2, #0]
 801056a:	d1e0      	bne.n	801052e <_free_r+0x26>
 801056c:	681c      	ldr	r4, [r3, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	6053      	str	r3, [r2, #4]
 8010572:	4421      	add	r1, r4
 8010574:	6011      	str	r1, [r2, #0]
 8010576:	e7da      	b.n	801052e <_free_r+0x26>
 8010578:	d902      	bls.n	8010580 <_free_r+0x78>
 801057a:	230c      	movs	r3, #12
 801057c:	6003      	str	r3, [r0, #0]
 801057e:	e7d6      	b.n	801052e <_free_r+0x26>
 8010580:	6825      	ldr	r5, [r4, #0]
 8010582:	1961      	adds	r1, r4, r5
 8010584:	428b      	cmp	r3, r1
 8010586:	bf04      	itt	eq
 8010588:	6819      	ldreq	r1, [r3, #0]
 801058a:	685b      	ldreq	r3, [r3, #4]
 801058c:	6063      	str	r3, [r4, #4]
 801058e:	bf04      	itt	eq
 8010590:	1949      	addeq	r1, r1, r5
 8010592:	6021      	streq	r1, [r4, #0]
 8010594:	6054      	str	r4, [r2, #4]
 8010596:	e7ca      	b.n	801052e <_free_r+0x26>
 8010598:	b003      	add	sp, #12
 801059a:	bd30      	pop	{r4, r5, pc}
 801059c:	200071bc 	.word	0x200071bc

080105a0 <sbrk_aligned>:
 80105a0:	b570      	push	{r4, r5, r6, lr}
 80105a2:	4e0e      	ldr	r6, [pc, #56]	; (80105dc <sbrk_aligned+0x3c>)
 80105a4:	460c      	mov	r4, r1
 80105a6:	6831      	ldr	r1, [r6, #0]
 80105a8:	4605      	mov	r5, r0
 80105aa:	b911      	cbnz	r1, 80105b2 <sbrk_aligned+0x12>
 80105ac:	f000 f8f6 	bl	801079c <_sbrk_r>
 80105b0:	6030      	str	r0, [r6, #0]
 80105b2:	4621      	mov	r1, r4
 80105b4:	4628      	mov	r0, r5
 80105b6:	f000 f8f1 	bl	801079c <_sbrk_r>
 80105ba:	1c43      	adds	r3, r0, #1
 80105bc:	d00a      	beq.n	80105d4 <sbrk_aligned+0x34>
 80105be:	1cc4      	adds	r4, r0, #3
 80105c0:	f024 0403 	bic.w	r4, r4, #3
 80105c4:	42a0      	cmp	r0, r4
 80105c6:	d007      	beq.n	80105d8 <sbrk_aligned+0x38>
 80105c8:	1a21      	subs	r1, r4, r0
 80105ca:	4628      	mov	r0, r5
 80105cc:	f000 f8e6 	bl	801079c <_sbrk_r>
 80105d0:	3001      	adds	r0, #1
 80105d2:	d101      	bne.n	80105d8 <sbrk_aligned+0x38>
 80105d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80105d8:	4620      	mov	r0, r4
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	200071c0 	.word	0x200071c0

080105e0 <_malloc_r>:
 80105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e4:	1ccd      	adds	r5, r1, #3
 80105e6:	f025 0503 	bic.w	r5, r5, #3
 80105ea:	3508      	adds	r5, #8
 80105ec:	2d0c      	cmp	r5, #12
 80105ee:	bf38      	it	cc
 80105f0:	250c      	movcc	r5, #12
 80105f2:	2d00      	cmp	r5, #0
 80105f4:	4607      	mov	r7, r0
 80105f6:	db01      	blt.n	80105fc <_malloc_r+0x1c>
 80105f8:	42a9      	cmp	r1, r5
 80105fa:	d905      	bls.n	8010608 <_malloc_r+0x28>
 80105fc:	230c      	movs	r3, #12
 80105fe:	603b      	str	r3, [r7, #0]
 8010600:	2600      	movs	r6, #0
 8010602:	4630      	mov	r0, r6
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	4e2e      	ldr	r6, [pc, #184]	; (80106c4 <_malloc_r+0xe4>)
 801060a:	f000 f8d7 	bl	80107bc <__malloc_lock>
 801060e:	6833      	ldr	r3, [r6, #0]
 8010610:	461c      	mov	r4, r3
 8010612:	bb34      	cbnz	r4, 8010662 <_malloc_r+0x82>
 8010614:	4629      	mov	r1, r5
 8010616:	4638      	mov	r0, r7
 8010618:	f7ff ffc2 	bl	80105a0 <sbrk_aligned>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	4604      	mov	r4, r0
 8010620:	d14d      	bne.n	80106be <_malloc_r+0xde>
 8010622:	6834      	ldr	r4, [r6, #0]
 8010624:	4626      	mov	r6, r4
 8010626:	2e00      	cmp	r6, #0
 8010628:	d140      	bne.n	80106ac <_malloc_r+0xcc>
 801062a:	6823      	ldr	r3, [r4, #0]
 801062c:	4631      	mov	r1, r6
 801062e:	4638      	mov	r0, r7
 8010630:	eb04 0803 	add.w	r8, r4, r3
 8010634:	f000 f8b2 	bl	801079c <_sbrk_r>
 8010638:	4580      	cmp	r8, r0
 801063a:	d13a      	bne.n	80106b2 <_malloc_r+0xd2>
 801063c:	6821      	ldr	r1, [r4, #0]
 801063e:	3503      	adds	r5, #3
 8010640:	1a6d      	subs	r5, r5, r1
 8010642:	f025 0503 	bic.w	r5, r5, #3
 8010646:	3508      	adds	r5, #8
 8010648:	2d0c      	cmp	r5, #12
 801064a:	bf38      	it	cc
 801064c:	250c      	movcc	r5, #12
 801064e:	4629      	mov	r1, r5
 8010650:	4638      	mov	r0, r7
 8010652:	f7ff ffa5 	bl	80105a0 <sbrk_aligned>
 8010656:	3001      	adds	r0, #1
 8010658:	d02b      	beq.n	80106b2 <_malloc_r+0xd2>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	442b      	add	r3, r5
 801065e:	6023      	str	r3, [r4, #0]
 8010660:	e00e      	b.n	8010680 <_malloc_r+0xa0>
 8010662:	6822      	ldr	r2, [r4, #0]
 8010664:	1b52      	subs	r2, r2, r5
 8010666:	d41e      	bmi.n	80106a6 <_malloc_r+0xc6>
 8010668:	2a0b      	cmp	r2, #11
 801066a:	d916      	bls.n	801069a <_malloc_r+0xba>
 801066c:	1961      	adds	r1, r4, r5
 801066e:	42a3      	cmp	r3, r4
 8010670:	6025      	str	r5, [r4, #0]
 8010672:	bf18      	it	ne
 8010674:	6059      	strne	r1, [r3, #4]
 8010676:	6863      	ldr	r3, [r4, #4]
 8010678:	bf08      	it	eq
 801067a:	6031      	streq	r1, [r6, #0]
 801067c:	5162      	str	r2, [r4, r5]
 801067e:	604b      	str	r3, [r1, #4]
 8010680:	4638      	mov	r0, r7
 8010682:	f104 060b 	add.w	r6, r4, #11
 8010686:	f000 f89f 	bl	80107c8 <__malloc_unlock>
 801068a:	f026 0607 	bic.w	r6, r6, #7
 801068e:	1d23      	adds	r3, r4, #4
 8010690:	1af2      	subs	r2, r6, r3
 8010692:	d0b6      	beq.n	8010602 <_malloc_r+0x22>
 8010694:	1b9b      	subs	r3, r3, r6
 8010696:	50a3      	str	r3, [r4, r2]
 8010698:	e7b3      	b.n	8010602 <_malloc_r+0x22>
 801069a:	6862      	ldr	r2, [r4, #4]
 801069c:	42a3      	cmp	r3, r4
 801069e:	bf0c      	ite	eq
 80106a0:	6032      	streq	r2, [r6, #0]
 80106a2:	605a      	strne	r2, [r3, #4]
 80106a4:	e7ec      	b.n	8010680 <_malloc_r+0xa0>
 80106a6:	4623      	mov	r3, r4
 80106a8:	6864      	ldr	r4, [r4, #4]
 80106aa:	e7b2      	b.n	8010612 <_malloc_r+0x32>
 80106ac:	4634      	mov	r4, r6
 80106ae:	6876      	ldr	r6, [r6, #4]
 80106b0:	e7b9      	b.n	8010626 <_malloc_r+0x46>
 80106b2:	230c      	movs	r3, #12
 80106b4:	603b      	str	r3, [r7, #0]
 80106b6:	4638      	mov	r0, r7
 80106b8:	f000 f886 	bl	80107c8 <__malloc_unlock>
 80106bc:	e7a1      	b.n	8010602 <_malloc_r+0x22>
 80106be:	6025      	str	r5, [r4, #0]
 80106c0:	e7de      	b.n	8010680 <_malloc_r+0xa0>
 80106c2:	bf00      	nop
 80106c4:	200071bc 	.word	0x200071bc

080106c8 <cleanup_glue>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	460c      	mov	r4, r1
 80106cc:	6809      	ldr	r1, [r1, #0]
 80106ce:	4605      	mov	r5, r0
 80106d0:	b109      	cbz	r1, 80106d6 <cleanup_glue+0xe>
 80106d2:	f7ff fff9 	bl	80106c8 <cleanup_glue>
 80106d6:	4621      	mov	r1, r4
 80106d8:	4628      	mov	r0, r5
 80106da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106de:	f7ff bf13 	b.w	8010508 <_free_r>
	...

080106e4 <_reclaim_reent>:
 80106e4:	4b2c      	ldr	r3, [pc, #176]	; (8010798 <_reclaim_reent+0xb4>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4283      	cmp	r3, r0
 80106ea:	b570      	push	{r4, r5, r6, lr}
 80106ec:	4604      	mov	r4, r0
 80106ee:	d051      	beq.n	8010794 <_reclaim_reent+0xb0>
 80106f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80106f2:	b143      	cbz	r3, 8010706 <_reclaim_reent+0x22>
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d14a      	bne.n	8010790 <_reclaim_reent+0xac>
 80106fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106fc:	6819      	ldr	r1, [r3, #0]
 80106fe:	b111      	cbz	r1, 8010706 <_reclaim_reent+0x22>
 8010700:	4620      	mov	r0, r4
 8010702:	f7ff ff01 	bl	8010508 <_free_r>
 8010706:	6961      	ldr	r1, [r4, #20]
 8010708:	b111      	cbz	r1, 8010710 <_reclaim_reent+0x2c>
 801070a:	4620      	mov	r0, r4
 801070c:	f7ff fefc 	bl	8010508 <_free_r>
 8010710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010712:	b111      	cbz	r1, 801071a <_reclaim_reent+0x36>
 8010714:	4620      	mov	r0, r4
 8010716:	f7ff fef7 	bl	8010508 <_free_r>
 801071a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801071c:	b111      	cbz	r1, 8010724 <_reclaim_reent+0x40>
 801071e:	4620      	mov	r0, r4
 8010720:	f7ff fef2 	bl	8010508 <_free_r>
 8010724:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010726:	b111      	cbz	r1, 801072e <_reclaim_reent+0x4a>
 8010728:	4620      	mov	r0, r4
 801072a:	f7ff feed 	bl	8010508 <_free_r>
 801072e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010730:	b111      	cbz	r1, 8010738 <_reclaim_reent+0x54>
 8010732:	4620      	mov	r0, r4
 8010734:	f7ff fee8 	bl	8010508 <_free_r>
 8010738:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801073a:	b111      	cbz	r1, 8010742 <_reclaim_reent+0x5e>
 801073c:	4620      	mov	r0, r4
 801073e:	f7ff fee3 	bl	8010508 <_free_r>
 8010742:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010744:	b111      	cbz	r1, 801074c <_reclaim_reent+0x68>
 8010746:	4620      	mov	r0, r4
 8010748:	f7ff fede 	bl	8010508 <_free_r>
 801074c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801074e:	b111      	cbz	r1, 8010756 <_reclaim_reent+0x72>
 8010750:	4620      	mov	r0, r4
 8010752:	f7ff fed9 	bl	8010508 <_free_r>
 8010756:	69a3      	ldr	r3, [r4, #24]
 8010758:	b1e3      	cbz	r3, 8010794 <_reclaim_reent+0xb0>
 801075a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801075c:	4620      	mov	r0, r4
 801075e:	4798      	blx	r3
 8010760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010762:	b1b9      	cbz	r1, 8010794 <_reclaim_reent+0xb0>
 8010764:	4620      	mov	r0, r4
 8010766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801076a:	f7ff bfad 	b.w	80106c8 <cleanup_glue>
 801076e:	5949      	ldr	r1, [r1, r5]
 8010770:	b941      	cbnz	r1, 8010784 <_reclaim_reent+0xa0>
 8010772:	3504      	adds	r5, #4
 8010774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010776:	2d80      	cmp	r5, #128	; 0x80
 8010778:	68d9      	ldr	r1, [r3, #12]
 801077a:	d1f8      	bne.n	801076e <_reclaim_reent+0x8a>
 801077c:	4620      	mov	r0, r4
 801077e:	f7ff fec3 	bl	8010508 <_free_r>
 8010782:	e7ba      	b.n	80106fa <_reclaim_reent+0x16>
 8010784:	680e      	ldr	r6, [r1, #0]
 8010786:	4620      	mov	r0, r4
 8010788:	f7ff febe 	bl	8010508 <_free_r>
 801078c:	4631      	mov	r1, r6
 801078e:	e7ef      	b.n	8010770 <_reclaim_reent+0x8c>
 8010790:	2500      	movs	r5, #0
 8010792:	e7ef      	b.n	8010774 <_reclaim_reent+0x90>
 8010794:	bd70      	pop	{r4, r5, r6, pc}
 8010796:	bf00      	nop
 8010798:	20000190 	.word	0x20000190

0801079c <_sbrk_r>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4d06      	ldr	r5, [pc, #24]	; (80107b8 <_sbrk_r+0x1c>)
 80107a0:	2300      	movs	r3, #0
 80107a2:	4604      	mov	r4, r0
 80107a4:	4608      	mov	r0, r1
 80107a6:	602b      	str	r3, [r5, #0]
 80107a8:	f7f1 f854 	bl	8001854 <_sbrk>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	d102      	bne.n	80107b6 <_sbrk_r+0x1a>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	b103      	cbz	r3, 80107b6 <_sbrk_r+0x1a>
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	200071c4 	.word	0x200071c4

080107bc <__malloc_lock>:
 80107bc:	4801      	ldr	r0, [pc, #4]	; (80107c4 <__malloc_lock+0x8>)
 80107be:	f7ff be7b 	b.w	80104b8 <__retarget_lock_acquire_recursive>
 80107c2:	bf00      	nop
 80107c4:	200071b8 	.word	0x200071b8

080107c8 <__malloc_unlock>:
 80107c8:	4801      	ldr	r0, [pc, #4]	; (80107d0 <__malloc_unlock+0x8>)
 80107ca:	f7ff be76 	b.w	80104ba <__retarget_lock_release_recursive>
 80107ce:	bf00      	nop
 80107d0:	200071b8 	.word	0x200071b8

080107d4 <_init>:
 80107d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d6:	bf00      	nop
 80107d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107da:	bc08      	pop	{r3}
 80107dc:	469e      	mov	lr, r3
 80107de:	4770      	bx	lr

080107e0 <_fini>:
 80107e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e2:	bf00      	nop
 80107e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e6:	bc08      	pop	{r3}
 80107e8:	469e      	mov	lr, r3
 80107ea:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f244  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800f444  0800f444  0001f444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f658  0800f658  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f658  0800f658  0001f658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f660  0800f660  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f660  0800f660  0001f660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f664  0800f664  0001f664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800f668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800f7dc  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800f87c  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006dc0  200002b4  0800f91c  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007074  0800f91c  00027074  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000337c8  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000062f3  00000000  00000000  00053aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000026c0  00000000  00000000  00059da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002418  00000000  00000000  0005c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a28d  00000000  00000000  0005e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031204  00000000  00000000  00068b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00119be3  00000000  00000000  00099d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b38ec  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000abdc  00000000  00000000  001b393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f42c 	.word	0x0800f42c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800f42c 	.word	0x0800f42c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006bc:	f7ff ff92 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c0:	f7ff ffb6 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f001 f93a 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f860 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fad4 	bl	8000c78 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006d0:	f000 f8cc 	bl	800086c <MX_CAN1_Init>
  MX_DAC_Init();
 80006d4:	f000 f8fe 	bl	80008d4 <MX_DAC_Init>
  MX_ETH_Init();
 80006d8:	f000 f926 	bl	8000928 <MX_ETH_Init>
  MX_I2C1_Init();
 80006dc:	f000 f972 	bl	80009c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006e0:	f000 f9b0 	bl	8000a44 <MX_SPI1_Init>
  MX_SPI3_Init();
 80006e4:	f000 f9e8 	bl	8000ab8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006e8:	f000 fa20 	bl	8000b2c <MX_TIM1_Init>
  MX_UART7_Init();
 80006ec:	f000 fa94 	bl	8000c18 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f0:	f00a f8ae 	bl	800a850 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 80006f4:	f007 fee8 	bl	80084c8 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <main+0x98>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4815      	ldr	r0, [pc, #84]	; (8000754 <main+0x9c>)
 80006fe:	f00a f911 	bl	800a924 <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <main+0xa0>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <main+0xa4>)
 800070a:	2100      	movs	r1, #0
 800070c:	4814      	ldr	r0, [pc, #80]	; (8000760 <main+0xa8>)
 800070e:	f00a f909 	bl	800a924 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <main+0xac>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <main+0xb0>)
 800071a:	2100      	movs	r1, #0
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <main+0xb4>)
 800071e:	f00a f901 	bl	800a924 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <main+0xb8>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <main+0xbc>)
 800072a:	2100      	movs	r1, #0
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <main+0xc0>)
 800072e:	f00a f8f9 	bl	800a924 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a11      	ldr	r2, [pc, #68]	; (800077c <main+0xc4>)
 8000736:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <main+0xc8>)
 800073a:	2100      	movs	r1, #0
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <main+0xcc>)
 800073e:	f00a f8f1 	bl	800a924 <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <main+0xd0>)
 8000746:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000748:	f00a f8b6 	bl	800a8b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	e7fe      	b.n	800074c <main+0x94>
 800074e:	bf00      	nop
 8000750:	0800f4f4 	.word	0x0800f4f4
 8000754:	08000f05 	.word	0x08000f05
 8000758:	200005e4 	.word	0x200005e4
 800075c:	0800f518 	.word	0x0800f518
 8000760:	08000f19 	.word	0x08000f19
 8000764:	200005e8 	.word	0x200005e8
 8000768:	0800f53c 	.word	0x0800f53c
 800076c:	08000f29 	.word	0x08000f29
 8000770:	200005ec 	.word	0x200005ec
 8000774:	0800f560 	.word	0x0800f560
 8000778:	08000f91 	.word	0x08000f91
 800077c:	200005f0 	.word	0x200005f0
 8000780:	0800f584 	.word	0x0800f584
 8000784:	08000fa1 	.word	0x08000fa1
 8000788:	200005f4 	.word	0x200005f4

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00d ff3e 	bl	800e61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <SystemClock_Config+0xd8>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <SystemClock_Config+0xd8>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <SystemClock_Config+0xd8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <SystemClock_Config+0xdc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a25      	ldr	r2, [pc, #148]	; (8000868 <SystemClock_Config+0xdc>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <SystemClock_Config+0xdc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007fc:	2360      	movs	r3, #96	; 0x60
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fcdf 	bl	80041d4 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fbda 	bl	8000fd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f003 fc88 	bl	8004134 <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800082a:	f000 fbd3 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2103      	movs	r1, #3
 800084a:	4618      	mov	r0, r3
 800084c:	f003 ff70 	bl	8004730 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000856:	f000 fbbd 	bl	8000fd4 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_CAN1_Init+0x60>)
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000874:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_CAN1_Init+0x60>)
 8000878:	2210      	movs	r2, #16
 800087a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_CAN1_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_CAN1_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_CAN1_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_CAN1_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_CAN1_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_CAN1_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_CAN1_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_CAN1_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_CAN1_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_CAN1_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_CAN1_Init+0x60>)
 80008ba:	f001 f899 	bl	80019f0 <HAL_CAN_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fb86 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000308 	.word	0x20000308
 80008d0:	40006400 	.word	0x40006400

080008d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_DAC_Init+0x4c>)
 80008e4:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <MX_DAC_Init+0x50>)
 80008e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_DAC_Init+0x4c>)
 80008ea:	f001 fa5f 	bl	8001dac <HAL_DAC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008f4:	f000 fb6e 	bl	8000fd4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_DAC_Init+0x4c>)
 8000908:	f001 fad6 	bl	8001eb8 <HAL_DAC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000912:	f000 fb5f 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000330 	.word	0x20000330
 8000924:	40007400 	.word	0x40007400

08000928 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_ETH_Init+0x84>)
 800092e:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <MX_ETH_Init+0x88>)
 8000930:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_ETH_Init+0x8c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_ETH_Init+0x8c>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ETH_Init+0x8c>)
 8000940:	22e1      	movs	r2, #225	; 0xe1
 8000942:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_ETH_Init+0x8c>)
 8000946:	2200      	movs	r2, #0
 8000948:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ETH_Init+0x8c>)
 800094c:	2200      	movs	r2, #0
 800094e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_ETH_Init+0x8c>)
 8000952:	2200      	movs	r2, #0
 8000954:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_ETH_Init+0x84>)
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_ETH_Init+0x8c>)
 800095a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_ETH_Init+0x84>)
 800095e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000962:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_ETH_Init+0x84>)
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_ETH_Init+0x90>)
 8000968:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_ETH_Init+0x84>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_ETH_Init+0x94>)
 800096e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_ETH_Init+0x84>)
 8000972:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000976:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_ETH_Init+0x84>)
 800097a:	f001 faf7 	bl	8001f6c <HAL_ETH_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 fb26 	bl	8000fd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000988:	2238      	movs	r2, #56	; 0x38
 800098a:	2100      	movs	r1, #0
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_ETH_Init+0x98>)
 800098e:	f00d fe45 	bl	800e61c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_ETH_Init+0x98>)
 8000994:	2221      	movs	r2, #33	; 0x21
 8000996:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_ETH_Init+0x98>)
 800099a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800099e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_ETH_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000344 	.word	0x20000344
 80009b0:	40028000 	.word	0x40028000
 80009b4:	20000600 	.word	0x20000600
 80009b8:	20000214 	.word	0x20000214
 80009bc:	20000174 	.word	0x20000174
 80009c0:	200002d0 	.word	0x200002d0

080009c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_I2C1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <MX_I2C1_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a00:	f001 ffb8 	bl	8002974 <HAL_I2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 fae3 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a12:	f002 f83f 	bl	8002a94 <HAL_I2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 fada 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a24:	f002 f881 	bl	8002b2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fad1 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200003f4 	.word	0x200003f4
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	20303e5d 	.word	0x20303e5d

08000a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_SPI1_Init+0x70>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI1_Init+0x6c>)
 8000a9e:	f004 fcc7 	bl	8005430 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000aa8:	f000 fa94 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000448 	.word	0x20000448
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <MX_SPI3_Init+0x70>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000ad2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ad6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_SPI3_Init+0x6c>)
 8000b12:	f004 fc8d 	bl	8005430 <HAL_SPI_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000b1c:	f000 fa5a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200004ac 	.word	0x200004ac
 8000b28:	40003c00 	.word	0x40003c00

08000b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <MX_TIM1_Init+0xe8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b84:	4822      	ldr	r0, [pc, #136]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000b86:	f004 fcfe 	bl	8005586 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000b90:	f000 fa20 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000ba2:	f004 ffdb 	bl	8005b5c <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000bac:	f000 fa12 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000bb2:	f004 fdb7 	bl	8005724 <HAL_TIM_IC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bbc:	f000 fa0a 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000bd4:	f005 fb18 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000bde:	f000 f9f9 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_TIM1_Init+0xe4>)
 8000bfa:	f004 ff13 	bl	8005a24 <HAL_TIM_IC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000c04:	f000 f9e6 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000510 	.word	0x20000510
 8000c14:	40010000 	.word	0x40010000

08000c18 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <MX_UART7_Init+0x5c>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_UART7_Init+0x58>)
 8000c5c:	f005 fb80 	bl	8006360 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c66:	f000 f9b5 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000055c 	.word	0x2000055c
 8000c74:	40007800 	.word	0x40007800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	4b95      	ldr	r3, [pc, #596]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a94      	ldr	r2, [pc, #592]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b92      	ldr	r3, [pc, #584]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b8f      	ldr	r3, [pc, #572]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a8e      	ldr	r2, [pc, #568]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b8c      	ldr	r3, [pc, #560]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a88      	ldr	r2, [pc, #544]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b86      	ldr	r3, [pc, #536]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	4b83      	ldr	r3, [pc, #524]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a82      	ldr	r2, [pc, #520]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b80      	ldr	r3, [pc, #512]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b7d      	ldr	r3, [pc, #500]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a7c      	ldr	r2, [pc, #496]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b7a      	ldr	r3, [pc, #488]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b77      	ldr	r3, [pc, #476]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a76      	ldr	r2, [pc, #472]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b74      	ldr	r3, [pc, #464]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a70      	ldr	r2, [pc, #448]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b6b      	ldr	r3, [pc, #428]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a6a      	ldr	r2, [pc, #424]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b68      	ldr	r3, [pc, #416]	; (8000ee4 <MX_GPIO_Init+0x26c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	4865      	ldr	r0, [pc, #404]	; (8000ee8 <MX_GPIO_Init+0x270>)
 8000d54:	f001 fdf4 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000d5e:	4863      	ldr	r0, [pc, #396]	; (8000eec <MX_GPIO_Init+0x274>)
 8000d60:	f001 fdee 	bl	8002940 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210c      	movs	r1, #12
 8000d68:	4861      	ldr	r0, [pc, #388]	; (8000ef0 <MX_GPIO_Init+0x278>)
 8000d6a:	f001 fde9 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000d74:	485f      	ldr	r0, [pc, #380]	; (8000ef4 <MX_GPIO_Init+0x27c>)
 8000d76:	f001 fde3 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	485d      	ldr	r0, [pc, #372]	; (8000ef8 <MX_GPIO_Init+0x280>)
 8000d82:	f001 fddd 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2174      	movs	r1, #116	; 0x74
 8000d8a:	485c      	ldr	r0, [pc, #368]	; (8000efc <MX_GPIO_Init+0x284>)
 8000d8c:	f001 fdd8 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000d90:	f241 0308 	movw	r3, #4104	; 0x1008
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4856      	ldr	r0, [pc, #344]	; (8000f00 <MX_GPIO_Init+0x288>)
 8000da6:	f001 fc07 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000daa:	f248 0305 	movw	r3, #32773	; 0x8005
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	484e      	ldr	r0, [pc, #312]	; (8000ef8 <MX_GPIO_Init+0x280>)
 8000dc0:	f001 fbfa 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4843      	ldr	r0, [pc, #268]	; (8000ee8 <MX_GPIO_Init+0x270>)
 8000ddc:	f001 fbec 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000de0:	2301      	movs	r3, #1
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4840      	ldr	r0, [pc, #256]	; (8000ef4 <MX_GPIO_Init+0x27c>)
 8000df4:	f001 fbe0 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4838      	ldr	r0, [pc, #224]	; (8000eec <MX_GPIO_Init+0x274>)
 8000e0c:	f001 fbd4 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000e10:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e16:	2311      	movs	r3, #17
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4830      	ldr	r0, [pc, #192]	; (8000eec <MX_GPIO_Init+0x274>)
 8000e2a:	f001 fbc5 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e32:	2311      	movs	r3, #17
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <MX_GPIO_Init+0x278>)
 8000e46:	f001 fbb7 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e4a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0x27c>)
 8000e64:	f001 fba8 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481d      	ldr	r0, [pc, #116]	; (8000ef8 <MX_GPIO_Init+0x280>)
 8000e82:	f001 fb99 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4817      	ldr	r0, [pc, #92]	; (8000efc <MX_GPIO_Init+0x284>)
 8000e9e:	f001 fb8b 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000ea2:	2370      	movs	r3, #112	; 0x70
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea6:	2311      	movs	r3, #17
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_GPIO_Init+0x284>)
 8000eba:	f001 fb7d 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_GPIO_Init+0x274>)
 8000ed6:	f001 fb6f 	bl	80025b8 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3738      	adds	r7, #56	; 0x38
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f0c:	f00c fcc6 	bl	800d89c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f009 fdad 	bl	800aa70 <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <StartDefaultTask+0xc>

08000f18 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f009 fda5 	bl	800aa70 <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <StartTask_gateway+0x8>

08000f28 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  int recieve_message[4];

  /* Infinite loop */
  for(;;)
  {
	  if( USB_MSGQ_Rx != NULL )
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <StartTask_controller+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d025      	beq.n	8000f84 <StartTask_controller+0x5c>
	  {
			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <StartTask_controller+0x64>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	f107 011c 	add.w	r1, r7, #28
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	f009 febc 	bl	800acc0 <osMessageQueueGet>
 8000f48:	6238      	str	r0, [r7, #32]
			if (status == osOK && sizeof(msg.Buf) == 4 )
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d119      	bne.n	8000f84 <StartTask_controller+0x5c>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
 8000f54:	e00e      	b.n	8000f74 <StartTask_controller+0x4c>
				{
					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 8000f56:	f107 021c 	add.w	r2, r7, #28
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	3328      	adds	r3, #40	; 0x28
 8000f68:	443b      	add	r3, r7
 8000f6a:	f843 2c1c 	str.w	r2, [r3, #-28]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d9ed      	bls.n	8000f56 <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 faea 	bl	8008558 <HiL_controller_read_message>
			}
	  }


	  osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f009 fd73 	bl	800aa70 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000f8a:	e7d1      	b.n	8000f30 <StartTask_controller+0x8>
 8000f8c:	200005f8 	.word	0x200005f8

08000f90 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f009 fd69 	bl	800aa70 <osDelay>
 8000f9e:	e7fb      	b.n	8000f98 <StartTask_SHT20+0x8>

08000fa0 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f009 fd61 	bl	800aa70 <osDelay>
 8000fae:	e7fb      	b.n	8000fa8 <StartTask_74HC595D+0x8>

08000fb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fc2:	f000 fcd1 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40001000 	.word	0x40001000

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	210f      	movs	r1, #15
 800101a:	f06f 0001 	mvn.w	r0, #1
 800101e:	f000 fe9b 	bl	8001d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_CAN_MspInit+0x7c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d127      	bne.n	80010a2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_CAN_MspInit+0x80>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8001082:	2303      	movs	r3, #3
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001092:	2309      	movs	r3, #9
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_CAN_MspInit+0x84>)
 800109e:	f001 fa8b 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40006400 	.word	0x40006400
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020c00 	.word	0x40020c00

080010b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_DAC_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_DAC_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <HAL_DAC_MspInit+0x88>)
 80010e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_DAC_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_DAC_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_DAC_MspInit+0x88>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_DAC_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 800110a:	2310      	movs	r3, #16
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_DAC_MspInit+0x8c>)
 800111e:	f001 fa4b 	bl	80025b8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	210f      	movs	r1, #15
 8001126:	2036      	movs	r0, #54	; 0x36
 8001128:	f000 fe16 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800112c:	2036      	movs	r0, #54	; 0x36
 800112e:	f000 fe2f 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40007400 	.word	0x40007400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_ETH_MspInit+0x158>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f040 8096 	bne.w	8001298 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 8001172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
 8001178:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 800118a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a34      	ldr	r2, [pc, #208]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 8001202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_ETH_MspInit+0x15c>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001214:	2332      	movs	r3, #50	; 0x32
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001224:	230b      	movs	r3, #11
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	481e      	ldr	r0, [pc, #120]	; (80012a8 <HAL_ETH_MspInit+0x160>)
 8001230:	f001 f9c2 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001234:	2386      	movs	r3, #134	; 0x86
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <HAL_ETH_MspInit+0x164>)
 8001250:	f001 f9b2 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001266:	230b      	movs	r3, #11
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	480f      	ldr	r0, [pc, #60]	; (80012b0 <HAL_ETH_MspInit+0x168>)
 8001272:	f001 f9a1 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001276:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001288:	230b      	movs	r3, #11
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <HAL_ETH_MspInit+0x16c>)
 8001294:	f001 f990 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40028000 	.word	0x40028000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ae      	sub	sp, #184	; 0xb8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2290      	movs	r2, #144	; 0x90
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00d f99f 	bl	800e61c <memset>
  if(hi2c->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <HAL_I2C_MspInit+0xb4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d13c      	bne.n	8001362 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fc72 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001302:	f7ff fe67 	bl	8000fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 800131e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001338:	2304      	movs	r3, #4
 800133a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_I2C_MspInit+0xbc>)
 8001346:	f001 f937 	bl	80025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	37b8      	adds	r7, #184	; 0xb8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_SPI_MspInit+0x148>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d144      	bne.n	8001424 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a43      	ldr	r2, [pc, #268]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f2:	2305      	movs	r3, #5
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4832      	ldr	r0, [pc, #200]	; (80014c8 <HAL_SPI_MspInit+0x150>)
 80013fe:	f001 f8db 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001402:	2308      	movs	r3, #8
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <HAL_SPI_MspInit+0x154>)
 800141e:	f001 f8cb 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001422:	e049      	b.n	80014b8 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_SPI_MspInit+0x158>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d144      	bne.n	80014b8 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_SPI_MspInit+0x14c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001476:	2304      	movs	r3, #4
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001486:	2307      	movs	r3, #7
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <HAL_SPI_MspInit+0x154>)
 8001492:	f001 f891 	bl	80025b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014a8:	2306      	movs	r3, #6
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <HAL_SPI_MspInit+0x15c>)
 80014b4:	f001 f880 	bl	80025b8 <HAL_GPIO_Init>
}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	; 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013000 	.word	0x40013000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40003c00 	.word	0x40003c00
 80014d4:	40020800 	.word	0x40020800

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d128      	bne.n	800154c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800153c:	2301      	movs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_TIM_Base_MspInit+0x84>)
 8001548:	f001 f836 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ae      	sub	sp, #184	; 0xb8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2290      	movs	r2, #144	; 0x90
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00d f84b 	bl	800e61c <memset>
  if(huart->Instance==UART7)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <HAL_UART_MspInit+0xb4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d13c      	bne.n	800160a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001596:	2300      	movs	r3, #0
 8001598:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fb1e 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015aa:	f7ff fd13 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0xb8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80015de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80015f8:	2308      	movs	r3, #8
 80015fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0xbc>)
 8001606:	f000 ffd7 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	37b8      	adds	r7, #184	; 0xb8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40007800 	.word	0x40007800
 8001618:	40023800 	.word	0x40023800
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_InitTick+0xe0>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a32      	ldr	r2, [pc, #200]	; (8001700 <HAL_InitTick+0xe0>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_InitTick+0xe0>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fa92 	bl	8004b7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001662:	f003 fa63 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 8001666:	6378      	str	r0, [r7, #52]	; 0x34
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800166a:	f003 fa5f 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_InitTick+0xe4>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_InitTick+0xe8>)
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_InitTick+0xec>)
 8001686:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_InitTick+0xe8>)
 800168a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_InitTick+0xe8>)
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_InitTick+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_InitTick+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_InitTick+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016a8:	4817      	ldr	r0, [pc, #92]	; (8001708 <HAL_InitTick+0xe8>)
 80016aa:	f003 ff6c 	bl	8005586 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11b      	bne.n	80016f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <HAL_InitTick+0xe8>)
 80016be:	f003 ffb9 	bl	8005634 <HAL_TIM_Base_Start_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d0:	2036      	movs	r0, #54	; 0x36
 80016d2:	f000 fb5d 	bl	8001d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d808      	bhi.n	80016ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2036      	movs	r0, #54	; 0x36
 80016e2:	f000 fb39 	bl	8001d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_InitTick+0xf0>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e002      	b.n	80016f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3738      	adds	r7, #56	; 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	20000608 	.word	0x20000608
 800170c:	40001000 	.word	0x40001000
 8001710:	20000004 	.word	0x20000004

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <TIM6_DAC_IRQHandler+0x20>)
 8001746:	791b      	ldrb	r3, [r3, #4]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800174e:	4804      	ldr	r0, [pc, #16]	; (8001760 <TIM6_DAC_IRQHandler+0x20>)
 8001750:	f000 fb4e 	bl	8001df0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <TIM6_DAC_IRQHandler+0x24>)
 8001756:	f004 f846 	bl	80057e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000330 	.word	0x20000330
 8001764:	20000608 	.word	0x20000608

08001768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <OTG_FS_IRQHandler+0x10>)
 800176e:	f001 fb6e 	bl	8002e4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20006b5c 	.word	0x20006b5c

0800177c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00a      	b.n	80017a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800178e:	f3af 8000 	nop.w
 8001792:	4601      	mov	r1, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf0      	blt.n	800178e <_read+0x12>
	}

return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e009      	b.n	80017dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf1      	blt.n	80017c8 <_write+0x12>
	}
	return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_close>:

int _close(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001816:	605a      	str	r2, [r3, #4]
	return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_isatty>:

int _isatty(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f00c fd86 	bl	800e398 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20080000 	.word	0x20080000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000654 	.word	0x20000654
 80018c0:	20007078 	.word	0x20007078

080018c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f00c fe3b 	bl	800e590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7fe fecd 	bl	80006b8 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800192c:	0800f668 	.word	0x0800f668
  ldr r2, =_sbss
 8001930:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001934:	20007074 	.word	0x20007074

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x28>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x28>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f9f8 	bl	8001d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f7ff fe64 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fb42 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000658 	.word	0x20000658

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000658 	.word	0x20000658

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0ed      	b.n	8001bde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fb0e 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff ffb4 	bl	8001990 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	e012      	b.n	8001a52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a2c:	f7ff ffb0 	bl	8001990 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d90b      	bls.n	8001a52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2205      	movs	r2, #5
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0c5      	b.n	8001bde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0e5      	beq.n	8001a2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0202 	bic.w	r2, r2, #2
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a70:	f7ff ff8e 	bl	8001990 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a76:	e012      	b.n	8001a9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a78:	f7ff ff8a 	bl	8001990 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d90b      	bls.n	8001a9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e09f      	b.n	8001bde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e5      	bne.n	8001a78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d108      	bne.n	8001ac6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7e5b      	ldrb	r3, [r3, #25]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e9b      	ldrb	r3, [r3, #26]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0220 	bic.w	r2, r2, #32
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7edb      	ldrb	r3, [r3, #27]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0210 	bic.w	r2, r2, #16
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e007      	b.n	8001b54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0210 	orr.w	r2, r2, #16
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7f1b      	ldrb	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d108      	bne.n	8001b6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0208 	orr.w	r2, r2, #8
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0208 	bic.w	r2, r2, #8
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7f5b      	ldrb	r3, [r3, #29]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0204 	orr.w	r2, r2, #4
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0204 	bic.w	r2, r2, #4
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	ea42 0103 	orr.w	r1, r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <__NVIC_SetPriorityGrouping>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <__NVIC_SetPriorityGrouping+0x40>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x40>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00
 8001c2c:	05fa0000 	.word	0x05fa0000

08001c30 <__NVIC_GetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff4c 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6a:	f7ff ff61 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff ffb1 	bl	8001cdc <NVIC_EncodePriority>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff80 	bl	8001c88 <__NVIC_SetPriority>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff54 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e014      	b.n	8001de8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff f972 	bl	80010b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e06:	d120      	bne.n	8001e4a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d118      	bne.n	8001e4a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e42:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f82d 	bl	8001ea4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e58:	d120      	bne.n	8001e9c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d118      	bne.n	8001e9c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f043 0202 	orr.w	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001e94:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f85d 	bl	8001f56 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	795b      	ldrb	r3, [r3, #5]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_DAC_ConfigChannel+0x18>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e03c      	b.n	8001f4a <HAL_DAC_ConfigChannel+0x92>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	22c0      	movs	r2, #192	; 0xc0
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06a      	b.n	8002054 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2223      	movs	r2, #35	; 0x23
 8001f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff f8d9 	bl	8001148 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_ETH_Init+0xf0>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_ETH_Init+0xf0>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_ETH_Init+0xf0>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_ETH_Init+0xf4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <HAL_ETH_Init+0xf4>)
 8001fb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fb8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_ETH_Init+0xf4>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4927      	ldr	r1, [pc, #156]	; (8002060 <HAL_ETH_Init+0xf4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_ETH_Init+0xf4>)
 8001fca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe4:	f7ff fcd4 	bl	8001990 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fea:	e011      	b.n	8002010 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fec:	f7ff fcd0 	bl	8001990 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ffa:	d909      	bls.n	8002010 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2204      	movs	r2, #4
 8002000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	22e0      	movs	r2, #224	; 0xe0
 8002008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e021      	b.n	8002054 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e4      	bne.n	8001fec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f958 	bl	80022d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9ff 	bl	800242c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa55 	bl	80024de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	461a      	mov	r2, r3
 800203a:	2100      	movs	r1, #0
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f9bd 	bl	80023bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2210      	movs	r2, #16
 800204e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800

08002064 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <ETH_SetMACConfig+0x15c>)
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	7c1b      	ldrb	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <ETH_SetMACConfig+0x28>
 8002086:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800208a:	e000      	b.n	800208e <ETH_SetMACConfig+0x2a>
 800208c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	7c5b      	ldrb	r3, [r3, #17]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <ETH_SetMACConfig+0x38>
 8002096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209a:	e000      	b.n	800209e <ETH_SetMACConfig+0x3a>
 800209c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800209e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7fdb      	ldrb	r3, [r3, #31]
 80020aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	7f92      	ldrb	r2, [r2, #30]
 80020b8:	2a00      	cmp	r2, #0
 80020ba:	d102      	bne.n	80020c2 <ETH_SetMACConfig+0x5e>
 80020bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c0:	e000      	b.n	80020c4 <ETH_SetMACConfig+0x60>
 80020c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80020c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	7f1b      	ldrb	r3, [r3, #28]
 80020ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d102      	bne.n	80020ec <ETH_SetMACConfig+0x88>
 80020e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ea:	e000      	b.n	80020ee <ETH_SetMACConfig+0x8a>
 80020ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	7bdb      	ldrb	r3, [r3, #15]
 80020f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002104:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002106:	4313      	orrs	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff fc42 	bl	80019a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	f64f 7341 	movw	r3, #65345	; 0xff41
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002142:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800214a:	2a00      	cmp	r2, #0
 800214c:	d101      	bne.n	8002152 <ETH_SetMACConfig+0xee>
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	e000      	b.n	8002154 <ETH_SetMACConfig+0xf0>
 8002152:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002154:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800215a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002162:	2a01      	cmp	r2, #1
 8002164:	d101      	bne.n	800216a <ETH_SetMACConfig+0x106>
 8002166:	2208      	movs	r2, #8
 8002168:	e000      	b.n	800216c <ETH_SetMACConfig+0x108>
 800216a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800216c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002174:	2a01      	cmp	r2, #1
 8002176:	d101      	bne.n	800217c <ETH_SetMACConfig+0x118>
 8002178:	2204      	movs	r2, #4
 800217a:	e000      	b.n	800217e <ETH_SetMACConfig+0x11a>
 800217c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800217e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002186:	2a01      	cmp	r2, #1
 8002188:	d101      	bne.n	800218e <ETH_SetMACConfig+0x12a>
 800218a:	2202      	movs	r2, #2
 800218c:	e000      	b.n	8002190 <ETH_SetMACConfig+0x12c>
 800218e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002190:	4313      	orrs	r3, r2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff fbfd 	bl	80019a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	ff20810f 	.word	0xff20810f

080021c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <ETH_SetDMAConfig+0x110>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <ETH_SetDMAConfig+0x2c>
 80021ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ee:	e000      	b.n	80021f2 <ETH_SetDMAConfig+0x2e>
 80021f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7b5b      	ldrb	r3, [r3, #13]
 80021f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	7f52      	ldrb	r2, [r2, #29]
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d102      	bne.n	8002208 <ETH_SetDMAConfig+0x44>
 8002202:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002206:	e000      	b.n	800220a <ETH_SetDMAConfig+0x46>
 8002208:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800220a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7b9b      	ldrb	r3, [r3, #14]
 8002210:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002212:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002218:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7f1b      	ldrb	r3, [r3, #28]
 800221e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002220:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	7f9b      	ldrb	r3, [r3, #30]
 8002226:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002228:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800222e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002236:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002238:	4313      	orrs	r3, r2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff fba4 	bl	80019a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002278:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800227e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002284:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800228c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800228e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002296:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800229c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7ff fb75 	bl	80019a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	f8de3f23 	.word	0xf8de3f23

080022d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a6      	sub	sp, #152	; 0x98
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002314:	2300      	movs	r3, #0
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800231e:	2300      	movs	r3, #0
 8002320:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800233a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002344:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800234c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fe86 	bl	8002064 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002358:	2301      	movs	r3, #1
 800235a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800235c:	2301      	movs	r3, #1
 800235e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002360:	2301      	movs	r3, #1
 8002362:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002366:	2301      	movs	r3, #1
 8002368:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002384:	2301      	movs	r3, #1
 8002386:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800238e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002392:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002398:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff08 	bl	80021c4 <ETH_SetDMAConfig>
}
 80023b4:	bf00      	nop
 80023b6:	3798      	adds	r7, #152	; 0x98
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3305      	adds	r3, #5
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	3204      	adds	r2, #4
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <ETH_MACAddressConfig+0x68>)
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061a      	lsls	r2, r3, #24
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3302      	adds	r3, #2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <ETH_MACAddressConfig+0x6c>)
 800240e:	4413      	add	r3, r2
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40028040 	.word	0x40028040
 8002428:	40028044 	.word	0x40028044

0800242c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e03e      	b.n	80024b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	3206      	adds	r2, #6
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d80c      	bhi.n	800249c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68d9      	ldr	r1, [r3, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	e004      	b.n	80024a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3301      	adds	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d9bd      	bls.n	800243a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e046      	b.n	800257a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6919      	ldr	r1, [r3, #16]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002528:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002530:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	3212      	adds	r2, #18
 8002546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d80c      	bhi.n	800256a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6919      	ldr	r1, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	e004      	b.n	8002574 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d9b5      	bls.n	80024ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	60da      	str	r2, [r3, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e175      	b.n	80028c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8164 	bne.w	80028be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_GPIO_Init+0x56>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d017      	beq.n	80026ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80be 	beq.w	80028be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_GPIO_Init+0x324>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a65      	ldr	r2, [pc, #404]	; (80028dc <HAL_GPIO_Init+0x324>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_GPIO_Init+0x324>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800275a:	4a61      	ldr	r2, [pc, #388]	; (80028e0 <HAL_GPIO_Init+0x328>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_GPIO_Init+0x32c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d037      	beq.n	80027f6 <HAL_GPIO_Init+0x23e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d031      	beq.n	80027f2 <HAL_GPIO_Init+0x23a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a56      	ldr	r2, [pc, #344]	; (80028ec <HAL_GPIO_Init+0x334>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02b      	beq.n	80027ee <HAL_GPIO_Init+0x236>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <HAL_GPIO_Init+0x338>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d025      	beq.n	80027ea <HAL_GPIO_Init+0x232>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <HAL_GPIO_Init+0x33c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <HAL_GPIO_Init+0x22e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a53      	ldr	r2, [pc, #332]	; (80028f8 <HAL_GPIO_Init+0x340>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x22a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x344>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x226>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_GPIO_Init+0x348>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x222>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a50      	ldr	r2, [pc, #320]	; (8002904 <HAL_GPIO_Init+0x34c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x21e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x350>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x21a>
 80027ce:	2309      	movs	r3, #9
 80027d0:	e012      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027d2:	230a      	movs	r3, #10
 80027d4:	e010      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027d6:	2308      	movs	r3, #8
 80027d8:	e00e      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027da:	2307      	movs	r3, #7
 80027dc:	e00c      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00a      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x240>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_GPIO_Init+0x328>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_GPIO_Init+0x354>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_GPIO_Init+0x354>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_GPIO_Init+0x354>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <HAL_GPIO_Init+0x354>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_GPIO_Init+0x354>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_GPIO_Init+0x354>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_GPIO_Init+0x354>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_GPIO_Init+0x354>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f ae86 	bls.w	80025d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40021400 	.word	0x40021400
 80028fc:	40021800 	.word	0x40021800
 8002900:	40021c00 	.word	0x40021c00
 8002904:	40022000 	.word	0x40022000
 8002908:	40022400 	.word	0x40022400
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e001      	b.n	8002932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fc8c 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e006      	b.n	80029fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d104      	bne.n	8002a0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_I2C_Init+0x11c>)
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69d9      	ldr	r1, [r3, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	02008000 	.word	0x02008000

08002a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d138      	bne.n	8002b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e032      	b.n	8002b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d139      	bne.n	8002bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e033      	b.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2224      	movs	r2, #36	; 0x24
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc4:	b08f      	sub	sp, #60	; 0x3c
 8002bc6:	af0a      	add	r7, sp, #40	; 0x28
 8002bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e116      	b.n	8002e02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f00b f864 	bl	800dcbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f917 	bl	8006e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	687e      	ldr	r6, [r7, #4]
 8002c20:	466d      	mov	r5, sp
 8002c22:	f106 0410 	add.w	r4, r6, #16
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c36:	1d33      	adds	r3, r6, #4
 8002c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	f003 fff8 	bl	8006c30 <USB_CoreInit>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0d7      	b.n	8002e02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 f905 	bl	8006e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e04a      	b.n	8002cfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	333d      	adds	r3, #61	; 0x3d
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	333c      	adds	r3, #60	; 0x3c
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	b298      	uxth	r0, r3
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3344      	adds	r3, #68	; 0x44
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3340      	adds	r3, #64	; 0x40
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3348      	adds	r3, #72	; 0x48
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334c      	adds	r3, #76	; 0x4c
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3354      	adds	r3, #84	; 0x54
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3af      	bcc.n	8002c64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e044      	b.n	8002d94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3301      	adds	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d3b5      	bcc.n	8002d0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	687e      	ldr	r6, [r7, #4]
 8002da6:	466d      	mov	r5, sp
 8002da8:	f106 0410 	add.w	r4, r6, #16
 8002dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dbc:	1d33      	adds	r3, r6, #4
 8002dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	f004 f89d 	bl	8006f00 <USB_DevInit>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e014      	b.n	8002e02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f97b 	bl	80040ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f005 f9eb 	bl	80081d6 <USB_DevDisconnect>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_PCD_Start+0x16>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e012      	b.n	8002e46 <HAL_PCD_Start+0x3c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fff9 	bl	8006e24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 f9ac 	bl	8008194 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e4e:	b590      	push	{r4, r7, lr}
 8002e50:	b08d      	sub	sp, #52	; 0x34
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 fa6a 	bl	800833e <USB_GetMode>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 84b7 	bne.w	80037e0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 f9ce 	bl	8008218 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 84ad 	beq.w	80037de <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f005 f9bb 	bl	8008218 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d107      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f002 0202 	and.w	r2, r2, #2
 8002eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 f9a9 	bl	8008218 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d161      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0210 	bic.w	r2, r2, #16
 8002ede:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	0c5b      	lsrs	r3, r3, #17
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d124      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d035      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a38      	ldr	r0, [r7, #32]
 8002f2c:	f004 ffe0 	bl	8007ef0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f3c:	441a      	add	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4e:	441a      	add	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
 8002f54:	e016      	b.n	8002f84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	0c5b      	lsrs	r3, r3, #17
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d110      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f68:	2208      	movs	r2, #8
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6a38      	ldr	r0, [r7, #32]
 8002f6e:	f004 ffbf 	bl	8007ef0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a1a      	ldr	r2, [r3, #32]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7e:	441a      	add	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0210 	orr.w	r2, r2, #16
 8002f92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 f93d 	bl	8008218 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa8:	f040 80a7 	bne.w	80030fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f005 f942 	bl	800823e <USB_ReadDevAllOutEpInterrupt>
 8002fba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fbc:	e099      	b.n	80030f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 808e 	beq.w	80030e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f005 f966 	bl	80082a6 <USB_ReadDevOutEPInterrupt>
 8002fda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fef0 	bl	8003de0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003016:	461a      	mov	r2, r3
 8003018:	2308      	movs	r3, #8
 800301a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800301c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 ffc6 	bl	8003fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	2310      	movs	r3, #16
 800303e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d030      	beq.n	80030ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d109      	bne.n	800306a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003068:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	78db      	ldrb	r3, [r3, #3]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d108      	bne.n	800309a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f00a ff35 	bl	800df04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	2302      	movs	r3, #2
 80030aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	461a      	mov	r2, r3
 80030c4:	2320      	movs	r3, #32
 80030c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f af62 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 f88a 	bl	8008218 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310e:	f040 80db 	bne.w	80032c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f005 f8ab 	bl	8008272 <USB_ReadDevAllInEpInterrupt>
 800311c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003122:	e0cd      	b.n	80032c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80c2 	beq.w	80032b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 f8d1 	bl	80082e2 <USB_ReadDevInEPInterrupt>
 8003140:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d057      	beq.n	80031fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	2201      	movs	r2, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800316c:	4013      	ands	r3, r2
 800316e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	461a      	mov	r2, r3
 800317e:	2301      	movs	r3, #1
 8003180:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d132      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	; 0x4c
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	3348      	adds	r3, #72	; 0x48
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4419      	add	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4403      	add	r3, r0
 80031be:	334c      	adds	r3, #76	; 0x4c
 80031c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d113      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x3a2>
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3354      	adds	r3, #84	; 0x54
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031e8:	461a      	mov	r2, r3
 80031ea:	2101      	movs	r1, #1
 80031ec:	f005 f8da 	bl	80083a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f00a fdff 	bl	800ddfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	461a      	mov	r2, r3
 8003214:	2308      	movs	r3, #8
 8003216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322e:	461a      	mov	r2, r3
 8003230:	2310      	movs	r3, #16
 8003232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324a:	461a      	mov	r2, r3
 800324c:	2340      	movs	r3, #64	; 0x40
 800324e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d023      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800325a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325c:	6a38      	ldr	r0, [r7, #32]
 800325e:	f003 ffad 	bl	80071bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3338      	adds	r3, #56	; 0x38
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f00a fe4c 	bl	800df28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329c:	461a      	mov	r2, r3
 800329e:	2302      	movs	r3, #2
 80032a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fd08 	bl	8003cc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	3301      	adds	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f af2e 	bne.w	8003124 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 ffa3 	bl	8008218 <USB_ReadInterrupts>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032dc:	d122      	bne.n	8003324 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d108      	bne.n	800330e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003304:	2100      	movs	r1, #0
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f00a ffc6 	bl	800e298 <HAL_PCDEx_LPM_Callback>
 800330c:	e002      	b.n	8003314 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f00a fdea 	bl	800dee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f004 ff75 	bl	8008218 <USB_ReadInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d112      	bne.n	8003360 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f00a fda6 	bl	800de9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 ff57 	bl	8008218 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003374:	d121      	bne.n	80033ba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003384:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033aa:	2101      	movs	r1, #1
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f00a ff73 	bl	800e298 <HAL_PCDEx_LPM_Callback>
 80033b2:	e002      	b.n	80033ba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f00a fd71 	bl	800de9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 ff2a 	bl	8008218 <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	f040 80b7 	bne.w	8003540 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2110      	movs	r1, #16
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fee5 	bl	80071bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f6:	e046      	b.n	8003486 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	461a      	mov	r2, r3
 8003406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800340a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	440a      	add	r2, r1
 8003422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800343e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	440a      	add	r2, r1
 8003456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800345a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800345e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800347a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800347e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	3301      	adds	r3, #1
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348c:	429a      	cmp	r2, r3
 800348e:	d3b3      	bcc.n	80033f8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d016      	beq.n	80034da <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f043 030b 	orr.w	r3, r3, #11
 80034c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d2:	f043 030b 	orr.w	r3, r3, #11
 80034d6:	6453      	str	r3, [r2, #68]	; 0x44
 80034d8:	e015      	b.n	8003506 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	4619      	mov	r1, r3
 80034ea:	f242 032b 	movw	r3, #8235	; 0x202b
 80034ee:	4313      	orrs	r3, r2
 80034f0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003500:	f043 030b 	orr.w	r3, r3, #11
 8003504:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003514:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003518:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800352a:	461a      	mov	r2, r3
 800352c:	f004 ff3a 	bl	80083a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800353e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fe67 	bl	8008218 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d124      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fefe 	bl	800835c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fea6 	bl	80072b6 <USB_GetDevSpeed>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681c      	ldr	r4, [r3, #0]
 8003576:	f001 facd 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 800357a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	4620      	mov	r0, r4
 8003586:	f003 fbab 	bl	8006ce0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f00a fc5d 	bl	800de4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fe37 	bl	8008218 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d10a      	bne.n	80035ca <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f00a fc3a 	bl	800de2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 0208 	and.w	r2, r2, #8
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fe22 	bl	8008218 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b80      	cmp	r3, #128	; 0x80
 80035dc:	d122      	bne.n	8003624 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ea:	2301      	movs	r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	e014      	b.n	800361a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fb27 	bl	8003c62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	3301      	adds	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	429a      	cmp	r2, r3
 8003622:	d3e5      	bcc.n	80035f0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f004 fdf5 	bl	8008218 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003638:	d13b      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800363a:	2301      	movs	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	e02b      	b.n	8003698 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3340      	adds	r3, #64	; 0x40
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d115      	bne.n	8003692 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003666:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	da12      	bge.n	8003692 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	333f      	adds	r3, #63	; 0x3f
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fae8 	bl	8003c62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	3301      	adds	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3ce      	bcc.n	8003640 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fdae 	bl	8008218 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c6:	d155      	bne.n	8003774 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036c8:	2301      	movs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	e045      	b.n	800375a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12e      	bne.n	8003754 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da2b      	bge.n	8003754 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003708:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800370c:	429a      	cmp	r2, r3
 800370e:	d121      	bne.n	8003754 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003750:	6053      	str	r3, [r2, #4]
            break;
 8003752:	e007      	b.n	8003764 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	3301      	adds	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	429a      	cmp	r2, r3
 8003762:	d3b4      	bcc.n	80036ce <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f004 fd4d 	bl	8008218 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d10a      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f00a fbde 	bl	800df4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800379e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 fd37 	bl	8008218 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d115      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f00a fbce 	bl	800df68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e000      	b.n	80037e0 <HAL_PCD_IRQHandler+0x992>
      return;
 80037de:	bf00      	nop
    }
  }
}
 80037e0:	3734      	adds	r7, #52	; 0x34
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}

080037e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_PCD_SetAddress+0x1a>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e013      	b.n	8003828 <HAL_PCD_SetAddress+0x42>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f004 fc95 	bl	8008148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	70fb      	strb	r3, [r7, #3]
 8003842:	460b      	mov	r3, r1
 8003844:	803b      	strh	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800384e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0f      	bge.n	8003876 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3338      	adds	r3, #56	; 0x38
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	705a      	strb	r2, [r3, #1]
 8003874:	e00f      	b.n	8003896 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038a2:	883a      	ldrh	r2, [r7, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	78ba      	ldrb	r2, [r7, #2]
 80038ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038c0:	78bb      	ldrb	r3, [r7, #2]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d102      	bne.n	80038cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_PCD_EP_Open+0xaa>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e00e      	b.n	80038f8 <HAL_PCD_EP_Open+0xc8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 fd09 	bl	8007300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800390c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003910:	2b00      	cmp	r3, #0
 8003912:	da0f      	bge.n	8003934 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	3338      	adds	r3, #56	; 0x38
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	705a      	strb	r2, [r3, #1]
 8003932:	e00f      	b.n	8003954 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_PCD_EP_Close+0x6e>
 800396a:	2302      	movs	r3, #2
 800396c:	e00e      	b.n	800398c <HAL_PCD_EP_Close+0x8c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fd47 	bl	8007410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	460b      	mov	r3, r1
 80039a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	f003 020f 	and.w	r2, r3, #15
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	3304      	adds	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2200      	movs	r2, #0
 80039d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	f004 f82e 	bl	8007a68 <USB_EP0StartXfer>
 8003a0c:	e008      	b.n	8003a20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6979      	ldr	r1, [r7, #20]
 8003a1c:	f003 fdd4 	bl	80075c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a4c:	681b      	ldr	r3, [r3, #0]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	460b      	mov	r3, r1
 8003a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	3338      	adds	r3, #56	; 0x38
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2201      	movs	r2, #1
 8003a98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	f003 ffcc 	bl	8007a68 <USB_EP0StartXfer>
 8003ad0:	e008      	b.n	8003ae4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	f003 fd72 	bl	80075c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d901      	bls.n	8003b0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e050      	b.n	8003bae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da0f      	bge.n	8003b34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	3338      	adds	r3, #56	; 0x38
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	3304      	adds	r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	705a      	strb	r2, [r3, #1]
 8003b32:	e00d      	b.n	8003b50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_SetStall+0x82>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e01e      	b.n	8003bae <HAL_PCD_EP_SetStall+0xc0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 fa0e 	bl	8007fa0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	b2d9      	uxtb	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f004 fc00 	bl	80083a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d901      	bls.n	8003bd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e042      	b.n	8003c5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da0f      	bge.n	8003bfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3338      	adds	r3, #56	; 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	705a      	strb	r2, [r3, #1]
 8003bfa:	e00f      	b.n	8003c1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	3304      	adds	r3, #4
 8003c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_PCD_EP_ClrStall+0x86>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e00e      	b.n	8003c5a <HAL_PCD_EP_ClrStall+0xa4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fa16 	bl	800807c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0c      	bge.n	8003c90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	3338      	adds	r3, #56	; 0x38
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e00c      	b.n	8003caa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 f835 	bl	8007d20 <USB_EPStopXfer>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cba:	7afb      	ldrb	r3, [r7, #11]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3338      	adds	r3, #56	; 0x38
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d901      	bls.n	8003cfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e06c      	b.n	8003dd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d902      	bls.n	8003d18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3303      	adds	r3, #3
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d20:	e02b      	b.n	8003d7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d902      	bls.n	8003d3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3303      	adds	r3, #3
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6919      	ldr	r1, [r3, #16]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	f004 f889 	bl	8007e74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1a      	ldr	r2, [r3, #32]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	441a      	add	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d809      	bhi.n	8003da4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d203      	bcs.n	8003da4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1be      	bne.n	8003d22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d811      	bhi.n	8003dd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	2201      	movs	r2, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d17b      	bne.n	8003f0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	f240 80b9 	bls.w	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80b3 	beq.w	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	461a      	mov	r2, r3
 8003e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e48:	6093      	str	r3, [r2, #8]
 8003e4a:	e0a7      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	461a      	mov	r2, r3
 8003e64:	2320      	movs	r3, #32
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	e098      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 8093 	bne.w	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d90f      	bls.n	8003e9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	e07e      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d114      	bne.n	8003f00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2101      	movs	r1, #1
 8003eec:	f004 fa5a 	bl	80083a4 <USB_EP0_OutStart>
 8003ef0:	e006      	b.n	8003f00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f009 ff5c 	bl	800ddc4 <HAL_PCD_DataOutStageCallback>
 8003f0c:	e046      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d124      	bne.n	8003f60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	e032      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2320      	movs	r3, #32
 8003f50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f009 ff33 	bl	800ddc4 <HAL_PCD_DataOutStageCallback>
 8003f5e:	e01d      	b.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d114      	bne.n	8003f90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f004 fa0a 	bl	80083a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f009 ff14 	bl	800ddc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	4f54300a 	.word	0x4f54300a
 8003fac:	4f54310a 	.word	0x4f54310a

08003fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	333c      	adds	r3, #60	; 0x3c
 8003fc8:	3304      	adds	r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d90e      	bls.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f009 fecb 	bl	800dda0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <PCD_EP_OutSetupPacket_int+0x88>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d90c      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004024:	461a      	mov	r2, r3
 8004026:	2101      	movs	r1, #1
 8004028:	f004 f9bc 	bl	80083a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	4f54300a 	.word	0x4f54300a

0800403c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800405a:	883b      	ldrh	r3, [r7, #0]
 800405c:	0419      	lsls	r1, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	430a      	orrs	r2, r1
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
 8004068:	e028      	b.n	80040bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4413      	add	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e00d      	b.n	800409a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4413      	add	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	3301      	adds	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	3b01      	subs	r3, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3ec      	bcc.n	800407e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040a4:	883b      	ldrh	r3, [r7, #0]
 80040a6:	0418      	lsls	r0, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4302      	orrs	r2, r0
 80040b4:	3340      	adds	r3, #64	; 0x40
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_PCDEx_ActivateLPM+0x44>)
 800411c:	4313      	orrs	r3, r2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	10000003 	.word	0x10000003

08004134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004162:	f7fd fc15 	bl	8001990 <HAL_GetTick>
 8004166:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004168:	e009      	b.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800416a:	f7fd fc11 	bl	8001990 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004178:	d901      	bls.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e022      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d1ee      	bne.n	800416a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004198:	f7fd fbfa 	bl	8001990 <HAL_GetTick>
 800419c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800419e:	e009      	b.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041a0:	f7fd fbf6 	bl	8001990 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ae:	d901      	bls.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e007      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c0:	d1ee      	bne.n	80041a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e29b      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8087 	beq.w	8004306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f8:	4b96      	ldr	r3, [pc, #600]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b04      	cmp	r3, #4
 8004202:	d00c      	beq.n	800421e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004204:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d112      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
 8004210:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b8d      	ldr	r3, [pc, #564]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d06c      	beq.n	8004304 <HAL_RCC_OscConfig+0x130>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d168      	bne.n	8004304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e275      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x7a>
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e02e      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x9c>
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0xc0>
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a75      	ldr	r2, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a72      	ldr	r2, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6e      	ldr	r2, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fb6c 	bl	8001990 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fd fb68 	bl	8001990 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e229      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xe8>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fb58 	bl	8001990 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd fb54 	bl	8001990 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e215      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b57      	ldr	r3, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x110>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d069      	beq.n	80043e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1e9      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	493d      	ldr	r1, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e040      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a38      	ldr	r2, [pc, #224]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fb0a 	bl	8001990 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd fb06 	bl	8001990 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1c7      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
 80043b2:	e018      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fae6 	bl	8001990 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fd fae2 	bl	8001990 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1a3      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d038      	beq.n	8004464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fd fac3 	bl	8001990 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fd fabf 	bl	8001990 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e180      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x23a>
 800442c:	e01a      	b.n	8004464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd faa9 	bl	8001990 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fd faa5 	bl	8001990 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d903      	bls.n	8004458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e166      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
 8004454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b92      	ldr	r3, [pc, #584]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a4 	beq.w	80045ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a88      	ldr	r2, [pc, #544]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b86      	ldr	r3, [pc, #536]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	4b83      	ldr	r3, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x4d4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d118      	bne.n	80044d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044a6:	4b80      	ldr	r3, [pc, #512]	; (80046a8 <HAL_RCC_OscConfig+0x4d4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7f      	ldr	r2, [pc, #508]	; (80046a8 <HAL_RCC_OscConfig+0x4d4>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b2:	f7fd fa6d 	bl	8001990 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fd fa69 	bl	8001990 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e12a      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044cc:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCC_OscConfig+0x4d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x31a>
 80044e0:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a6f      	ldr	r2, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	e02d      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x33c>
 80044f6:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a6a      	ldr	r2, [pc, #424]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
 8004502:	4b68      	ldr	r3, [pc, #416]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a67      	ldr	r2, [pc, #412]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	e01c      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0x35e>
 8004518:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004532:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d015      	beq.n	800457e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fa1d 	bl	8001990 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd fa19 	bl	8001990 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0d8      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b4c      	ldr	r3, [pc, #304]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCC_OscConfig+0x386>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fd fa07 	bl	8001990 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fd fa03 	bl	8001990 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0c2      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80ae 	beq.w	8004720 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d06d      	beq.n	80046ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d14b      	bne.n	8004670 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd f9d4 	bl	8001990 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd f9d0 	bl	8001990 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e091      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	491b      	ldr	r1, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd f9a2 	bl	8001990 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd f99e 	bl	8001990 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e05f      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x47c>
 800466e:	e057      	b.n	8004720 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800467a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd f988 	bl	8001990 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fd f984 	bl	8001990 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e045      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x4b0>
 80046a2:	e03d      	b.n	8004720 <HAL_RCC_OscConfig+0x54c>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <HAL_RCC_OscConfig+0x558>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d030      	beq.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d129      	bne.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d122      	bne.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d119      	bne.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d10f      	bne.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d107      	bne.n	800471c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0d0      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d910      	bls.n	8004778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	4965      	ldr	r1, [pc, #404]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b8      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a52      	ldr	r2, [pc, #328]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494d      	ldr	r1, [pc, #308]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d040      	beq.n	8004854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d115      	bne.n	8004812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e073      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06b      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4936      	ldr	r1, [pc, #216]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004824:	f7fd f8b4 	bl	8001990 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fd f8b0 	bl	8001990 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e053      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d210      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 020f 	bic.w	r2, r3, #15
 800486a:	4922      	ldr	r1, [pc, #136]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e032      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4916      	ldr	r1, [pc, #88]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490e      	ldr	r1, [pc, #56]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 f821 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490a      	ldr	r1, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x1cc>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1d0>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1d4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fe9c 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0800f5a8 	.word	0x0800f5a8
 8004900:	20000000 	.word	0x20000000
 8004904:	20000004 	.word	0x20000004

08004908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490c:	b094      	sub	sp, #80	; 0x50
 800490e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
 8004914:	2300      	movs	r3, #0
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	2300      	movs	r3, #0
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004920:	4b79      	ldr	r3, [pc, #484]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d00d      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x40>
 800492c:	2b08      	cmp	r3, #8
 800492e:	f200 80e1 	bhi.w	8004af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x34>
 8004936:	2b04      	cmp	r3, #4
 8004938:	d003      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x3a>
 800493a:	e0db      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004940:	e0db      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004942:	4b73      	ldr	r3, [pc, #460]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004946:	e0d8      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004948:	4b6f      	ldr	r3, [pc, #444]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004952:	4b6d      	ldr	r3, [pc, #436]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d063      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	2200      	movs	r2, #0
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
 8004968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
 8004972:	2300      	movs	r3, #0
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	f04f 0000 	mov.w	r0, #0
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	0159      	lsls	r1, r3, #5
 8004988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498c:	0150      	lsls	r0, r2, #5
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4621      	mov	r1, r4
 8004994:	1a51      	subs	r1, r2, r1
 8004996:	6139      	str	r1, [r7, #16]
 8004998:	4629      	mov	r1, r5
 800499a:	eb63 0301 	sbc.w	r3, r3, r1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ac:	4659      	mov	r1, fp
 80049ae:	018b      	lsls	r3, r1, #6
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b6:	4651      	mov	r1, sl
 80049b8:	018a      	lsls	r2, r1, #6
 80049ba:	4651      	mov	r1, sl
 80049bc:	ebb2 0801 	subs.w	r8, r2, r1
 80049c0:	4659      	mov	r1, fp
 80049c2:	eb63 0901 	sbc.w	r9, r3, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	eb18 0303 	adds.w	r3, r8, r3
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	462b      	mov	r3, r5
 80049e8:	eb49 0303 	adc.w	r3, r9, r3
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049fa:	4629      	mov	r1, r5
 80049fc:	024b      	lsls	r3, r1, #9
 80049fe:	4621      	mov	r1, r4
 8004a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a04:	4621      	mov	r1, r4
 8004a06:	024a      	lsls	r2, r1, #9
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0e:	2200      	movs	r2, #0
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a18:	f7fb fc62 	bl	80002e0 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	e058      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4611      	mov	r1, r2
 8004a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	0159      	lsls	r1, r3, #5
 8004a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a52:	0150      	lsls	r0, r2, #5
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4641      	mov	r1, r8
 8004a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a5e:	4649      	mov	r1, r9
 8004a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a78:	ebb2 040a 	subs.w	r4, r2, sl
 8004a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	00eb      	lsls	r3, r5, #3
 8004a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8e:	00e2      	lsls	r2, r4, #3
 8004a90:	4614      	mov	r4, r2
 8004a92:	461d      	mov	r5, r3
 8004a94:	4643      	mov	r3, r8
 8004a96:	18e3      	adds	r3, r4, r3
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	eb45 0303 	adc.w	r3, r5, r3
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	028b      	lsls	r3, r1, #10
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab8:	4621      	mov	r1, r4
 8004aba:	028a      	lsls	r2, r1, #10
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	61fa      	str	r2, [r7, #28]
 8004ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004acc:	f7fb fc08 	bl	80002e0 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3750      	adds	r7, #80	; 0x50
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	007a1200 	.word	0x007a1200

08004b14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b30:	f7ff fff0 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	0a9b      	lsrs	r3, r3, #10
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4903      	ldr	r1, [pc, #12]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	0800f5b8 	.word	0x0800f5b8

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b58:	f7ff ffdc 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0b5b      	lsrs	r3, r3, #13
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	0800f5b8 	.word	0x0800f5b8

08004b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	220f      	movs	r2, #15
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0203 	and.w	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCC_GetClockConfig+0x60>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40023c00 	.word	0x40023c00

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c08:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	4964      	ldr	r1, [pc, #400]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	4959      	ldr	r1, [pc, #356]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c76:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	494a      	ldr	r1, [pc, #296]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d101      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 808b 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a34      	ldr	r2, [pc, #208]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fc fe52 	bl	8001990 <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fc fe4e 	bl	8001990 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e38f      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d035      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d02e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d114      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fc fe16 	bl	8001990 <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fc fe12 	bl	8001990 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e351      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d111      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	4901      	ldr	r1, [pc, #4]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	0ffffcff 	.word	0x0ffffcff
 8004dbc:	4bac      	ldr	r3, [pc, #688]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4aab      	ldr	r2, [pc, #684]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	4ba9      	ldr	r3, [pc, #676]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd4:	49a6      	ldr	r1, [pc, #664]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d010      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004de6:	4ba2      	ldr	r3, [pc, #648]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4aa0      	ldr	r2, [pc, #640]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004df6:	4b9e      	ldr	r3, [pc, #632]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	499b      	ldr	r1, [pc, #620]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e14:	4b96      	ldr	r3, [pc, #600]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e22:	4993      	ldr	r1, [pc, #588]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e36:	4b8e      	ldr	r3, [pc, #568]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e44:	498a      	ldr	r1, [pc, #552]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e58:	4b85      	ldr	r3, [pc, #532]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	4982      	ldr	r1, [pc, #520]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e7a:	4b7d      	ldr	r3, [pc, #500]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4979      	ldr	r1, [pc, #484]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9c:	4b74      	ldr	r3, [pc, #464]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4971      	ldr	r1, [pc, #452]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f023 020c 	bic.w	r2, r3, #12
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	4968      	ldr	r1, [pc, #416]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee0:	4b63      	ldr	r3, [pc, #396]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	4960      	ldr	r1, [pc, #384]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	4957      	ldr	r1, [pc, #348]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f24:	4b52      	ldr	r3, [pc, #328]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	494f      	ldr	r1, [pc, #316]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f46:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	4946      	ldr	r1, [pc, #280]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f68:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	493e      	ldr	r1, [pc, #248]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	4935      	ldr	r1, [pc, #212]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fac:	4b30      	ldr	r3, [pc, #192]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fba:	492d      	ldr	r1, [pc, #180]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fce:	4b28      	ldr	r3, [pc, #160]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	4924      	ldr	r1, [pc, #144]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	4914      	ldr	r1, [pc, #80]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005030:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	490b      	ldr	r1, [pc, #44]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00f      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005064:	4902      	ldr	r1, [pc, #8]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800506c:	e002      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00b      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005080:	4b8a      	ldr	r3, [pc, #552]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	4986      	ldr	r1, [pc, #536]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050a4:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b4:	497d      	ldr	r1, [pc, #500]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d006      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80d6 	beq.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d0:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a75      	ldr	r2, [pc, #468]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fc fc58 	bl	8001990 <HAL_GetTick>
 80050e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e4:	f7fc fc54 	bl	8001990 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e195      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050f6:	4b6d      	ldr	r3, [pc, #436]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d021      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11d      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	019a      	lsls	r2, r3, #6
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4958      	ldr	r1, [pc, #352]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02e      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517c:	d129      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800517e:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800518c:	4b47      	ldr	r3, [pc, #284]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	0f1b      	lsrs	r3, r3, #28
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	019a      	lsls	r2, r3, #6
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	493e      	ldr	r1, [pc, #248]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051ba:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c0:	f023 021f 	bic.w	r2, r3, #31
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	3b01      	subs	r3, #1
 80051ca:	4938      	ldr	r1, [pc, #224]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01d      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051de:	4b33      	ldr	r3, [pc, #204]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	0f1b      	lsrs	r3, r3, #28
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	019a      	lsls	r2, r3, #6
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	071b      	lsls	r3, r3, #28
 8005212:	4926      	ldr	r1, [pc, #152]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	491a      	ldr	r1, [pc, #104]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800524a:	4b18      	ldr	r3, [pc, #96]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fc fb9b 	bl	8001990 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800525e:	f7fc fb97 	bl	8001990 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b64      	cmp	r3, #100	; 0x64
 800526a:	d901      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0d8      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	f040 80ce 	bne.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005290:	f7fc fb7e 	bl	8001990 <HAL_GetTick>
 8005294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005298:	f7fc fb7a 	bl	8001990 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d904      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0bb      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b0:	4b5e      	ldr	r3, [pc, #376]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d0ec      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02e      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12a      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f4:	4b4d      	ldr	r3, [pc, #308]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	0f1b      	lsrs	r3, r3, #28
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4944      	ldr	r1, [pc, #272]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005328:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	493d      	ldr	r1, [pc, #244]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d022      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005350:	d11d      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	0f1b      	lsrs	r3, r3, #28
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	019a      	lsls	r2, r3, #6
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	071b      	lsls	r3, r3, #28
 8005386:	4929      	ldr	r1, [pc, #164]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d028      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053a8:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	019a      	lsls	r2, r3, #6
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	4917      	ldr	r1, [pc, #92]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4911      	ldr	r1, [pc, #68]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0e      	ldr	r2, [pc, #56]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fc faca 	bl	8001990 <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005400:	f7fc fac6 	bl	8001990 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e007      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541e:	d1ef      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e09d      	b.n	800557e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005452:	d009      	beq.n	8005468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
 800545a:	e005      	b.n	8005468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb ff78 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054a8:	d902      	bls.n	80054b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e002      	b.n	80054b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054be:	d007      	beq.n	80054d0 <HAL_SPI_Init+0xa0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c8:	d002      	beq.n	80054d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	ea42 0103 	orr.w	r1, r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 0204 	and.w	r2, r3, #4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800554c:	ea42 0103 	orr.w	r1, r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e049      	b.n	800562c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fb ff93 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 fbbb 	bl	8005d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e054      	b.n	80056f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a26      	ldr	r2, [pc, #152]	; (8005704 <HAL_TIM_Base_Start_IT+0xd0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d01d      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <HAL_TIM_Base_Start_IT+0xd4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <HAL_TIM_Base_Start_IT+0xd8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <HAL_TIM_Base_Start_IT+0xdc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_TIM_Base_Start_IT+0xe0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <HAL_TIM_Base_Start_IT+0xe4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	; (800571c <HAL_TIM_Base_Start_IT+0xe8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d115      	bne.n	80056e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_TIM_Base_Start_IT+0xec>)
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d015      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d011      	beq.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	e008      	b.n	80056f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40010400 	.word	0x40010400
 8005718:	40014000 	.word	0x40014000
 800571c:	40001800 	.word	0x40001800
 8005720:	00010007 	.word	0x00010007

08005724 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e049      	b.n	80057ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f841 	bl	80057d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 faec 	bl	8005d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d122      	bne.n	8005842 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d11b      	bne.n	8005842 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0202 	mvn.w	r2, #2
 8005812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fa6b 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 800582e:	e005      	b.n	800583c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa5d 	bl	8005cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa6e 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b04      	cmp	r3, #4
 800584e:	d122      	bne.n	8005896 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b04      	cmp	r3, #4
 800585c:	d11b      	bne.n	8005896 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0204 	mvn.w	r2, #4
 8005866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa41 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005882:	e005      	b.n	8005890 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fa33 	bl	8005cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa44 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d122      	bne.n	80058ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d11b      	bne.n	80058ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0208 	mvn.w	r2, #8
 80058ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2204      	movs	r2, #4
 80058c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fa17 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 80058d6:	e005      	b.n	80058e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa09 	bl	8005cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa1a 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d122      	bne.n	800593e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b10      	cmp	r3, #16
 8005904:	d11b      	bne.n	800593e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f06f 0210 	mvn.w	r2, #16
 800590e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2208      	movs	r2, #8
 8005914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f9ed 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 800592a:	e005      	b.n	8005938 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9df 	bl	8005cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9f0 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10e      	bne.n	800596a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0201 	mvn.w	r2, #1
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fb fb23 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005974:	2b80      	cmp	r3, #128	; 0x80
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b80      	cmp	r3, #128	; 0x80
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fcd1 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fcc4 	bl	800634c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f99e 	bl	8005d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0220 	mvn.w	r2, #32
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc84 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e088      	b.n	8005b54 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6819      	ldr	r1, [r3, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f000 fa0e 	bl	8005e80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 020c 	bic.w	r2, r2, #12
 8005a72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
 8005a86:	e060      	b.n	8005b4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d11c      	bne.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6819      	ldr	r1, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f000 fa92 	bl	8005fc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ab0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6999      	ldr	r1, [r3, #24]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	021a      	lsls	r2, r3, #8
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]
 8005ac6:	e040      	b.n	8005b4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d11b      	bne.n	8005b06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f000 fadf 	bl	80060a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 020c 	bic.w	r2, r2, #12
 8005af0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69d9      	ldr	r1, [r3, #28]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	61da      	str	r2, [r3, #28]
 8005b04:	e021      	b.n	8005b4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d11c      	bne.n	8005b46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6819      	ldr	r1, [r3, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f000 fafc 	bl	8006118 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69d9      	ldr	r1, [r3, #28]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	61da      	str	r2, [r3, #28]
 8005b44:	e001      	b.n	8005b4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x1c>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0b4      	b.n	8005ce2 <HAL_TIM_ConfigClockSource+0x186>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_TIM_ConfigClockSource+0x190>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb0:	d03e      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0xd4>
 8005bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb6:	f200 8087 	bhi.w	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbe:	f000 8086 	beq.w	8005cce <HAL_TIM_ConfigClockSource+0x172>
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d87f      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d01a      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0xa6>
 8005bcc:	2b70      	cmp	r3, #112	; 0x70
 8005bce:	d87b      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b60      	cmp	r3, #96	; 0x60
 8005bd2:	d050      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x11a>
 8005bd4:	2b60      	cmp	r3, #96	; 0x60
 8005bd6:	d877      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d03c      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0xfa>
 8005bdc:	2b50      	cmp	r3, #80	; 0x50
 8005bde:	d873      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d058      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x13a>
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d86f      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d064      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	2b30      	cmp	r3, #48	; 0x30
 8005bee:	d86b      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d060      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d867      	bhi.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05c      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d05a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c00:	e062      	b.n	8005cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6899      	ldr	r1, [r3, #8]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f000 fad9 	bl	80061c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	609a      	str	r2, [r3, #8]
      break;
 8005c2e:	e04f      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f000 fac2 	bl	80061c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c52:	609a      	str	r2, [r3, #8]
      break;
 8005c54:	e03c      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 f980 	bl	8005f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2150      	movs	r1, #80	; 0x50
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fa8f 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c74:	e02c      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 f9dc 	bl	8006040 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2160      	movs	r1, #96	; 0x60
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa7f 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005c94:	e01c      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f000 f960 	bl	8005f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fa6f 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005cb4:	e00c      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 fa66 	bl	8006192 <TIM_ITRx_SetConfig>
      break;
 8005cc6:	e003      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	fffeff88 	.word	0xfffeff88

08005cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a40      	ldr	r2, [pc, #256]	; (8005e54 <TIM_Base_SetConfig+0x114>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d00f      	beq.n	8005d80 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <TIM_Base_SetConfig+0x118>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00b      	beq.n	8005d80 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3c      	ldr	r2, [pc, #240]	; (8005e5c <TIM_Base_SetConfig+0x11c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3b      	ldr	r2, [pc, #236]	; (8005e60 <TIM_Base_SetConfig+0x120>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3a      	ldr	r2, [pc, #232]	; (8005e64 <TIM_Base_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d108      	bne.n	8005d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2f      	ldr	r2, [pc, #188]	; (8005e54 <TIM_Base_SetConfig+0x114>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d02b      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da0:	d027      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2c      	ldr	r2, [pc, #176]	; (8005e58 <TIM_Base_SetConfig+0x118>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d023      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <TIM_Base_SetConfig+0x11c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <TIM_Base_SetConfig+0x120>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a29      	ldr	r2, [pc, #164]	; (8005e64 <TIM_Base_SetConfig+0x124>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d017      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a28      	ldr	r2, [pc, #160]	; (8005e68 <TIM_Base_SetConfig+0x128>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <TIM_Base_SetConfig+0x12c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <TIM_Base_SetConfig+0x130>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a25      	ldr	r2, [pc, #148]	; (8005e74 <TIM_Base_SetConfig+0x134>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a24      	ldr	r2, [pc, #144]	; (8005e78 <TIM_Base_SetConfig+0x138>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a23      	ldr	r2, [pc, #140]	; (8005e7c <TIM_Base_SetConfig+0x13c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d108      	bne.n	8005e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <TIM_Base_SetConfig+0x114>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0xf8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a0c      	ldr	r2, [pc, #48]	; (8005e64 <TIM_Base_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d103      	bne.n	8005e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	615a      	str	r2, [r3, #20]
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40014400 	.word	0x40014400
 8005e70:	40014800 	.word	0x40014800
 8005e74:	40001800 	.word	0x40001800
 8005e78:	40001c00 	.word	0x40001c00
 8005e7c:	40002000 	.word	0x40002000

08005e80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0201 	bic.w	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <TIM_TI1_SetConfig+0xcc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01b      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb4:	d017      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <TIM_TI1_SetConfig+0xd0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <TIM_TI1_SetConfig+0xd4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a23      	ldr	r2, [pc, #140]	; (8005f58 <TIM_TI1_SetConfig+0xd8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <TIM_TI1_SetConfig+0xdc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <TIM_TI1_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_TI1_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <TIM_TI1_SetConfig+0x6a>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <TIM_TI1_SetConfig+0x6c>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e003      	b.n	8005f0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 030a 	bic.w	r3, r3, #10
 8005f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 030a 	and.w	r3, r3, #10
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 030a 	bic.w	r3, r3, #10
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0210 	bic.w	r2, r3, #16
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	b29b      	uxth	r3, r3
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006018:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f023 0210 	bic.w	r2, r3, #16
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800606a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	031b      	lsls	r3, r3, #12
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800607c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	621a      	str	r2, [r3, #32]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f023 0303 	bic.w	r3, r3, #3
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006156:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	b29b      	uxth	r3, r3
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800616a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	031b      	lsls	r3, r3, #12
 8006170:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f043 0307 	orr.w	r3, r3, #7
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	021a      	lsls	r2, r3, #8
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800621c:	2302      	movs	r3, #2
 800621e:	e06d      	b.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a30      	ldr	r2, [pc, #192]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2f      	ldr	r2, [pc, #188]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d108      	bne.n	8006266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800625a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a20      	ldr	r2, [pc, #128]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d01d      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a16      	ldr	r2, [pc, #88]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e040      	b.n	80063f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb f8ec 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f82c 	bl	80063fc <UART_SetConfig>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e022      	b.n	80063f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa84 	bl	80068c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb0b 	bl	8006a08 <UART_CheckIdleState>
 80063f2:	4603      	mov	r3, r0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4ba6      	ldr	r3, [pc, #664]	; (80066c0 <UART_SetConfig+0x2c4>)
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	430b      	orrs	r3, r1
 8006432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a94      	ldr	r2, [pc, #592]	; (80066c4 <UART_SetConfig+0x2c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d120      	bne.n	80064ba <UART_SetConfig+0xbe>
 8006478:	4b93      	ldr	r3, [pc, #588]	; (80066c8 <UART_SetConfig+0x2cc>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b03      	cmp	r3, #3
 8006484:	d816      	bhi.n	80064b4 <UART_SetConfig+0xb8>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x90>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064a3 	.word	0x080064a3
 8006498:	080064af 	.word	0x080064af
 800649c:	2301      	movs	r3, #1
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e150      	b.n	8006744 <UART_SetConfig+0x348>
 80064a2:	2302      	movs	r3, #2
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e14d      	b.n	8006744 <UART_SetConfig+0x348>
 80064a8:	2304      	movs	r3, #4
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e14a      	b.n	8006744 <UART_SetConfig+0x348>
 80064ae:	2308      	movs	r3, #8
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e147      	b.n	8006744 <UART_SetConfig+0x348>
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e144      	b.n	8006744 <UART_SetConfig+0x348>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a83      	ldr	r2, [pc, #524]	; (80066cc <UART_SetConfig+0x2d0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d132      	bne.n	800652a <UART_SetConfig+0x12e>
 80064c4:	4b80      	ldr	r3, [pc, #512]	; (80066c8 <UART_SetConfig+0x2cc>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d828      	bhi.n	8006524 <UART_SetConfig+0x128>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <UART_SetConfig+0xdc>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	08006525 	.word	0x08006525
 80064e0:	08006525 	.word	0x08006525
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006519 	.word	0x08006519
 80064ec:	08006525 	.word	0x08006525
 80064f0:	08006525 	.word	0x08006525
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006513 	.word	0x08006513
 80064fc:	08006525 	.word	0x08006525
 8006500:	08006525 	.word	0x08006525
 8006504:	08006525 	.word	0x08006525
 8006508:	0800651f 	.word	0x0800651f
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e118      	b.n	8006744 <UART_SetConfig+0x348>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e115      	b.n	8006744 <UART_SetConfig+0x348>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e112      	b.n	8006744 <UART_SetConfig+0x348>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e10f      	b.n	8006744 <UART_SetConfig+0x348>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e10c      	b.n	8006744 <UART_SetConfig+0x348>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a68      	ldr	r2, [pc, #416]	; (80066d0 <UART_SetConfig+0x2d4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d120      	bne.n	8006576 <UART_SetConfig+0x17a>
 8006534:	4b64      	ldr	r3, [pc, #400]	; (80066c8 <UART_SetConfig+0x2cc>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800653e:	2b30      	cmp	r3, #48	; 0x30
 8006540:	d013      	beq.n	800656a <UART_SetConfig+0x16e>
 8006542:	2b30      	cmp	r3, #48	; 0x30
 8006544:	d814      	bhi.n	8006570 <UART_SetConfig+0x174>
 8006546:	2b20      	cmp	r3, #32
 8006548:	d009      	beq.n	800655e <UART_SetConfig+0x162>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d810      	bhi.n	8006570 <UART_SetConfig+0x174>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <UART_SetConfig+0x15c>
 8006552:	2b10      	cmp	r3, #16
 8006554:	d006      	beq.n	8006564 <UART_SetConfig+0x168>
 8006556:	e00b      	b.n	8006570 <UART_SetConfig+0x174>
 8006558:	2300      	movs	r3, #0
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e0f2      	b.n	8006744 <UART_SetConfig+0x348>
 800655e:	2302      	movs	r3, #2
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e0ef      	b.n	8006744 <UART_SetConfig+0x348>
 8006564:	2304      	movs	r3, #4
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e0ec      	b.n	8006744 <UART_SetConfig+0x348>
 800656a:	2308      	movs	r3, #8
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e0e9      	b.n	8006744 <UART_SetConfig+0x348>
 8006570:	2310      	movs	r3, #16
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e0e6      	b.n	8006744 <UART_SetConfig+0x348>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a56      	ldr	r2, [pc, #344]	; (80066d4 <UART_SetConfig+0x2d8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d120      	bne.n	80065c2 <UART_SetConfig+0x1c6>
 8006580:	4b51      	ldr	r3, [pc, #324]	; (80066c8 <UART_SetConfig+0x2cc>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800658a:	2bc0      	cmp	r3, #192	; 0xc0
 800658c:	d013      	beq.n	80065b6 <UART_SetConfig+0x1ba>
 800658e:	2bc0      	cmp	r3, #192	; 0xc0
 8006590:	d814      	bhi.n	80065bc <UART_SetConfig+0x1c0>
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d009      	beq.n	80065aa <UART_SetConfig+0x1ae>
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d810      	bhi.n	80065bc <UART_SetConfig+0x1c0>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <UART_SetConfig+0x1a8>
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d006      	beq.n	80065b0 <UART_SetConfig+0x1b4>
 80065a2:	e00b      	b.n	80065bc <UART_SetConfig+0x1c0>
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e0cc      	b.n	8006744 <UART_SetConfig+0x348>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e0c9      	b.n	8006744 <UART_SetConfig+0x348>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e0c6      	b.n	8006744 <UART_SetConfig+0x348>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e0c3      	b.n	8006744 <UART_SetConfig+0x348>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e0c0      	b.n	8006744 <UART_SetConfig+0x348>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a44      	ldr	r2, [pc, #272]	; (80066d8 <UART_SetConfig+0x2dc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d125      	bne.n	8006618 <UART_SetConfig+0x21c>
 80065cc:	4b3e      	ldr	r3, [pc, #248]	; (80066c8 <UART_SetConfig+0x2cc>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065da:	d017      	beq.n	800660c <UART_SetConfig+0x210>
 80065dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e0:	d817      	bhi.n	8006612 <UART_SetConfig+0x216>
 80065e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e6:	d00b      	beq.n	8006600 <UART_SetConfig+0x204>
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d811      	bhi.n	8006612 <UART_SetConfig+0x216>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <UART_SetConfig+0x1fe>
 80065f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f6:	d006      	beq.n	8006606 <UART_SetConfig+0x20a>
 80065f8:	e00b      	b.n	8006612 <UART_SetConfig+0x216>
 80065fa:	2300      	movs	r3, #0
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e0a1      	b.n	8006744 <UART_SetConfig+0x348>
 8006600:	2302      	movs	r3, #2
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e09e      	b.n	8006744 <UART_SetConfig+0x348>
 8006606:	2304      	movs	r3, #4
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e09b      	b.n	8006744 <UART_SetConfig+0x348>
 800660c:	2308      	movs	r3, #8
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e098      	b.n	8006744 <UART_SetConfig+0x348>
 8006612:	2310      	movs	r3, #16
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e095      	b.n	8006744 <UART_SetConfig+0x348>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <UART_SetConfig+0x2e0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d125      	bne.n	800666e <UART_SetConfig+0x272>
 8006622:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <UART_SetConfig+0x2cc>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006628:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800662c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006630:	d017      	beq.n	8006662 <UART_SetConfig+0x266>
 8006632:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006636:	d817      	bhi.n	8006668 <UART_SetConfig+0x26c>
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663c:	d00b      	beq.n	8006656 <UART_SetConfig+0x25a>
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006642:	d811      	bhi.n	8006668 <UART_SetConfig+0x26c>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <UART_SetConfig+0x254>
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664c:	d006      	beq.n	800665c <UART_SetConfig+0x260>
 800664e:	e00b      	b.n	8006668 <UART_SetConfig+0x26c>
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e076      	b.n	8006744 <UART_SetConfig+0x348>
 8006656:	2302      	movs	r3, #2
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e073      	b.n	8006744 <UART_SetConfig+0x348>
 800665c:	2304      	movs	r3, #4
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e070      	b.n	8006744 <UART_SetConfig+0x348>
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e06d      	b.n	8006744 <UART_SetConfig+0x348>
 8006668:	2310      	movs	r3, #16
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e06a      	b.n	8006744 <UART_SetConfig+0x348>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <UART_SetConfig+0x2e4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d138      	bne.n	80066ea <UART_SetConfig+0x2ee>
 8006678:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <UART_SetConfig+0x2cc>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006686:	d017      	beq.n	80066b8 <UART_SetConfig+0x2bc>
 8006688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800668c:	d82a      	bhi.n	80066e4 <UART_SetConfig+0x2e8>
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006692:	d00b      	beq.n	80066ac <UART_SetConfig+0x2b0>
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d824      	bhi.n	80066e4 <UART_SetConfig+0x2e8>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <UART_SetConfig+0x2aa>
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	d006      	beq.n	80066b2 <UART_SetConfig+0x2b6>
 80066a4:	e01e      	b.n	80066e4 <UART_SetConfig+0x2e8>
 80066a6:	2300      	movs	r3, #0
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e04b      	b.n	8006744 <UART_SetConfig+0x348>
 80066ac:	2302      	movs	r3, #2
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e048      	b.n	8006744 <UART_SetConfig+0x348>
 80066b2:	2304      	movs	r3, #4
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e045      	b.n	8006744 <UART_SetConfig+0x348>
 80066b8:	2308      	movs	r3, #8
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e042      	b.n	8006744 <UART_SetConfig+0x348>
 80066be:	bf00      	nop
 80066c0:	efff69f3 	.word	0xefff69f3
 80066c4:	40011000 	.word	0x40011000
 80066c8:	40023800 	.word	0x40023800
 80066cc:	40004400 	.word	0x40004400
 80066d0:	40004800 	.word	0x40004800
 80066d4:	40004c00 	.word	0x40004c00
 80066d8:	40005000 	.word	0x40005000
 80066dc:	40011400 	.word	0x40011400
 80066e0:	40007800 	.word	0x40007800
 80066e4:	2310      	movs	r3, #16
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e02c      	b.n	8006744 <UART_SetConfig+0x348>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a72      	ldr	r2, [pc, #456]	; (80068b8 <UART_SetConfig+0x4bc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d125      	bne.n	8006740 <UART_SetConfig+0x344>
 80066f4:	4b71      	ldr	r3, [pc, #452]	; (80068bc <UART_SetConfig+0x4c0>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006702:	d017      	beq.n	8006734 <UART_SetConfig+0x338>
 8006704:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006708:	d817      	bhi.n	800673a <UART_SetConfig+0x33e>
 800670a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670e:	d00b      	beq.n	8006728 <UART_SetConfig+0x32c>
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d811      	bhi.n	800673a <UART_SetConfig+0x33e>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <UART_SetConfig+0x326>
 800671a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671e:	d006      	beq.n	800672e <UART_SetConfig+0x332>
 8006720:	e00b      	b.n	800673a <UART_SetConfig+0x33e>
 8006722:	2300      	movs	r3, #0
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e00d      	b.n	8006744 <UART_SetConfig+0x348>
 8006728:	2302      	movs	r3, #2
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e00a      	b.n	8006744 <UART_SetConfig+0x348>
 800672e:	2304      	movs	r3, #4
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e007      	b.n	8006744 <UART_SetConfig+0x348>
 8006734:	2308      	movs	r3, #8
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e004      	b.n	8006744 <UART_SetConfig+0x348>
 800673a:	2310      	movs	r3, #16
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e001      	b.n	8006744 <UART_SetConfig+0x348>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	d15b      	bne.n	8006806 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d828      	bhi.n	80067a6 <UART_SetConfig+0x3aa>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x360>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fe f9d4 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 8006784:	61b8      	str	r0, [r7, #24]
        break;
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fe f9e4 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 800678c:	61b8      	str	r0, [r7, #24]
        break;
 800678e:	e00f      	b.n	80067b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <UART_SetConfig+0x4c4>)
 8006792:	61bb      	str	r3, [r7, #24]
        break;
 8006794:	e00c      	b.n	80067b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe f8b7 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 800679a:	61b8      	str	r0, [r7, #24]
        break;
 800679c:	e008      	b.n	80067b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e004      	b.n	80067b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	77bb      	strb	r3, [r7, #30]
        break;
 80067ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d074      	beq.n	80068a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	005a      	lsls	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d916      	bls.n	8006800 <UART_SetConfig+0x404>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d212      	bcs.n	8006800 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f023 030f 	bic.w	r3, r3, #15
 80067e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	89fa      	ldrh	r2, [r7, #14]
 80067fc:	60da      	str	r2, [r3, #12]
 80067fe:	e04f      	b.n	80068a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	77bb      	strb	r3, [r7, #30]
 8006804:	e04c      	b.n	80068a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	2b08      	cmp	r3, #8
 800680a:	d828      	bhi.n	800685e <UART_SetConfig+0x462>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x418>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006839 	.word	0x08006839
 8006818:	08006841 	.word	0x08006841
 800681c:	08006849 	.word	0x08006849
 8006820:	0800685f 	.word	0x0800685f
 8006824:	0800684f 	.word	0x0800684f
 8006828:	0800685f 	.word	0x0800685f
 800682c:	0800685f 	.word	0x0800685f
 8006830:	0800685f 	.word	0x0800685f
 8006834:	08006857 	.word	0x08006857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe f978 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 800683c:	61b8      	str	r0, [r7, #24]
        break;
 800683e:	e013      	b.n	8006868 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006840:	f7fe f988 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006844:	61b8      	str	r0, [r7, #24]
        break;
 8006846:	e00f      	b.n	8006868 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <UART_SetConfig+0x4c4>)
 800684a:	61bb      	str	r3, [r7, #24]
        break;
 800684c:	e00c      	b.n	8006868 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684e:	f7fe f85b 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006852:	61b8      	str	r0, [r7, #24]
        break;
 8006854:	e008      	b.n	8006868 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685a:	61bb      	str	r3, [r7, #24]
        break;
 800685c:	e004      	b.n	8006868 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	77bb      	strb	r3, [r7, #30]
        break;
 8006866:	bf00      	nop
    }

    if (pclk != 0U)
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d018      	beq.n	80068a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	085a      	lsrs	r2, r3, #1
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	441a      	add	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006880:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b0f      	cmp	r3, #15
 8006886:	d909      	bls.n	800689c <UART_SetConfig+0x4a0>
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688e:	d205      	bcs.n	800689c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	b29a      	uxth	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	e001      	b.n	80068a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40007c00 	.word	0x40007c00
 80068bc:	40023800 	.word	0x40023800
 80068c0:	00f42400 	.word	0x00f42400

080068c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01a      	beq.n	80069da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c2:	d10a      	bne.n	80069da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a18:	f7fa ffba 	bl	8001990 <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d10e      	bne.n	8006a4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f831 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e027      	b.n	8006a9a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d10e      	bne.n	8006a76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f81b 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e011      	b.n	8006a9a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b09c      	sub	sp, #112	; 0x70
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab2:	e0a7      	b.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	f000 80a3 	beq.w	8006c04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fa ff67 	bl	8001990 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d13f      	bne.n	8006b54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006af4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e6      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b26:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e068      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d050      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b70:	d148      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e6      	bne.n	8006b7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bce:	623a      	str	r2, [r7, #32]
 8006bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	69f9      	ldr	r1, [r7, #28]
 8006bd4:	6a3a      	ldr	r2, [r7, #32]
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e010      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69da      	ldr	r2, [r3, #28]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	f43f af48 	beq.w	8006ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3770      	adds	r7, #112	; 0x70
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c30:	b084      	sub	sp, #16
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	f107 001c 	add.w	r0, r7, #28
 8006c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d120      	bne.n	8006c8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <USB_CoreInit+0xac>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d105      	bne.n	8006c7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fbee 	bl	8008460 <USB_CoreReset>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e010      	b.n	8006cac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fbe2 	bl	8008460 <USB_CoreReset>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d10b      	bne.n	8006cca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f043 0206 	orr.w	r2, r3, #6
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f043 0220 	orr.w	r2, r3, #32
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd6:	b004      	add	sp, #16
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	ffbdffbf 	.word	0xffbdffbf

08006ce0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d165      	bne.n	8006dc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4a41      	ldr	r2, [pc, #260]	; (8006dfc <USB_SetTurnaroundTime+0x11c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d906      	bls.n	8006d0a <USB_SetTurnaroundTime+0x2a>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4a40      	ldr	r2, [pc, #256]	; (8006e00 <USB_SetTurnaroundTime+0x120>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d202      	bcs.n	8006d0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d04:	230f      	movs	r3, #15
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e062      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	; (8006e00 <USB_SetTurnaroundTime+0x120>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d306      	bcc.n	8006d20 <USB_SetTurnaroundTime+0x40>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a3b      	ldr	r2, [pc, #236]	; (8006e04 <USB_SetTurnaroundTime+0x124>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d202      	bcs.n	8006d20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d1a:	230e      	movs	r3, #14
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e057      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4a38      	ldr	r2, [pc, #224]	; (8006e04 <USB_SetTurnaroundTime+0x124>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d306      	bcc.n	8006d36 <USB_SetTurnaroundTime+0x56>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a37      	ldr	r2, [pc, #220]	; (8006e08 <USB_SetTurnaroundTime+0x128>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d202      	bcs.n	8006d36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d30:	230d      	movs	r3, #13
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e04c      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a33      	ldr	r2, [pc, #204]	; (8006e08 <USB_SetTurnaroundTime+0x128>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d306      	bcc.n	8006d4c <USB_SetTurnaroundTime+0x6c>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4a32      	ldr	r2, [pc, #200]	; (8006e0c <USB_SetTurnaroundTime+0x12c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d802      	bhi.n	8006d4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d46:	230c      	movs	r3, #12
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e041      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4a2f      	ldr	r2, [pc, #188]	; (8006e0c <USB_SetTurnaroundTime+0x12c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d906      	bls.n	8006d62 <USB_SetTurnaroundTime+0x82>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4a2e      	ldr	r2, [pc, #184]	; (8006e10 <USB_SetTurnaroundTime+0x130>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d802      	bhi.n	8006d62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d5c:	230b      	movs	r3, #11
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e036      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <USB_SetTurnaroundTime+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d906      	bls.n	8006d78 <USB_SetTurnaroundTime+0x98>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4a29      	ldr	r2, [pc, #164]	; (8006e14 <USB_SetTurnaroundTime+0x134>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d802      	bhi.n	8006d78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d72:	230a      	movs	r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e02b      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <USB_SetTurnaroundTime+0x134>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d906      	bls.n	8006d8e <USB_SetTurnaroundTime+0xae>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a25      	ldr	r2, [pc, #148]	; (8006e18 <USB_SetTurnaroundTime+0x138>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d202      	bcs.n	8006d8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d88:	2309      	movs	r3, #9
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e020      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <USB_SetTurnaroundTime+0x138>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d306      	bcc.n	8006da4 <USB_SetTurnaroundTime+0xc4>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <USB_SetTurnaroundTime+0x13c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d802      	bhi.n	8006da4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d9e:	2308      	movs	r3, #8
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e015      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <USB_SetTurnaroundTime+0x13c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d906      	bls.n	8006dba <USB_SetTurnaroundTime+0xda>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <USB_SetTurnaroundTime+0x140>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d202      	bcs.n	8006dba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006db4:	2307      	movs	r3, #7
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e00a      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dba:	2306      	movs	r3, #6
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e007      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006dc6:	2309      	movs	r3, #9
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e001      	b.n	8006dd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006dcc:	2309      	movs	r3, #9
 8006dce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	029b      	lsls	r3, r3, #10
 8006de4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	00d8acbf 	.word	0x00d8acbf
 8006e00:	00e4e1c0 	.word	0x00e4e1c0
 8006e04:	00f42400 	.word	0x00f42400
 8006e08:	01067380 	.word	0x01067380
 8006e0c:	011a499f 	.word	0x011a499f
 8006e10:	01312cff 	.word	0x01312cff
 8006e14:	014ca43f 	.word	0x014ca43f
 8006e18:	016e3600 	.word	0x016e3600
 8006e1c:	01a6ab1f 	.word	0x01a6ab1f
 8006e20:	01e84800 	.word	0x01e84800

08006e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d115      	bne.n	8006eb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e96:	2001      	movs	r0, #1
 8006e98:	f7fa fd86 	bl	80019a8 <HAL_Delay>
      ms++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fa4b 	bl	800833e <USB_GetMode>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d01e      	beq.n	8006eec <USB_SetCurrentMode+0x84>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b31      	cmp	r3, #49	; 0x31
 8006eb2:	d9f0      	bls.n	8006e96 <USB_SetCurrentMode+0x2e>
 8006eb4:	e01a      	b.n	8006eec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d115      	bne.n	8006ee8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fa fd6d 	bl	80019a8 <HAL_Delay>
      ms++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fa32 	bl	800833e <USB_GetMode>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <USB_SetCurrentMode+0x84>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b31      	cmp	r3, #49	; 0x31
 8006ee4:	d9f0      	bls.n	8006ec8 <USB_SetCurrentMode+0x60>
 8006ee6:	e001      	b.n	8006eec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e005      	b.n	8006ef8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b32      	cmp	r3, #50	; 0x32
 8006ef0:	d101      	bne.n	8006ef6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f00:	b084      	sub	sp, #16
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	e009      	b.n	8006f34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3340      	adds	r3, #64	; 0x40
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3301      	adds	r3, #1
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b0e      	cmp	r3, #14
 8006f38:	d9f2      	bls.n	8006f20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11c      	bne.n	8006f7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f4e:	f043 0302 	orr.w	r3, r3, #2
 8006f52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e005      	b.n	8006f86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	680b      	ldr	r3, [r1, #0]
 8006fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10c      	bne.n	8006fc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f965 	bl	8007284 <USB_SetDevSpeed>
 8006fba:	e008      	b.n	8006fce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f960 	bl	8007284 <USB_SetDevSpeed>
 8006fc4:	e003      	b.n	8006fce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fc6:	2103      	movs	r1, #3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f95b 	bl	8007284 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fce:	2110      	movs	r1, #16
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f8f3 	bl	80071bc <USB_FlushTxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f91f 	bl	8007224 <USB_FlushRxFifo>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	461a      	mov	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	461a      	mov	r2, r3
 8007010:	2300      	movs	r3, #0
 8007012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	e043      	b.n	80070a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800702c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007030:	d118      	bne.n	8007064 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	461a      	mov	r2, r3
 8007046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e013      	b.n	8007076 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	461a      	mov	r2, r3
 800705c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e008      	b.n	8007076 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	461a      	mov	r2, r3
 8007072:	2300      	movs	r3, #0
 8007074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	461a      	mov	r2, r3
 8007096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800709a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3301      	adds	r3, #1
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d3b7      	bcc.n	800701a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e043      	b.n	8007138 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c6:	d118      	bne.n	80070fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e013      	b.n	800710c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	461a      	mov	r2, r3
 80070f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e008      	b.n	800710c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	461a      	mov	r2, r3
 8007108:	2300      	movs	r3, #0
 800710a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	461a      	mov	r2, r3
 800711a:	2300      	movs	r3, #0
 800711c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	461a      	mov	r2, r3
 800712c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3301      	adds	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	429a      	cmp	r2, r3
 800713e:	d3b7      	bcc.n	80070b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800714e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007152:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007160:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d105      	bne.n	8007174 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f043 0210 	orr.w	r2, r3, #16
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <USB_DevInit+0x2b4>)
 800717a:	4313      	orrs	r3, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f043 0208 	orr.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d105      	bne.n	80071a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <USB_DevInit+0x2b8>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b0:	b004      	add	sp, #16
 80071b2:	4770      	bx	lr
 80071b4:	803c3800 	.word	0x803c3800
 80071b8:	40000004 	.word	0x40000004

080071bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3301      	adds	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <USB_FlushTxFifo+0x64>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d901      	bls.n	80071dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e01b      	b.n	8007214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	daf2      	bge.n	80071ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	019b      	lsls	r3, r3, #6
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a08      	ldr	r2, [pc, #32]	; (8007220 <USB_FlushTxFifo+0x64>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d901      	bls.n	8007206 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e006      	b.n	8007214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b20      	cmp	r3, #32
 8007210:	d0f0      	beq.n	80071f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	00030d40 	.word	0x00030d40

08007224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4a11      	ldr	r2, [pc, #68]	; (8007280 <USB_FlushRxFifo+0x5c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e018      	b.n	8007274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	daf2      	bge.n	8007230 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2210      	movs	r2, #16
 8007252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a08      	ldr	r2, [pc, #32]	; (8007280 <USB_FlushRxFifo+0x5c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d901      	bls.n	8007266 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e006      	b.n	8007274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b10      	cmp	r3, #16
 8007270:	d0f0      	beq.n	8007254 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	00030d40 	.word	0x00030d40

08007284 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a4:	4313      	orrs	r3, r2
 80072a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0306 	and.w	r3, r3, #6
 80072ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072d6:	2300      	movs	r3, #0
 80072d8:	75fb      	strb	r3, [r7, #23]
 80072da:	e00a      	b.n	80072f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d002      	beq.n	80072e8 <USB_GetDevSpeed+0x32>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d102      	bne.n	80072ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072e8:	2302      	movs	r3, #2
 80072ea:	75fb      	strb	r3, [r7, #23]
 80072ec:	e001      	b.n	80072f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072ee:	230f      	movs	r3, #15
 80072f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d139      	bne.n	8007390 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	2101      	movs	r1, #1
 800732e:	fa01 f303 	lsl.w	r3, r1, r3
 8007332:	b29b      	uxth	r3, r3
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800733a:	4313      	orrs	r3, r2
 800733c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d153      	bne.n	80073fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	791b      	ldrb	r3, [r3, #4]
 800736e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007370:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	059b      	lsls	r3, r3, #22
 8007376:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007378:	431a      	orrs	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	0159      	lsls	r1, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	440b      	add	r3, r1
 8007382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007386:	4619      	mov	r1, r3
 8007388:	4b20      	ldr	r3, [pc, #128]	; (800740c <USB_ActivateEndpoint+0x10c>)
 800738a:	4313      	orrs	r3, r2
 800738c:	600b      	str	r3, [r1, #0]
 800738e:	e035      	b.n	80073fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	2101      	movs	r1, #1
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d119      	bne.n	80073fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	791b      	ldrb	r3, [r3, #4]
 80073e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073e4:	430b      	orrs	r3, r1
 80073e6:	431a      	orrs	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	0159      	lsls	r1, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	440b      	add	r3, r1
 80073f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f4:	4619      	mov	r1, r3
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <USB_ActivateEndpoint+0x10c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	10008000 	.word	0x10008000

08007410 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d161      	bne.n	80074f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800743e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007442:	d11f      	bne.n	8007484 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007462:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	2101      	movs	r1, #1
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	b29b      	uxth	r3, r3
 800749c:	43db      	mvns	r3, r3
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a4:	4013      	ands	r3, r2
 80074a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	b29b      	uxth	r3, r3
 80074c0:	43db      	mvns	r3, r3
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c8:	4013      	ands	r3, r2
 80074ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	0159      	lsls	r1, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	440b      	add	r3, r1
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	4619      	mov	r1, r3
 80074e8:	4b35      	ldr	r3, [pc, #212]	; (80075c0 <USB_DeactivateEndpoint+0x1b0>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	e060      	b.n	80075b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007506:	d11f      	bne.n	8007548 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007526:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	43db      	mvns	r3, r3
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007568:	4013      	ands	r3, r2
 800756a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	041b      	lsls	r3, r3, #16
 8007584:	43db      	mvns	r3, r3
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758c:	4013      	ands	r3, r2
 800758e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	0159      	lsls	r1, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	440b      	add	r3, r1
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	4619      	mov	r1, r3
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <USB_DeactivateEndpoint+0x1b4>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	ec337800 	.word	0xec337800
 80075c4:	eff37800 	.word	0xeff37800

080075c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	4613      	mov	r3, r2
 80075d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 8163 	bne.w	80078b0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d132      	bne.n	8007658 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	0159      	lsls	r1, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	440b      	add	r3, r1
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	4619      	mov	r1, r3
 800760e:	4ba5      	ldr	r3, [pc, #660]	; (80078a4 <USB_EPStartXfer+0x2dc>)
 8007610:	4013      	ands	r3, r2
 8007612:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	0159      	lsls	r1, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	440b      	add	r3, r1
 800764a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764e:	4619      	mov	r1, r3
 8007650:	4b95      	ldr	r3, [pc, #596]	; (80078a8 <USB_EPStartXfer+0x2e0>)
 8007652:	4013      	ands	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
 8007656:	e074      	b.n	8007742 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	0159      	lsls	r1, r3, #5
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	440b      	add	r3, r1
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	4619      	mov	r1, r3
 8007674:	4b8c      	ldr	r3, [pc, #560]	; (80078a8 <USB_EPStartXfer+0x2e0>)
 8007676:	4013      	ands	r3, r2
 8007678:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	0159      	lsls	r1, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	440b      	add	r3, r1
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	4619      	mov	r1, r3
 8007696:	4b83      	ldr	r3, [pc, #524]	; (80078a4 <USB_EPStartXfer+0x2dc>)
 8007698:	4013      	ands	r3, r2
 800769a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6999      	ldr	r1, [r3, #24]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	440b      	add	r3, r1
 80076b4:	1e59      	subs	r1, r3, #1
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80076be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076c0:	4b7a      	ldr	r3, [pc, #488]	; (80078ac <USB_EPStartXfer+0x2e4>)
 80076c2:	400b      	ands	r3, r1
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	0148      	lsls	r0, r1, #5
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	4401      	add	r1, r0
 80076cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	0148      	lsls	r0, r1, #5
 80076ee:	69f9      	ldr	r1, [r7, #28]
 80076f0:	4401      	add	r1, r0
 80076f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076f6:	4313      	orrs	r3, r2
 80076f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d11f      	bne.n	8007742 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007720:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007740:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d14b      	bne.n	80077e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775c:	461a      	mov	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	791b      	ldrb	r3, [r3, #4]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d128      	bne.n	80077be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d110      	bne.n	800779e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e00f      	b.n	80077be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e137      	b.n	8007a50 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	791b      	ldrb	r3, [r3, #4]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d015      	beq.n	8007834 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 811f 	beq.w	8007a50 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	2101      	movs	r1, #1
 8007824:	fa01 f303 	lsl.w	r3, r1, r3
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800782e:	4313      	orrs	r3, r2
 8007830:	634b      	str	r3, [r1, #52]	; 0x34
 8007832:	e10d      	b.n	8007a50 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d110      	bne.n	8007866 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e00f      	b.n	8007886 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007884:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6919      	ldr	r1, [r3, #16]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	b298      	uxth	r0, r3
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4603      	mov	r3, r0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 faea 	bl	8007e74 <USB_WritePacket>
 80078a0:	e0d6      	b.n	8007a50 <USB_EPStartXfer+0x488>
 80078a2:	bf00      	nop
 80078a4:	e007ffff 	.word	0xe007ffff
 80078a8:	fff80000 	.word	0xfff80000
 80078ac:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	0159      	lsls	r1, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	4619      	mov	r1, r3
 80078cc:	4b63      	ldr	r3, [pc, #396]	; (8007a5c <USB_EPStartXfer+0x494>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	0159      	lsls	r1, r3, #5
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	440b      	add	r3, r1
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	4619      	mov	r1, r3
 80078ee:	4b5c      	ldr	r3, [pc, #368]	; (8007a60 <USB_EPStartXfer+0x498>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d123      	bne.n	8007944 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007912:	69b9      	ldr	r1, [r7, #24]
 8007914:	0148      	lsls	r0, r1, #5
 8007916:	69f9      	ldr	r1, [r7, #28]
 8007918:	4401      	add	r1, r0
 800791a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800791e:	4313      	orrs	r3, r2
 8007920:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007940:	6113      	str	r3, [r2, #16]
 8007942:	e037      	b.n	80079b4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	4413      	add	r3, r2
 800794e:	1e5a      	subs	r2, r3, #1
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	8afa      	ldrh	r2, [r7, #22]
 8007960:	fb03 f202 	mul.w	r2, r3, r2
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	8afb      	ldrh	r3, [r7, #22]
 8007978:	04d9      	lsls	r1, r3, #19
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <USB_EPStartXfer+0x49c>)
 800797c:	400b      	ands	r3, r1
 800797e:	69b9      	ldr	r1, [r7, #24]
 8007980:	0148      	lsls	r0, r1, #5
 8007982:	69f9      	ldr	r1, [r7, #28]
 8007984:	4401      	add	r1, r0
 8007986:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	0148      	lsls	r0, r1, #5
 80079a8:	69f9      	ldr	r1, [r7, #28]
 80079aa:	4401      	add	r1, r0
 80079ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079b0:	4313      	orrs	r3, r2
 80079b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10d      	bne.n	80079d6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6919      	ldr	r1, [r3, #16]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	460a      	mov	r2, r1
 80079d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	791b      	ldrb	r3, [r3, #4]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d128      	bne.n	8007a30 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e00f      	b.n	8007a30 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	fff80000 	.word	0xfff80000
 8007a60:	e007ffff 	.word	0xe007ffff
 8007a64:	1ff80000 	.word	0x1ff80000

08007a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 80ce 	bne.w	8007c26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d132      	bne.n	8007af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	0159      	lsls	r1, r3, #5
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aac:	4619      	mov	r1, r3
 8007aae:	4b9a      	ldr	r3, [pc, #616]	; (8007d18 <USB_EP0StartXfer+0x2b0>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	0159      	lsls	r1, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	440b      	add	r3, r1
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	4619      	mov	r1, r3
 8007af0:	4b8a      	ldr	r3, [pc, #552]	; (8007d1c <USB_EP0StartXfer+0x2b4>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	610b      	str	r3, [r1, #16]
 8007af6:	e04e      	b.n	8007b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	0159      	lsls	r1, r3, #5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	440b      	add	r3, r1
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b12:	4619      	mov	r1, r3
 8007b14:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <USB_EP0StartXfer+0x2b4>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	0159      	lsls	r1, r3, #5
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	440b      	add	r3, r1
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	4619      	mov	r1, r3
 8007b36:	4b78      	ldr	r3, [pc, #480]	; (8007d18 <USB_EP0StartXfer+0x2b0>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d903      	bls.n	8007b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b86:	6939      	ldr	r1, [r7, #16]
 8007b88:	0148      	lsls	r0, r1, #5
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	4401      	add	r1, r0
 8007b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b92:	4313      	orrs	r3, r2
 8007b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d11e      	bne.n	8007bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e097      	b.n	8007d0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8083 	beq.w	8007d0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	2101      	movs	r1, #1
 8007c16:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c20:	4313      	orrs	r3, r2
 8007c22:	634b      	str	r3, [r1, #52]	; 0x34
 8007c24:	e071      	b.n	8007d0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	0159      	lsls	r1, r3, #5
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c40:	4619      	mov	r1, r3
 8007c42:	4b36      	ldr	r3, [pc, #216]	; (8007d1c <USB_EP0StartXfer+0x2b4>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	691a      	ldr	r2, [r3, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	0159      	lsls	r1, r3, #5
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	440b      	add	r3, r1
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	4619      	mov	r1, r3
 8007c64:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <USB_EP0StartXfer+0x2b0>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb8:	6939      	ldr	r1, [r7, #16]
 8007cba:	0148      	lsls	r0, r1, #5
 8007cbc:	6979      	ldr	r1, [r7, #20]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10d      	bne.n	8007cea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6919      	ldr	r1, [r3, #16]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	e007ffff 	.word	0xe007ffff
 8007d1c:	fff80000 	.word	0xfff80000

08007d20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d14a      	bne.n	8007dd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d56:	f040 8086 	bne.w	8007e66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	7812      	ldrb	r2, [r2, #0]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	0151      	lsls	r1, r2, #5
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	440a      	add	r2, r1
 8007d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007da0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d902      	bls.n	8007db8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
          break;
 8007db6:	e056      	b.n	8007e66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd0:	d0e7      	beq.n	8007da2 <USB_EPStopXfer+0x82>
 8007dd2:	e048      	b.n	8007e66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dec:	d13b      	bne.n	8007e66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d902      	bls.n	8007e4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4a:	e00c      	b.n	8007e66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e64:	d0e7      	beq.n	8007e36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	460b      	mov	r3, r1
 8007e84:	71fb      	strb	r3, [r7, #7]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d123      	bne.n	8007ee2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e9a:	88bb      	ldrh	r3, [r7, #4]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	e018      	b.n	8007eda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	031a      	lsls	r2, r3, #12
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d3e2      	bcc.n	8007ea8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3724      	adds	r7, #36	; 0x24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b08b      	sub	sp, #44	; 0x2c
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f16:	2300      	movs	r3, #0
 8007f18:	623b      	str	r3, [r7, #32]
 8007f1a:	e014      	b.n	8007f46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	3301      	adds	r3, #1
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	3301      	adds	r3, #1
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	3301      	adds	r3, #1
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3e6      	bcc.n	8007f1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f4e:	8bfb      	ldrh	r3, [r7, #30]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01e      	beq.n	8007f92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f107 0310 	add.w	r3, r7, #16
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	701a      	strb	r2, [r3, #0]
      i++;
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	3301      	adds	r3, #1
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f86:	8bfb      	ldrh	r3, [r7, #30]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f8c:	8bfb      	ldrh	r3, [r7, #30]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1ea      	bne.n	8007f68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	372c      	adds	r7, #44	; 0x2c
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d12c      	bne.n	8008016 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	db12      	blt.n	8007ff4 <USB_EPSetStall+0x54>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00f      	beq.n	8007ff4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ff2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e02b      	b.n	800806e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	db12      	blt.n	800804e <USB_EPSetStall+0xae>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00f      	beq.n	800804e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800804c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800806c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d128      	bne.n	80080ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	791b      	ldrb	r3, [r3, #4]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d003      	beq.n	80080c8 <USB_EPClearStall+0x4c>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d138      	bne.n	800813a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	e027      	b.n	800813a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008104:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008108:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	791b      	ldrb	r3, [r3, #4]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d003      	beq.n	800811a <USB_EPClearStall+0x9e>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d10f      	bne.n	800813a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008138:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008166:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800816a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008182:	4313      	orrs	r3, r2
 8008184:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c2:	f023 0302 	bic.w	r3, r3, #2
 80081c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081f0:	f023 0303 	bic.w	r3, r3, #3
 80081f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4013      	ands	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	0c1b      	lsrs	r3, r3, #16
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	4013      	ands	r3, r2
 8008294:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	b29b      	uxth	r3, r3
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4013      	ands	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082d4:	68bb      	ldr	r3, [r7, #8]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b087      	sub	sp, #28
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	fa22 f303 	lsr.w	r3, r2, r3
 8008312:	01db      	lsls	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4013      	ands	r3, r2
 800832e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008330:	68bb      	ldr	r3, [r7, #8]
}
 8008332:	4618      	mov	r0, r3
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	f003 0301 	and.w	r3, r3, #1
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008376:	4619      	mov	r1, r3
 8008378:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <USB_ActivateSetup+0x44>)
 800837a:	4013      	ands	r3, r2
 800837c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800838c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	fffff800 	.word	0xfffff800

080083a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	460b      	mov	r3, r1
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	333c      	adds	r3, #60	; 0x3c
 80083ba:	3304      	adds	r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4a26      	ldr	r2, [pc, #152]	; (800845c <USB_EP0_OutStart+0xb8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d90a      	bls.n	80083de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d8:	d101      	bne.n	80083de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e037      	b.n	800844e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840c:	f043 0318 	orr.w	r3, r3, #24
 8008410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008424:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d10f      	bne.n	800844c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800844a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	4f54300a 	.word	0x4f54300a

08008460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <USB_CoreReset+0x64>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d901      	bls.n	800847e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e01b      	b.n	80084b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	daf2      	bge.n	800846c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f043 0201 	orr.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <USB_CoreReset+0x64>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d901      	bls.n	80084a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e006      	b.n	80084b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d0f0      	beq.n	8008496 <USB_CoreReset+0x36>

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	00030d40 	.word	0x00030d40

080084c8 <HiL_Init_MSGQ>:
#include "HiL_Init_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
extern osMessageQueueId_t USB_MSGQ_Tx;

int HiL_Init_MSGQ (void) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 80084cc:	2200      	movs	r2, #0
 80084ce:	2104      	movs	r1, #4
 80084d0:	200a      	movs	r0, #10
 80084d2:	f002 fafb 	bl	800aacc <osMessageQueueNew>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4a0d      	ldr	r2, [pc, #52]	; (8008510 <HiL_Init_MSGQ+0x48>)
 80084da:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 80084dc:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HiL_Init_MSGQ+0x48>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <HiL_Init_MSGQ+0x22>
	  return -1;
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295
 80084e8:	e00f      	b.n	800850a <HiL_Init_MSGQ+0x42>
  }
  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 80084ea:	2200      	movs	r2, #0
 80084ec:	2104      	movs	r1, #4
 80084ee:	200a      	movs	r0, #10
 80084f0:	f002 faec 	bl	800aacc <osMessageQueueNew>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4a07      	ldr	r2, [pc, #28]	; (8008514 <HiL_Init_MSGQ+0x4c>)
 80084f8:	6013      	str	r3, [r2, #0]
    if (USB_MSGQ_Tx == NULL) {
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <HiL_Init_MSGQ+0x4c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <HiL_Init_MSGQ+0x40>
  	  return -1;
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	e000      	b.n	800850a <HiL_Init_MSGQ+0x42>
    }
  return 0;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	200005f8 	.word	0x200005f8
 8008514:	200005fc 	.word	0x200005fc

08008518 <HiL_controller_copy_array>:
int recieved_data[4];
int controller_reply[2];


void HiL_controller_copy_array(int* to_be_copied)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<4; i++)
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e00b      	b.n	800853e <HiL_controller_copy_array+0x26>
	{
		recieved_data[i] = to_be_copied[i];
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	4908      	ldr	r1, [pc, #32]	; (8008554 <HiL_controller_copy_array+0x3c>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<4; i++)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b03      	cmp	r3, #3
 8008542:	ddf0      	ble.n	8008526 <HiL_controller_copy_array+0xe>
	}
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	2000065c 	.word	0x2000065c

08008558 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(int* recieved_data)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 8008560:	4b2c      	ldr	r3, [pc, #176]	; (8008614 <HiL_controller_read_message+0xbc>)
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <HiL_controller_read_message+0xbc>)
 8008568:	2200      	movs	r2, #0
 800856a:	605a      	str	r2, [r3, #4]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff ffd3 	bl	8008518 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d83b      	bhi.n	80085f2 <HiL_controller_read_message+0x9a>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HiL_controller_read_message+0x28>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008591 	.word	0x08008591
 8008584:	08008597 	.word	0x08008597
 8008588:	080085c3 	.word	0x080085c3
 800858c:	080085db 	.word	0x080085db
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 8008590:	f000 f842 	bl	8008618 <HiL_controller_send_message>
			break;
 8008594:	e039      	b.n	800860a <HiL_controller_read_message+0xb2>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800859a:	681a      	ldr	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3308      	adds	r3, #8
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f000 f871 	bl	800868c <HiL_mcu_commands_binary_action>
 80085aa:	4603      	mov	r3, r0
 80085ac:	4a19      	ldr	r2, [pc, #100]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085ae:	6013      	str	r3, [r2, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 80085b0:	4b18      	ldr	r3, [pc, #96]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085b6:	6852      	ldr	r2, [r2, #4]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f856 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 80085c0:	e023      	b.n	800860a <HiL_controller_read_message+0xb2>


		case CONTROLLER_REQUEST_POTENTIOMETER:
	
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 80085c2:	4b14      	ldr	r3, [pc, #80]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085c4:	2202      	movs	r2, #2
 80085c6:	601a      	str	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 80085c8:	4b12      	ldr	r3, [pc, #72]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085ce:	6852      	ldr	r2, [r2, #4]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f84a 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 80085d8:	e017      	b.n	800860a <HiL_controller_read_message+0xb2>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 80085da:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085dc:	2202      	movs	r2, #2
 80085de:	601a      	str	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a0b      	ldr	r2, [pc, #44]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085e6:	6852      	ldr	r2, [r2, #4]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 f83e 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 80085f0:	e00b      	b.n	800860a <HiL_controller_read_message+0xb2>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	601a      	str	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a05      	ldr	r2, [pc, #20]	; (8008614 <HiL_controller_read_message+0xbc>)
 80085fe:	6852      	ldr	r2, [r2, #4]
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f832 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2000066c 	.word	0x2000066c

08008618 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <HiL_controller_send_message+0x4c>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d110      	bne.n	8008646 <HiL_controller_send_message+0x2e>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <HiL_controller_send_message+0x4c>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f8d5 	bl	80087d8 <HiL_mcu_commands_binary_status>
 800862e:	4603      	mov	r3, r0
 8008630:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <HiL_controller_send_message+0x50>)
 8008632:	6013      	str	r3, [r2, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <HiL_controller_send_message+0x50>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a0b      	ldr	r2, [pc, #44]	; (8008668 <HiL_controller_send_message+0x50>)
 800863a:	6852      	ldr	r2, [r2, #4]
 800863c:	4611      	mov	r1, r2
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f814 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 8008644:	e00b      	b.n	800865e <HiL_controller_send_message+0x46>


		default:

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 8008646:	4b08      	ldr	r3, [pc, #32]	; (8008668 <HiL_controller_send_message+0x50>)
 8008648:	2202      	movs	r2, #2
 800864a:	601a      	str	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800864c:	4b06      	ldr	r3, [pc, #24]	; (8008668 <HiL_controller_send_message+0x50>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a05      	ldr	r2, [pc, #20]	; (8008668 <HiL_controller_send_message+0x50>)
 8008652:	6852      	ldr	r2, [r2, #4]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f808 	bl	800866c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
	}
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000065c 	.word	0x2000065c
 8008668:	2000066c 	.word	0x2000066c

0800866c <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(int value1, int value2)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	printf("[%i,%i]\n", value1, value2);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4803      	ldr	r0, [pc, #12]	; (8008688 <HiL_gateway_transmit_message+0x1c>)
 800867c:	f006 f8b6 	bl	800e7ec <iprintf>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	0800f48c 	.word	0x0800f48c

0800868c <HiL_mcu_commands_binary_action>:

#include "HiL_mcu_commands.h"


int HiL_mcu_commands_binary_action (int binary_object, int desired_state)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d102      	bne.n	80086a2 <HiL_mcu_commands_binary_action+0x16>
	{
		pin_state = GPIO_PIN_SET;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	e007      	b.n	80086b2 <HiL_mcu_commands_binary_action+0x26>
	}
	else if (desired_state == OFF)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <HiL_mcu_commands_binary_action+0x22>
	{
		pin_state = GPIO_PIN_RESET;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	e001      	b.n	80086b2 <HiL_mcu_commands_binary_action+0x26>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 80086ae:	2303      	movs	r3, #3
 80086b0:	e082      	b.n	80087b8 <HiL_mcu_commands_binary_action+0x12c>
	}

	switch (binary_object)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	d87c      	bhi.n	80087b2 <HiL_mcu_commands_binary_action+0x126>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <HiL_mcu_commands_binary_action+0x34>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086f5 	.word	0x080086f5
 80086c4:	08008703 	.word	0x08008703
 80086c8:	08008713 	.word	0x08008713
 80086cc:	08008721 	.word	0x08008721
 80086d0:	08008731 	.word	0x08008731
 80086d4:	0800873f 	.word	0x0800873f
 80086d8:	0800874d 	.word	0x0800874d
 80086dc:	0800875b 	.word	0x0800875b
 80086e0:	08008769 	.word	0x08008769
 80086e4:	08008777 	.word	0x08008777
 80086e8:	08008787 	.word	0x08008787
 80086ec:	08008795 	.word	0x08008795
 80086f0:	080087a5 	.word	0x080087a5
	{

		case HiL_SW5:
			//HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	461a      	mov	r2, r3
 80086f8:	2180      	movs	r1, #128	; 0x80
 80086fa:	4831      	ldr	r0, [pc, #196]	; (80087c0 <HiL_mcu_commands_binary_action+0x134>)
 80086fc:	f7fa f920 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008700:	e059      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	461a      	mov	r2, r3
 8008706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800870a:	482d      	ldr	r0, [pc, #180]	; (80087c0 <HiL_mcu_commands_binary_action+0x134>)
 800870c:	f7fa f918 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008710:	e051      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	461a      	mov	r2, r3
 8008716:	2110      	movs	r1, #16
 8008718:	4829      	ldr	r0, [pc, #164]	; (80087c0 <HiL_mcu_commands_binary_action+0x134>)
 800871a:	f7fa f911 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 800871e:	e04a      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	461a      	mov	r2, r3
 8008724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008728:	4825      	ldr	r0, [pc, #148]	; (80087c0 <HiL_mcu_commands_binary_action+0x134>)
 800872a:	f7fa f909 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 800872e:	e042      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	461a      	mov	r2, r3
 8008734:	2108      	movs	r1, #8
 8008736:	4823      	ldr	r0, [pc, #140]	; (80087c4 <HiL_mcu_commands_binary_action+0x138>)
 8008738:	f7fa f902 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 800873c:	e03b      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	461a      	mov	r2, r3
 8008742:	2104      	movs	r1, #4
 8008744:	481f      	ldr	r0, [pc, #124]	; (80087c4 <HiL_mcu_commands_binary_action+0x138>)
 8008746:	f7fa f8fb 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 800874a:	e034      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	461a      	mov	r2, r3
 8008750:	2110      	movs	r1, #16
 8008752:	481d      	ldr	r0, [pc, #116]	; (80087c8 <HiL_mcu_commands_binary_action+0x13c>)
 8008754:	f7fa f8f4 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008758:	e02d      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	461a      	mov	r2, r3
 800875e:	2120      	movs	r1, #32
 8008760:	4819      	ldr	r0, [pc, #100]	; (80087c8 <HiL_mcu_commands_binary_action+0x13c>)
 8008762:	f7fa f8ed 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008766:	e026      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	461a      	mov	r2, r3
 800876c:	2140      	movs	r1, #64	; 0x40
 800876e:	4816      	ldr	r0, [pc, #88]	; (80087c8 <HiL_mcu_commands_binary_action+0x13c>)
 8008770:	f7fa f8e6 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008774:	e01f      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	461a      	mov	r2, r3
 800877a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800877e:	4813      	ldr	r0, [pc, #76]	; (80087cc <HiL_mcu_commands_binary_action+0x140>)
 8008780:	f7fa f8de 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008784:	e017      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	461a      	mov	r2, r3
 800878a:	2180      	movs	r1, #128	; 0x80
 800878c:	4810      	ldr	r0, [pc, #64]	; (80087d0 <HiL_mcu_commands_binary_action+0x144>)
 800878e:	f7fa f8d7 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 8008792:	e010      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	461a      	mov	r2, r3
 8008798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800879c:	480d      	ldr	r0, [pc, #52]	; (80087d4 <HiL_mcu_commands_binary_action+0x148>)
 800879e:	f7fa f8cf 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 80087a2:	e008      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	461a      	mov	r2, r3
 80087a8:	2104      	movs	r1, #4
 80087aa:	4807      	ldr	r0, [pc, #28]	; (80087c8 <HiL_mcu_commands_binary_action+0x13c>)
 80087ac:	f7fa f8c8 	bl	8002940 <HAL_GPIO_WritePin>
			break;
 80087b0:	e001      	b.n	80087b6 <HiL_mcu_commands_binary_action+0x12a>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 80087b2:	2302      	movs	r3, #2
 80087b4:	e000      	b.n	80087b8 <HiL_mcu_commands_binary_action+0x12c>

	}

	return 0; // Function returned successfully 
 80087b6:	2300      	movs	r3, #0
	
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40020400 	.word	0x40020400
 80087c4:	40021800 	.word	0x40021800
 80087c8:	40020c00 	.word	0x40020c00
 80087cc:	40020800 	.word	0x40020800
 80087d0:	40021400 	.word	0x40021400
 80087d4:	40020000 	.word	0x40020000

080087d8 <HiL_mcu_commands_binary_status>:

int HiL_mcu_commands_binary_status (int binary_object)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	switch (binary_object)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d86f      	bhi.n	80088c6 <HiL_mcu_commands_binary_status+0xee>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <HiL_mcu_commands_binary_status+0x14>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008821 	.word	0x08008821
 80087f0:	0800882f 	.word	0x0800882f
 80087f4:	0800883d 	.word	0x0800883d
 80087f8:	08008849 	.word	0x08008849
 80087fc:	08008857 	.word	0x08008857
 8008800:	08008863 	.word	0x08008863
 8008804:	0800886f 	.word	0x0800886f
 8008808:	0800887b 	.word	0x0800887b
 800880c:	08008887 	.word	0x08008887
 8008810:	08008893 	.word	0x08008893
 8008814:	080088a1 	.word	0x080088a1
 8008818:	080088ad 	.word	0x080088ad
 800881c:	080088bb 	.word	0x080088bb
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 8008820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008824:	482a      	ldr	r0, [pc, #168]	; (80088d0 <HiL_mcu_commands_binary_status+0xf8>)
 8008826:	f7fa f873 	bl	8002910 <HAL_GPIO_ReadPin>
 800882a:	4603      	mov	r3, r0
 800882c:	e04c      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800882e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008832:	4827      	ldr	r0, [pc, #156]	; (80088d0 <HiL_mcu_commands_binary_status+0xf8>)
 8008834:	f7fa f86c 	bl	8002910 <HAL_GPIO_ReadPin>
 8008838:	4603      	mov	r3, r0
 800883a:	e045      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800883c:	2110      	movs	r1, #16
 800883e:	4824      	ldr	r0, [pc, #144]	; (80088d0 <HiL_mcu_commands_binary_status+0xf8>)
 8008840:	f7fa f866 	bl	8002910 <HAL_GPIO_ReadPin>
 8008844:	4603      	mov	r3, r0
 8008846:	e03f      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 8008848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800884c:	4820      	ldr	r0, [pc, #128]	; (80088d0 <HiL_mcu_commands_binary_status+0xf8>)
 800884e:	f7fa f85f 	bl	8002910 <HAL_GPIO_ReadPin>
 8008852:	4603      	mov	r3, r0
 8008854:	e038      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 8008856:	2108      	movs	r1, #8
 8008858:	481e      	ldr	r0, [pc, #120]	; (80088d4 <HiL_mcu_commands_binary_status+0xfc>)
 800885a:	f7fa f859 	bl	8002910 <HAL_GPIO_ReadPin>
 800885e:	4603      	mov	r3, r0
 8008860:	e032      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 8008862:	2104      	movs	r1, #4
 8008864:	481b      	ldr	r0, [pc, #108]	; (80088d4 <HiL_mcu_commands_binary_status+0xfc>)
 8008866:	f7fa f853 	bl	8002910 <HAL_GPIO_ReadPin>
 800886a:	4603      	mov	r3, r0
 800886c:	e02c      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800886e:	2110      	movs	r1, #16
 8008870:	4819      	ldr	r0, [pc, #100]	; (80088d8 <HiL_mcu_commands_binary_status+0x100>)
 8008872:	f7fa f84d 	bl	8002910 <HAL_GPIO_ReadPin>
 8008876:	4603      	mov	r3, r0
 8008878:	e026      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800887a:	2120      	movs	r1, #32
 800887c:	4816      	ldr	r0, [pc, #88]	; (80088d8 <HiL_mcu_commands_binary_status+0x100>)
 800887e:	f7fa f847 	bl	8002910 <HAL_GPIO_ReadPin>
 8008882:	4603      	mov	r3, r0
 8008884:	e020      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 8008886:	2140      	movs	r1, #64	; 0x40
 8008888:	4813      	ldr	r0, [pc, #76]	; (80088d8 <HiL_mcu_commands_binary_status+0x100>)
 800888a:	f7fa f841 	bl	8002910 <HAL_GPIO_ReadPin>
 800888e:	4603      	mov	r3, r0
 8008890:	e01a      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 8008892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008896:	4811      	ldr	r0, [pc, #68]	; (80088dc <HiL_mcu_commands_binary_status+0x104>)
 8008898:	f7fa f83a 	bl	8002910 <HAL_GPIO_ReadPin>
 800889c:	4603      	mov	r3, r0
 800889e:	e013      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	480f      	ldr	r0, [pc, #60]	; (80088e0 <HiL_mcu_commands_binary_status+0x108>)
 80088a4:	f7fa f834 	bl	8002910 <HAL_GPIO_ReadPin>
 80088a8:	4603      	mov	r3, r0
 80088aa:	e00d      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 80088ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088b0:	480c      	ldr	r0, [pc, #48]	; (80088e4 <HiL_mcu_commands_binary_status+0x10c>)
 80088b2:	f7fa f82d 	bl	8002910 <HAL_GPIO_ReadPin>
 80088b6:	4603      	mov	r3, r0
 80088b8:	e006      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 80088ba:	2104      	movs	r1, #4
 80088bc:	4806      	ldr	r0, [pc, #24]	; (80088d8 <HiL_mcu_commands_binary_status+0x100>)
 80088be:	f7fa f827 	bl	8002910 <HAL_GPIO_ReadPin>
 80088c2:	4603      	mov	r3, r0
 80088c4:	e000      	b.n	80088c8 <HiL_mcu_commands_binary_status+0xf0>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 80088c6:	2302      	movs	r3, #2

	}
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40020400 	.word	0x40020400
 80088d4:	40021800 	.word	0x40021800
 80088d8:	40020c00 	.word	0x40020c00
 80088dc:	40020800 	.word	0x40020800
 80088e0:	40021400 	.word	0x40021400
 80088e4:	40020000 	.word	0x40020000

080088e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088f8:	f005 fe72 	bl	800e5e0 <malloc>
 80088fc:	4603      	mov	r3, r0
 80088fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32b0      	adds	r2, #176	; 0xb0
 8008910:	2100      	movs	r1, #0
 8008912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008916:	2302      	movs	r3, #2
 8008918:	e0d4      	b.n	8008ac4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800891a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800891e:	2100      	movs	r1, #0
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f005 fe7b 	bl	800e61c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	32b0      	adds	r2, #176	; 0xb0
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	32b0      	adds	r2, #176	; 0xb0
 8008940:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7c1b      	ldrb	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d138      	bne.n	80089c4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008952:	4b5e      	ldr	r3, [pc, #376]	; (8008acc <USBD_CDC_Init+0x1e4>)
 8008954:	7819      	ldrb	r1, [r3, #0]
 8008956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895a:	2202      	movs	r2, #2
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f005 fb78 	bl	800e052 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008962:	4b5a      	ldr	r3, [pc, #360]	; (8008acc <USBD_CDC_Init+0x1e4>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 020f 	and.w	r2, r3, #15
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3324      	adds	r3, #36	; 0x24
 8008978:	2201      	movs	r2, #1
 800897a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800897c:	4b54      	ldr	r3, [pc, #336]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 800897e:	7819      	ldrb	r1, [r3, #0]
 8008980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008984:	2202      	movs	r2, #2
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f005 fb63 	bl	800e052 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800898c:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 020f 	and.w	r2, r3, #15
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089a4:	2201      	movs	r2, #1
 80089a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089a8:	4b4a      	ldr	r3, [pc, #296]	; (8008ad4 <USBD_CDC_Init+0x1ec>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 020f 	and.w	r2, r3, #15
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	3326      	adds	r3, #38	; 0x26
 80089be:	2210      	movs	r2, #16
 80089c0:	801a      	strh	r2, [r3, #0]
 80089c2:	e035      	b.n	8008a30 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089c4:	4b41      	ldr	r3, [pc, #260]	; (8008acc <USBD_CDC_Init+0x1e4>)
 80089c6:	7819      	ldrb	r1, [r3, #0]
 80089c8:	2340      	movs	r3, #64	; 0x40
 80089ca:	2202      	movs	r2, #2
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f005 fb40 	bl	800e052 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089d2:	4b3e      	ldr	r3, [pc, #248]	; (8008acc <USBD_CDC_Init+0x1e4>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 020f 	and.w	r2, r3, #15
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	3324      	adds	r3, #36	; 0x24
 80089e8:	2201      	movs	r2, #1
 80089ea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089ec:	4b38      	ldr	r3, [pc, #224]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 80089ee:	7819      	ldrb	r1, [r3, #0]
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	2202      	movs	r2, #2
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f005 fb2c 	bl	800e052 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089fa:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 020f 	and.w	r2, r3, #15
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a12:	2201      	movs	r2, #1
 8008a14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <USBD_CDC_Init+0x1ec>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f003 020f 	and.w	r2, r3, #15
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	3326      	adds	r3, #38	; 0x26
 8008a2c:	2210      	movs	r2, #16
 8008a2e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a30:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <USBD_CDC_Init+0x1ec>)
 8008a32:	7819      	ldrb	r1, [r3, #0]
 8008a34:	2308      	movs	r3, #8
 8008a36:	2203      	movs	r2, #3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f005 fb0a 	bl	800e052 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a3e:	4b25      	ldr	r3, [pc, #148]	; (8008ad4 <USBD_CDC_Init+0x1ec>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	2201      	movs	r2, #1
 8008a56:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	33b0      	adds	r3, #176	; 0xb0
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e018      	b.n	8008ac4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7c1b      	ldrb	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 8008a9c:	7819      	ldrb	r1, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f005 fbc1 	bl	800e230 <USBD_LL_PrepareReceive>
 8008aae:	e008      	b.n	8008ac2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <USBD_CDC_Init+0x1e8>)
 8008ab2:	7819      	ldrb	r1, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aba:	2340      	movs	r3, #64	; 0x40
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f005 fbb7 	bl	800e230 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000093 	.word	0x20000093
 8008ad0:	20000094 	.word	0x20000094
 8008ad4:	20000095 	.word	0x20000095

08008ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ae4:	4b3a      	ldr	r3, [pc, #232]	; (8008bd0 <USBD_CDC_DeInit+0xf8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f005 fad7 	bl	800e09e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008af0:	4b37      	ldr	r3, [pc, #220]	; (8008bd0 <USBD_CDC_DeInit+0xf8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f003 020f 	and.w	r2, r3, #15
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	3324      	adds	r3, #36	; 0x24
 8008b06:	2200      	movs	r2, #0
 8008b08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b0a:	4b32      	ldr	r3, [pc, #200]	; (8008bd4 <USBD_CDC_DeInit+0xfc>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f005 fac4 	bl	800e09e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <USBD_CDC_DeInit+0xfc>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	f003 020f 	and.w	r2, r3, #15
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b2e:	2200      	movs	r2, #0
 8008b30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b32:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <USBD_CDC_DeInit+0x100>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f005 fab0 	bl	800e09e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b3e:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <USBD_CDC_DeInit+0x100>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3324      	adds	r3, #36	; 0x24
 8008b54:	2200      	movs	r2, #0
 8008b56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b58:	4b1f      	ldr	r3, [pc, #124]	; (8008bd8 <USBD_CDC_DeInit+0x100>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 020f 	and.w	r2, r3, #15
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	3326      	adds	r3, #38	; 0x26
 8008b6e:	2200      	movs	r2, #0
 8008b70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	32b0      	adds	r2, #176	; 0xb0
 8008b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01f      	beq.n	8008bc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	33b0      	adds	r3, #176	; 0xb0
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32b0      	adds	r2, #176	; 0xb0
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f005 fd22 	bl	800e5f0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32b0      	adds	r2, #176	; 0xb0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000093 	.word	0x20000093
 8008bd4:	20000094 	.word	0x20000094
 8008bd8:	20000095 	.word	0x20000095

08008bdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	32b0      	adds	r2, #176	; 0xb0
 8008bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e0bf      	b.n	8008d8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d050      	beq.n	8008cba <USBD_CDC_Setup+0xde>
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	f040 80af 	bne.w	8008d7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d03a      	beq.n	8008c9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da1b      	bge.n	8008c68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	33b0      	adds	r3, #176	; 0xb0
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	88d2      	ldrh	r2, [r2, #6]
 8008c4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	88db      	ldrh	r3, [r3, #6]
 8008c52:	2b07      	cmp	r3, #7
 8008c54:	bf28      	it	cs
 8008c56:	2307      	movcs	r3, #7
 8008c58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	89fa      	ldrh	r2, [r7, #14]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fd6d 	bl	800a740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c66:	e090      	b.n	8008d8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	785a      	ldrb	r2, [r3, #1]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	88db      	ldrh	r3, [r3, #6]
 8008c76:	2b3f      	cmp	r3, #63	; 0x3f
 8008c78:	d803      	bhi.n	8008c82 <USBD_CDC_Setup+0xa6>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	e000      	b.n	8008c84 <USBD_CDC_Setup+0xa8>
 8008c82:	2240      	movs	r2, #64	; 0x40
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c8a:	6939      	ldr	r1, [r7, #16]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c92:	461a      	mov	r2, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fd7f 	bl	800a798 <USBD_CtlPrepareRx>
      break;
 8008c9a:	e076      	b.n	8008d8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	33b0      	adds	r3, #176	; 0xb0
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	7850      	ldrb	r0, [r2, #1]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	4798      	blx	r3
      break;
 8008cb8:	e067      	b.n	8008d8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	785b      	ldrb	r3, [r3, #1]
 8008cbe:	2b0b      	cmp	r3, #11
 8008cc0:	d851      	bhi.n	8008d66 <USBD_CDC_Setup+0x18a>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_CDC_Setup+0xec>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cf9 	.word	0x08008cf9
 8008ccc:	08008d75 	.word	0x08008d75
 8008cd0:	08008d67 	.word	0x08008d67
 8008cd4:	08008d67 	.word	0x08008d67
 8008cd8:	08008d67 	.word	0x08008d67
 8008cdc:	08008d67 	.word	0x08008d67
 8008ce0:	08008d67 	.word	0x08008d67
 8008ce4:	08008d67 	.word	0x08008d67
 8008ce8:	08008d67 	.word	0x08008d67
 8008cec:	08008d67 	.word	0x08008d67
 8008cf0:	08008d23 	.word	0x08008d23
 8008cf4:	08008d4d 	.word	0x08008d4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d107      	bne.n	8008d14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d04:	f107 030a 	add.w	r3, r7, #10
 8008d08:	2202      	movs	r2, #2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 fd17 	bl	800a740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d12:	e032      	b.n	8008d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fca1 	bl	800a65e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d20:	e02b      	b.n	8008d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d107      	bne.n	8008d3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d2e:	f107 030d 	add.w	r3, r7, #13
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 fd02 	bl	800a740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d3c:	e01d      	b.n	8008d7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fc8c 	bl	800a65e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d46:	2303      	movs	r3, #3
 8008d48:	75fb      	strb	r3, [r7, #23]
          break;
 8008d4a:	e016      	b.n	8008d7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d00f      	beq.n	8008d78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fc7f 	bl	800a65e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d60:	2303      	movs	r3, #3
 8008d62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d64:	e008      	b.n	8008d78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 fc78 	bl	800a65e <USBD_CtlError>
          ret = USBD_FAIL;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	75fb      	strb	r3, [r7, #23]
          break;
 8008d72:	e002      	b.n	8008d7a <USBD_CDC_Setup+0x19e>
          break;
 8008d74:	bf00      	nop
 8008d76:	e008      	b.n	8008d8a <USBD_CDC_Setup+0x1ae>
          break;
 8008d78:	bf00      	nop
      }
      break;
 8008d7a:	e006      	b.n	8008d8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fc6d 	bl	800a65e <USBD_CtlError>
      ret = USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	75fb      	strb	r3, [r7, #23]
      break;
 8008d88:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	32b0      	adds	r2, #176	; 0xb0
 8008db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e065      	b.n	8008e8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32b0      	adds	r2, #176	; 0xb0
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	3318      	adds	r3, #24
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02f      	beq.n	8008e48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	f003 020f 	and.w	r2, r3, #15
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	3318      	adds	r3, #24
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f003 010f 	and.w	r1, r3, #15
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	460b      	mov	r3, r1
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	440b      	add	r3, r1
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4403      	add	r3, r0
 8008e10:	3348      	adds	r3, #72	; 0x48
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d112      	bne.n	8008e48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	f003 020f 	and.w	r2, r3, #15
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	440b      	add	r3, r1
 8008e34:	3318      	adds	r3, #24
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e3a:	78f9      	ldrb	r1, [r7, #3]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2200      	movs	r2, #0
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f005 f9d4 	bl	800e1ee <USBD_LL_Transmit>
 8008e46:	e01f      	b.n	8008e88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	33b0      	adds	r3, #176	; 0xb0
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d010      	beq.n	8008e88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	33b0      	adds	r3, #176	; 0xb0
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	32b0      	adds	r2, #176	; 0xb0
 8008ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	32b0      	adds	r2, #176	; 0xb0
 8008eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e01a      	b.n	8008efa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f005 f9d2 	bl	800e272 <USBD_LL_GetRxDataSize>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	33b0      	adds	r3, #176	; 0xb0
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32b0      	adds	r2, #176	; 0xb0
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e025      	b.n	8008f70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	33b0      	adds	r3, #176	; 0xb0
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01a      	beq.n	8008f6e <USBD_CDC_EP0_RxReady+0x6c>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f3e:	2bff      	cmp	r3, #255	; 0xff
 8008f40:	d015      	beq.n	8008f6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	33b0      	adds	r3, #176	; 0xb0
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f62:	b292      	uxth	r2, r2
 8008f64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	22ff      	movs	r2, #255	; 0xff
 8008f6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f80:	2182      	movs	r1, #130	; 0x82
 8008f82:	4818      	ldr	r0, [pc, #96]	; (8008fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f84:	f000 fd09 	bl	800999a <USBD_GetEpDesc>
 8008f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	4815      	ldr	r0, [pc, #84]	; (8008fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f8e:	f000 fd04 	bl	800999a <USBD_GetEpDesc>
 8008f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f94:	2181      	movs	r1, #129	; 0x81
 8008f96:	4813      	ldr	r0, [pc, #76]	; (8008fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f98:	f000 fcff 	bl	800999a <USBD_GetEpDesc>
 8008f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fb8:	711a      	strb	r2, [r3, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fcc:	711a      	strb	r2, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2243      	movs	r2, #67	; 0x43
 8008fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000050 	.word	0x20000050

08008fe8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ff0:	2182      	movs	r1, #130	; 0x82
 8008ff2:	4818      	ldr	r0, [pc, #96]	; (8009054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ff4:	f000 fcd1 	bl	800999a <USBD_GetEpDesc>
 8008ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	4815      	ldr	r0, [pc, #84]	; (8009054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ffe:	f000 fccc 	bl	800999a <USBD_GetEpDesc>
 8009002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009004:	2181      	movs	r1, #129	; 0x81
 8009006:	4813      	ldr	r0, [pc, #76]	; (8009054 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009008:	f000 fcc7 	bl	800999a <USBD_GetEpDesc>
 800900c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2210      	movs	r2, #16
 8009018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2200      	movs	r2, #0
 8009024:	711a      	strb	r2, [r3, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f042 0202 	orr.w	r2, r2, #2
 800902c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	711a      	strb	r2, [r3, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f042 0202 	orr.w	r2, r2, #2
 8009040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2243      	movs	r2, #67	; 0x43
 8009046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000050 	.word	0x20000050

08009058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009060:	2182      	movs	r1, #130	; 0x82
 8009062:	4818      	ldr	r0, [pc, #96]	; (80090c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009064:	f000 fc99 	bl	800999a <USBD_GetEpDesc>
 8009068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800906a:	2101      	movs	r1, #1
 800906c:	4815      	ldr	r0, [pc, #84]	; (80090c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800906e:	f000 fc94 	bl	800999a <USBD_GetEpDesc>
 8009072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009074:	2181      	movs	r1, #129	; 0x81
 8009076:	4813      	ldr	r0, [pc, #76]	; (80090c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009078:	f000 fc8f 	bl	800999a <USBD_GetEpDesc>
 800907c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2210      	movs	r2, #16
 8009088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2200      	movs	r2, #0
 8009094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009098:	711a      	strb	r2, [r3, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ac:	711a      	strb	r2, [r3, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2243      	movs	r2, #67	; 0x43
 80090b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000050 	.word	0x20000050

080090c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	220a      	movs	r2, #10
 80090d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090d6:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	2000000c 	.word	0x2000000c

080090e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e009      	b.n	8009110 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	33b0      	adds	r3, #176	; 0xb0
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	32b0      	adds	r2, #176	; 0xb0
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800913e:	2303      	movs	r3, #3
 8009140:	e008      	b.n	8009154 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	32b0      	adds	r2, #176	; 0xb0
 8009174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009178:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	e004      	b.n	800918e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
	...

0800919c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	32b0      	adds	r2, #176	; 0xb0
 80091ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32b0      	adds	r2, #176	; 0xb0
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e018      	b.n	80091fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7c1b      	ldrb	r3, [r3, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <USBD_CDC_ReceivePacket+0x68>)
 80091d4:	7819      	ldrb	r1, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f005 f825 	bl	800e230 <USBD_LL_PrepareReceive>
 80091e6:	e008      	b.n	80091fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091e8:	4b06      	ldr	r3, [pc, #24]	; (8009204 <USBD_CDC_ReceivePacket+0x68>)
 80091ea:	7819      	ldrb	r1, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091f2:	2340      	movs	r3, #64	; 0x40
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f005 f81b 	bl	800e230 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20000094 	.word	0x20000094

08009208 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	e01f      	b.n	8009260 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	79fa      	ldrb	r2, [r7, #7]
 8009252:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f004 fe95 	bl	800df84 <USBD_LL_Init>
 800925a:	4603      	mov	r3, r0
 800925c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800925e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e025      	b.n	80092cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	32ae      	adds	r2, #174	; 0xae
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00f      	beq.n	80092bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32ae      	adds	r2, #174	; 0xae
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	f107 020e 	add.w	r2, r7, #14
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	4602      	mov	r2, r0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f004 fe9d 	bl	800e01c <USBD_LL_Start>
 80092e2:	4603      	mov	r3, r0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009318:	2b00      	cmp	r3, #0
 800931a:	d009      	beq.n	8009330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	4611      	mov	r1, r2
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f932 	bl	800a5ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d01a      	beq.n	80093e0 <USBD_LL_SetupStage+0x72>
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d822      	bhi.n	80093f4 <USBD_LL_SetupStage+0x86>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <USBD_LL_SetupStage+0x4a>
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d00a      	beq.n	80093cc <USBD_LL_SetupStage+0x5e>
 80093b6:	e01d      	b.n	80093f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb5f 	bl	8009a84 <USBD_StdDevReq>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ca:	e020      	b.n	800940e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fbc7 	bl	8009b68 <USBD_StdItfReq>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]
      break;
 80093de:	e016      	b.n	800940e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fc29 	bl	8009c40 <USBD_StdEPReq>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]
      break;
 80093f2:	e00c      	b.n	800940e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f004 fe6a 	bl	800e0dc <USBD_LL_StallEP>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
      break;
 800940c:	bf00      	nop
  }

  return ret;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	460b      	mov	r3, r1
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d16e      	bne.n	800950e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800943e:	2b03      	cmp	r3, #3
 8009440:	f040 8098 	bne.w	8009574 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	d913      	bls.n	8009478 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	1ad2      	subs	r2, r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	4293      	cmp	r3, r2
 8009468:	bf28      	it	cs
 800946a:	4613      	movcs	r3, r2
 800946c:	461a      	mov	r2, r3
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 f9ae 	bl	800a7d2 <USBD_CtlContinueRx>
 8009476:	e07d      	b.n	8009574 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2b02      	cmp	r3, #2
 8009484:	d014      	beq.n	80094b0 <USBD_LL_DataOutStage+0x98>
 8009486:	2b02      	cmp	r3, #2
 8009488:	d81d      	bhi.n	80094c6 <USBD_LL_DataOutStage+0xae>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <USBD_LL_DataOutStage+0x7c>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d003      	beq.n	800949a <USBD_LL_DataOutStage+0x82>
 8009492:	e018      	b.n	80094c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	75bb      	strb	r3, [r7, #22]
            break;
 8009498:	e018      	b.n	80094cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	4619      	mov	r1, r3
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fa5e 	bl	8009966 <USBD_CoreFindIF>
 80094aa:	4603      	mov	r3, r0
 80094ac:	75bb      	strb	r3, [r7, #22]
            break;
 80094ae:	e00d      	b.n	80094cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	4619      	mov	r1, r3
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fa60 	bl	8009980 <USBD_CoreFindEP>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75bb      	strb	r3, [r7, #22]
            break;
 80094c4:	e002      	b.n	80094cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75bb      	strb	r3, [r7, #22]
            break;
 80094ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094cc:	7dbb      	ldrb	r3, [r7, #22]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d119      	bne.n	8009506 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d113      	bne.n	8009506 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094de:	7dba      	ldrb	r2, [r7, #22]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	32ae      	adds	r2, #174	; 0xae
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094ee:	7dba      	ldrb	r2, [r7, #22]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094f6:	7dba      	ldrb	r2, [r7, #22]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	32ae      	adds	r2, #174	; 0xae
 80094fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 f974 	bl	800a7f4 <USBD_CtlSendStatus>
 800950c:	e032      	b.n	8009574 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009514:	b2db      	uxtb	r3, r3
 8009516:	4619      	mov	r1, r3
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 fa31 	bl	8009980 <USBD_CoreFindEP>
 800951e:	4603      	mov	r3, r0
 8009520:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009522:	7dbb      	ldrb	r3, [r7, #22]
 8009524:	2bff      	cmp	r3, #255	; 0xff
 8009526:	d025      	beq.n	8009574 <USBD_LL_DataOutStage+0x15c>
 8009528:	7dbb      	ldrb	r3, [r7, #22]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d122      	bne.n	8009574 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d117      	bne.n	800956a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800953a:	7dba      	ldrb	r2, [r7, #22]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	32ae      	adds	r2, #174	; 0xae
 8009540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00f      	beq.n	800956a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800954a:	7dba      	ldrb	r2, [r7, #22]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009552:	7dba      	ldrb	r2, [r7, #22]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	32ae      	adds	r2, #174	; 0xae
 8009558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	7afa      	ldrb	r2, [r7, #11]
 8009560:	4611      	mov	r1, r2
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	4798      	blx	r3
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	e000      	b.n	8009576 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b086      	sub	sp, #24
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	460b      	mov	r3, r1
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800958c:	7afb      	ldrb	r3, [r7, #11]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d16f      	bne.n	8009672 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3314      	adds	r3, #20
 8009596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d15a      	bne.n	8009658 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d914      	bls.n	80095d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	1ad2      	subs	r2, r2, r3
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f001 f8d6 	bl	800a776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ca:	2300      	movs	r3, #0
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f004 fe2d 	bl	800e230 <USBD_LL_PrepareReceive>
 80095d6:	e03f      	b.n	8009658 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d11c      	bne.n	800961e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d316      	bcc.n	800961e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d20f      	bcs.n	800961e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f001 f8b7 	bl	800a776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f004 fe0a 	bl	800e230 <USBD_LL_PrepareReceive>
 800961c:	e01c      	b.n	8009658 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b03      	cmp	r3, #3
 8009628:	d10f      	bne.n	800964a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d009      	beq.n	800964a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f004 fd45 	bl	800e0dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f001 f8e1 	bl	800a81a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d03a      	beq.n	80096d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7ff fe42 	bl	80092ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009670:	e032      	b.n	80096d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009672:	7afb      	ldrb	r3, [r7, #11]
 8009674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009678:	b2db      	uxtb	r3, r3
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f97f 	bl	8009980 <USBD_CoreFindEP>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	2bff      	cmp	r3, #255	; 0xff
 800968a:	d025      	beq.n	80096d8 <USBD_LL_DataInStage+0x15a>
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d122      	bne.n	80096d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d11c      	bne.n	80096d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800969e:	7dfa      	ldrb	r2, [r7, #23]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	32ae      	adds	r2, #174	; 0xae
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d014      	beq.n	80096d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096ae:	7dfa      	ldrb	r2, [r7, #23]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096b6:	7dfa      	ldrb	r2, [r7, #23]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	32ae      	adds	r2, #174	; 0xae
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	7afa      	ldrb	r2, [r7, #11]
 80096c4:	4611      	mov	r1, r2
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096ce:	7dbb      	ldrb	r3, [r7, #22]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096d4:	7dbb      	ldrb	r3, [r7, #22]
 80096d6:	e000      	b.n	80096da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d014      	beq.n	8009748 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6852      	ldr	r2, [r2, #4]
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	4611      	mov	r1, r2
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f004 fc7f 	bl	800e052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2240      	movs	r2, #64	; 0x40
 8009760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009764:	2340      	movs	r3, #64	; 0x40
 8009766:	2200      	movs	r2, #0
 8009768:	2180      	movs	r1, #128	; 0x80
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f004 fc71 	bl	800e052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2240      	movs	r2, #64	; 0x40
 800977a:	621a      	str	r2, [r3, #32]

  return ret;
 800977c:	7bfb      	ldrb	r3, [r7, #15]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2204      	movs	r2, #4
 80097c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d106      	bne.n	80097f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b03      	cmp	r3, #3
 8009814:	d110      	bne.n	8009838 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	32ae      	adds	r2, #174	; 0xae
 8009858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	e01c      	b.n	800989e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b03      	cmp	r3, #3
 800986e:	d115      	bne.n	800989c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	32ae      	adds	r2, #174	; 0xae
 800987a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	32ae      	adds	r2, #174	; 0xae
 800988e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	4611      	mov	r1, r2
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	460b      	mov	r3, r1
 80098b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	32ae      	adds	r2, #174	; 0xae
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e01c      	b.n	8009902 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d115      	bne.n	8009900 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	32ae      	adds	r2, #174	; 0xae
 80098de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00b      	beq.n	8009900 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	32ae      	adds	r2, #174	; 0xae
 80098f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	4611      	mov	r1, r2
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00e      	beq.n	800995c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6852      	ldr	r2, [r2, #4]
 800994a:	b2d2      	uxtb	r2, r2
 800994c:	4611      	mov	r1, r2
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009958:	2303      	movs	r3, #3
 800995a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009972:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800998c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	885b      	ldrh	r3, [r3, #2]
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	429a      	cmp	r2, r3
 80099c0:	d920      	bls.n	8009a04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099ca:	e013      	b.n	80099f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099cc:	f107 030a 	add.w	r3, r7, #10
 80099d0:	4619      	mov	r1, r3
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f000 f81b 	bl	8009a0e <USBD_GetNextDesc>
 80099d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d108      	bne.n	80099f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	789b      	ldrb	r3, [r3, #2]
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d008      	beq.n	8009a02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	885b      	ldrh	r3, [r3, #2]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	897b      	ldrh	r3, [r7, #10]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d8e5      	bhi.n	80099cc <USBD_GetEpDesc+0x32>
 8009a00:	e000      	b.n	8009a04 <USBD_GetEpDesc+0x6a>
          break;
 8009a02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a04:	693b      	ldr	r3, [r7, #16]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b085      	sub	sp, #20
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	881a      	ldrh	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a66:	8a3b      	ldrh	r3, [r7, #16]
 8009a68:	021b      	lsls	r3, r3, #8
 8009a6a:	b21a      	sxth	r2, r3
 8009a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	b21b      	sxth	r3, r3
 8009a74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a76:	89fb      	ldrh	r3, [r7, #14]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	371c      	adds	r7, #28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	d005      	beq.n	8009aaa <USBD_StdDevReq+0x26>
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d857      	bhi.n	8009b52 <USBD_StdDevReq+0xce>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00f      	beq.n	8009ac6 <USBD_StdDevReq+0x42>
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	d153      	bne.n	8009b52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	32ae      	adds	r2, #174	; 0xae
 8009ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac4:	e04a      	b.n	8009b5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	2b09      	cmp	r3, #9
 8009acc:	d83b      	bhi.n	8009b46 <USBD_StdDevReq+0xc2>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <USBD_StdDevReq+0x50>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b29 	.word	0x08009b29
 8009ad8:	08009b3d 	.word	0x08009b3d
 8009adc:	08009b47 	.word	0x08009b47
 8009ae0:	08009b33 	.word	0x08009b33
 8009ae4:	08009b47 	.word	0x08009b47
 8009ae8:	08009b07 	.word	0x08009b07
 8009aec:	08009afd 	.word	0x08009afd
 8009af0:	08009b47 	.word	0x08009b47
 8009af4:	08009b1f 	.word	0x08009b1f
 8009af8:	08009b11 	.word	0x08009b11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa3c 	bl	8009f7c <USBD_GetDescriptor>
          break;
 8009b04:	e024      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fbcb 	bl	800a2a4 <USBD_SetAddress>
          break;
 8009b0e:	e01f      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fc0a 	bl	800a32c <USBD_SetConfig>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8009b1c:	e018      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fcad 	bl	800a480 <USBD_GetConfig>
          break;
 8009b26:	e013      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fcde 	bl	800a4ec <USBD_GetStatus>
          break;
 8009b30:	e00e      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fd0d 	bl	800a554 <USBD_SetFeature>
          break;
 8009b3a:	e009      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fd31 	bl	800a5a6 <USBD_ClrFeature>
          break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fd88 	bl	800a65e <USBD_CtlError>
          break;
 8009b4e:	bf00      	nop
      }
      break;
 8009b50:	e004      	b.n	8009b5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fd82 	bl	800a65e <USBD_CtlError>
      break;
 8009b5a:	bf00      	nop
  }

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop

08009b68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b7e:	2b40      	cmp	r3, #64	; 0x40
 8009b80:	d005      	beq.n	8009b8e <USBD_StdItfReq+0x26>
 8009b82:	2b40      	cmp	r3, #64	; 0x40
 8009b84:	d852      	bhi.n	8009c2c <USBD_StdItfReq+0xc4>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <USBD_StdItfReq+0x26>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d14e      	bne.n	8009c2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d840      	bhi.n	8009c1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	889b      	ldrh	r3, [r3, #4]
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d836      	bhi.n	8009c14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	889b      	ldrh	r3, [r3, #4]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fed9 	bl	8009966 <USBD_CoreFindIF>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2bff      	cmp	r3, #255	; 0xff
 8009bbc:	d01d      	beq.n	8009bfa <USBD_StdItfReq+0x92>
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11a      	bne.n	8009bfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bc4:	7bba      	ldrb	r2, [r7, #14]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32ae      	adds	r2, #174	; 0xae
 8009bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bd4:	7bba      	ldrb	r2, [r7, #14]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bdc:	7bba      	ldrb	r2, [r7, #14]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32ae      	adds	r2, #174	; 0xae
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	4798      	blx	r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bf2:	e004      	b.n	8009bfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bf8:	e001      	b.n	8009bfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	88db      	ldrh	r3, [r3, #6]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d110      	bne.n	8009c28 <USBD_StdItfReq+0xc0>
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10d      	bne.n	8009c28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fdf1 	bl	800a7f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c12:	e009      	b.n	8009c28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fd21 	bl	800a65e <USBD_CtlError>
          break;
 8009c1c:	e004      	b.n	8009c28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fd1c 	bl	800a65e <USBD_CtlError>
          break;
 8009c26:	e000      	b.n	8009c2a <USBD_StdItfReq+0xc2>
          break;
 8009c28:	bf00      	nop
      }
      break;
 8009c2a:	e004      	b.n	8009c36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fd15 	bl	800a65e <USBD_CtlError>
      break;
 8009c34:	bf00      	nop
  }

  return ret;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	889b      	ldrh	r3, [r3, #4]
 8009c52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d007      	beq.n	8009c70 <USBD_StdEPReq+0x30>
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	f200 817f 	bhi.w	8009f64 <USBD_StdEPReq+0x324>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d02a      	beq.n	8009cc0 <USBD_StdEPReq+0x80>
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	f040 817a 	bne.w	8009f64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff fe83 	bl	8009980 <USBD_CoreFindEP>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c7e:	7b7b      	ldrb	r3, [r7, #13]
 8009c80:	2bff      	cmp	r3, #255	; 0xff
 8009c82:	f000 8174 	beq.w	8009f6e <USBD_StdEPReq+0x32e>
 8009c86:	7b7b      	ldrb	r3, [r7, #13]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f040 8170 	bne.w	8009f6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c8e:	7b7a      	ldrb	r2, [r7, #13]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c96:	7b7a      	ldrb	r2, [r7, #13]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	32ae      	adds	r2, #174	; 0xae
 8009c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 8163 	beq.w	8009f6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ca8:	7b7a      	ldrb	r2, [r7, #13]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	32ae      	adds	r2, #174	; 0xae
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cbe:	e156      	b.n	8009f6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d008      	beq.n	8009cda <USBD_StdEPReq+0x9a>
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	f300 8145 	bgt.w	8009f58 <USBD_StdEPReq+0x318>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 809b 	beq.w	8009e0a <USBD_StdEPReq+0x1ca>
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d03c      	beq.n	8009d52 <USBD_StdEPReq+0x112>
 8009cd8:	e13e      	b.n	8009f58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d002      	beq.n	8009cec <USBD_StdEPReq+0xac>
 8009ce6:	2b03      	cmp	r3, #3
 8009ce8:	d016      	beq.n	8009d18 <USBD_StdEPReq+0xd8>
 8009cea:	e02c      	b.n	8009d46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00d      	beq.n	8009d0e <USBD_StdEPReq+0xce>
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	d00a      	beq.n	8009d0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f004 f9ed 	bl	800e0dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d02:	2180      	movs	r1, #128	; 0x80
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f004 f9e9 	bl	800e0dc <USBD_LL_StallEP>
 8009d0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d0c:	e020      	b.n	8009d50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fca4 	bl	800a65e <USBD_CtlError>
              break;
 8009d16:	e01b      	b.n	8009d50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	885b      	ldrh	r3, [r3, #2]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10e      	bne.n	8009d3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <USBD_StdEPReq+0xfe>
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b80      	cmp	r3, #128	; 0x80
 8009d2a:	d008      	beq.n	8009d3e <USBD_StdEPReq+0xfe>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	88db      	ldrh	r3, [r3, #6]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f004 f9cf 	bl	800e0dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fd58 	bl	800a7f4 <USBD_CtlSendStatus>

              break;
 8009d44:	e004      	b.n	8009d50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fc88 	bl	800a65e <USBD_CtlError>
              break;
 8009d4e:	bf00      	nop
          }
          break;
 8009d50:	e107      	b.n	8009f62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d002      	beq.n	8009d64 <USBD_StdEPReq+0x124>
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d016      	beq.n	8009d90 <USBD_StdEPReq+0x150>
 8009d62:	e04b      	b.n	8009dfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00d      	beq.n	8009d86 <USBD_StdEPReq+0x146>
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d00a      	beq.n	8009d86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f004 f9b1 	bl	800e0dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d7a:	2180      	movs	r1, #128	; 0x80
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f004 f9ad 	bl	800e0dc <USBD_LL_StallEP>
 8009d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d84:	e040      	b.n	8009e08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc68 	bl	800a65e <USBD_CtlError>
              break;
 8009d8e:	e03b      	b.n	8009e08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	885b      	ldrh	r3, [r3, #2]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d136      	bne.n	8009e06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f004 f9b7 	bl	800e11a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fd21 	bl	800a7f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fde2 	bl	8009980 <USBD_CoreFindEP>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dc0:	7b7b      	ldrb	r3, [r7, #13]
 8009dc2:	2bff      	cmp	r3, #255	; 0xff
 8009dc4:	d01f      	beq.n	8009e06 <USBD_StdEPReq+0x1c6>
 8009dc6:	7b7b      	ldrb	r3, [r7, #13]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d11c      	bne.n	8009e06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009dcc:	7b7a      	ldrb	r2, [r7, #13]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009dd4:	7b7a      	ldrb	r2, [r7, #13]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	32ae      	adds	r2, #174	; 0xae
 8009dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d010      	beq.n	8009e06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009de4:	7b7a      	ldrb	r2, [r7, #13]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	32ae      	adds	r2, #174	; 0xae
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dfa:	e004      	b.n	8009e06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fc2d 	bl	800a65e <USBD_CtlError>
              break;
 8009e04:	e000      	b.n	8009e08 <USBD_StdEPReq+0x1c8>
              break;
 8009e06:	bf00      	nop
          }
          break;
 8009e08:	e0ab      	b.n	8009f62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d002      	beq.n	8009e1c <USBD_StdEPReq+0x1dc>
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d032      	beq.n	8009e80 <USBD_StdEPReq+0x240>
 8009e1a:	e097      	b.n	8009f4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <USBD_StdEPReq+0x1f2>
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b80      	cmp	r3, #128	; 0x80
 8009e26:	d004      	beq.n	8009e32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fc17 	bl	800a65e <USBD_CtlError>
                break;
 8009e30:	e091      	b.n	8009f56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da0b      	bge.n	8009e52 <USBD_StdEPReq+0x212>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	3310      	adds	r3, #16
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3304      	adds	r3, #4
 8009e50:	e00b      	b.n	8009e6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	3304      	adds	r3, #4
 8009e6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2202      	movs	r2, #2
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc61 	bl	800a740 <USBD_CtlSendData>
              break;
 8009e7e:	e06a      	b.n	8009f56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	da11      	bge.n	8009eac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	f003 020f 	and.w	r2, r3, #15
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	3324      	adds	r3, #36	; 0x24
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d117      	bne.n	8009ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbda 	bl	800a65e <USBD_CtlError>
                  break;
 8009eaa:	e054      	b.n	8009f56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	f003 020f 	and.w	r2, r3, #15
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d104      	bne.n	8009ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fbc7 	bl	800a65e <USBD_CtlError>
                  break;
 8009ed0:	e041      	b.n	8009f56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da0b      	bge.n	8009ef2 <USBD_StdEPReq+0x2b2>
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	3310      	adds	r3, #16
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	3304      	adds	r3, #4
 8009ef0:	e00b      	b.n	8009f0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4413      	add	r3, r2
 8009f08:	3304      	adds	r3, #4
 8009f0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <USBD_StdEPReq+0x2d8>
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b80      	cmp	r3, #128	; 0x80
 8009f16:	d103      	bne.n	8009f20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e00e      	b.n	8009f3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f004 f917 	bl	800e158 <USBD_LL_IsStallEP>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e002      	b.n	8009f3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2202      	movs	r2, #2
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fbfb 	bl	800a740 <USBD_CtlSendData>
              break;
 8009f4a:	e004      	b.n	8009f56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb85 	bl	800a65e <USBD_CtlError>
              break;
 8009f54:	bf00      	nop
          }
          break;
 8009f56:	e004      	b.n	8009f62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb7f 	bl	800a65e <USBD_CtlError>
          break;
 8009f60:	bf00      	nop
      }
      break;
 8009f62:	e005      	b.n	8009f70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fb79 	bl	800a65e <USBD_CtlError>
      break;
 8009f6c:	e000      	b.n	8009f70 <USBD_StdEPReq+0x330>
      break;
 8009f6e:	bf00      	nop
  }

  return ret;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	885b      	ldrh	r3, [r3, #2]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	2b0e      	cmp	r3, #14
 8009f9e:	f200 8152 	bhi.w	800a246 <USBD_GetDescriptor+0x2ca>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <USBD_GetDescriptor+0x2c>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	0800a019 	.word	0x0800a019
 8009fac:	0800a031 	.word	0x0800a031
 8009fb0:	0800a071 	.word	0x0800a071
 8009fb4:	0800a247 	.word	0x0800a247
 8009fb8:	0800a247 	.word	0x0800a247
 8009fbc:	0800a1e7 	.word	0x0800a1e7
 8009fc0:	0800a213 	.word	0x0800a213
 8009fc4:	0800a247 	.word	0x0800a247
 8009fc8:	0800a247 	.word	0x0800a247
 8009fcc:	0800a247 	.word	0x0800a247
 8009fd0:	0800a247 	.word	0x0800a247
 8009fd4:	0800a247 	.word	0x0800a247
 8009fd8:	0800a247 	.word	0x0800a247
 8009fdc:	0800a247 	.word	0x0800a247
 8009fe0:	08009fe5 	.word	0x08009fe5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7c12      	ldrb	r2, [r2, #16]
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a006:	e126      	b.n	800a256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fb27 	bl	800a65e <USBD_CtlError>
        err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
      break;
 800a016:	e11e      	b.n	800a256 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	7c12      	ldrb	r2, [r2, #16]
 800a024:	f107 0108 	add.w	r1, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
      break;
 800a02e:	e112      	b.n	800a256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7c1b      	ldrb	r3, [r3, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10d      	bne.n	800a054 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a040:	f107 0208 	add.w	r2, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	2202      	movs	r2, #2
 800a050:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a052:	e100      	b.n	800a256 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	f107 0208 	add.w	r2, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	2202      	movs	r2, #2
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e0f2      	b.n	800a256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	885b      	ldrh	r3, [r3, #2]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b05      	cmp	r3, #5
 800a078:	f200 80ac 	bhi.w	800a1d4 <USBD_GetDescriptor+0x258>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <USBD_GetDescriptor+0x108>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a09d 	.word	0x0800a09d
 800a088:	0800a0d1 	.word	0x0800a0d1
 800a08c:	0800a105 	.word	0x0800a105
 800a090:	0800a139 	.word	0x0800a139
 800a094:	0800a16d 	.word	0x0800a16d
 800a098:	0800a1a1 	.word	0x0800a1a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00b      	beq.n	800a0c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	7c12      	ldrb	r2, [r2, #16]
 800a0b4:	f107 0108 	add.w	r1, r7, #8
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4798      	blx	r3
 800a0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0be:	e091      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 facb 	bl	800a65e <USBD_CtlError>
            err++;
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ce:	e089      	b.n	800a1e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7c12      	ldrb	r2, [r2, #16]
 800a0e8:	f107 0108 	add.w	r1, r7, #8
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0f2:	e077      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fab1 	bl	800a65e <USBD_CtlError>
            err++;
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	3301      	adds	r3, #1
 800a100:	72fb      	strb	r3, [r7, #11]
          break;
 800a102:	e06f      	b.n	800a1e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	7c12      	ldrb	r2, [r2, #16]
 800a11c:	f107 0108 	add.w	r1, r7, #8
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
 800a124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a126:	e05d      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fa97 	bl	800a65e <USBD_CtlError>
            err++;
 800a130:	7afb      	ldrb	r3, [r7, #11]
 800a132:	3301      	adds	r3, #1
 800a134:	72fb      	strb	r3, [r7, #11]
          break;
 800a136:	e055      	b.n	800a1e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	7c12      	ldrb	r2, [r2, #16]
 800a150:	f107 0108 	add.w	r1, r7, #8
 800a154:	4610      	mov	r0, r2
 800a156:	4798      	blx	r3
 800a158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a15a:	e043      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fa7d 	bl	800a65e <USBD_CtlError>
            err++;
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	3301      	adds	r3, #1
 800a168:	72fb      	strb	r3, [r7, #11]
          break;
 800a16a:	e03b      	b.n	800a1e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	7c12      	ldrb	r2, [r2, #16]
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
 800a18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a18e:	e029      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fa63 	bl	800a65e <USBD_CtlError>
            err++;
 800a198:	7afb      	ldrb	r3, [r7, #11]
 800a19a:	3301      	adds	r3, #1
 800a19c:	72fb      	strb	r3, [r7, #11]
          break;
 800a19e:	e021      	b.n	800a1e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7c12      	ldrb	r2, [r2, #16]
 800a1b8:	f107 0108 	add.w	r1, r7, #8
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c2:	e00f      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa49 	bl	800a65e <USBD_CtlError>
            err++;
 800a1cc:	7afb      	ldrb	r3, [r7, #11]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d2:	e007      	b.n	800a1e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fa41 	bl	800a65e <USBD_CtlError>
          err++;
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1e2:	bf00      	nop
      }
      break;
 800a1e4:	e037      	b.n	800a256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	f107 0208 	add.w	r2, r7, #8
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4798      	blx	r3
 800a1fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a200:	e029      	b.n	800a256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa2a 	bl	800a65e <USBD_CtlError>
        err++;
 800a20a:	7afb      	ldrb	r3, [r7, #11]
 800a20c:	3301      	adds	r3, #1
 800a20e:	72fb      	strb	r3, [r7, #11]
      break;
 800a210:	e021      	b.n	800a256 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7c1b      	ldrb	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10d      	bne.n	800a236 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	f107 0208 	add.w	r2, r7, #8
 800a226:	4610      	mov	r0, r2
 800a228:	4798      	blx	r3
 800a22a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	2207      	movs	r2, #7
 800a232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a234:	e00f      	b.n	800a256 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fa10 	bl	800a65e <USBD_CtlError>
        err++;
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	3301      	adds	r3, #1
 800a242:	72fb      	strb	r3, [r7, #11]
      break;
 800a244:	e007      	b.n	800a256 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fa08 	bl	800a65e <USBD_CtlError>
      err++;
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	3301      	adds	r3, #1
 800a252:	72fb      	strb	r3, [r7, #11]
      break;
 800a254:	bf00      	nop
  }

  if (err != 0U)
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d11e      	bne.n	800a29a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	88db      	ldrh	r3, [r3, #6]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d016      	beq.n	800a292 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a264:	893b      	ldrh	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00e      	beq.n	800a288 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	88da      	ldrh	r2, [r3, #6]
 800a26e:	893b      	ldrh	r3, [r7, #8]
 800a270:	4293      	cmp	r3, r2
 800a272:	bf28      	it	cs
 800a274:	4613      	movcs	r3, r2
 800a276:	b29b      	uxth	r3, r3
 800a278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	461a      	mov	r2, r3
 800a27e:	68f9      	ldr	r1, [r7, #12]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa5d 	bl	800a740 <USBD_CtlSendData>
 800a286:	e009      	b.n	800a29c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f9e7 	bl	800a65e <USBD_CtlError>
 800a290:	e004      	b.n	800a29c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 faae 	bl	800a7f4 <USBD_CtlSendStatus>
 800a298:	e000      	b.n	800a29c <USBD_GetDescriptor+0x320>
    return;
 800a29a:	bf00      	nop
  }
}
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop

0800a2a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	889b      	ldrh	r3, [r3, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d131      	bne.n	800a31a <USBD_SetAddress+0x76>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d12d      	bne.n	800a31a <USBD_SetAddress+0x76>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	2b7f      	cmp	r3, #127	; 0x7f
 800a2c4:	d829      	bhi.n	800a31a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d104      	bne.n	800a2e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f9bc 	bl	800a65e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e6:	e01d      	b.n	800a324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	7bfa      	ldrb	r2, [r7, #15]
 800a2ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f003 ff5b 	bl	800e1b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa7a 	bl	800a7f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	e009      	b.n	800a324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	e004      	b.n	800a324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f99e 	bl	800a65e <USBD_CtlError>
  }
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	4b4e      	ldr	r3, [pc, #312]	; (800a47c <USBD_SetConfig+0x150>)
 800a342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a344:	4b4d      	ldr	r3, [pc, #308]	; (800a47c <USBD_SetConfig+0x150>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d905      	bls.n	800a358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f985 	bl	800a65e <USBD_CtlError>
    return USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	e08c      	b.n	800a472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d002      	beq.n	800a36a <USBD_SetConfig+0x3e>
 800a364:	2b03      	cmp	r3, #3
 800a366:	d029      	beq.n	800a3bc <USBD_SetConfig+0x90>
 800a368:	e075      	b.n	800a456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a36a:	4b44      	ldr	r3, [pc, #272]	; (800a47c <USBD_SetConfig+0x150>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d020      	beq.n	800a3b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a372:	4b42      	ldr	r3, [pc, #264]	; (800a47c <USBD_SetConfig+0x150>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a37c:	4b3f      	ldr	r3, [pc, #252]	; (800a47c <USBD_SetConfig+0x150>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7fe ffbd 	bl	8009302 <USBD_SetClassConfig>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d008      	beq.n	800a3a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f962 	bl	800a65e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3a2:	e065      	b.n	800a470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa25 	bl	800a7f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2203      	movs	r2, #3
 800a3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3b2:	e05d      	b.n	800a470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fa1d 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a3ba:	e059      	b.n	800a470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3bc:	4b2f      	ldr	r3, [pc, #188]	; (800a47c <USBD_SetConfig+0x150>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d112      	bne.n	800a3ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3cc:	4b2b      	ldr	r3, [pc, #172]	; (800a47c <USBD_SetConfig+0x150>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3d6:	4b29      	ldr	r3, [pc, #164]	; (800a47c <USBD_SetConfig+0x150>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7fe ffac 	bl	800933a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa06 	bl	800a7f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3e8:	e042      	b.n	800a470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3ea:	4b24      	ldr	r3, [pc, #144]	; (800a47c <USBD_SetConfig+0x150>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d02a      	beq.n	800a44e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7fe ff9a 	bl	800933a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a406:	4b1d      	ldr	r3, [pc, #116]	; (800a47c <USBD_SetConfig+0x150>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a410:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <USBD_SetConfig+0x150>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7fe ff73 	bl	8009302 <USBD_SetClassConfig>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00f      	beq.n	800a446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f918 	bl	800a65e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7fe ff7f 	bl	800933a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a444:	e014      	b.n	800a470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f9d4 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a44c:	e010      	b.n	800a470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9d0 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a454:	e00c      	b.n	800a470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f900 	bl	800a65e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a45e:	4b07      	ldr	r3, [pc, #28]	; (800a47c <USBD_SetConfig+0x150>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7fe ff68 	bl	800933a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	73fb      	strb	r3, [r7, #15]
      break;
 800a46e:	bf00      	nop
  }

  return ret;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000674 	.word	0x20000674

0800a480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	88db      	ldrh	r3, [r3, #6]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d004      	beq.n	800a49c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f8e2 	bl	800a65e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a49a:	e023      	b.n	800a4e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	dc02      	bgt.n	800a4ae <USBD_GetConfig+0x2e>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dc03      	bgt.n	800a4b4 <USBD_GetConfig+0x34>
 800a4ac:	e015      	b.n	800a4da <USBD_GetConfig+0x5a>
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d00b      	beq.n	800a4ca <USBD_GetConfig+0x4a>
 800a4b2:	e012      	b.n	800a4da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3308      	adds	r3, #8
 800a4be:	2201      	movs	r2, #1
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f93c 	bl	800a740 <USBD_CtlSendData>
        break;
 800a4c8:	e00c      	b.n	800a4e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f934 	bl	800a740 <USBD_CtlSendData>
        break;
 800a4d8:	e004      	b.n	800a4e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8be 	bl	800a65e <USBD_CtlError>
        break;
 800a4e2:	bf00      	nop
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b02      	cmp	r3, #2
 800a502:	d81e      	bhi.n	800a542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	88db      	ldrh	r3, [r3, #6]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d004      	beq.n	800a516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8a5 	bl	800a65e <USBD_CtlError>
        break;
 800a514:	e01a      	b.n	800a54c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f043 0202 	orr.w	r2, r3, #2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	330c      	adds	r3, #12
 800a536:	2202      	movs	r2, #2
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f900 	bl	800a740 <USBD_CtlSendData>
      break;
 800a540:	e004      	b.n	800a54c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f88a 	bl	800a65e <USBD_CtlError>
      break;
 800a54a:	bf00      	nop
  }
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	885b      	ldrh	r3, [r3, #2]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d107      	bne.n	800a576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f940 	bl	800a7f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a574:	e013      	b.n	800a59e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d10b      	bne.n	800a596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	889b      	ldrh	r3, [r3, #4]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	b29b      	uxth	r3, r3
 800a586:	b2da      	uxtb	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f930 	bl	800a7f4 <USBD_CtlSendStatus>
}
 800a594:	e003      	b.n	800a59e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f860 	bl	800a65e <USBD_CtlError>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d80b      	bhi.n	800a5d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	885b      	ldrh	r3, [r3, #2]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d10c      	bne.n	800a5e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f910 	bl	800a7f4 <USBD_CtlSendStatus>
      }
      break;
 800a5d4:	e004      	b.n	800a5e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f840 	bl	800a65e <USBD_CtlError>
      break;
 800a5de:	e000      	b.n	800a5e2 <USBD_ClrFeature+0x3c>
      break;
 800a5e0:	bf00      	nop
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3301      	adds	r3, #1
 800a604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3301      	adds	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7ff fa17 	bl	8009a48 <SWAPBYTE>
 800a61a:	4603      	mov	r3, r0
 800a61c:	461a      	mov	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3301      	adds	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3301      	adds	r3, #1
 800a62c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff fa0a 	bl	8009a48 <SWAPBYTE>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3301      	adds	r3, #1
 800a640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3301      	adds	r3, #1
 800a646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff f9fd 	bl	8009a48 <SWAPBYTE>
 800a64e:	4603      	mov	r3, r0
 800a650:	461a      	mov	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	80da      	strh	r2, [r3, #6]
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a668:	2180      	movs	r1, #128	; 0x80
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f003 fd36 	bl	800e0dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a670:	2100      	movs	r1, #0
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f003 fd32 	bl	800e0dc <USBD_LL_StallEP>
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d036      	beq.n	800a704 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f000 f836 	bl	800a70c <USBD_GetLen>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	7812      	ldrb	r2, [r2, #0]
 800a6b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6d0:	e013      	b.n	800a6fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	7812      	ldrb	r2, [r2, #0]
 800a6dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	613b      	str	r3, [r7, #16]
    idx++;
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e7      	bne.n	800a6d2 <USBD_GetString+0x52>
 800a702:	e000      	b.n	800a706 <USBD_GetString+0x86>
    return;
 800a704:	bf00      	nop
  }
}
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a71c:	e005      	b.n	800a72a <USBD_GetLen+0x1e>
  {
    len++;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	3301      	adds	r3, #1
 800a722:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	3301      	adds	r3, #1
 800a728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f5      	bne.n	800a71e <USBD_GetLen+0x12>
  }

  return len;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2202      	movs	r2, #2
 800a750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	2100      	movs	r1, #0
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f003 fd41 	bl	800e1ee <USBD_LL_Transmit>

  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f003 fd30 	bl	800e1ee <USBD_LL_Transmit>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f003 fd34 	bl	800e230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f003 fd23 	bl	800e230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2204      	movs	r2, #4
 800a800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a804:	2300      	movs	r3, #0
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f003 fcef 	bl	800e1ee <USBD_LL_Transmit>

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2205      	movs	r2, #5
 800a826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f003 fcfd 	bl	800e230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a840:	b480      	push	{r7}
 800a842:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a844:	bf00      	nop
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
	...

0800a850 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a856:	f3ef 8305 	mrs	r3, IPSR
 800a85a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a85c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10f      	bne.n	800a882 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a862:	f3ef 8310 	mrs	r3, PRIMASK
 800a866:	607b      	str	r3, [r7, #4]
  return(result);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a86e:	f3ef 8311 	mrs	r3, BASEPRI
 800a872:	603b      	str	r3, [r7, #0]
  return(result);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <osKernelInitialize+0x3a>
 800a87a:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <osKernelInitialize+0x64>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a882:	f06f 0305 	mvn.w	r3, #5
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	e00c      	b.n	800a8a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a88a:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <osKernelInitialize+0x64>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a892:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <osKernelInitialize+0x64>)
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e002      	b.n	800a8a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000678 	.word	0x20000678

0800a8b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8be:	f3ef 8305 	mrs	r3, IPSR
 800a8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10f      	bne.n	800a8ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ce:	607b      	str	r3, [r7, #4]
  return(result);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d105      	bne.n	800a8e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8d6:	f3ef 8311 	mrs	r3, BASEPRI
 800a8da:	603b      	str	r3, [r7, #0]
  return(result);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <osKernelStart+0x3a>
 800a8e2:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <osKernelStart+0x68>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d103      	bne.n	800a8f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a8ea:	f06f 0305 	mvn.w	r3, #5
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	e010      	b.n	800a914 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <osKernelStart+0x68>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d109      	bne.n	800a90e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8fa:	f7ff ffa1 	bl	800a840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <osKernelStart+0x68>)
 800a900:	2202      	movs	r2, #2
 800a902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a904:	f001 fafe 	bl	800bf04 <vTaskStartScheduler>
      stat = osOK;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	e002      	b.n	800a914 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a90e:	f04f 33ff 	mov.w	r3, #4294967295
 800a912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a914:	68fb      	ldr	r3, [r7, #12]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000678 	.word	0x20000678

0800a924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a924:	b580      	push	{r7, lr}
 800a926:	b090      	sub	sp, #64	; 0x40
 800a928:	af04      	add	r7, sp, #16
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a930:	2300      	movs	r3, #0
 800a932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a934:	f3ef 8305 	mrs	r3, IPSR
 800a938:	61fb      	str	r3, [r7, #28]
  return(result);
 800a93a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f040 8090 	bne.w	800aa62 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a942:	f3ef 8310 	mrs	r3, PRIMASK
 800a946:	61bb      	str	r3, [r7, #24]
  return(result);
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a94e:	f3ef 8311 	mrs	r3, BASEPRI
 800a952:	617b      	str	r3, [r7, #20]
  return(result);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <osThreadNew+0x3e>
 800a95a:	4b44      	ldr	r3, [pc, #272]	; (800aa6c <osThreadNew+0x148>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d07f      	beq.n	800aa62 <osThreadNew+0x13e>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d07c      	beq.n	800aa62 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a96c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a96e:	2318      	movs	r3, #24
 800a970:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a976:	f04f 33ff 	mov.w	r3, #4294967295
 800a97a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d045      	beq.n	800aa0e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <osThreadNew+0x6c>
        name = attr->name;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <osThreadNew+0x92>
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	2b38      	cmp	r3, #56	; 0x38
 800a9a8:	d805      	bhi.n	800a9b6 <osThreadNew+0x92>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <osThreadNew+0x96>
        return (NULL);
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e054      	b.n	800aa64 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	089b      	lsrs	r3, r3, #2
 800a9c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00e      	beq.n	800a9f0 <osThreadNew+0xcc>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	2bbb      	cmp	r3, #187	; 0xbb
 800a9d8:	d90a      	bls.n	800a9f0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <osThreadNew+0xcc>
        mem = 1;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	623b      	str	r3, [r7, #32]
 800a9ee:	e010      	b.n	800aa12 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10c      	bne.n	800aa12 <osThreadNew+0xee>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <osThreadNew+0xee>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <osThreadNew+0xee>
          mem = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	623b      	str	r3, [r7, #32]
 800aa0c:	e001      	b.n	800aa12 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d110      	bne.n	800aa3a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa20:	9202      	str	r2, [sp, #8]
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f001 f872 	bl	800bb18 <xTaskCreateStatic>
 800aa34:	4603      	mov	r3, r0
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	e013      	b.n	800aa62 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d110      	bne.n	800aa62 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f107 0310 	add.w	r3, r7, #16
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f001 f8c3 	bl	800bbde <xTaskCreate>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d001      	beq.n	800aa62 <osThreadNew+0x13e>
          hTask = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa62:	693b      	ldr	r3, [r7, #16]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3730      	adds	r7, #48	; 0x30
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20000678 	.word	0x20000678

0800aa70 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa78:	f3ef 8305 	mrs	r3, IPSR
 800aa7c:	613b      	str	r3, [r7, #16]
  return(result);
 800aa7e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10f      	bne.n	800aaa4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa84:	f3ef 8310 	mrs	r3, PRIMASK
 800aa88:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d105      	bne.n	800aa9c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa90:	f3ef 8311 	mrs	r3, BASEPRI
 800aa94:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d007      	beq.n	800aaac <osDelay+0x3c>
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <osDelay+0x58>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d103      	bne.n	800aaac <osDelay+0x3c>
    stat = osErrorISR;
 800aaa4:	f06f 0305 	mvn.w	r3, #5
 800aaa8:	617b      	str	r3, [r7, #20]
 800aaaa:	e007      	b.n	800aabc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <osDelay+0x4c>
      vTaskDelay(ticks);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f001 f9ee 	bl	800be98 <vTaskDelay>
    }
  }

  return (stat);
 800aabc:	697b      	ldr	r3, [r7, #20]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20000678 	.word	0x20000678

0800aacc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08c      	sub	sp, #48	; 0x30
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aadc:	f3ef 8305 	mrs	r3, IPSR
 800aae0:	61bb      	str	r3, [r7, #24]
  return(result);
 800aae2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d16f      	bne.n	800abc8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae8:	f3ef 8310 	mrs	r3, PRIMASK
 800aaec:	617b      	str	r3, [r7, #20]
  return(result);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aaf4:	f3ef 8311 	mrs	r3, BASEPRI
 800aaf8:	613b      	str	r3, [r7, #16]
  return(result);
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <osMessageQueueNew+0x3c>
 800ab00:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <osMessageQueueNew+0x108>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d05f      	beq.n	800abc8 <osMessageQueueNew+0xfc>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d05c      	beq.n	800abc8 <osMessageQueueNew+0xfc>
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d059      	beq.n	800abc8 <osMessageQueueNew+0xfc>
    mem = -1;
 800ab14:	f04f 33ff 	mov.w	r3, #4294967295
 800ab18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d029      	beq.n	800ab74 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d012      	beq.n	800ab4e <osMessageQueueNew+0x82>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	2b4f      	cmp	r3, #79	; 0x4f
 800ab2e:	d90e      	bls.n	800ab4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00a      	beq.n	800ab4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695a      	ldr	r2, [r3, #20]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	fb01 f303 	mul.w	r3, r1, r3
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d302      	bcc.n	800ab4e <osMessageQueueNew+0x82>
        mem = 1;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	623b      	str	r3, [r7, #32]
 800ab4c:	e014      	b.n	800ab78 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d110      	bne.n	800ab78 <osMessageQueueNew+0xac>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10c      	bne.n	800ab78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d104      	bne.n	800ab78 <osMessageQueueNew+0xac>
          mem = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	623b      	str	r3, [r7, #32]
 800ab72:	e001      	b.n	800ab78 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d10b      	bne.n	800ab96 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	2100      	movs	r1, #0
 800ab88:	9100      	str	r1, [sp, #0]
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 fa5b 	bl	800b048 <xQueueGenericCreateStatic>
 800ab92:	6278      	str	r0, [r7, #36]	; 0x24
 800ab94:	e008      	b.n	800aba8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d105      	bne.n	800aba8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fad3 	bl	800b14c <xQueueGenericCreate>
 800aba6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00c      	beq.n	800abc8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <osMessageQueueNew+0xf0>
        name = attr->name;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	e001      	b.n	800abc0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800abbc:	2300      	movs	r3, #0
 800abbe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800abc0:	69f9      	ldr	r1, [r7, #28]
 800abc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abc4:	f000 ff4a 	bl	800ba5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3728      	adds	r7, #40	; 0x28
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20000678 	.word	0x20000678

0800abd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	4613      	mov	r3, r2
 800abe6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800abec:	2300      	movs	r3, #0
 800abee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abf0:	f3ef 8305 	mrs	r3, IPSR
 800abf4:	61fb      	str	r3, [r7, #28]
  return(result);
 800abf6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10f      	bne.n	800ac1c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ac00:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac08:	f3ef 8311 	mrs	r3, BASEPRI
 800ac0c:	617b      	str	r3, [r7, #20]
  return(result);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d02c      	beq.n	800ac6e <osMessageQueuePut+0x96>
 800ac14:	4b28      	ldr	r3, [pc, #160]	; (800acb8 <osMessageQueuePut+0xe0>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d128      	bne.n	800ac6e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <osMessageQueuePut+0x56>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <osMessageQueuePut+0x56>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d003      	beq.n	800ac36 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ac2e:	f06f 0303 	mvn.w	r3, #3
 800ac32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac34:	e039      	b.n	800acaa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac3a:	f107 0210 	add.w	r2, r7, #16
 800ac3e:	2300      	movs	r3, #0
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	6a38      	ldr	r0, [r7, #32]
 800ac44:	f000 fbee 	bl	800b424 <xQueueGenericSendFromISR>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d003      	beq.n	800ac56 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ac4e:	f06f 0302 	mvn.w	r3, #2
 800ac52:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac54:	e029      	b.n	800acaa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d026      	beq.n	800acaa <osMessageQueuePut+0xd2>
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <osMessageQueuePut+0xe4>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac6c:	e01d      	b.n	800acaa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <osMessageQueuePut+0xa2>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d103      	bne.n	800ac82 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ac7a:	f06f 0303 	mvn.w	r3, #3
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac80:	e014      	b.n	800acac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac82:	2300      	movs	r3, #0
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	6a38      	ldr	r0, [r7, #32]
 800ac8a:	f000 fac5 	bl	800b218 <xQueueGenericSend>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d00b      	beq.n	800acac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ac9a:	f06f 0301 	mvn.w	r3, #1
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aca0:	e004      	b.n	800acac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800aca2:	f06f 0302 	mvn.w	r3, #2
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
 800aca8:	e000      	b.n	800acac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800acaa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20000678 	.word	0x20000678
 800acbc:	e000ed04 	.word	0xe000ed04

0800acc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acd6:	f3ef 8305 	mrs	r3, IPSR
 800acda:	61fb      	str	r3, [r7, #28]
  return(result);
 800acdc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10f      	bne.n	800ad02 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ace2:	f3ef 8310 	mrs	r3, PRIMASK
 800ace6:	61bb      	str	r3, [r7, #24]
  return(result);
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acee:	f3ef 8311 	mrs	r3, BASEPRI
 800acf2:	617b      	str	r3, [r7, #20]
  return(result);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d02c      	beq.n	800ad54 <osMessageQueueGet+0x94>
 800acfa:	4b28      	ldr	r3, [pc, #160]	; (800ad9c <osMessageQueueGet+0xdc>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d128      	bne.n	800ad54 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <osMessageQueueGet+0x54>
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <osMessageQueueGet+0x54>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ad14:	f06f 0303 	mvn.w	r3, #3
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad1a:	e038      	b.n	800ad8e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ad20:	f107 0310 	add.w	r3, r7, #16
 800ad24:	461a      	mov	r2, r3
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	6a38      	ldr	r0, [r7, #32]
 800ad2a:	f000 fd01 	bl	800b730 <xQueueReceiveFromISR>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d003      	beq.n	800ad3c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ad34:	f06f 0302 	mvn.w	r3, #2
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad3a:	e028      	b.n	800ad8e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d025      	beq.n	800ad8e <osMessageQueueGet+0xce>
 800ad42:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <osMessageQueueGet+0xe0>)
 800ad44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad52:	e01c      	b.n	800ad8e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <osMessageQueueGet+0xa0>
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ad60:	f06f 0303 	mvn.w	r3, #3
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
 800ad66:	e013      	b.n	800ad90 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	68b9      	ldr	r1, [r7, #8]
 800ad6c:	6a38      	ldr	r0, [r7, #32]
 800ad6e:	f000 fbf9 	bl	800b564 <xQueueReceive>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d00b      	beq.n	800ad90 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ad7e:	f06f 0301 	mvn.w	r3, #1
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
 800ad84:	e004      	b.n	800ad90 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ad86:	f06f 0302 	mvn.w	r3, #2
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8c:	e000      	b.n	800ad90 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3728      	adds	r7, #40	; 0x28
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000678 	.word	0x20000678
 800ada0:	e000ed04 	.word	0xe000ed04

0800ada4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	4a07      	ldr	r2, [pc, #28]	; (800add0 <vApplicationGetIdleTaskMemory+0x2c>)
 800adb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4a06      	ldr	r2, [pc, #24]	; (800add4 <vApplicationGetIdleTaskMemory+0x30>)
 800adba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	2000067c 	.word	0x2000067c
 800add4:	20000738 	.word	0x20000738

0800add8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4a07      	ldr	r2, [pc, #28]	; (800ae04 <vApplicationGetTimerTaskMemory+0x2c>)
 800ade8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4a06      	ldr	r2, [pc, #24]	; (800ae08 <vApplicationGetTimerTaskMemory+0x30>)
 800adee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adf6:	601a      	str	r2, [r3, #0]
}
 800adf8:	bf00      	nop
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	20000b38 	.word	0x20000b38
 800ae08:	20000bf4 	.word	0x20000bf4

0800ae0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f103 0208 	add.w	r2, r3, #8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f103 0208 	add.w	r2, r3, #8
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f103 0208 	add.w	r2, r3, #8
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	689a      	ldr	r2, [r3, #8]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	601a      	str	r2, [r3, #0]
}
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec4:	d103      	bne.n	800aece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	e00c      	b.n	800aee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3308      	adds	r3, #8
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <vListInsert+0x2e>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d2f6      	bcs.n	800aed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
}
 800af14:	bf00      	nop
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6892      	ldr	r2, [r2, #8]
 800af36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	6852      	ldr	r2, [r2, #4]
 800af40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d103      	bne.n	800af54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	1e5a      	subs	r2, r3, #1
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10c      	bne.n	800afa2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	b672      	cpsid	i
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	b662      	cpsie	i
 800af9c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800afa2:	f002 f96b 	bl	800d27c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afae:	68f9      	ldr	r1, [r7, #12]
 800afb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afb2:	fb01 f303 	mul.w	r3, r1, r3
 800afb6:	441a      	add	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd2:	3b01      	subs	r3, #1
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afd8:	fb01 f303 	mul.w	r3, r1, r3
 800afdc:	441a      	add	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	22ff      	movs	r2, #255	; 0xff
 800afe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	22ff      	movs	r2, #255	; 0xff
 800afee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d114      	bne.n	800b022 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01a      	beq.n	800b036 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3310      	adds	r3, #16
 800b004:	4618      	mov	r0, r3
 800b006:	f001 fa25 	bl	800c454 <xTaskRemoveFromEventList>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d012      	beq.n	800b036 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b010:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <xQueueGenericReset+0xd0>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	e009      	b.n	800b036 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3310      	adds	r3, #16
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fef0 	bl	800ae0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3324      	adds	r3, #36	; 0x24
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff feeb 	bl	800ae0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b036:	f002 f955 	bl	800d2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b03a:	2301      	movs	r3, #1
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08e      	sub	sp, #56	; 0x38
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10c      	bne.n	800b076 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	b672      	cpsid	i
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	b662      	cpsie	i
 800b070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10c      	bne.n	800b096 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	b672      	cpsid	i
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	b662      	cpsie	i
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <xQueueGenericCreateStatic+0x5a>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <xQueueGenericCreateStatic+0x5e>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <xQueueGenericCreateStatic+0x60>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10c      	bne.n	800b0c6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	b672      	cpsid	i
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	b662      	cpsie	i
 800b0c0:	623b      	str	r3, [r7, #32]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d102      	bne.n	800b0d2 <xQueueGenericCreateStatic+0x8a>
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <xQueueGenericCreateStatic+0x8e>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <xQueueGenericCreateStatic+0x90>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10c      	bne.n	800b0f6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	b672      	cpsid	i
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	b662      	cpsie	i
 800b0f0:	61fb      	str	r3, [r7, #28]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0f6:	2350      	movs	r3, #80	; 0x50
 800b0f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b50      	cmp	r3, #80	; 0x50
 800b0fe:	d00c      	beq.n	800b11a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	b672      	cpsid	i
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	b662      	cpsie	i
 800b114:	61bb      	str	r3, [r7, #24]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b11a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00d      	beq.n	800b142 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b12e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	4613      	mov	r3, r2
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f847 	bl	800b1d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b144:	4618      	mov	r0, r3
 800b146:	3730      	adds	r7, #48	; 0x30
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	; 0x28
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4613      	mov	r3, r2
 800b158:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10c      	bne.n	800b17a <xQueueGenericCreate+0x2e>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	b672      	cpsid	i
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	b662      	cpsie	i
 800b174:	613b      	str	r3, [r7, #16]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	e004      	b.n	800b190 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	fb02 f303 	mul.w	r3, r2, r3
 800b18e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	3350      	adds	r3, #80	; 0x50
 800b194:	4618      	mov	r0, r3
 800b196:	f002 f99d 	bl	800d4d4 <pvPortMalloc>
 800b19a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d011      	beq.n	800b1c6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	3350      	adds	r3, #80	; 0x50
 800b1aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1b4:	79fa      	ldrb	r2, [r7, #7]
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f805 	bl	800b1d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3720      	adds	r7, #32
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	69ba      	ldr	r2, [r7, #24]
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1fe:	2101      	movs	r1, #1
 800b200:	69b8      	ldr	r0, [r7, #24]
 800b202:	f7ff feb7 	bl	800af74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	78fa      	ldrb	r2, [r7, #3]
 800b20a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08e      	sub	sp, #56	; 0x38
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b226:	2300      	movs	r3, #0
 800b228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10c      	bne.n	800b24e <xQueueGenericSend+0x36>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	b672      	cpsid	i
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	b662      	cpsie	i
 800b248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b24a:	bf00      	nop
 800b24c:	e7fe      	b.n	800b24c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <xQueueGenericSend+0x44>
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <xQueueGenericSend+0x48>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e000      	b.n	800b262 <xQueueGenericSend+0x4a>
 800b260:	2300      	movs	r3, #0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10c      	bne.n	800b280 <xQueueGenericSend+0x68>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	b672      	cpsid	i
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	b662      	cpsie	i
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d103      	bne.n	800b28e <xQueueGenericSend+0x76>
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <xQueueGenericSend+0x7a>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <xQueueGenericSend+0x7c>
 800b292:	2300      	movs	r3, #0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10c      	bne.n	800b2b2 <xQueueGenericSend+0x9a>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	b672      	cpsid	i
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	b662      	cpsie	i
 800b2ac:	623b      	str	r3, [r7, #32]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b2:	f001 fa99 	bl	800c7e8 <xTaskGetSchedulerState>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d102      	bne.n	800b2c2 <xQueueGenericSend+0xaa>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <xQueueGenericSend+0xae>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <xQueueGenericSend+0xb0>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10c      	bne.n	800b2e6 <xQueueGenericSend+0xce>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	b672      	cpsid	i
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	b662      	cpsie	i
 800b2e0:	61fb      	str	r3, [r7, #28]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2e6:	f001 ffc9 	bl	800d27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d302      	bcc.n	800b2fc <xQueueGenericSend+0xe4>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d129      	bne.n	800b350 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b302:	f000 fa9b 	bl	800b83c <prvCopyDataToQueue>
 800b306:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d010      	beq.n	800b332 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	3324      	adds	r3, #36	; 0x24
 800b314:	4618      	mov	r0, r3
 800b316:	f001 f89d 	bl	800c454 <xTaskRemoveFromEventList>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d013      	beq.n	800b348 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b320:	4b3f      	ldr	r3, [pc, #252]	; (800b420 <xQueueGenericSend+0x208>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	e00a      	b.n	800b348 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d007      	beq.n	800b348 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b338:	4b39      	ldr	r3, [pc, #228]	; (800b420 <xQueueGenericSend+0x208>)
 800b33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b348:	f001 ffcc 	bl	800d2e4 <vPortExitCritical>
				return pdPASS;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e063      	b.n	800b418 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d103      	bne.n	800b35e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b356:	f001 ffc5 	bl	800d2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e05c      	b.n	800b418 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b364:	f107 0314 	add.w	r3, r7, #20
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 f8d9 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b36e:	2301      	movs	r3, #1
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b372:	f001 ffb7 	bl	800d2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b376:	f000 fe39 	bl	800bfec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b37a:	f001 ff7f 	bl	800d27c <vPortEnterCritical>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b384:	b25b      	sxtb	r3, r3
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38a:	d103      	bne.n	800b394 <xQueueGenericSend+0x17c>
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b39a:	b25b      	sxtb	r3, r3
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a0:	d103      	bne.n	800b3aa <xQueueGenericSend+0x192>
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3aa:	f001 ff9b 	bl	800d2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3ae:	1d3a      	adds	r2, r7, #4
 800b3b0:	f107 0314 	add.w	r3, r7, #20
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f001 f8c8 	bl	800c54c <xTaskCheckForTimeOut>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d124      	bne.n	800b40c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3c4:	f000 fb32 	bl	800ba2c <prvIsQueueFull>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d018      	beq.n	800b400 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	3310      	adds	r3, #16
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 ffe8 	bl	800c3ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3de:	f000 fabd 	bl	800b95c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3e2:	f000 fe11 	bl	800c008 <xTaskResumeAll>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f47f af7c 	bne.w	800b2e6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <xQueueGenericSend+0x208>)
 800b3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	e772      	b.n	800b2e6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b402:	f000 faab 	bl	800b95c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b406:	f000 fdff 	bl	800c008 <xTaskResumeAll>
 800b40a:	e76c      	b.n	800b2e6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40e:	f000 faa5 	bl	800b95c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b412:	f000 fdf9 	bl	800c008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b416:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3738      	adds	r7, #56	; 0x38
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08e      	sub	sp, #56	; 0x38
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10c      	bne.n	800b456 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	b672      	cpsid	i
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	b662      	cpsie	i
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <xQueueGenericSendFromISR+0x40>
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <xQueueGenericSendFromISR+0x44>
 800b464:	2301      	movs	r3, #1
 800b466:	e000      	b.n	800b46a <xQueueGenericSendFromISR+0x46>
 800b468:	2300      	movs	r3, #0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10c      	bne.n	800b488 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	b672      	cpsid	i
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	b662      	cpsie	i
 800b482:	623b      	str	r3, [r7, #32]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d103      	bne.n	800b496 <xQueueGenericSendFromISR+0x72>
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b492:	2b01      	cmp	r3, #1
 800b494:	d101      	bne.n	800b49a <xQueueGenericSendFromISR+0x76>
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <xQueueGenericSendFromISR+0x78>
 800b49a:	2300      	movs	r3, #0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10c      	bne.n	800b4ba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	b672      	cpsid	i
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	b662      	cpsie	i
 800b4b4:	61fb      	str	r3, [r7, #28]
}
 800b4b6:	bf00      	nop
 800b4b8:	e7fe      	b.n	800b4b8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4ba:	f001 ffc7 	bl	800d44c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4be:	f3ef 8211 	mrs	r2, BASEPRI
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	b672      	cpsid	i
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	b662      	cpsie	i
 800b4d6:	61ba      	str	r2, [r7, #24]
 800b4d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d302      	bcc.n	800b4f0 <xQueueGenericSendFromISR+0xcc>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d12c      	bne.n	800b54a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b500:	f000 f99c 	bl	800b83c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b504:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50c:	d112      	bne.n	800b534 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b00      	cmp	r3, #0
 800b514:	d016      	beq.n	800b544 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	3324      	adds	r3, #36	; 0x24
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 ff9a 	bl	800c454 <xTaskRemoveFromEventList>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00e      	beq.n	800b544 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e007      	b.n	800b544 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b538:	3301      	adds	r3, #1
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	b25a      	sxtb	r2, r3
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b544:	2301      	movs	r3, #1
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b548:	e001      	b.n	800b54e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3738      	adds	r7, #56	; 0x38
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08c      	sub	sp, #48	; 0x30
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10c      	bne.n	800b598 <xQueueReceive+0x34>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	b672      	cpsid	i
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	b662      	cpsie	i
 800b592:	623b      	str	r3, [r7, #32]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d103      	bne.n	800b5a6 <xQueueReceive+0x42>
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <xQueueReceive+0x46>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e000      	b.n	800b5ac <xQueueReceive+0x48>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10c      	bne.n	800b5ca <xQueueReceive+0x66>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	b672      	cpsid	i
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	b662      	cpsie	i
 800b5c4:	61fb      	str	r3, [r7, #28]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5ca:	f001 f90d 	bl	800c7e8 <xTaskGetSchedulerState>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <xQueueReceive+0x76>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <xQueueReceive+0x7a>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <xQueueReceive+0x7c>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10c      	bne.n	800b5fe <xQueueReceive+0x9a>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	b672      	cpsid	i
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	b662      	cpsie	i
 800b5f8:	61bb      	str	r3, [r7, #24]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5fe:	f001 fe3d 	bl	800d27c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b606:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d01f      	beq.n	800b64e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b612:	f000 f97d 	bl	800b910 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	3310      	adds	r3, #16
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 ff12 	bl	800c454 <xTaskRemoveFromEventList>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d007      	beq.n	800b646 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b636:	4b3d      	ldr	r3, [pc, #244]	; (800b72c <xQueueReceive+0x1c8>)
 800b638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b646:	f001 fe4d 	bl	800d2e4 <vPortExitCritical>
				return pdPASS;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e069      	b.n	800b722 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d103      	bne.n	800b65c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b654:	f001 fe46 	bl	800d2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b658:	2300      	movs	r3, #0
 800b65a:	e062      	b.n	800b722 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b662:	f107 0310 	add.w	r3, r7, #16
 800b666:	4618      	mov	r0, r3
 800b668:	f000 ff5a 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b670:	f001 fe38 	bl	800d2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b674:	f000 fcba 	bl	800bfec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b678:	f001 fe00 	bl	800d27c <vPortEnterCritical>
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b682:	b25b      	sxtb	r3, r3
 800b684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b688:	d103      	bne.n	800b692 <xQueueReceive+0x12e>
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69e:	d103      	bne.n	800b6a8 <xQueueReceive+0x144>
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6a8:	f001 fe1c 	bl	800d2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6ac:	1d3a      	adds	r2, r7, #4
 800b6ae:	f107 0310 	add.w	r3, r7, #16
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 ff49 	bl	800c54c <xTaskCheckForTimeOut>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d123      	bne.n	800b708 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6c2:	f000 f99d 	bl	800ba00 <prvIsQueueEmpty>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d017      	beq.n	800b6fc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	3324      	adds	r3, #36	; 0x24
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 fe69 	bl	800c3ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6dc:	f000 f93e 	bl	800b95c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6e0:	f000 fc92 	bl	800c008 <xTaskResumeAll>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d189      	bne.n	800b5fe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b6ea:	4b10      	ldr	r3, [pc, #64]	; (800b72c <xQueueReceive+0x1c8>)
 800b6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	e780      	b.n	800b5fe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6fe:	f000 f92d 	bl	800b95c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b702:	f000 fc81 	bl	800c008 <xTaskResumeAll>
 800b706:	e77a      	b.n	800b5fe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b70a:	f000 f927 	bl	800b95c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b70e:	f000 fc7b 	bl	800c008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b714:	f000 f974 	bl	800ba00 <prvIsQueueEmpty>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f43f af6f 	beq.w	800b5fe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b722:	4618      	mov	r0, r3
 800b724:	3730      	adds	r7, #48	; 0x30
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	e000ed04 	.word	0xe000ed04

0800b730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08e      	sub	sp, #56	; 0x38
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10c      	bne.n	800b760 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74a:	b672      	cpsid	i
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	b662      	cpsie	i
 800b75a:	623b      	str	r3, [r7, #32]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <xQueueReceiveFromISR+0x3e>
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <xQueueReceiveFromISR+0x42>
 800b76e:	2301      	movs	r3, #1
 800b770:	e000      	b.n	800b774 <xQueueReceiveFromISR+0x44>
 800b772:	2300      	movs	r3, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10c      	bne.n	800b792 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	b672      	cpsid	i
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	b662      	cpsie	i
 800b78c:	61fb      	str	r3, [r7, #28]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b792:	f001 fe5b 	bl	800d44c <vPortValidateInterruptPriority>
	__asm volatile
 800b796:	f3ef 8211 	mrs	r2, BASEPRI
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	b672      	cpsid	i
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	b662      	cpsie	i
 800b7ae:	61ba      	str	r2, [r7, #24]
 800b7b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b7b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d02f      	beq.n	800b822 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7cc:	68b9      	ldr	r1, [r7, #8]
 800b7ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7d0:	f000 f89e 	bl	800b910 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	1e5a      	subs	r2, r3, #1
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e4:	d112      	bne.n	800b80c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d016      	beq.n	800b81c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f0:	3310      	adds	r3, #16
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 fe2e 	bl	800c454 <xTaskRemoveFromEventList>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00e      	beq.n	800b81c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e007      	b.n	800b81c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b810:	3301      	adds	r3, #1
 800b812:	b2db      	uxtb	r3, r3
 800b814:	b25a      	sxtb	r2, r3
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b81c:	2301      	movs	r3, #1
 800b81e:	637b      	str	r3, [r7, #52]	; 0x34
 800b820:	e001      	b.n	800b826 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b822:	2300      	movs	r3, #0
 800b824:	637b      	str	r3, [r7, #52]	; 0x34
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f383 8811 	msr	BASEPRI, r3
}
 800b830:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b834:	4618      	mov	r0, r3
 800b836:	3738      	adds	r7, #56	; 0x38
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b850:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10d      	bne.n	800b876 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d14d      	bne.n	800b8fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 ffdc 	bl	800c824 <xTaskPriorityDisinherit>
 800b86c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	609a      	str	r2, [r3, #8]
 800b874:	e043      	b.n	800b8fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d119      	bne.n	800b8b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6858      	ldr	r0, [r3, #4]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	461a      	mov	r2, r3
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	f002 feba 	bl	800e600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b894:	441a      	add	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d32b      	bcc.n	800b8fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	605a      	str	r2, [r3, #4]
 800b8ae:	e026      	b.n	800b8fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68d8      	ldr	r0, [r3, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	f002 fea0 	bl	800e600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c8:	425b      	negs	r3, r3
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d207      	bcs.n	800b8ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	689a      	ldr	r2, [r3, #8]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	441a      	add	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d105      	bne.n	800b8fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b906:	697b      	ldr	r3, [r7, #20]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d018      	beq.n	800b954 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68da      	ldr	r2, [r3, #12]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	441a      	add	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d303      	bcc.n	800b944 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68d9      	ldr	r1, [r3, #12]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	461a      	mov	r2, r3
 800b94e:	6838      	ldr	r0, [r7, #0]
 800b950:	f002 fe56 	bl	800e600 <memcpy>
	}
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b964:	f001 fc8a 	bl	800d27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b96e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b970:	e011      	b.n	800b996 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d012      	beq.n	800b9a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3324      	adds	r3, #36	; 0x24
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fd68 	bl	800c454 <xTaskRemoveFromEventList>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b98a:	f000 fe45 	bl	800c618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	3b01      	subs	r3, #1
 800b992:	b2db      	uxtb	r3, r3
 800b994:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	dce9      	bgt.n	800b972 <prvUnlockQueue+0x16>
 800b99e:	e000      	b.n	800b9a2 <prvUnlockQueue+0x46>
					break;
 800b9a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	22ff      	movs	r2, #255	; 0xff
 800b9a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9aa:	f001 fc9b 	bl	800d2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9ae:	f001 fc65 	bl	800d27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9ba:	e011      	b.n	800b9e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d012      	beq.n	800b9ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3310      	adds	r3, #16
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 fd43 	bl	800c454 <xTaskRemoveFromEventList>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9d4:	f000 fe20 	bl	800c618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dce9      	bgt.n	800b9bc <prvUnlockQueue+0x60>
 800b9e8:	e000      	b.n	800b9ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	22ff      	movs	r2, #255	; 0xff
 800b9f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9f4:	f001 fc76 	bl	800d2e4 <vPortExitCritical>
}
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba08:	f001 fc38 	bl	800d27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d102      	bne.n	800ba1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	e001      	b.n	800ba1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba1e:	f001 fc61 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800ba22:	68fb      	ldr	r3, [r7, #12]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba34:	f001 fc22 	bl	800d27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d102      	bne.n	800ba4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba44:	2301      	movs	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	e001      	b.n	800ba4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba4e:	f001 fc49 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800ba52:	68fb      	ldr	r3, [r7, #12]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	e014      	b.n	800ba96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba6c:	4a0f      	ldr	r2, [pc, #60]	; (800baac <vQueueAddToRegistry+0x50>)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10b      	bne.n	800ba90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba78:	490c      	ldr	r1, [pc, #48]	; (800baac <vQueueAddToRegistry+0x50>)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba82:	4a0a      	ldr	r2, [pc, #40]	; (800baac <vQueueAddToRegistry+0x50>)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	4413      	add	r3, r2
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba8e:	e006      	b.n	800ba9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b07      	cmp	r3, #7
 800ba9a:	d9e7      	bls.n	800ba6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	200013f4 	.word	0x200013f4

0800bab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bac0:	f001 fbdc 	bl	800d27c <vPortEnterCritical>
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baca:	b25b      	sxtb	r3, r3
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d103      	bne.n	800bada <vQueueWaitForMessageRestricted+0x2a>
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae0:	b25b      	sxtb	r3, r3
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae6:	d103      	bne.n	800baf0 <vQueueWaitForMessageRestricted+0x40>
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baf0:	f001 fbf8 	bl	800d2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	3324      	adds	r3, #36	; 0x24
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	68b9      	ldr	r1, [r7, #8]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 fc77 	bl	800c3f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb0a:	6978      	ldr	r0, [r7, #20]
 800bb0c:	f7ff ff26 	bl	800b95c <prvUnlockQueue>
	}
 800bb10:	bf00      	nop
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08e      	sub	sp, #56	; 0x38
 800bb1c:	af04      	add	r7, sp, #16
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10c      	bne.n	800bb46 <xTaskCreateStatic+0x2e>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb30:	b672      	cpsid	i
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	b662      	cpsie	i
 800bb40:	623b      	str	r3, [r7, #32]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10c      	bne.n	800bb66 <xTaskCreateStatic+0x4e>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	b672      	cpsid	i
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	b662      	cpsie	i
 800bb60:	61fb      	str	r3, [r7, #28]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb66:	23bc      	movs	r3, #188	; 0xbc
 800bb68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2bbc      	cmp	r3, #188	; 0xbc
 800bb6e:	d00c      	beq.n	800bb8a <xTaskCreateStatic+0x72>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	b672      	cpsid	i
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	b662      	cpsie	i
 800bb84:	61bb      	str	r3, [r7, #24]
}
 800bb86:	bf00      	nop
 800bb88:	e7fe      	b.n	800bb88 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d01e      	beq.n	800bbd0 <xTaskCreateStatic+0xb8>
 800bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01b      	beq.n	800bbd0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	2202      	movs	r2, #2
 800bba6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbaa:	2300      	movs	r3, #0
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	f107 0314 	add.w	r3, r7, #20
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 f850 	bl	800bc68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbca:	f000 f8f5 	bl	800bdb8 <prvAddNewTaskToReadyList>
 800bbce:	e001      	b.n	800bbd4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbd4:	697b      	ldr	r3, [r7, #20]
	}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3728      	adds	r7, #40	; 0x28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b08c      	sub	sp, #48	; 0x30
 800bbe2:	af04      	add	r7, sp, #16
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	60b9      	str	r1, [r7, #8]
 800bbe8:	603b      	str	r3, [r7, #0]
 800bbea:	4613      	mov	r3, r2
 800bbec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f001 fc6e 	bl	800d4d4 <pvPortMalloc>
 800bbf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00e      	beq.n	800bc1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc00:	20bc      	movs	r0, #188	; 0xbc
 800bc02:	f001 fc67 	bl	800d4d4 <pvPortMalloc>
 800bc06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	631a      	str	r2, [r3, #48]	; 0x30
 800bc14:	e005      	b.n	800bc22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc16:	6978      	ldr	r0, [r7, #20]
 800bc18:	f001 fd26 	bl	800d668 <vPortFree>
 800bc1c:	e001      	b.n	800bc22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d017      	beq.n	800bc58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc30:	88fa      	ldrh	r2, [r7, #6]
 800bc32:	2300      	movs	r3, #0
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	9302      	str	r3, [sp, #8]
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 f80e 	bl	800bc68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc4c:	69f8      	ldr	r0, [r7, #28]
 800bc4e:	f000 f8b3 	bl	800bdb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc52:	2301      	movs	r3, #1
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	e002      	b.n	800bc5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc58:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3720      	adds	r7, #32
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	461a      	mov	r2, r3
 800bc80:	21a5      	movs	r1, #165	; 0xa5
 800bc82:	f002 fccb 	bl	800e61c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc90:	440b      	add	r3, r1
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00c      	beq.n	800bcc4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	b672      	cpsid	i
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	b662      	cpsie	i
 800bcbe:	617b      	str	r3, [r7, #20]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d01f      	beq.n	800bd0a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcca:	2300      	movs	r3, #0
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	e012      	b.n	800bcf6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	7819      	ldrb	r1, [r3, #0]
 800bcd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	4413      	add	r3, r2
 800bcde:	3334      	adds	r3, #52	; 0x34
 800bce0:	460a      	mov	r2, r1
 800bce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d006      	beq.n	800bcfe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	61fb      	str	r3, [r7, #28]
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	2b0f      	cmp	r3, #15
 800bcfa:	d9e9      	bls.n	800bcd0 <prvInitialiseNewTask+0x68>
 800bcfc:	e000      	b.n	800bd00 <prvInitialiseNewTask+0x98>
			{
				break;
 800bcfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd08:	e003      	b.n	800bd12 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	2b37      	cmp	r3, #55	; 0x37
 800bd16:	d901      	bls.n	800bd1c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd18:	2337      	movs	r3, #55	; 0x37
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	3304      	adds	r3, #4
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff f88a 	bl	800ae4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff f885 	bl	800ae4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	3354      	adds	r3, #84	; 0x54
 800bd6c:	2260      	movs	r2, #96	; 0x60
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f002 fc53 	bl	800e61c <memset>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	4a0c      	ldr	r2, [pc, #48]	; (800bdac <prvInitialiseNewTask+0x144>)
 800bd7a:	659a      	str	r2, [r3, #88]	; 0x58
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7e:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <prvInitialiseNewTask+0x148>)
 800bd80:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <prvInitialiseNewTask+0x14c>)
 800bd86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	69b8      	ldr	r0, [r7, #24]
 800bd8e:	f001 f96b 	bl	800d068 <pxPortInitialiseStack>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bda4:	bf00      	nop
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	0800f5e0 	.word	0x0800f5e0
 800bdb0:	0800f600 	.word	0x0800f600
 800bdb4:	0800f5c0 	.word	0x0800f5c0

0800bdb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdc0:	f001 fa5c 	bl	800d27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdc4:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a2c      	ldr	r2, [pc, #176]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdce:	4b2c      	ldr	r3, [pc, #176]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d109      	bne.n	800bdea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdd6:	4a2a      	ldr	r2, [pc, #168]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bddc:	4b27      	ldr	r3, [pc, #156]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d110      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bde4:	f000 fc3c 	bl	800c660 <prvInitialiseTaskLists>
 800bde8:	e00d      	b.n	800be06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdea:	4b26      	ldr	r3, [pc, #152]	; (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdf2:	4b23      	ldr	r3, [pc, #140]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d802      	bhi.n	800be06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be00:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be06:	4b20      	ldr	r3, [pc, #128]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	4a1e      	ldr	r2, [pc, #120]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be10:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	4b1b      	ldr	r3, [pc, #108]	; (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <prvAddNewTaskToReadyList+0x74>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	4a18      	ldr	r2, [pc, #96]	; (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4a15      	ldr	r2, [pc, #84]	; (800be90 <prvAddNewTaskToReadyList+0xd8>)
 800be3a:	441a      	add	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7ff f80f 	bl	800ae66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be48:	f001 fa4c 	bl	800d2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5e:	429a      	cmp	r2, r3
 800be60:	d207      	bcs.n	800be72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be62:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <prvAddNewTaskToReadyList+0xdc>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be72:	bf00      	nop
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20001908 	.word	0x20001908
 800be80:	20001434 	.word	0x20001434
 800be84:	20001914 	.word	0x20001914
 800be88:	20001924 	.word	0x20001924
 800be8c:	20001910 	.word	0x20001910
 800be90:	20001438 	.word	0x20001438
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d019      	beq.n	800bede <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <vTaskDelay+0x64>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00c      	beq.n	800becc <vTaskDelay+0x34>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	60bb      	str	r3, [r7, #8]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <vTaskDelay+0x32>
			vTaskSuspendAll();
 800becc:	f000 f88e 	bl	800bfec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bed0:	2100      	movs	r1, #0
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fd18 	bl	800c908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bed8:	f000 f896 	bl	800c008 <xTaskResumeAll>
 800bedc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d107      	bne.n	800bef4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bee4:	4b06      	ldr	r3, [pc, #24]	; (800bf00 <vTaskDelay+0x68>)
 800bee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bef4:	bf00      	nop
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	20001930 	.word	0x20001930
 800bf00:	e000ed04 	.word	0xe000ed04

0800bf04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf12:	463a      	mov	r2, r7
 800bf14:	1d39      	adds	r1, r7, #4
 800bf16:	f107 0308 	add.w	r3, r7, #8
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe ff42 	bl	800ada4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	9202      	str	r2, [sp, #8]
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	460a      	mov	r2, r1
 800bf32:	4926      	ldr	r1, [pc, #152]	; (800bfcc <vTaskStartScheduler+0xc8>)
 800bf34:	4826      	ldr	r0, [pc, #152]	; (800bfd0 <vTaskStartScheduler+0xcc>)
 800bf36:	f7ff fdef 	bl	800bb18 <xTaskCreateStatic>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4a25      	ldr	r2, [pc, #148]	; (800bfd4 <vTaskStartScheduler+0xd0>)
 800bf3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf40:	4b24      	ldr	r3, [pc, #144]	; (800bfd4 <vTaskStartScheduler+0xd0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e001      	b.n	800bf52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d102      	bne.n	800bf5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf58:	f000 fd2a 	bl	800c9b0 <xTimerCreateTimerTask>
 800bf5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d11d      	bne.n	800bfa0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	b672      	cpsid	i
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	b662      	cpsie	i
 800bf78:	613b      	str	r3, [r7, #16]
}
 800bf7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf7c:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <vTaskStartScheduler+0xd4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3354      	adds	r3, #84	; 0x54
 800bf82:	4a16      	ldr	r2, [pc, #88]	; (800bfdc <vTaskStartScheduler+0xd8>)
 800bf84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf86:	4b16      	ldr	r3, [pc, #88]	; (800bfe0 <vTaskStartScheduler+0xdc>)
 800bf88:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf8e:	4b15      	ldr	r3, [pc, #84]	; (800bfe4 <vTaskStartScheduler+0xe0>)
 800bf90:	2201      	movs	r2, #1
 800bf92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf94:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <vTaskStartScheduler+0xe4>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf9a:	f001 f8f1 	bl	800d180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf9e:	e010      	b.n	800bfc2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa6:	d10c      	bne.n	800bfc2 <vTaskStartScheduler+0xbe>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	b672      	cpsid	i
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	b662      	cpsie	i
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <vTaskStartScheduler+0xbc>
}
 800bfc2:	bf00      	nop
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	0800f498 	.word	0x0800f498
 800bfd0:	0800c631 	.word	0x0800c631
 800bfd4:	2000192c 	.word	0x2000192c
 800bfd8:	20001434 	.word	0x20001434
 800bfdc:	20000110 	.word	0x20000110
 800bfe0:	20001928 	.word	0x20001928
 800bfe4:	20001914 	.word	0x20001914
 800bfe8:	2000190c 	.word	0x2000190c

0800bfec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <vTaskSuspendAll+0x18>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4a03      	ldr	r2, [pc, #12]	; (800c004 <vTaskSuspendAll+0x18>)
 800bff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bffa:	bf00      	nop
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	20001930 	.word	0x20001930

0800c008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c016:	4b43      	ldr	r3, [pc, #268]	; (800c124 <xTaskResumeAll+0x11c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <xTaskResumeAll+0x30>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	603b      	str	r3, [r7, #0]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c038:	f001 f920 	bl	800d27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c03c:	4b39      	ldr	r3, [pc, #228]	; (800c124 <xTaskResumeAll+0x11c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3b01      	subs	r3, #1
 800c042:	4a38      	ldr	r2, [pc, #224]	; (800c124 <xTaskResumeAll+0x11c>)
 800c044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c046:	4b37      	ldr	r3, [pc, #220]	; (800c124 <xTaskResumeAll+0x11c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d162      	bne.n	800c114 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c04e:	4b36      	ldr	r3, [pc, #216]	; (800c128 <xTaskResumeAll+0x120>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d05e      	beq.n	800c114 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c056:	e02f      	b.n	800c0b8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c058:	4b34      	ldr	r3, [pc, #208]	; (800c12c <xTaskResumeAll+0x124>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3318      	adds	r3, #24
 800c064:	4618      	mov	r0, r3
 800c066:	f7fe ff5b 	bl	800af20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe ff56 	bl	800af20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	4b2d      	ldr	r3, [pc, #180]	; (800c130 <xTaskResumeAll+0x128>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d903      	bls.n	800c088 <xTaskResumeAll+0x80>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	4a2a      	ldr	r2, [pc, #168]	; (800c130 <xTaskResumeAll+0x128>)
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4a27      	ldr	r2, [pc, #156]	; (800c134 <xTaskResumeAll+0x12c>)
 800c096:	441a      	add	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3304      	adds	r3, #4
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fe fee1 	bl	800ae66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a8:	4b23      	ldr	r3, [pc, #140]	; (800c138 <xTaskResumeAll+0x130>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d302      	bcc.n	800c0b8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c0b2:	4b22      	ldr	r3, [pc, #136]	; (800c13c <xTaskResumeAll+0x134>)
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0b8:	4b1c      	ldr	r3, [pc, #112]	; (800c12c <xTaskResumeAll+0x124>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1cb      	bne.n	800c058 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0c6:	f000 fb6f 	bl	800c7a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c0ca:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <xTaskResumeAll+0x138>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d010      	beq.n	800c0f8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0d6:	f000 f847 	bl	800c168 <xTaskIncrementTick>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c0e0:	4b16      	ldr	r3, [pc, #88]	; (800c13c <xTaskResumeAll+0x134>)
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f1      	bne.n	800c0d6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c0f2:	4b13      	ldr	r3, [pc, #76]	; (800c140 <xTaskResumeAll+0x138>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0f8:	4b10      	ldr	r3, [pc, #64]	; (800c13c <xTaskResumeAll+0x134>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d009      	beq.n	800c114 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c100:	2301      	movs	r3, #1
 800c102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c104:	4b0f      	ldr	r3, [pc, #60]	; (800c144 <xTaskResumeAll+0x13c>)
 800c106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c114:	f001 f8e6 	bl	800d2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800c118:	68bb      	ldr	r3, [r7, #8]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20001930 	.word	0x20001930
 800c128:	20001908 	.word	0x20001908
 800c12c:	200018c8 	.word	0x200018c8
 800c130:	20001910 	.word	0x20001910
 800c134:	20001438 	.word	0x20001438
 800c138:	20001434 	.word	0x20001434
 800c13c:	2000191c 	.word	0x2000191c
 800c140:	20001918 	.word	0x20001918
 800c144:	e000ed04 	.word	0xe000ed04

0800c148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <xTaskGetTickCount+0x1c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c154:	687b      	ldr	r3, [r7, #4]
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	2000190c 	.word	0x2000190c

0800c168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c16e:	2300      	movs	r3, #0
 800c170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c172:	4b50      	ldr	r3, [pc, #320]	; (800c2b4 <xTaskIncrementTick+0x14c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	f040 808b 	bne.w	800c292 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c17c:	4b4e      	ldr	r3, [pc, #312]	; (800c2b8 <xTaskIncrementTick+0x150>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3301      	adds	r3, #1
 800c182:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c184:	4a4c      	ldr	r2, [pc, #304]	; (800c2b8 <xTaskIncrementTick+0x150>)
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d122      	bne.n	800c1d6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c190:	4b4a      	ldr	r3, [pc, #296]	; (800c2bc <xTaskIncrementTick+0x154>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00c      	beq.n	800c1b4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	b672      	cpsid	i
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	b662      	cpsie	i
 800c1ae:	603b      	str	r3, [r7, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xTaskIncrementTick+0x4a>
 800c1b4:	4b41      	ldr	r3, [pc, #260]	; (800c2bc <xTaskIncrementTick+0x154>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	4b41      	ldr	r3, [pc, #260]	; (800c2c0 <xTaskIncrementTick+0x158>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a3f      	ldr	r2, [pc, #252]	; (800c2bc <xTaskIncrementTick+0x154>)
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	4a3f      	ldr	r2, [pc, #252]	; (800c2c0 <xTaskIncrementTick+0x158>)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	4b3e      	ldr	r3, [pc, #248]	; (800c2c4 <xTaskIncrementTick+0x15c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	4a3d      	ldr	r2, [pc, #244]	; (800c2c4 <xTaskIncrementTick+0x15c>)
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	f000 fae9 	bl	800c7a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1d6:	4b3c      	ldr	r3, [pc, #240]	; (800c2c8 <xTaskIncrementTick+0x160>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d349      	bcc.n	800c274 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1e0:	4b36      	ldr	r3, [pc, #216]	; (800c2bc <xTaskIncrementTick+0x154>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ea:	4b37      	ldr	r3, [pc, #220]	; (800c2c8 <xTaskIncrementTick+0x160>)
 800c1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f0:	601a      	str	r2, [r3, #0]
					break;
 800c1f2:	e03f      	b.n	800c274 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1f4:	4b31      	ldr	r3, [pc, #196]	; (800c2bc <xTaskIncrementTick+0x154>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d203      	bcs.n	800c214 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c20c:	4a2e      	ldr	r2, [pc, #184]	; (800c2c8 <xTaskIncrementTick+0x160>)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c212:	e02f      	b.n	800c274 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	3304      	adds	r3, #4
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fe fe81 	bl	800af20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c222:	2b00      	cmp	r3, #0
 800c224:	d004      	beq.n	800c230 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	3318      	adds	r3, #24
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fe78 	bl	800af20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	4b25      	ldr	r3, [pc, #148]	; (800c2cc <xTaskIncrementTick+0x164>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d903      	bls.n	800c244 <xTaskIncrementTick+0xdc>
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	4a22      	ldr	r2, [pc, #136]	; (800c2cc <xTaskIncrementTick+0x164>)
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4a1f      	ldr	r2, [pc, #124]	; (800c2d0 <xTaskIncrementTick+0x168>)
 800c252:	441a      	add	r2, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	3304      	adds	r3, #4
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7fe fe03 	bl	800ae66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <xTaskIncrementTick+0x16c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d3b8      	bcc.n	800c1e0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c26e:	2301      	movs	r3, #1
 800c270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c272:	e7b5      	b.n	800c1e0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c274:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <xTaskIncrementTick+0x16c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	4915      	ldr	r1, [pc, #84]	; (800c2d0 <xTaskIncrementTick+0x168>)
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	440b      	add	r3, r1
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d907      	bls.n	800c29c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c28c:	2301      	movs	r3, #1
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e004      	b.n	800c29c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c292:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <xTaskIncrementTick+0x170>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3301      	adds	r3, #1
 800c298:	4a0f      	ldr	r2, [pc, #60]	; (800c2d8 <xTaskIncrementTick+0x170>)
 800c29a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c29c:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <xTaskIncrementTick+0x174>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c2a8:	697b      	ldr	r3, [r7, #20]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20001930 	.word	0x20001930
 800c2b8:	2000190c 	.word	0x2000190c
 800c2bc:	200018c0 	.word	0x200018c0
 800c2c0:	200018c4 	.word	0x200018c4
 800c2c4:	20001920 	.word	0x20001920
 800c2c8:	20001928 	.word	0x20001928
 800c2cc:	20001910 	.word	0x20001910
 800c2d0:	20001438 	.word	0x20001438
 800c2d4:	20001434 	.word	0x20001434
 800c2d8:	20001918 	.word	0x20001918
 800c2dc:	2000191c 	.word	0x2000191c

0800c2e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2e6:	4b2b      	ldr	r3, [pc, #172]	; (800c394 <vTaskSwitchContext+0xb4>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <vTaskSwitchContext+0xb8>)
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2f4:	e048      	b.n	800c388 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800c2f6:	4b28      	ldr	r3, [pc, #160]	; (800c398 <vTaskSwitchContext+0xb8>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2fc:	4b27      	ldr	r3, [pc, #156]	; (800c39c <vTaskSwitchContext+0xbc>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	60fb      	str	r3, [r7, #12]
 800c302:	e012      	b.n	800c32a <vTaskSwitchContext+0x4a>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10c      	bne.n	800c324 <vTaskSwitchContext+0x44>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	b672      	cpsid	i
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	b662      	cpsie	i
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
 800c322:	e7fe      	b.n	800c322 <vTaskSwitchContext+0x42>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3b01      	subs	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	491d      	ldr	r1, [pc, #116]	; (800c3a0 <vTaskSwitchContext+0xc0>)
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0e2      	beq.n	800c304 <vTaskSwitchContext+0x24>
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4a15      	ldr	r2, [pc, #84]	; (800c3a0 <vTaskSwitchContext+0xc0>)
 800c34a:	4413      	add	r3, r2
 800c34c:	60bb      	str	r3, [r7, #8]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	605a      	str	r2, [r3, #4]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	3308      	adds	r3, #8
 800c360:	429a      	cmp	r2, r3
 800c362:	d104      	bne.n	800c36e <vTaskSwitchContext+0x8e>
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	605a      	str	r2, [r3, #4]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	4a0b      	ldr	r2, [pc, #44]	; (800c3a4 <vTaskSwitchContext+0xc4>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	4a08      	ldr	r2, [pc, #32]	; (800c39c <vTaskSwitchContext+0xbc>)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c37e:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <vTaskSwitchContext+0xc4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3354      	adds	r3, #84	; 0x54
 800c384:	4a08      	ldr	r2, [pc, #32]	; (800c3a8 <vTaskSwitchContext+0xc8>)
 800c386:	6013      	str	r3, [r2, #0]
}
 800c388:	bf00      	nop
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	20001930 	.word	0x20001930
 800c398:	2000191c 	.word	0x2000191c
 800c39c:	20001910 	.word	0x20001910
 800c3a0:	20001438 	.word	0x20001438
 800c3a4:	20001434 	.word	0x20001434
 800c3a8:	20000110 	.word	0x20000110

0800c3ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10c      	bne.n	800c3d6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	b672      	cpsid	i
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	b662      	cpsie	i
 800c3d0:	60fb      	str	r3, [r7, #12]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <vTaskPlaceOnEventList+0x48>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3318      	adds	r3, #24
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7fe fd65 	bl	800aeae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	6838      	ldr	r0, [r7, #0]
 800c3e8:	f000 fa8e 	bl	800c908 <prvAddCurrentTaskToDelayedList>
}
 800c3ec:	bf00      	nop
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	20001434 	.word	0x20001434

0800c3f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10c      	bne.n	800c424 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	b672      	cpsid	i
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	b662      	cpsie	i
 800c41e:	617b      	str	r3, [r7, #20]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <vTaskPlaceOnEventListRestricted+0x58>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3318      	adds	r3, #24
 800c42a:	4619      	mov	r1, r3
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7fe fd1a 	bl	800ae66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f000 fa61 	bl	800c908 <prvAddCurrentTaskToDelayedList>
	}
 800c446:	bf00      	nop
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20001434 	.word	0x20001434

0800c454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10c      	bne.n	800c484 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	b672      	cpsid	i
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	b662      	cpsie	i
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3318      	adds	r3, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe fd49 	bl	800af20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48e:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <xTaskRemoveFromEventList+0xb4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d11d      	bne.n	800c4d2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fd40 	bl	800af20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a4:	4b19      	ldr	r3, [pc, #100]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d903      	bls.n	800c4b4 <xTaskRemoveFromEventList+0x60>
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	4a16      	ldr	r2, [pc, #88]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4a13      	ldr	r2, [pc, #76]	; (800c510 <xTaskRemoveFromEventList+0xbc>)
 800c4c2:	441a      	add	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fe fccb 	bl	800ae66 <vListInsertEnd>
 800c4d0:	e005      	b.n	800c4de <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	480e      	ldr	r0, [pc, #56]	; (800c514 <xTaskRemoveFromEventList+0xc0>)
 800c4da:	f7fe fcc4 	bl	800ae66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <xTaskRemoveFromEventList+0xc4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d905      	bls.n	800c4f8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <xTaskRemoveFromEventList+0xc8>)
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e001      	b.n	800c4fc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20001930 	.word	0x20001930
 800c50c:	20001910 	.word	0x20001910
 800c510:	20001438 	.word	0x20001438
 800c514:	200018c8 	.word	0x200018c8
 800c518:	20001434 	.word	0x20001434
 800c51c:	2000191c 	.word	0x2000191c

0800c520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <vTaskInternalSetTimeOutState+0x24>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <vTaskInternalSetTimeOutState+0x28>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	605a      	str	r2, [r3, #4]
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20001920 	.word	0x20001920
 800c548:	2000190c 	.word	0x2000190c

0800c54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10c      	bne.n	800c576 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	b672      	cpsid	i
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	b662      	cpsie	i
 800c570:	613b      	str	r3, [r7, #16]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10c      	bne.n	800c596 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c580:	b672      	cpsid	i
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	b662      	cpsie	i
 800c590:	60fb      	str	r3, [r7, #12]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c596:	f000 fe71 	bl	800d27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c59a:	4b1d      	ldr	r3, [pc, #116]	; (800c610 <xTaskCheckForTimeOut+0xc4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d102      	bne.n	800c5ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e023      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b15      	ldr	r3, [pc, #84]	; (800c614 <xTaskCheckForTimeOut+0xc8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d007      	beq.n	800c5d6 <xTaskCheckForTimeOut+0x8a>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	e015      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d20b      	bcs.n	800c5f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ff97 	bl	800c520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61fb      	str	r3, [r7, #28]
 800c5f6:	e004      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c602:	f000 fe6f 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800c606:	69fb      	ldr	r3, [r7, #28]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	2000190c 	.word	0x2000190c
 800c614:	20001920 	.word	0x20001920

0800c618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c61c:	4b03      	ldr	r3, [pc, #12]	; (800c62c <vTaskMissedYield+0x14>)
 800c61e:	2201      	movs	r2, #1
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	bf00      	nop
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	2000191c 	.word	0x2000191c

0800c630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c638:	f000 f852 	bl	800c6e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <prvIdleTask+0x28>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d9f9      	bls.n	800c638 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <prvIdleTask+0x2c>)
 800c646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c654:	e7f0      	b.n	800c638 <prvIdleTask+0x8>
 800c656:	bf00      	nop
 800c658:	20001438 	.word	0x20001438
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c666:	2300      	movs	r3, #0
 800c668:	607b      	str	r3, [r7, #4]
 800c66a:	e00c      	b.n	800c686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a12      	ldr	r2, [pc, #72]	; (800c6c0 <prvInitialiseTaskLists+0x60>)
 800c678:	4413      	add	r3, r2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe fbc6 	bl	800ae0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3301      	adds	r3, #1
 800c684:	607b      	str	r3, [r7, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b37      	cmp	r3, #55	; 0x37
 800c68a:	d9ef      	bls.n	800c66c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c68c:	480d      	ldr	r0, [pc, #52]	; (800c6c4 <prvInitialiseTaskLists+0x64>)
 800c68e:	f7fe fbbd 	bl	800ae0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c692:	480d      	ldr	r0, [pc, #52]	; (800c6c8 <prvInitialiseTaskLists+0x68>)
 800c694:	f7fe fbba 	bl	800ae0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c698:	480c      	ldr	r0, [pc, #48]	; (800c6cc <prvInitialiseTaskLists+0x6c>)
 800c69a:	f7fe fbb7 	bl	800ae0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c69e:	480c      	ldr	r0, [pc, #48]	; (800c6d0 <prvInitialiseTaskLists+0x70>)
 800c6a0:	f7fe fbb4 	bl	800ae0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6a4:	480b      	ldr	r0, [pc, #44]	; (800c6d4 <prvInitialiseTaskLists+0x74>)
 800c6a6:	f7fe fbb1 	bl	800ae0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6aa:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <prvInitialiseTaskLists+0x78>)
 800c6ac:	4a05      	ldr	r2, [pc, #20]	; (800c6c4 <prvInitialiseTaskLists+0x64>)
 800c6ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <prvInitialiseTaskLists+0x7c>)
 800c6b2:	4a05      	ldr	r2, [pc, #20]	; (800c6c8 <prvInitialiseTaskLists+0x68>)
 800c6b4:	601a      	str	r2, [r3, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20001438 	.word	0x20001438
 800c6c4:	20001898 	.word	0x20001898
 800c6c8:	200018ac 	.word	0x200018ac
 800c6cc:	200018c8 	.word	0x200018c8
 800c6d0:	200018dc 	.word	0x200018dc
 800c6d4:	200018f4 	.word	0x200018f4
 800c6d8:	200018c0 	.word	0x200018c0
 800c6dc:	200018c4 	.word	0x200018c4

0800c6e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6e6:	e019      	b.n	800c71c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6e8:	f000 fdc8 	bl	800d27c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ec:	4b10      	ldr	r3, [pc, #64]	; (800c730 <prvCheckTasksWaitingTermination+0x50>)
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe fc11 	bl	800af20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <prvCheckTasksWaitingTermination+0x54>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3b01      	subs	r3, #1
 800c704:	4a0b      	ldr	r2, [pc, #44]	; (800c734 <prvCheckTasksWaitingTermination+0x54>)
 800c706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c708:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	4a0a      	ldr	r2, [pc, #40]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c712:	f000 fde7 	bl	800d2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f810 	bl	800c73c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1e1      	bne.n	800c6e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	200018dc 	.word	0x200018dc
 800c734:	20001908 	.word	0x20001908
 800c738:	200018f0 	.word	0x200018f0

0800c73c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3354      	adds	r3, #84	; 0x54
 800c748:	4618      	mov	r0, r3
 800c74a:	f002 f875 	bl	800e838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c754:	2b00      	cmp	r3, #0
 800c756:	d108      	bne.n	800c76a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 ff83 	bl	800d668 <vPortFree>
				vPortFree( pxTCB );
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 ff80 	bl	800d668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c768:	e01a      	b.n	800c7a0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c770:	2b01      	cmp	r3, #1
 800c772:	d103      	bne.n	800c77c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 ff77 	bl	800d668 <vPortFree>
	}
 800c77a:	e011      	b.n	800c7a0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c782:	2b02      	cmp	r3, #2
 800c784:	d00c      	beq.n	800c7a0 <prvDeleteTCB+0x64>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	b672      	cpsid	i
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	b662      	cpsie	i
 800c79a:	60fb      	str	r3, [r7, #12]
}
 800c79c:	bf00      	nop
 800c79e:	e7fe      	b.n	800c79e <prvDeleteTCB+0x62>
	}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7ae:	4b0c      	ldr	r3, [pc, #48]	; (800c7e0 <prvResetNextTaskUnblockTime+0x38>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d104      	bne.n	800c7c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	; (800c7e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c7be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7c0:	e008      	b.n	800c7d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <prvResetNextTaskUnblockTime+0x38>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a04      	ldr	r2, [pc, #16]	; (800c7e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c7d2:	6013      	str	r3, [r2, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	200018c0 	.word	0x200018c0
 800c7e4:	20001928 	.word	0x20001928

0800c7e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7ee:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <xTaskGetSchedulerState+0x34>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d102      	bne.n	800c7fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	607b      	str	r3, [r7, #4]
 800c7fa:	e008      	b.n	800c80e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7fc:	4b08      	ldr	r3, [pc, #32]	; (800c820 <xTaskGetSchedulerState+0x38>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c804:	2302      	movs	r3, #2
 800c806:	607b      	str	r3, [r7, #4]
 800c808:	e001      	b.n	800c80e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c80a:	2300      	movs	r3, #0
 800c80c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c80e:	687b      	ldr	r3, [r7, #4]
	}
 800c810:	4618      	mov	r0, r3
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	20001914 	.word	0x20001914
 800c820:	20001930 	.word	0x20001930

0800c824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c830:	2300      	movs	r3, #0
 800c832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d05a      	beq.n	800c8f0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c83a:	4b30      	ldr	r3, [pc, #192]	; (800c8fc <xTaskPriorityDisinherit+0xd8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	429a      	cmp	r2, r3
 800c842:	d00c      	beq.n	800c85e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c848:	b672      	cpsid	i
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	b662      	cpsie	i
 800c858:	60fb      	str	r3, [r7, #12]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10c      	bne.n	800c880 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86a:	b672      	cpsid	i
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	b662      	cpsie	i
 800c87a:	60bb      	str	r3, [r7, #8]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	1e5a      	subs	r2, r3, #1
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c892:	429a      	cmp	r2, r3
 800c894:	d02c      	beq.n	800c8f0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d128      	bne.n	800c8f0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fb3c 	bl	800af20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <xTaskPriorityDisinherit+0xdc>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d903      	bls.n	800c8d0 <xTaskPriorityDisinherit+0xac>
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	4a0c      	ldr	r2, [pc, #48]	; (800c900 <xTaskPriorityDisinherit+0xdc>)
 800c8ce:	6013      	str	r3, [r2, #0]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4a09      	ldr	r2, [pc, #36]	; (800c904 <xTaskPriorityDisinherit+0xe0>)
 800c8de:	441a      	add	r2, r3
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f7fe fabd 	bl	800ae66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8f0:	697b      	ldr	r3, [r7, #20]
	}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20001434 	.word	0x20001434
 800c900:	20001910 	.word	0x20001910
 800c904:	20001438 	.word	0x20001438

0800c908 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c912:	4b21      	ldr	r3, [pc, #132]	; (800c998 <prvAddCurrentTaskToDelayedList+0x90>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c918:	4b20      	ldr	r3, [pc, #128]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fafe 	bl	800af20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c92a:	d10a      	bne.n	800c942 <prvAddCurrentTaskToDelayedList+0x3a>
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d007      	beq.n	800c942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c932:	4b1a      	ldr	r3, [pc, #104]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3304      	adds	r3, #4
 800c938:	4619      	mov	r1, r3
 800c93a:	4819      	ldr	r0, [pc, #100]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c93c:	f7fe fa93 	bl	800ae66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c940:	e026      	b.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4413      	add	r3, r2
 800c948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c94a:	4b14      	ldr	r3, [pc, #80]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d209      	bcs.n	800c96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c95a:	4b12      	ldr	r3, [pc, #72]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	f7fe faa1 	bl	800aeae <vListInsert>
}
 800c96c:	e010      	b.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4610      	mov	r0, r2
 800c97c:	f7fe fa97 	bl	800aeae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	429a      	cmp	r2, r3
 800c988:	d202      	bcs.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c98a:	4a08      	ldr	r2, [pc, #32]	; (800c9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6013      	str	r3, [r2, #0]
}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	2000190c 	.word	0x2000190c
 800c99c:	20001434 	.word	0x20001434
 800c9a0:	200018f4 	.word	0x200018f4
 800c9a4:	200018c4 	.word	0x200018c4
 800c9a8:	200018c0 	.word	0x200018c0
 800c9ac:	20001928 	.word	0x20001928

0800c9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08a      	sub	sp, #40	; 0x28
 800c9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9ba:	f000 fb15 	bl	800cfe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9be:	4b1d      	ldr	r3, [pc, #116]	; (800ca34 <xTimerCreateTimerTask+0x84>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d021      	beq.n	800ca0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ce:	1d3a      	adds	r2, r7, #4
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe f9fd 	bl	800add8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	9202      	str	r2, [sp, #8]
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	460a      	mov	r2, r1
 800c9f0:	4911      	ldr	r1, [pc, #68]	; (800ca38 <xTimerCreateTimerTask+0x88>)
 800c9f2:	4812      	ldr	r0, [pc, #72]	; (800ca3c <xTimerCreateTimerTask+0x8c>)
 800c9f4:	f7ff f890 	bl	800bb18 <xTaskCreateStatic>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	4a11      	ldr	r2, [pc, #68]	; (800ca40 <xTimerCreateTimerTask+0x90>)
 800c9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9fe:	4b10      	ldr	r3, [pc, #64]	; (800ca40 <xTimerCreateTimerTask+0x90>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca06:	2301      	movs	r3, #1
 800ca08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10c      	bne.n	800ca2a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	b672      	cpsid	i
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	b662      	cpsie	i
 800ca24:	613b      	str	r3, [r7, #16]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ca2a:	697b      	ldr	r3, [r7, #20]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20001964 	.word	0x20001964
 800ca38:	0800f4a0 	.word	0x0800f4a0
 800ca3c:	0800cb81 	.word	0x0800cb81
 800ca40:	20001968 	.word	0x20001968

0800ca44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b08a      	sub	sp, #40	; 0x28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10c      	bne.n	800ca76 <xTimerGenericCommand+0x32>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	b672      	cpsid	i
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	b662      	cpsie	i
 800ca70:	623b      	str	r3, [r7, #32]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca76:	4b1a      	ldr	r3, [pc, #104]	; (800cae0 <xTimerGenericCommand+0x9c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d02a      	beq.n	800cad4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b05      	cmp	r3, #5
 800ca8e:	dc18      	bgt.n	800cac2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca90:	f7ff feaa 	bl	800c7e8 <xTaskGetSchedulerState>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d109      	bne.n	800caae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <xTimerGenericCommand+0x9c>)
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	f107 0110 	add.w	r1, r7, #16
 800caa2:	2300      	movs	r3, #0
 800caa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caa6:	f7fe fbb7 	bl	800b218 <xQueueGenericSend>
 800caaa:	6278      	str	r0, [r7, #36]	; 0x24
 800caac:	e012      	b.n	800cad4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800caae:	4b0c      	ldr	r3, [pc, #48]	; (800cae0 <xTimerGenericCommand+0x9c>)
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	f107 0110 	add.w	r1, r7, #16
 800cab6:	2300      	movs	r3, #0
 800cab8:	2200      	movs	r2, #0
 800caba:	f7fe fbad 	bl	800b218 <xQueueGenericSend>
 800cabe:	6278      	str	r0, [r7, #36]	; 0x24
 800cac0:	e008      	b.n	800cad4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cac2:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <xTimerGenericCommand+0x9c>)
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	f107 0110 	add.w	r1, r7, #16
 800caca:	2300      	movs	r3, #0
 800cacc:	683a      	ldr	r2, [r7, #0]
 800cace:	f7fe fca9 	bl	800b424 <xQueueGenericSendFromISR>
 800cad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3728      	adds	r7, #40	; 0x28
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20001964 	.word	0x20001964

0800cae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af02      	add	r7, sp, #8
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caee:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <prvProcessExpiredTimer+0x98>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fa0f 	bl	800af20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb08:	f003 0304 	and.w	r3, r3, #4
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d024      	beq.n	800cb5a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	699a      	ldr	r2, [r3, #24]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	18d1      	adds	r1, r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	6978      	ldr	r0, [r7, #20]
 800cb1e:	f000 f8d3 	bl	800ccc8 <prvInsertTimerInActiveList>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d021      	beq.n	800cb6c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	2100      	movs	r1, #0
 800cb32:	6978      	ldr	r0, [r7, #20]
 800cb34:	f7ff ff86 	bl	800ca44 <xTimerGenericCommand>
 800cb38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d115      	bne.n	800cb6c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb60:	f023 0301 	bic.w	r3, r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	6a1b      	ldr	r3, [r3, #32]
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	4798      	blx	r3
}
 800cb74:	bf00      	nop
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	2000195c 	.word	0x2000195c

0800cb80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f857 	bl	800cc40 <prvGetNextExpireTime>
 800cb92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f000 f803 	bl	800cba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb9e:	f000 f8d5 	bl	800cd4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cba2:	e7f1      	b.n	800cb88 <prvTimerTask+0x8>

0800cba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbae:	f7ff fa1d 	bl	800bfec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbb2:	f107 0308 	add.w	r3, r7, #8
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f866 	bl	800cc88 <prvSampleTimeNow>
 800cbbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d130      	bne.n	800cc26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <prvProcessTimerOrBlockTask+0x3c>
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d806      	bhi.n	800cbe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbd2:	f7ff fa19 	bl	800c008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbd6:	68f9      	ldr	r1, [r7, #12]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ff83 	bl	800cae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbde:	e024      	b.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d008      	beq.n	800cbf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbe6:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <prvProcessTimerOrBlockTask+0x90>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <prvProcessTimerOrBlockTask+0x50>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e000      	b.n	800cbf6 <prvProcessTimerOrBlockTask+0x52>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbf8:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <prvProcessTimerOrBlockTask+0x94>)
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	4619      	mov	r1, r3
 800cc06:	f7fe ff53 	bl	800bab0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc0a:	f7ff f9fd 	bl	800c008 <xTaskResumeAll>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10a      	bne.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc14:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <prvProcessTimerOrBlockTask+0x98>)
 800cc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	f3bf 8f6f 	isb	sy
}
 800cc24:	e001      	b.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc26:	f7ff f9ef 	bl	800c008 <xTaskResumeAll>
}
 800cc2a:	bf00      	nop
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001960 	.word	0x20001960
 800cc38:	20001964 	.word	0x20001964
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc48:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <prvGetNextExpireTime+0x44>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <prvGetNextExpireTime+0x16>
 800cc52:	2201      	movs	r2, #1
 800cc54:	e000      	b.n	800cc58 <prvGetNextExpireTime+0x18>
 800cc56:	2200      	movs	r2, #0
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc64:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <prvGetNextExpireTime+0x44>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	e001      	b.n	800cc74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	2000195c 	.word	0x2000195c

0800cc88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc90:	f7ff fa5a 	bl	800c148 <xTaskGetTickCount>
 800cc94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <prvSampleTimeNow+0x3c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d205      	bcs.n	800ccac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cca0:	f000 f93c 	bl	800cf1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e002      	b.n	800ccb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccb2:	4a04      	ldr	r2, [pc, #16]	; (800ccc4 <prvSampleTimeNow+0x3c>)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2000196c 	.word	0x2000196c

0800ccc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d812      	bhi.n	800cd14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	1ad2      	subs	r2, r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	e01b      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd02:	4b10      	ldr	r3, [pc, #64]	; (800cd44 <prvInsertTimerInActiveList+0x7c>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7fe f8ce 	bl	800aeae <vListInsert>
 800cd12:	e012      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d206      	bcs.n	800cd2a <prvInsertTimerInActiveList+0x62>
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d302      	bcc.n	800cd2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd24:	2301      	movs	r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	e007      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd2a:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <prvInsertTimerInActiveList+0x80>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4619      	mov	r1, r3
 800cd34:	4610      	mov	r0, r2
 800cd36:	f7fe f8ba 	bl	800aeae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd3a:	697b      	ldr	r3, [r7, #20]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20001960 	.word	0x20001960
 800cd48:	2000195c 	.word	0x2000195c

0800cd4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd52:	e0d0      	b.n	800cef6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da1a      	bge.n	800cd90 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd5a:	1d3b      	adds	r3, r7, #4
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10c      	bne.n	800cd80 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	b672      	cpsid	i
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	b662      	cpsie	i
 800cd7a:	61fb      	str	r3, [r7, #28]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd86:	6850      	ldr	r0, [r2, #4]
 800cd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8a:	6892      	ldr	r2, [r2, #8]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f2c0 80ae 	blt.w	800cef4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	3304      	adds	r3, #4
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe f8b9 	bl	800af20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdae:	463b      	mov	r3, r7
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff ff69 	bl	800cc88 <prvSampleTimeNow>
 800cdb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b09      	cmp	r3, #9
 800cdbc:	f200 809b 	bhi.w	800cef6 <prvProcessReceivedCommands+0x1aa>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <prvProcessReceivedCommands+0x7c>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf1 	.word	0x0800cdf1
 800cdd4:	0800ce69 	.word	0x0800ce69
 800cdd8:	0800ce7d 	.word	0x0800ce7d
 800cddc:	0800cecb 	.word	0x0800cecb
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800cdf1 	.word	0x0800cdf1
 800cde8:	0800ce69 	.word	0x0800ce69
 800cdec:	0800ce7d 	.word	0x0800ce7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	18d1      	adds	r1, r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce10:	f7ff ff5a 	bl	800ccc8 <prvInsertTimerInActiveList>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d06d      	beq.n	800cef6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d062      	beq.n	800cef6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	441a      	add	r2, r3
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2100      	movs	r1, #0
 800ce40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce42:	f7ff fdff 	bl	800ca44 <xTimerGenericCommand>
 800ce46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d153      	bne.n	800cef6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	b672      	cpsid	i
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	b662      	cpsie	i
 800ce62:	61bb      	str	r3, [r7, #24]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce6e:	f023 0301 	bic.w	r3, r3, #1
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce7a:	e03c      	b.n	800cef6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10c      	bne.n	800ceb6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	b672      	cpsid	i
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	b662      	cpsie	i
 800ceb0:	617b      	str	r3, [r7, #20]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	18d1      	adds	r1, r2, r3
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec4:	f7ff ff00 	bl	800ccc8 <prvInsertTimerInActiveList>
					break;
 800cec8:	e015      	b.n	800cef6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d103      	bne.n	800cee0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ced8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceda:	f000 fbc5 	bl	800d668 <vPortFree>
 800cede:	e00a      	b.n	800cef6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee6:	f023 0301 	bic.w	r3, r3, #1
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cef2:	e000      	b.n	800cef6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cef6:	4b08      	ldr	r3, [pc, #32]	; (800cf18 <prvProcessReceivedCommands+0x1cc>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	1d39      	adds	r1, r7, #4
 800cefc:	2200      	movs	r2, #0
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fb30 	bl	800b564 <xQueueReceive>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f47f af24 	bne.w	800cd54 <prvProcessReceivedCommands+0x8>
	}
}
 800cf0c:	bf00      	nop
 800cf0e:	bf00      	nop
 800cf10:	3730      	adds	r7, #48	; 0x30
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20001964 	.word	0x20001964

0800cf1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf22:	e04a      	b.n	800cfba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf24:	4b2e      	ldr	r3, [pc, #184]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf2e:	4b2c      	ldr	r3, [pc, #176]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fd ffef 	bl	800af20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d030      	beq.n	800cfba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	4413      	add	r3, r2
 800cf60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d90e      	bls.n	800cf88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf76:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4619      	mov	r1, r3
 800cf80:	4610      	mov	r0, r2
 800cf82:	f7fd ff94 	bl	800aeae <vListInsert>
 800cf86:	e018      	b.n	800cfba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	2100      	movs	r1, #0
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fd56 	bl	800ca44 <xTimerGenericCommand>
 800cf98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10c      	bne.n	800cfba <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa4:	b672      	cpsid	i
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	b662      	cpsie	i
 800cfb4:	603b      	str	r3, [r7, #0]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1af      	bne.n	800cf24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfc4:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfca:	4b06      	ldr	r3, [pc, #24]	; (800cfe4 <prvSwitchTimerLists+0xc8>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a04      	ldr	r2, [pc, #16]	; (800cfe0 <prvSwitchTimerLists+0xc4>)
 800cfd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfd2:	4a04      	ldr	r2, [pc, #16]	; (800cfe4 <prvSwitchTimerLists+0xc8>)
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	6013      	str	r3, [r2, #0]
}
 800cfd8:	bf00      	nop
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	2000195c 	.word	0x2000195c
 800cfe4:	20001960 	.word	0x20001960

0800cfe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfee:	f000 f945 	bl	800d27c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cff2:	4b15      	ldr	r3, [pc, #84]	; (800d048 <prvCheckForValidListAndQueue+0x60>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d120      	bne.n	800d03c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cffa:	4814      	ldr	r0, [pc, #80]	; (800d04c <prvCheckForValidListAndQueue+0x64>)
 800cffc:	f7fd ff06 	bl	800ae0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d000:	4813      	ldr	r0, [pc, #76]	; (800d050 <prvCheckForValidListAndQueue+0x68>)
 800d002:	f7fd ff03 	bl	800ae0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d006:	4b13      	ldr	r3, [pc, #76]	; (800d054 <prvCheckForValidListAndQueue+0x6c>)
 800d008:	4a10      	ldr	r2, [pc, #64]	; (800d04c <prvCheckForValidListAndQueue+0x64>)
 800d00a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d00c:	4b12      	ldr	r3, [pc, #72]	; (800d058 <prvCheckForValidListAndQueue+0x70>)
 800d00e:	4a10      	ldr	r2, [pc, #64]	; (800d050 <prvCheckForValidListAndQueue+0x68>)
 800d010:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d012:	2300      	movs	r3, #0
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	4b11      	ldr	r3, [pc, #68]	; (800d05c <prvCheckForValidListAndQueue+0x74>)
 800d018:	4a11      	ldr	r2, [pc, #68]	; (800d060 <prvCheckForValidListAndQueue+0x78>)
 800d01a:	2110      	movs	r1, #16
 800d01c:	200a      	movs	r0, #10
 800d01e:	f7fe f813 	bl	800b048 <xQueueGenericCreateStatic>
 800d022:	4603      	mov	r3, r0
 800d024:	4a08      	ldr	r2, [pc, #32]	; (800d048 <prvCheckForValidListAndQueue+0x60>)
 800d026:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d028:	4b07      	ldr	r3, [pc, #28]	; (800d048 <prvCheckForValidListAndQueue+0x60>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d030:	4b05      	ldr	r3, [pc, #20]	; (800d048 <prvCheckForValidListAndQueue+0x60>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	490b      	ldr	r1, [pc, #44]	; (800d064 <prvCheckForValidListAndQueue+0x7c>)
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fd10 	bl	800ba5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d03c:	f000 f952 	bl	800d2e4 <vPortExitCritical>
}
 800d040:	bf00      	nop
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20001964 	.word	0x20001964
 800d04c:	20001934 	.word	0x20001934
 800d050:	20001948 	.word	0x20001948
 800d054:	2000195c 	.word	0x2000195c
 800d058:	20001960 	.word	0x20001960
 800d05c:	20001a10 	.word	0x20001a10
 800d060:	20001970 	.word	0x20001970
 800d064:	0800f4a8 	.word	0x0800f4a8

0800d068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3b04      	subs	r3, #4
 800d078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b04      	subs	r3, #4
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f023 0201 	bic.w	r2, r3, #1
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3b04      	subs	r3, #4
 800d096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d098:	4a0c      	ldr	r2, [pc, #48]	; (800d0cc <pxPortInitialiseStack+0x64>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3b14      	subs	r3, #20
 800d0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3b04      	subs	r3, #4
 800d0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f06f 0202 	mvn.w	r2, #2
 800d0b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3b20      	subs	r3, #32
 800d0bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0be:	68fb      	ldr	r3, [r7, #12]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	0800d0d1 	.word	0x0800d0d1

0800d0d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <prvTaskExitError+0x5c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e2:	d00c      	beq.n	800d0fe <prvTaskExitError+0x2e>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	b672      	cpsid	i
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	b662      	cpsie	i
 800d0f8:	60fb      	str	r3, [r7, #12]
}
 800d0fa:	bf00      	nop
 800d0fc:	e7fe      	b.n	800d0fc <prvTaskExitError+0x2c>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	b672      	cpsid	i
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	b662      	cpsie	i
 800d112:	60bb      	str	r3, [r7, #8]
}
 800d114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d116:	bf00      	nop
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0fc      	beq.n	800d118 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d11e:	bf00      	nop
 800d120:	bf00      	nop
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20000098 	.word	0x20000098

0800d130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <pxCurrentTCBConst2>)
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	6808      	ldr	r0, [r1, #0]
 800d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f380 8809 	msr	PSP, r0
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8811 	msr	BASEPRI, r0
 800d14a:	4770      	bx	lr
 800d14c:	f3af 8000 	nop.w

0800d150 <pxCurrentTCBConst2>:
 800d150:	20001434 	.word	0x20001434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop

0800d158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d158:	4808      	ldr	r0, [pc, #32]	; (800d17c <prvPortStartFirstTask+0x24>)
 800d15a:	6800      	ldr	r0, [r0, #0]
 800d15c:	6800      	ldr	r0, [r0, #0]
 800d15e:	f380 8808 	msr	MSP, r0
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f380 8814 	msr	CONTROL, r0
 800d16a:	b662      	cpsie	i
 800d16c:	b661      	cpsie	f
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	df00      	svc	0
 800d178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d17a:	bf00      	nop
 800d17c:	e000ed08 	.word	0xe000ed08

0800d180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d186:	4b37      	ldr	r3, [pc, #220]	; (800d264 <xPortStartScheduler+0xe4>)
 800d188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ae:	4b2f      	ldr	r3, [pc, #188]	; (800d26c <xPortStartScheduler+0xec>)
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1b4:	e009      	b.n	800d1ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d1b6:	4b2d      	ldr	r3, [pc, #180]	; (800d26c <xPortStartScheduler+0xec>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4a2b      	ldr	r2, [pc, #172]	; (800d26c <xPortStartScheduler+0xec>)
 800d1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d2:	2b80      	cmp	r3, #128	; 0x80
 800d1d4:	d0ef      	beq.n	800d1b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1d6:	4b25      	ldr	r3, [pc, #148]	; (800d26c <xPortStartScheduler+0xec>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f1c3 0307 	rsb	r3, r3, #7
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d00c      	beq.n	800d1fc <xPortStartScheduler+0x7c>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	b672      	cpsid	i
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	b662      	cpsie	i
 800d1f6:	60bb      	str	r3, [r7, #8]
}
 800d1f8:	bf00      	nop
 800d1fa:	e7fe      	b.n	800d1fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1fc:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <xPortStartScheduler+0xec>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	4a1a      	ldr	r2, [pc, #104]	; (800d26c <xPortStartScheduler+0xec>)
 800d204:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d206:	4b19      	ldr	r3, [pc, #100]	; (800d26c <xPortStartScheduler+0xec>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d20e:	4a17      	ldr	r2, [pc, #92]	; (800d26c <xPortStartScheduler+0xec>)
 800d210:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	b2da      	uxtb	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <xPortStartScheduler+0xf0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a14      	ldr	r2, [pc, #80]	; (800d270 <xPortStartScheduler+0xf0>)
 800d220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d226:	4b12      	ldr	r3, [pc, #72]	; (800d270 <xPortStartScheduler+0xf0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a11      	ldr	r2, [pc, #68]	; (800d270 <xPortStartScheduler+0xf0>)
 800d22c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d230:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d232:	f000 f8dd 	bl	800d3f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d236:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <xPortStartScheduler+0xf4>)
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d23c:	f000 f8fc 	bl	800d438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d240:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <xPortStartScheduler+0xf8>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a0c      	ldr	r2, [pc, #48]	; (800d278 <xPortStartScheduler+0xf8>)
 800d246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d24a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d24c:	f7ff ff84 	bl	800d158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d250:	f7ff f846 	bl	800c2e0 <vTaskSwitchContext>
	prvTaskExitError();
 800d254:	f7ff ff3c 	bl	800d0d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	e000e400 	.word	0xe000e400
 800d268:	20001a60 	.word	0x20001a60
 800d26c:	20001a64 	.word	0x20001a64
 800d270:	e000ed20 	.word	0xe000ed20
 800d274:	20000098 	.word	0x20000098
 800d278:	e000ef34 	.word	0xe000ef34

0800d27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	b672      	cpsid	i
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	b662      	cpsie	i
 800d296:	607b      	str	r3, [r7, #4]
}
 800d298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d29a:	4b10      	ldr	r3, [pc, #64]	; (800d2dc <vPortEnterCritical+0x60>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	4a0e      	ldr	r2, [pc, #56]	; (800d2dc <vPortEnterCritical+0x60>)
 800d2a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <vPortEnterCritical+0x60>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d111      	bne.n	800d2d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2ac:	4b0c      	ldr	r3, [pc, #48]	; (800d2e0 <vPortEnterCritical+0x64>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00c      	beq.n	800d2d0 <vPortEnterCritical+0x54>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	b672      	cpsid	i
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	b662      	cpsie	i
 800d2ca:	603b      	str	r3, [r7, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <vPortEnterCritical+0x52>
	}
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20000098 	.word	0x20000098
 800d2e0:	e000ed04 	.word	0xe000ed04

0800d2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2ea:	4b13      	ldr	r3, [pc, #76]	; (800d338 <vPortExitCritical+0x54>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10c      	bne.n	800d30c <vPortExitCritical+0x28>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	b672      	cpsid	i
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	b662      	cpsie	i
 800d306:	607b      	str	r3, [r7, #4]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <vPortExitCritical+0x54>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3b01      	subs	r3, #1
 800d312:	4a09      	ldr	r2, [pc, #36]	; (800d338 <vPortExitCritical+0x54>)
 800d314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d316:	4b08      	ldr	r3, [pc, #32]	; (800d338 <vPortExitCritical+0x54>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d105      	bne.n	800d32a <vPortExitCritical+0x46>
 800d31e:	2300      	movs	r3, #0
 800d320:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	f383 8811 	msr	BASEPRI, r3
}
 800d328:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20000098 	.word	0x20000098
 800d33c:	00000000 	.word	0x00000000

0800d340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d340:	f3ef 8009 	mrs	r0, PSP
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <pxCurrentTCBConst>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	f01e 0f10 	tst.w	lr, #16
 800d350:	bf08      	it	eq
 800d352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	6010      	str	r0, [r2, #0]
 800d35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d364:	b672      	cpsid	i
 800d366:	f380 8811 	msr	BASEPRI, r0
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	b662      	cpsie	i
 800d374:	f7fe ffb4 	bl	800c2e0 <vTaskSwitchContext>
 800d378:	f04f 0000 	mov.w	r0, #0
 800d37c:	f380 8811 	msr	BASEPRI, r0
 800d380:	bc09      	pop	{r0, r3}
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	6808      	ldr	r0, [r1, #0]
 800d386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38a:	f01e 0f10 	tst.w	lr, #16
 800d38e:	bf08      	it	eq
 800d390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d394:	f380 8809 	msr	PSP, r0
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop

0800d3a0 <pxCurrentTCBConst>:
 800d3a0:	20001434 	.word	0x20001434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop

0800d3a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	b672      	cpsid	i
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	b662      	cpsie	i
 800d3c2:	607b      	str	r3, [r7, #4]
}
 800d3c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3c6:	f7fe fecf 	bl	800c168 <xTaskIncrementTick>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3d0:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <SysTick_Handler+0x44>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	f383 8811 	msr	BASEPRI, r3
}
 800d3e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	e000ed04 	.word	0xe000ed04

0800d3f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <vPortSetupTimerInterrupt+0x34>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <vPortSetupTimerInterrupt+0x38>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vPortSetupTimerInterrupt+0x3c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a0a      	ldr	r2, [pc, #40]	; (800d430 <vPortSetupTimerInterrupt+0x40>)
 800d406:	fba2 2303 	umull	r2, r3, r2, r3
 800d40a:	099b      	lsrs	r3, r3, #6
 800d40c:	4a09      	ldr	r2, [pc, #36]	; (800d434 <vPortSetupTimerInterrupt+0x44>)
 800d40e:	3b01      	subs	r3, #1
 800d410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d412:	4b04      	ldr	r3, [pc, #16]	; (800d424 <vPortSetupTimerInterrupt+0x34>)
 800d414:	2207      	movs	r2, #7
 800d416:	601a      	str	r2, [r3, #0]
}
 800d418:	bf00      	nop
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	e000e010 	.word	0xe000e010
 800d428:	e000e018 	.word	0xe000e018
 800d42c:	20000000 	.word	0x20000000
 800d430:	10624dd3 	.word	0x10624dd3
 800d434:	e000e014 	.word	0xe000e014

0800d438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d448 <vPortEnableVFP+0x10>
 800d43c:	6801      	ldr	r1, [r0, #0]
 800d43e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d442:	6001      	str	r1, [r0, #0]
 800d444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d446:	bf00      	nop
 800d448:	e000ed88 	.word	0xe000ed88

0800d44c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d452:	f3ef 8305 	mrs	r3, IPSR
 800d456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b0f      	cmp	r3, #15
 800d45c:	d916      	bls.n	800d48c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d45e:	4a19      	ldr	r2, [pc, #100]	; (800d4c4 <vPortValidateInterruptPriority+0x78>)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4413      	add	r3, r2
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d468:	4b17      	ldr	r3, [pc, #92]	; (800d4c8 <vPortValidateInterruptPriority+0x7c>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	7afa      	ldrb	r2, [r7, #11]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d20c      	bcs.n	800d48c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	b672      	cpsid	i
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	b662      	cpsie	i
 800d486:	607b      	str	r3, [r7, #4]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d48c:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <vPortValidateInterruptPriority+0x80>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d494:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <vPortValidateInterruptPriority+0x84>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d90c      	bls.n	800d4b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	b672      	cpsid	i
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	b662      	cpsie	i
 800d4b0:	603b      	str	r3, [r7, #0]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <vPortValidateInterruptPriority+0x68>
	}
 800d4b6:	bf00      	nop
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	e000e3f0 	.word	0xe000e3f0
 800d4c8:	20001a60 	.word	0x20001a60
 800d4cc:	e000ed0c 	.word	0xe000ed0c
 800d4d0:	20001a64 	.word	0x20001a64

0800d4d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08a      	sub	sp, #40	; 0x28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4e0:	f7fe fd84 	bl	800bfec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4e4:	4b5b      	ldr	r3, [pc, #364]	; (800d654 <pvPortMalloc+0x180>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4ec:	f000 f91a 	bl	800d724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4f0:	4b59      	ldr	r3, [pc, #356]	; (800d658 <pvPortMalloc+0x184>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f040 8092 	bne.w	800d622 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01f      	beq.n	800d544 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d504:	2208      	movs	r2, #8
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f003 0307 	and.w	r3, r3, #7
 800d512:	2b00      	cmp	r3, #0
 800d514:	d016      	beq.n	800d544 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f023 0307 	bic.w	r3, r3, #7
 800d51c:	3308      	adds	r3, #8
 800d51e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00c      	beq.n	800d544 <pvPortMalloc+0x70>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	b672      	cpsid	i
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	b662      	cpsie	i
 800d53e:	617b      	str	r3, [r7, #20]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d06b      	beq.n	800d622 <pvPortMalloc+0x14e>
 800d54a:	4b44      	ldr	r3, [pc, #272]	; (800d65c <pvPortMalloc+0x188>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d866      	bhi.n	800d622 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d554:	4b42      	ldr	r3, [pc, #264]	; (800d660 <pvPortMalloc+0x18c>)
 800d556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d558:	4b41      	ldr	r3, [pc, #260]	; (800d660 <pvPortMalloc+0x18c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d55e:	e004      	b.n	800d56a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d903      	bls.n	800d57c <pvPortMalloc+0xa8>
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f1      	bne.n	800d560 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d57c:	4b35      	ldr	r3, [pc, #212]	; (800d654 <pvPortMalloc+0x180>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d582:	429a      	cmp	r2, r3
 800d584:	d04d      	beq.n	800d622 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2208      	movs	r2, #8
 800d58c:	4413      	add	r3, r2
 800d58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	1ad2      	subs	r2, r2, r3
 800d5a0:	2308      	movs	r3, #8
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d921      	bls.n	800d5ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00c      	beq.n	800d5d4 <pvPortMalloc+0x100>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	b672      	cpsid	i
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	b662      	cpsie	i
 800d5ce:	613b      	str	r3, [r7, #16]
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	1ad2      	subs	r2, r2, r3
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5e6:	69b8      	ldr	r0, [r7, #24]
 800d5e8:	f000 f8fe 	bl	800d7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5ec:	4b1b      	ldr	r3, [pc, #108]	; (800d65c <pvPortMalloc+0x188>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	4a19      	ldr	r2, [pc, #100]	; (800d65c <pvPortMalloc+0x188>)
 800d5f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5fa:	4b18      	ldr	r3, [pc, #96]	; (800d65c <pvPortMalloc+0x188>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	4b19      	ldr	r3, [pc, #100]	; (800d664 <pvPortMalloc+0x190>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d203      	bcs.n	800d60e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d606:	4b15      	ldr	r3, [pc, #84]	; (800d65c <pvPortMalloc+0x188>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a16      	ldr	r2, [pc, #88]	; (800d664 <pvPortMalloc+0x190>)
 800d60c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	4b11      	ldr	r3, [pc, #68]	; (800d658 <pvPortMalloc+0x184>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	431a      	orrs	r2, r3
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d622:	f7fe fcf1 	bl	800c008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	f003 0307 	and.w	r3, r3, #7
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00c      	beq.n	800d64a <pvPortMalloc+0x176>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	b672      	cpsid	i
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	b662      	cpsie	i
 800d644:	60fb      	str	r3, [r7, #12]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <pvPortMalloc+0x174>
	return pvReturn;
 800d64a:	69fb      	ldr	r3, [r7, #28]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3728      	adds	r7, #40	; 0x28
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20005670 	.word	0x20005670
 800d658:	2000567c 	.word	0x2000567c
 800d65c:	20005674 	.word	0x20005674
 800d660:	20005668 	.word	0x20005668
 800d664:	20005678 	.word	0x20005678

0800d668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d04c      	beq.n	800d714 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d67a:	2308      	movs	r3, #8
 800d67c:	425b      	negs	r3, r3
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	4413      	add	r3, r2
 800d682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	4b23      	ldr	r3, [pc, #140]	; (800d71c <vPortFree+0xb4>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4013      	ands	r3, r2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10c      	bne.n	800d6b0 <vPortFree+0x48>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69a:	b672      	cpsid	i
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	b662      	cpsie	i
 800d6aa:	60fb      	str	r3, [r7, #12]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00c      	beq.n	800d6d2 <vPortFree+0x6a>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	b672      	cpsid	i
 800d6be:	f383 8811 	msr	BASEPRI, r3
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	b662      	cpsie	i
 800d6cc:	60bb      	str	r3, [r7, #8]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	4b11      	ldr	r3, [pc, #68]	; (800d71c <vPortFree+0xb4>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d019      	beq.n	800d714 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d115      	bne.n	800d714 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	4b0b      	ldr	r3, [pc, #44]	; (800d71c <vPortFree+0xb4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	43db      	mvns	r3, r3
 800d6f2:	401a      	ands	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6f8:	f7fe fc78 	bl	800bfec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	4b07      	ldr	r3, [pc, #28]	; (800d720 <vPortFree+0xb8>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4413      	add	r3, r2
 800d706:	4a06      	ldr	r2, [pc, #24]	; (800d720 <vPortFree+0xb8>)
 800d708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d70a:	6938      	ldr	r0, [r7, #16]
 800d70c:	f000 f86c 	bl	800d7e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d710:	f7fe fc7a 	bl	800c008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d714:	bf00      	nop
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	2000567c 	.word	0x2000567c
 800d720:	20005674 	.word	0x20005674

0800d724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d72a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d730:	4b27      	ldr	r3, [pc, #156]	; (800d7d0 <prvHeapInit+0xac>)
 800d732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00c      	beq.n	800d758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3307      	adds	r3, #7
 800d742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f023 0307 	bic.w	r3, r3, #7
 800d74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	4a1f      	ldr	r2, [pc, #124]	; (800d7d0 <prvHeapInit+0xac>)
 800d754:	4413      	add	r3, r2
 800d756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d75c:	4a1d      	ldr	r2, [pc, #116]	; (800d7d4 <prvHeapInit+0xb0>)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d762:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <prvHeapInit+0xb0>)
 800d764:	2200      	movs	r2, #0
 800d766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	4413      	add	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d770:	2208      	movs	r2, #8
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0307 	bic.w	r3, r3, #7
 800d77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4a15      	ldr	r2, [pc, #84]	; (800d7d8 <prvHeapInit+0xb4>)
 800d784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d786:	4b14      	ldr	r3, [pc, #80]	; (800d7d8 <prvHeapInit+0xb4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2200      	movs	r2, #0
 800d78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d78e:	4b12      	ldr	r3, [pc, #72]	; (800d7d8 <prvHeapInit+0xb4>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <prvHeapInit+0xb4>)
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <prvHeapInit+0xb8>)
 800d7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <prvHeapInit+0xbc>)
 800d7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7bc:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <prvHeapInit+0xc0>)
 800d7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7c2:	601a      	str	r2, [r3, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	20001a68 	.word	0x20001a68
 800d7d4:	20005668 	.word	0x20005668
 800d7d8:	20005670 	.word	0x20005670
 800d7dc:	20005678 	.word	0x20005678
 800d7e0:	20005674 	.word	0x20005674
 800d7e4:	2000567c 	.word	0x2000567c

0800d7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7f0:	4b28      	ldr	r3, [pc, #160]	; (800d894 <prvInsertBlockIntoFreeList+0xac>)
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e002      	b.n	800d7fc <prvInsertBlockIntoFreeList+0x14>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d8f7      	bhi.n	800d7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	4413      	add	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	429a      	cmp	r2, r3
 800d816:	d108      	bne.n	800d82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	441a      	add	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	441a      	add	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d118      	bne.n	800d870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	4b15      	ldr	r3, [pc, #84]	; (800d898 <prvInsertBlockIntoFreeList+0xb0>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d00d      	beq.n	800d866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	441a      	add	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	e008      	b.n	800d878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <prvInsertBlockIntoFreeList+0xb0>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	e003      	b.n	800d878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d002      	beq.n	800d886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d886:	bf00      	nop
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20005668 	.word	0x20005668
 800d898:	20005670 	.word	0x20005670

0800d89c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4912      	ldr	r1, [pc, #72]	; (800d8ec <MX_USB_DEVICE_Init+0x50>)
 800d8a4:	4812      	ldr	r0, [pc, #72]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8a6:	f7fb fcaf 	bl	8009208 <USBD_Init>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d8b0:	f7f3 fb90 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d8b4:	490f      	ldr	r1, [pc, #60]	; (800d8f4 <MX_USB_DEVICE_Init+0x58>)
 800d8b6:	480e      	ldr	r0, [pc, #56]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8b8:	f7fb fcd6 	bl	8009268 <USBD_RegisterClass>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d8c2:	f7f3 fb87 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d8c6:	490c      	ldr	r1, [pc, #48]	; (800d8f8 <MX_USB_DEVICE_Init+0x5c>)
 800d8c8:	4809      	ldr	r0, [pc, #36]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8ca:	f7fb fc0d 	bl	80090e8 <USBD_CDC_RegisterInterface>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d8d4:	f7f3 fb7e 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d8d8:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8da:	f7fb fcfb 	bl	80092d4 <USBD_Start>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d8e4:	f7f3 fb76 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d8e8:	bf00      	nop
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	200000b0 	.word	0x200000b0
 800d8f0:	20005680 	.word	0x20005680
 800d8f4:	20000018 	.word	0x20000018
 800d8f8:	2000009c 	.word	0x2000009c

0800d8fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d900:	2200      	movs	r2, #0
 800d902:	4905      	ldr	r1, [pc, #20]	; (800d918 <CDC_Init_FS+0x1c>)
 800d904:	4805      	ldr	r0, [pc, #20]	; (800d91c <CDC_Init_FS+0x20>)
 800d906:	f7fb fc09 	bl	800911c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d90a:	4905      	ldr	r1, [pc, #20]	; (800d920 <CDC_Init_FS+0x24>)
 800d90c:	4803      	ldr	r0, [pc, #12]	; (800d91c <CDC_Init_FS+0x20>)
 800d90e:	f7fb fc27 	bl	8009160 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d912:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d914:	4618      	mov	r0, r3
 800d916:	bd80      	pop	{r7, pc}
 800d918:	2000615c 	.word	0x2000615c
 800d91c:	20005680 	.word	0x20005680
 800d920:	2000595c 	.word	0x2000595c

0800d924 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	4603      	mov	r3, r0
 800d93c:	6039      	str	r1, [r7, #0]
 800d93e:	71fb      	strb	r3, [r7, #7]
 800d940:	4613      	mov	r3, r2
 800d942:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d944:	79fb      	ldrb	r3, [r7, #7]
 800d946:	2b23      	cmp	r3, #35	; 0x23
 800d948:	d84a      	bhi.n	800d9e0 <CDC_Control_FS+0xac>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <CDC_Control_FS+0x1c>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d9e1 	.word	0x0800d9e1
 800d954:	0800d9e1 	.word	0x0800d9e1
 800d958:	0800d9e1 	.word	0x0800d9e1
 800d95c:	0800d9e1 	.word	0x0800d9e1
 800d960:	0800d9e1 	.word	0x0800d9e1
 800d964:	0800d9e1 	.word	0x0800d9e1
 800d968:	0800d9e1 	.word	0x0800d9e1
 800d96c:	0800d9e1 	.word	0x0800d9e1
 800d970:	0800d9e1 	.word	0x0800d9e1
 800d974:	0800d9e1 	.word	0x0800d9e1
 800d978:	0800d9e1 	.word	0x0800d9e1
 800d97c:	0800d9e1 	.word	0x0800d9e1
 800d980:	0800d9e1 	.word	0x0800d9e1
 800d984:	0800d9e1 	.word	0x0800d9e1
 800d988:	0800d9e1 	.word	0x0800d9e1
 800d98c:	0800d9e1 	.word	0x0800d9e1
 800d990:	0800d9e1 	.word	0x0800d9e1
 800d994:	0800d9e1 	.word	0x0800d9e1
 800d998:	0800d9e1 	.word	0x0800d9e1
 800d99c:	0800d9e1 	.word	0x0800d9e1
 800d9a0:	0800d9e1 	.word	0x0800d9e1
 800d9a4:	0800d9e1 	.word	0x0800d9e1
 800d9a8:	0800d9e1 	.word	0x0800d9e1
 800d9ac:	0800d9e1 	.word	0x0800d9e1
 800d9b0:	0800d9e1 	.word	0x0800d9e1
 800d9b4:	0800d9e1 	.word	0x0800d9e1
 800d9b8:	0800d9e1 	.word	0x0800d9e1
 800d9bc:	0800d9e1 	.word	0x0800d9e1
 800d9c0:	0800d9e1 	.word	0x0800d9e1
 800d9c4:	0800d9e1 	.word	0x0800d9e1
 800d9c8:	0800d9e1 	.word	0x0800d9e1
 800d9cc:	0800d9e1 	.word	0x0800d9e1
 800d9d0:	0800d9e1 	.word	0x0800d9e1
 800d9d4:	0800d9e1 	.word	0x0800d9e1
 800d9d8:	0800d9e1 	.word	0x0800d9e1
 800d9dc:	0800d9e1 	.word	0x0800d9e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d9e0:	bf00      	nop
  }

  return (USBD_OK);
 800d9e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	4813      	ldr	r0, [pc, #76]	; (800da4c <CDC_Receive_FS+0x5c>)
 800d9fe:	f7fb fbaf 	bl	8009160 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da02:	4812      	ldr	r0, [pc, #72]	; (800da4c <CDC_Receive_FS+0x5c>)
 800da04:	f7fb fbca 	bl	800919c <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 800da0e:	4b10      	ldr	r3, [pc, #64]	; (800da50 <CDC_Receive_FS+0x60>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d015      	beq.n	800da42 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', 32);						//Clear msg-obj
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	2220      	movs	r2, #32
 800da1c:	2100      	movs	r1, #0
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 fdfc 	bl	800e61c <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 800da24:	7bfa      	ldrb	r2, [r7, #15]
 800da26:	f107 0308 	add.w	r3, r7, #8
 800da2a:	6879      	ldr	r1, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f000 fde7 	bl	800e600 <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 800da32:	4b07      	ldr	r3, [pc, #28]	; (800da50 <CDC_Receive_FS+0x60>)
 800da34:	6818      	ldr	r0, [r3, #0]
 800da36:	f107 0108 	add.w	r1, r7, #8
 800da3a:	2300      	movs	r3, #0
 800da3c:	2200      	movs	r2, #0
 800da3e:	f7fd f8cb 	bl	800abd8 <osMessageQueuePut>

  	}

  return (USBD_OK);
 800da42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20005680 	.word	0x20005680
 800da50:	200005f8 	.word	0x200005f8

0800da54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	6039      	str	r1, [r7, #0]
 800da82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2212      	movs	r2, #18
 800da88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da8a:	4b03      	ldr	r3, [pc, #12]	; (800da98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	200000d0 	.word	0x200000d0

0800da9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	6039      	str	r1, [r7, #0]
 800daa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2204      	movs	r2, #4
 800daac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800daae:	4b03      	ldr	r3, [pc, #12]	; (800dabc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	200000f0 	.word	0x200000f0

0800dac0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	4907      	ldr	r1, [pc, #28]	; (800daf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dad6:	4808      	ldr	r0, [pc, #32]	; (800daf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dad8:	f7fc fdd2 	bl	800a680 <USBD_GetString>
 800dadc:	e004      	b.n	800dae8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	4904      	ldr	r1, [pc, #16]	; (800daf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dae2:	4805      	ldr	r0, [pc, #20]	; (800daf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dae4:	f7fc fdcc 	bl	800a680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	2000695c 	.word	0x2000695c
 800daf8:	0800f4b0 	.word	0x0800f4b0

0800dafc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	4904      	ldr	r1, [pc, #16]	; (800db1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800db0c:	4804      	ldr	r0, [pc, #16]	; (800db20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800db0e:	f7fc fdb7 	bl	800a680 <USBD_GetString>
  return USBD_StrDesc;
 800db12:	4b02      	ldr	r3, [pc, #8]	; (800db1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2000695c 	.word	0x2000695c
 800db20:	0800f4c4 	.word	0x0800f4c4

0800db24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	6039      	str	r1, [r7, #0]
 800db2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	221a      	movs	r2, #26
 800db34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db36:	f000 f855 	bl	800dbe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800db3a:	4b02      	ldr	r3, [pc, #8]	; (800db44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	200000f4 	.word	0x200000f4

0800db48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	6039      	str	r1, [r7, #0]
 800db52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	4907      	ldr	r1, [pc, #28]	; (800db7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db5e:	4808      	ldr	r0, [pc, #32]	; (800db80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db60:	f7fc fd8e 	bl	800a680 <USBD_GetString>
 800db64:	e004      	b.n	800db70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	4904      	ldr	r1, [pc, #16]	; (800db7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db6a:	4805      	ldr	r0, [pc, #20]	; (800db80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db6c:	f7fc fd88 	bl	800a680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db70:	4b02      	ldr	r3, [pc, #8]	; (800db7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	2000695c 	.word	0x2000695c
 800db80:	0800f4d8 	.word	0x0800f4d8

0800db84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db90:	79fb      	ldrb	r3, [r7, #7]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	4907      	ldr	r1, [pc, #28]	; (800dbb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db9a:	4808      	ldr	r0, [pc, #32]	; (800dbbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db9c:	f7fc fd70 	bl	800a680 <USBD_GetString>
 800dba0:	e004      	b.n	800dbac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dba8:	f7fc fd6a 	bl	800a680 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000695c 	.word	0x2000695c
 800dbbc:	0800f4e4 	.word	0x0800f4e4

0800dbc0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	220c      	movs	r2, #12
 800dbd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dbd2:	4b03      	ldr	r3, [pc, #12]	; (800dbe0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	200000e4 	.word	0x200000e4

0800dbe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbea:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <Get_SerialNum+0x44>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dbf0:	4b0e      	ldr	r3, [pc, #56]	; (800dc2c <Get_SerialNum+0x48>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbf6:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <Get_SerialNum+0x4c>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4413      	add	r3, r2
 800dc02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d009      	beq.n	800dc1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc0a:	2208      	movs	r2, #8
 800dc0c:	4909      	ldr	r1, [pc, #36]	; (800dc34 <Get_SerialNum+0x50>)
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f000 f814 	bl	800dc3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc14:	2204      	movs	r2, #4
 800dc16:	4908      	ldr	r1, [pc, #32]	; (800dc38 <Get_SerialNum+0x54>)
 800dc18:	68b8      	ldr	r0, [r7, #8]
 800dc1a:	f000 f80f 	bl	800dc3c <IntToUnicode>
  }
}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	1ff0f420 	.word	0x1ff0f420
 800dc2c:	1ff0f424 	.word	0x1ff0f424
 800dc30:	1ff0f428 	.word	0x1ff0f428
 800dc34:	200000f6 	.word	0x200000f6
 800dc38:	20000106 	.word	0x20000106

0800dc3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	4613      	mov	r3, r2
 800dc48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75fb      	strb	r3, [r7, #23]
 800dc52:	e027      	b.n	800dca4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	0f1b      	lsrs	r3, r3, #28
 800dc58:	2b09      	cmp	r3, #9
 800dc5a:	d80b      	bhi.n	800dc74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	0f1b      	lsrs	r3, r3, #28
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	4619      	mov	r1, r3
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	440b      	add	r3, r1
 800dc6c:	3230      	adds	r2, #48	; 0x30
 800dc6e:	b2d2      	uxtb	r2, r2
 800dc70:	701a      	strb	r2, [r3, #0]
 800dc72:	e00a      	b.n	800dc8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	0f1b      	lsrs	r3, r3, #28
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	005b      	lsls	r3, r3, #1
 800dc7e:	4619      	mov	r1, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	440b      	add	r3, r1
 800dc84:	3237      	adds	r2, #55	; 0x37
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	011b      	lsls	r3, r3, #4
 800dc8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
 800dc92:	005b      	lsls	r3, r3, #1
 800dc94:	3301      	adds	r3, #1
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	4413      	add	r3, r2
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	3301      	adds	r3, #1
 800dca2:	75fb      	strb	r3, [r7, #23]
 800dca4:	7dfa      	ldrb	r2, [r7, #23]
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d3d3      	bcc.n	800dc54 <IntToUnicode+0x18>
  }
}
 800dcac:	bf00      	nop
 800dcae:	bf00      	nop
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
	...

0800dcbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b0ae      	sub	sp, #184	; 0xb8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]
 800dccc:	605a      	str	r2, [r3, #4]
 800dcce:	609a      	str	r2, [r3, #8]
 800dcd0:	60da      	str	r2, [r3, #12]
 800dcd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dcd4:	f107 0314 	add.w	r3, r7, #20
 800dcd8:	2290      	movs	r2, #144	; 0x90
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fc9d 	bl	800e61c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcea:	d151      	bne.n	800dd90 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dcec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dcf0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcf8:	f107 0314 	add.w	r3, r7, #20
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f6 ff6f 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dd08:	f7f3 f964 	bl	8000fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd0c:	4b22      	ldr	r3, [pc, #136]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd10:	4a21      	ldr	r2, [pc, #132]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd12:	f043 0301 	orr.w	r3, r3, #1
 800dd16:	6313      	str	r3, [r2, #48]	; 0x30
 800dd18:	4b1f      	ldr	r3, [pc, #124]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	613b      	str	r3, [r7, #16]
 800dd22:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dd24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd3e:	230a      	movs	r3, #10
 800dd40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4814      	ldr	r0, [pc, #80]	; (800dd9c <HAL_PCD_MspInit+0xe0>)
 800dd4c:	f7f4 fc34 	bl	80025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd50:	4b11      	ldr	r3, [pc, #68]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd54:	4a10      	ldr	r2, [pc, #64]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd5a:	6353      	str	r3, [r2, #52]	; 0x34
 800dd5c:	4b0e      	ldr	r3, [pc, #56]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4b0b      	ldr	r3, [pc, #44]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd6c:	4a0a      	ldr	r2, [pc, #40]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd72:	6453      	str	r3, [r2, #68]	; 0x44
 800dd74:	4b08      	ldr	r3, [pc, #32]	; (800dd98 <HAL_PCD_MspInit+0xdc>)
 800dd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd7c:	60bb      	str	r3, [r7, #8]
 800dd7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dd80:	2200      	movs	r2, #0
 800dd82:	2105      	movs	r1, #5
 800dd84:	2043      	movs	r0, #67	; 0x43
 800dd86:	f7f3 ffe7 	bl	8001d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd8a:	2043      	movs	r0, #67	; 0x43
 800dd8c:	f7f4 f800 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd90:	bf00      	nop
 800dd92:	37b8      	adds	r7, #184	; 0xb8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	40023800 	.word	0x40023800
 800dd9c:	40020000 	.word	0x40020000

0800dda0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	f7fb fad9 	bl	800936e <USBD_LL_SetupStage>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ddd6:	78fa      	ldrb	r2, [r7, #3]
 800ddd8:	6879      	ldr	r1, [r7, #4]
 800ddda:	4613      	mov	r3, r2
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	4413      	add	r3, r2
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	440b      	add	r3, r1
 800dde4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	4619      	mov	r1, r3
 800ddee:	f7fb fb13 	bl	8009418 <USBD_LL_DataOutStage>
}
 800ddf2:	bf00      	nop
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800de0c:	78fa      	ldrb	r2, [r7, #3]
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	4613      	mov	r3, r2
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	334c      	adds	r3, #76	; 0x4c
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	78fb      	ldrb	r3, [r7, #3]
 800de20:	4619      	mov	r1, r3
 800de22:	f7fb fbac 	bl	800957e <USBD_LL_DataInStage>
}
 800de26:	bf00      	nop
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fb fce0 	bl	8009802 <USBD_LL_SOF>
}
 800de42:	bf00      	nop
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b084      	sub	sp, #16
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de52:	2301      	movs	r3, #1
 800de54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800de5e:	2300      	movs	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]
 800de62:	e008      	b.n	800de76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d102      	bne.n	800de72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800de6c:	2301      	movs	r3, #1
 800de6e:	73fb      	strb	r3, [r7, #15]
 800de70:	e001      	b.n	800de76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800de72:	f7f3 f8af 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de7c:	7bfa      	ldrb	r2, [r7, #15]
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f7fb fc80 	bl	8009786 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fb fc28 	bl	80096e2 <USBD_LL_Reset>
}
 800de92:	bf00      	nop
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
	...

0800de9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fb fc7b 	bl	80097a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	6812      	ldr	r2, [r2, #0]
 800debe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dec2:	f043 0301 	orr.w	r3, r3, #1
 800dec6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d005      	beq.n	800dedc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ded0:	4b04      	ldr	r3, [pc, #16]	; (800dee4 <HAL_PCD_SuspendCallback+0x48>)
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	4a03      	ldr	r2, [pc, #12]	; (800dee4 <HAL_PCD_SuspendCallback+0x48>)
 800ded6:	f043 0306 	orr.w	r3, r3, #6
 800deda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	e000ed00 	.word	0xe000ed00

0800dee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800def6:	4618      	mov	r0, r3
 800def8:	f7fb fc6b 	bl	80097d2 <USBD_LL_Resume>
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df16:	78fa      	ldrb	r2, [r7, #3]
 800df18:	4611      	mov	r1, r2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fb fcc3 	bl	80098a6 <USBD_LL_IsoOUTIncomplete>
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df3a:	78fa      	ldrb	r2, [r7, #3]
 800df3c:	4611      	mov	r1, r2
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fb fc7f 	bl	8009842 <USBD_LL_IsoINIncomplete>
}
 800df44:	bf00      	nop
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fb fcd5 	bl	800990a <USBD_LL_DevConnected>
}
 800df60:	bf00      	nop
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df76:	4618      	mov	r0, r3
 800df78:	f7fb fcd2 	bl	8009920 <USBD_LL_DevDisconnected>
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d13c      	bne.n	800e00e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800df94:	4a20      	ldr	r2, [pc, #128]	; (800e018 <USBD_LL_Init+0x94>)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a1e      	ldr	r2, [pc, #120]	; (800e018 <USBD_LL_Init+0x94>)
 800dfa0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dfa4:	4b1c      	ldr	r3, [pc, #112]	; (800e018 <USBD_LL_Init+0x94>)
 800dfa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dfaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dfac:	4b1a      	ldr	r3, [pc, #104]	; (800e018 <USBD_LL_Init+0x94>)
 800dfae:	2206      	movs	r2, #6
 800dfb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dfb2:	4b19      	ldr	r3, [pc, #100]	; (800e018 <USBD_LL_Init+0x94>)
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dfb8:	4b17      	ldr	r3, [pc, #92]	; (800e018 <USBD_LL_Init+0x94>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dfbe:	4b16      	ldr	r3, [pc, #88]	; (800e018 <USBD_LL_Init+0x94>)
 800dfc0:	2202      	movs	r2, #2
 800dfc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dfc4:	4b14      	ldr	r3, [pc, #80]	; (800e018 <USBD_LL_Init+0x94>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dfca:	4b13      	ldr	r3, [pc, #76]	; (800e018 <USBD_LL_Init+0x94>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dfd0:	4b11      	ldr	r3, [pc, #68]	; (800e018 <USBD_LL_Init+0x94>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dfd6:	4b10      	ldr	r3, [pc, #64]	; (800e018 <USBD_LL_Init+0x94>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dfdc:	4b0e      	ldr	r3, [pc, #56]	; (800e018 <USBD_LL_Init+0x94>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dfe2:	480d      	ldr	r0, [pc, #52]	; (800e018 <USBD_LL_Init+0x94>)
 800dfe4:	f7f4 fded 	bl	8002bc2 <HAL_PCD_Init>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dfee:	f7f2 fff1 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dff2:	2180      	movs	r1, #128	; 0x80
 800dff4:	4808      	ldr	r0, [pc, #32]	; (800e018 <USBD_LL_Init+0x94>)
 800dff6:	f7f6 f868 	bl	80040ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dffa:	2240      	movs	r2, #64	; 0x40
 800dffc:	2100      	movs	r1, #0
 800dffe:	4806      	ldr	r0, [pc, #24]	; (800e018 <USBD_LL_Init+0x94>)
 800e000:	f7f6 f81c 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e004:	2280      	movs	r2, #128	; 0x80
 800e006:	2101      	movs	r1, #1
 800e008:	4803      	ldr	r0, [pc, #12]	; (800e018 <USBD_LL_Init+0x94>)
 800e00a:	f7f6 f817 	bl	800403c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20006b5c 	.word	0x20006b5c

0800e01c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e032:	4618      	mov	r0, r3
 800e034:	f7f4 fee9 	bl	8002e0a <HAL_PCD_Start>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f97e 	bl	800e340 <USBD_Get_USB_Status>
 800e044:	4603      	mov	r3, r0
 800e046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e048:	7bbb      	ldrb	r3, [r7, #14]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	4608      	mov	r0, r1
 800e05c:	4611      	mov	r1, r2
 800e05e:	461a      	mov	r2, r3
 800e060:	4603      	mov	r3, r0
 800e062:	70fb      	strb	r3, [r7, #3]
 800e064:	460b      	mov	r3, r1
 800e066:	70bb      	strb	r3, [r7, #2]
 800e068:	4613      	mov	r3, r2
 800e06a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e070:	2300      	movs	r3, #0
 800e072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e07a:	78bb      	ldrb	r3, [r7, #2]
 800e07c:	883a      	ldrh	r2, [r7, #0]
 800e07e:	78f9      	ldrb	r1, [r7, #3]
 800e080:	f7f5 fbd6 	bl	8003830 <HAL_PCD_EP_Open>
 800e084:	4603      	mov	r3, r0
 800e086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e088:	7bfb      	ldrb	r3, [r7, #15]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 f958 	bl	800e340 <USBD_Get_USB_Status>
 800e090:	4603      	mov	r3, r0
 800e092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e094:	7bbb      	ldrb	r3, [r7, #14]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b084      	sub	sp, #16
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0b8:	78fa      	ldrb	r2, [r7, #3]
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f5 fc1f 	bl	8003900 <HAL_PCD_EP_Close>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0c6:	7bfb      	ldrb	r3, [r7, #15]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f939 	bl	800e340 <USBD_Get_USB_Status>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0f6:	78fa      	ldrb	r2, [r7, #3]
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7f5 fcf7 	bl	8003aee <HAL_PCD_EP_SetStall>
 800e100:	4603      	mov	r3, r0
 800e102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	4618      	mov	r0, r3
 800e108:	f000 f91a 	bl	800e340 <USBD_Get_USB_Status>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e110:	7bbb      	ldrb	r3, [r7, #14]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	460b      	mov	r3, r1
 800e124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e12a:	2300      	movs	r3, #0
 800e12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e134:	78fa      	ldrb	r2, [r7, #3]
 800e136:	4611      	mov	r1, r2
 800e138:	4618      	mov	r0, r3
 800e13a:	f7f5 fd3c 	bl	8003bb6 <HAL_PCD_EP_ClrStall>
 800e13e:	4603      	mov	r3, r0
 800e140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e142:	7bfb      	ldrb	r3, [r7, #15]
 800e144:	4618      	mov	r0, r3
 800e146:	f000 f8fb 	bl	800e340 <USBD_Get_USB_Status>
 800e14a:	4603      	mov	r3, r0
 800e14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	460b      	mov	r3, r1
 800e162:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e16a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e16c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e170:	2b00      	cmp	r3, #0
 800e172:	da0b      	bge.n	800e18c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e174:	78fb      	ldrb	r3, [r7, #3]
 800e176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	4613      	mov	r3, r2
 800e17e:	00db      	lsls	r3, r3, #3
 800e180:	4413      	add	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	440b      	add	r3, r1
 800e186:	333e      	adds	r3, #62	; 0x3e
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	e00b      	b.n	800e1a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e18c:	78fb      	ldrb	r3, [r7, #3]
 800e18e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e192:	68f9      	ldr	r1, [r7, #12]
 800e194:	4613      	mov	r3, r2
 800e196:	00db      	lsls	r3, r3, #3
 800e198:	4413      	add	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	440b      	add	r3, r1
 800e19e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e1a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7f5 fb09 	bl	80037e6 <HAL_PCD_SetAddress>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 f8b0 	bl	800e340 <USBD_Get_USB_Status>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b086      	sub	sp, #24
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	60f8      	str	r0, [r7, #12]
 800e1f6:	607a      	str	r2, [r7, #4]
 800e1f8:	603b      	str	r3, [r7, #0]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1fe:	2300      	movs	r3, #0
 800e200:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e20c:	7af9      	ldrb	r1, [r7, #11]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	f7f5 fc22 	bl	8003a5a <HAL_PCD_EP_Transmit>
 800e216:	4603      	mov	r3, r0
 800e218:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f000 f88f 	bl	800e340 <USBD_Get_USB_Status>
 800e222:	4603      	mov	r3, r0
 800e224:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e226:	7dbb      	ldrb	r3, [r7, #22]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3718      	adds	r7, #24
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	607a      	str	r2, [r7, #4]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	460b      	mov	r3, r1
 800e23e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e24e:	7af9      	ldrb	r1, [r7, #11]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	f7f5 fb9e 	bl	8003994 <HAL_PCD_EP_Receive>
 800e258:	4603      	mov	r3, r0
 800e25a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e25c:	7dfb      	ldrb	r3, [r7, #23]
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f86e 	bl	800e340 <USBD_Get_USB_Status>
 800e264:	4603      	mov	r3, r0
 800e266:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e268:	7dbb      	ldrb	r3, [r7, #22]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b082      	sub	sp, #8
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	460b      	mov	r3, r1
 800e27c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e284:	78fa      	ldrb	r2, [r7, #3]
 800e286:	4611      	mov	r1, r2
 800e288:	4618      	mov	r0, r3
 800e28a:	f7f5 fbce 	bl	8003a2a <HAL_PCD_EP_GetRxCount>
 800e28e:	4603      	mov	r3, r0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e2a4:	78fb      	ldrb	r3, [r7, #3]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <HAL_PCDEx_LPM_Callback+0x18>
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d01f      	beq.n	800e2ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e2ae:	e03b      	b.n	800e328 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a1b      	ldr	r3, [r3, #32]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d007      	beq.n	800e2c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e2b8:	f000 f83c 	bl	800e334 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2bc:	4b1c      	ldr	r3, [pc, #112]	; (800e330 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	4a1b      	ldr	r2, [pc, #108]	; (800e330 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2c2:	f023 0306 	bic.w	r3, r3, #6
 800e2c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	6812      	ldr	r2, [r2, #0]
 800e2d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2da:	f023 0301 	bic.w	r3, r3, #1
 800e2de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fb fa73 	bl	80097d2 <USBD_LL_Resume>
    break;
 800e2ec:	e01c      	b.n	800e328 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	6812      	ldr	r2, [r2, #0]
 800e2fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e300:	f043 0301 	orr.w	r3, r3, #1
 800e304:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fb fa4a 	bl	80097a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d005      	beq.n	800e326 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e31a:	4b05      	ldr	r3, [pc, #20]	; (800e330 <HAL_PCDEx_LPM_Callback+0x98>)
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	4a04      	ldr	r2, [pc, #16]	; (800e330 <HAL_PCDEx_LPM_Callback+0x98>)
 800e320:	f043 0306 	orr.w	r3, r3, #6
 800e324:	6113      	str	r3, [r2, #16]
    break;
 800e326:	bf00      	nop
}
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	e000ed00 	.word	0xe000ed00

0800e334 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e338:	f7f2 fa28 	bl	800078c <SystemClock_Config>
}
 800e33c:	bf00      	nop
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	2b03      	cmp	r3, #3
 800e352:	d817      	bhi.n	800e384 <USBD_Get_USB_Status+0x44>
 800e354:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <USBD_Get_USB_Status+0x1c>)
 800e356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35a:	bf00      	nop
 800e35c:	0800e36d 	.word	0x0800e36d
 800e360:	0800e373 	.word	0x0800e373
 800e364:	0800e379 	.word	0x0800e379
 800e368:	0800e37f 	.word	0x0800e37f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	73fb      	strb	r3, [r7, #15]
    break;
 800e370:	e00b      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e372:	2303      	movs	r3, #3
 800e374:	73fb      	strb	r3, [r7, #15]
    break;
 800e376:	e008      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e378:	2301      	movs	r3, #1
 800e37a:	73fb      	strb	r3, [r7, #15]
    break;
 800e37c:	e005      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e37e:	2303      	movs	r3, #3
 800e380:	73fb      	strb	r3, [r7, #15]
    break;
 800e382:	e002      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e384:	2303      	movs	r3, #3
 800e386:	73fb      	strb	r3, [r7, #15]
    break;
 800e388:	bf00      	nop
  }
  return usb_status;
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <__errno>:
 800e398:	4b01      	ldr	r3, [pc, #4]	; (800e3a0 <__errno+0x8>)
 800e39a:	6818      	ldr	r0, [r3, #0]
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	20000110 	.word	0x20000110

0800e3a4 <std>:
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	b510      	push	{r4, lr}
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800e3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3b2:	6083      	str	r3, [r0, #8]
 800e3b4:	8181      	strh	r1, [r0, #12]
 800e3b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e3b8:	81c2      	strh	r2, [r0, #14]
 800e3ba:	6183      	str	r3, [r0, #24]
 800e3bc:	4619      	mov	r1, r3
 800e3be:	2208      	movs	r2, #8
 800e3c0:	305c      	adds	r0, #92	; 0x5c
 800e3c2:	f000 f92b 	bl	800e61c <memset>
 800e3c6:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <std+0x38>)
 800e3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ca:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <std+0x3c>)
 800e3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <std+0x40>)
 800e3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <std+0x44>)
 800e3d4:	6224      	str	r4, [r4, #32]
 800e3d6:	6323      	str	r3, [r4, #48]	; 0x30
 800e3d8:	bd10      	pop	{r4, pc}
 800e3da:	bf00      	nop
 800e3dc:	0800e911 	.word	0x0800e911
 800e3e0:	0800e933 	.word	0x0800e933
 800e3e4:	0800e96b 	.word	0x0800e96b
 800e3e8:	0800e98f 	.word	0x0800e98f

0800e3ec <_cleanup_r>:
 800e3ec:	4901      	ldr	r1, [pc, #4]	; (800e3f4 <_cleanup_r+0x8>)
 800e3ee:	f000 b8af 	b.w	800e550 <_fwalk_reent>
 800e3f2:	bf00      	nop
 800e3f4:	0800eae9 	.word	0x0800eae9

0800e3f8 <__sfmoreglue>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	2268      	movs	r2, #104	; 0x68
 800e3fc:	1e4d      	subs	r5, r1, #1
 800e3fe:	4355      	muls	r5, r2
 800e400:	460e      	mov	r6, r1
 800e402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e406:	f000 f97d 	bl	800e704 <_malloc_r>
 800e40a:	4604      	mov	r4, r0
 800e40c:	b140      	cbz	r0, 800e420 <__sfmoreglue+0x28>
 800e40e:	2100      	movs	r1, #0
 800e410:	e9c0 1600 	strd	r1, r6, [r0]
 800e414:	300c      	adds	r0, #12
 800e416:	60a0      	str	r0, [r4, #8]
 800e418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e41c:	f000 f8fe 	bl	800e61c <memset>
 800e420:	4620      	mov	r0, r4
 800e422:	bd70      	pop	{r4, r5, r6, pc}

0800e424 <__sfp_lock_acquire>:
 800e424:	4801      	ldr	r0, [pc, #4]	; (800e42c <__sfp_lock_acquire+0x8>)
 800e426:	f000 b8d8 	b.w	800e5da <__retarget_lock_acquire_recursive>
 800e42a:	bf00      	nop
 800e42c:	20007065 	.word	0x20007065

0800e430 <__sfp_lock_release>:
 800e430:	4801      	ldr	r0, [pc, #4]	; (800e438 <__sfp_lock_release+0x8>)
 800e432:	f000 b8d3 	b.w	800e5dc <__retarget_lock_release_recursive>
 800e436:	bf00      	nop
 800e438:	20007065 	.word	0x20007065

0800e43c <__sinit_lock_acquire>:
 800e43c:	4801      	ldr	r0, [pc, #4]	; (800e444 <__sinit_lock_acquire+0x8>)
 800e43e:	f000 b8cc 	b.w	800e5da <__retarget_lock_acquire_recursive>
 800e442:	bf00      	nop
 800e444:	20007066 	.word	0x20007066

0800e448 <__sinit_lock_release>:
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <__sinit_lock_release+0x8>)
 800e44a:	f000 b8c7 	b.w	800e5dc <__retarget_lock_release_recursive>
 800e44e:	bf00      	nop
 800e450:	20007066 	.word	0x20007066

0800e454 <__sinit>:
 800e454:	b510      	push	{r4, lr}
 800e456:	4604      	mov	r4, r0
 800e458:	f7ff fff0 	bl	800e43c <__sinit_lock_acquire>
 800e45c:	69a3      	ldr	r3, [r4, #24]
 800e45e:	b11b      	cbz	r3, 800e468 <__sinit+0x14>
 800e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e464:	f7ff bff0 	b.w	800e448 <__sinit_lock_release>
 800e468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e46c:	6523      	str	r3, [r4, #80]	; 0x50
 800e46e:	4b13      	ldr	r3, [pc, #76]	; (800e4bc <__sinit+0x68>)
 800e470:	4a13      	ldr	r2, [pc, #76]	; (800e4c0 <__sinit+0x6c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	62a2      	str	r2, [r4, #40]	; 0x28
 800e476:	42a3      	cmp	r3, r4
 800e478:	bf04      	itt	eq
 800e47a:	2301      	moveq	r3, #1
 800e47c:	61a3      	streq	r3, [r4, #24]
 800e47e:	4620      	mov	r0, r4
 800e480:	f000 f820 	bl	800e4c4 <__sfp>
 800e484:	6060      	str	r0, [r4, #4]
 800e486:	4620      	mov	r0, r4
 800e488:	f000 f81c 	bl	800e4c4 <__sfp>
 800e48c:	60a0      	str	r0, [r4, #8]
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 f818 	bl	800e4c4 <__sfp>
 800e494:	2200      	movs	r2, #0
 800e496:	60e0      	str	r0, [r4, #12]
 800e498:	2104      	movs	r1, #4
 800e49a:	6860      	ldr	r0, [r4, #4]
 800e49c:	f7ff ff82 	bl	800e3a4 <std>
 800e4a0:	68a0      	ldr	r0, [r4, #8]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	2109      	movs	r1, #9
 800e4a6:	f7ff ff7d 	bl	800e3a4 <std>
 800e4aa:	68e0      	ldr	r0, [r4, #12]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	2112      	movs	r1, #18
 800e4b0:	f7ff ff78 	bl	800e3a4 <std>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	61a3      	str	r3, [r4, #24]
 800e4b8:	e7d2      	b.n	800e460 <__sinit+0xc>
 800e4ba:	bf00      	nop
 800e4bc:	0800f620 	.word	0x0800f620
 800e4c0:	0800e3ed 	.word	0x0800e3ed

0800e4c4 <__sfp>:
 800e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	f7ff ffac 	bl	800e424 <__sfp_lock_acquire>
 800e4cc:	4b1e      	ldr	r3, [pc, #120]	; (800e548 <__sfp+0x84>)
 800e4ce:	681e      	ldr	r6, [r3, #0]
 800e4d0:	69b3      	ldr	r3, [r6, #24]
 800e4d2:	b913      	cbnz	r3, 800e4da <__sfp+0x16>
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f7ff ffbd 	bl	800e454 <__sinit>
 800e4da:	3648      	adds	r6, #72	; 0x48
 800e4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	d503      	bpl.n	800e4ec <__sfp+0x28>
 800e4e4:	6833      	ldr	r3, [r6, #0]
 800e4e6:	b30b      	cbz	r3, 800e52c <__sfp+0x68>
 800e4e8:	6836      	ldr	r6, [r6, #0]
 800e4ea:	e7f7      	b.n	800e4dc <__sfp+0x18>
 800e4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4f0:	b9d5      	cbnz	r5, 800e528 <__sfp+0x64>
 800e4f2:	4b16      	ldr	r3, [pc, #88]	; (800e54c <__sfp+0x88>)
 800e4f4:	60e3      	str	r3, [r4, #12]
 800e4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4fa:	6665      	str	r5, [r4, #100]	; 0x64
 800e4fc:	f000 f86c 	bl	800e5d8 <__retarget_lock_init_recursive>
 800e500:	f7ff ff96 	bl	800e430 <__sfp_lock_release>
 800e504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e50c:	6025      	str	r5, [r4, #0]
 800e50e:	61a5      	str	r5, [r4, #24]
 800e510:	2208      	movs	r2, #8
 800e512:	4629      	mov	r1, r5
 800e514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e518:	f000 f880 	bl	800e61c <memset>
 800e51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e524:	4620      	mov	r0, r4
 800e526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e528:	3468      	adds	r4, #104	; 0x68
 800e52a:	e7d9      	b.n	800e4e0 <__sfp+0x1c>
 800e52c:	2104      	movs	r1, #4
 800e52e:	4638      	mov	r0, r7
 800e530:	f7ff ff62 	bl	800e3f8 <__sfmoreglue>
 800e534:	4604      	mov	r4, r0
 800e536:	6030      	str	r0, [r6, #0]
 800e538:	2800      	cmp	r0, #0
 800e53a:	d1d5      	bne.n	800e4e8 <__sfp+0x24>
 800e53c:	f7ff ff78 	bl	800e430 <__sfp_lock_release>
 800e540:	230c      	movs	r3, #12
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	e7ee      	b.n	800e524 <__sfp+0x60>
 800e546:	bf00      	nop
 800e548:	0800f620 	.word	0x0800f620
 800e54c:	ffff0001 	.word	0xffff0001

0800e550 <_fwalk_reent>:
 800e550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e554:	4606      	mov	r6, r0
 800e556:	4688      	mov	r8, r1
 800e558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e55c:	2700      	movs	r7, #0
 800e55e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e562:	f1b9 0901 	subs.w	r9, r9, #1
 800e566:	d505      	bpl.n	800e574 <_fwalk_reent+0x24>
 800e568:	6824      	ldr	r4, [r4, #0]
 800e56a:	2c00      	cmp	r4, #0
 800e56c:	d1f7      	bne.n	800e55e <_fwalk_reent+0xe>
 800e56e:	4638      	mov	r0, r7
 800e570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e574:	89ab      	ldrh	r3, [r5, #12]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d907      	bls.n	800e58a <_fwalk_reent+0x3a>
 800e57a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e57e:	3301      	adds	r3, #1
 800e580:	d003      	beq.n	800e58a <_fwalk_reent+0x3a>
 800e582:	4629      	mov	r1, r5
 800e584:	4630      	mov	r0, r6
 800e586:	47c0      	blx	r8
 800e588:	4307      	orrs	r7, r0
 800e58a:	3568      	adds	r5, #104	; 0x68
 800e58c:	e7e9      	b.n	800e562 <_fwalk_reent+0x12>
	...

0800e590 <__libc_init_array>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	4d0d      	ldr	r5, [pc, #52]	; (800e5c8 <__libc_init_array+0x38>)
 800e594:	4c0d      	ldr	r4, [pc, #52]	; (800e5cc <__libc_init_array+0x3c>)
 800e596:	1b64      	subs	r4, r4, r5
 800e598:	10a4      	asrs	r4, r4, #2
 800e59a:	2600      	movs	r6, #0
 800e59c:	42a6      	cmp	r6, r4
 800e59e:	d109      	bne.n	800e5b4 <__libc_init_array+0x24>
 800e5a0:	4d0b      	ldr	r5, [pc, #44]	; (800e5d0 <__libc_init_array+0x40>)
 800e5a2:	4c0c      	ldr	r4, [pc, #48]	; (800e5d4 <__libc_init_array+0x44>)
 800e5a4:	f000 ff42 	bl	800f42c <_init>
 800e5a8:	1b64      	subs	r4, r4, r5
 800e5aa:	10a4      	asrs	r4, r4, #2
 800e5ac:	2600      	movs	r6, #0
 800e5ae:	42a6      	cmp	r6, r4
 800e5b0:	d105      	bne.n	800e5be <__libc_init_array+0x2e>
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5b8:	4798      	blx	r3
 800e5ba:	3601      	adds	r6, #1
 800e5bc:	e7ee      	b.n	800e59c <__libc_init_array+0xc>
 800e5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5c2:	4798      	blx	r3
 800e5c4:	3601      	adds	r6, #1
 800e5c6:	e7f2      	b.n	800e5ae <__libc_init_array+0x1e>
 800e5c8:	0800f660 	.word	0x0800f660
 800e5cc:	0800f660 	.word	0x0800f660
 800e5d0:	0800f660 	.word	0x0800f660
 800e5d4:	0800f664 	.word	0x0800f664

0800e5d8 <__retarget_lock_init_recursive>:
 800e5d8:	4770      	bx	lr

0800e5da <__retarget_lock_acquire_recursive>:
 800e5da:	4770      	bx	lr

0800e5dc <__retarget_lock_release_recursive>:
 800e5dc:	4770      	bx	lr
	...

0800e5e0 <malloc>:
 800e5e0:	4b02      	ldr	r3, [pc, #8]	; (800e5ec <malloc+0xc>)
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	6818      	ldr	r0, [r3, #0]
 800e5e6:	f000 b88d 	b.w	800e704 <_malloc_r>
 800e5ea:	bf00      	nop
 800e5ec:	20000110 	.word	0x20000110

0800e5f0 <free>:
 800e5f0:	4b02      	ldr	r3, [pc, #8]	; (800e5fc <free+0xc>)
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	6818      	ldr	r0, [r3, #0]
 800e5f6:	f000 b819 	b.w	800e62c <_free_r>
 800e5fa:	bf00      	nop
 800e5fc:	20000110 	.word	0x20000110

0800e600 <memcpy>:
 800e600:	440a      	add	r2, r1
 800e602:	4291      	cmp	r1, r2
 800e604:	f100 33ff 	add.w	r3, r0, #4294967295
 800e608:	d100      	bne.n	800e60c <memcpy+0xc>
 800e60a:	4770      	bx	lr
 800e60c:	b510      	push	{r4, lr}
 800e60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e616:	4291      	cmp	r1, r2
 800e618:	d1f9      	bne.n	800e60e <memcpy+0xe>
 800e61a:	bd10      	pop	{r4, pc}

0800e61c <memset>:
 800e61c:	4402      	add	r2, r0
 800e61e:	4603      	mov	r3, r0
 800e620:	4293      	cmp	r3, r2
 800e622:	d100      	bne.n	800e626 <memset+0xa>
 800e624:	4770      	bx	lr
 800e626:	f803 1b01 	strb.w	r1, [r3], #1
 800e62a:	e7f9      	b.n	800e620 <memset+0x4>

0800e62c <_free_r>:
 800e62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e62e:	2900      	cmp	r1, #0
 800e630:	d044      	beq.n	800e6bc <_free_r+0x90>
 800e632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e636:	9001      	str	r0, [sp, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f1a1 0404 	sub.w	r4, r1, #4
 800e63e:	bfb8      	it	lt
 800e640:	18e4      	addlt	r4, r4, r3
 800e642:	f000 fa9f 	bl	800eb84 <__malloc_lock>
 800e646:	4a1e      	ldr	r2, [pc, #120]	; (800e6c0 <_free_r+0x94>)
 800e648:	9801      	ldr	r0, [sp, #4]
 800e64a:	6813      	ldr	r3, [r2, #0]
 800e64c:	b933      	cbnz	r3, 800e65c <_free_r+0x30>
 800e64e:	6063      	str	r3, [r4, #4]
 800e650:	6014      	str	r4, [r2, #0]
 800e652:	b003      	add	sp, #12
 800e654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e658:	f000 ba9a 	b.w	800eb90 <__malloc_unlock>
 800e65c:	42a3      	cmp	r3, r4
 800e65e:	d908      	bls.n	800e672 <_free_r+0x46>
 800e660:	6825      	ldr	r5, [r4, #0]
 800e662:	1961      	adds	r1, r4, r5
 800e664:	428b      	cmp	r3, r1
 800e666:	bf01      	itttt	eq
 800e668:	6819      	ldreq	r1, [r3, #0]
 800e66a:	685b      	ldreq	r3, [r3, #4]
 800e66c:	1949      	addeq	r1, r1, r5
 800e66e:	6021      	streq	r1, [r4, #0]
 800e670:	e7ed      	b.n	800e64e <_free_r+0x22>
 800e672:	461a      	mov	r2, r3
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	b10b      	cbz	r3, 800e67c <_free_r+0x50>
 800e678:	42a3      	cmp	r3, r4
 800e67a:	d9fa      	bls.n	800e672 <_free_r+0x46>
 800e67c:	6811      	ldr	r1, [r2, #0]
 800e67e:	1855      	adds	r5, r2, r1
 800e680:	42a5      	cmp	r5, r4
 800e682:	d10b      	bne.n	800e69c <_free_r+0x70>
 800e684:	6824      	ldr	r4, [r4, #0]
 800e686:	4421      	add	r1, r4
 800e688:	1854      	adds	r4, r2, r1
 800e68a:	42a3      	cmp	r3, r4
 800e68c:	6011      	str	r1, [r2, #0]
 800e68e:	d1e0      	bne.n	800e652 <_free_r+0x26>
 800e690:	681c      	ldr	r4, [r3, #0]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	6053      	str	r3, [r2, #4]
 800e696:	4421      	add	r1, r4
 800e698:	6011      	str	r1, [r2, #0]
 800e69a:	e7da      	b.n	800e652 <_free_r+0x26>
 800e69c:	d902      	bls.n	800e6a4 <_free_r+0x78>
 800e69e:	230c      	movs	r3, #12
 800e6a0:	6003      	str	r3, [r0, #0]
 800e6a2:	e7d6      	b.n	800e652 <_free_r+0x26>
 800e6a4:	6825      	ldr	r5, [r4, #0]
 800e6a6:	1961      	adds	r1, r4, r5
 800e6a8:	428b      	cmp	r3, r1
 800e6aa:	bf04      	itt	eq
 800e6ac:	6819      	ldreq	r1, [r3, #0]
 800e6ae:	685b      	ldreq	r3, [r3, #4]
 800e6b0:	6063      	str	r3, [r4, #4]
 800e6b2:	bf04      	itt	eq
 800e6b4:	1949      	addeq	r1, r1, r5
 800e6b6:	6021      	streq	r1, [r4, #0]
 800e6b8:	6054      	str	r4, [r2, #4]
 800e6ba:	e7ca      	b.n	800e652 <_free_r+0x26>
 800e6bc:	b003      	add	sp, #12
 800e6be:	bd30      	pop	{r4, r5, pc}
 800e6c0:	20007068 	.word	0x20007068

0800e6c4 <sbrk_aligned>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	4e0e      	ldr	r6, [pc, #56]	; (800e700 <sbrk_aligned+0x3c>)
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	6831      	ldr	r1, [r6, #0]
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b911      	cbnz	r1, 800e6d6 <sbrk_aligned+0x12>
 800e6d0:	f000 f90e 	bl	800e8f0 <_sbrk_r>
 800e6d4:	6030      	str	r0, [r6, #0]
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f000 f909 	bl	800e8f0 <_sbrk_r>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d00a      	beq.n	800e6f8 <sbrk_aligned+0x34>
 800e6e2:	1cc4      	adds	r4, r0, #3
 800e6e4:	f024 0403 	bic.w	r4, r4, #3
 800e6e8:	42a0      	cmp	r0, r4
 800e6ea:	d007      	beq.n	800e6fc <sbrk_aligned+0x38>
 800e6ec:	1a21      	subs	r1, r4, r0
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f000 f8fe 	bl	800e8f0 <_sbrk_r>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d101      	bne.n	800e6fc <sbrk_aligned+0x38>
 800e6f8:	f04f 34ff 	mov.w	r4, #4294967295
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	2000706c 	.word	0x2000706c

0800e704 <_malloc_r>:
 800e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e708:	1ccd      	adds	r5, r1, #3
 800e70a:	f025 0503 	bic.w	r5, r5, #3
 800e70e:	3508      	adds	r5, #8
 800e710:	2d0c      	cmp	r5, #12
 800e712:	bf38      	it	cc
 800e714:	250c      	movcc	r5, #12
 800e716:	2d00      	cmp	r5, #0
 800e718:	4607      	mov	r7, r0
 800e71a:	db01      	blt.n	800e720 <_malloc_r+0x1c>
 800e71c:	42a9      	cmp	r1, r5
 800e71e:	d905      	bls.n	800e72c <_malloc_r+0x28>
 800e720:	230c      	movs	r3, #12
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	2600      	movs	r6, #0
 800e726:	4630      	mov	r0, r6
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	4e2e      	ldr	r6, [pc, #184]	; (800e7e8 <_malloc_r+0xe4>)
 800e72e:	f000 fa29 	bl	800eb84 <__malloc_lock>
 800e732:	6833      	ldr	r3, [r6, #0]
 800e734:	461c      	mov	r4, r3
 800e736:	bb34      	cbnz	r4, 800e786 <_malloc_r+0x82>
 800e738:	4629      	mov	r1, r5
 800e73a:	4638      	mov	r0, r7
 800e73c:	f7ff ffc2 	bl	800e6c4 <sbrk_aligned>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	4604      	mov	r4, r0
 800e744:	d14d      	bne.n	800e7e2 <_malloc_r+0xde>
 800e746:	6834      	ldr	r4, [r6, #0]
 800e748:	4626      	mov	r6, r4
 800e74a:	2e00      	cmp	r6, #0
 800e74c:	d140      	bne.n	800e7d0 <_malloc_r+0xcc>
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	4631      	mov	r1, r6
 800e752:	4638      	mov	r0, r7
 800e754:	eb04 0803 	add.w	r8, r4, r3
 800e758:	f000 f8ca 	bl	800e8f0 <_sbrk_r>
 800e75c:	4580      	cmp	r8, r0
 800e75e:	d13a      	bne.n	800e7d6 <_malloc_r+0xd2>
 800e760:	6821      	ldr	r1, [r4, #0]
 800e762:	3503      	adds	r5, #3
 800e764:	1a6d      	subs	r5, r5, r1
 800e766:	f025 0503 	bic.w	r5, r5, #3
 800e76a:	3508      	adds	r5, #8
 800e76c:	2d0c      	cmp	r5, #12
 800e76e:	bf38      	it	cc
 800e770:	250c      	movcc	r5, #12
 800e772:	4629      	mov	r1, r5
 800e774:	4638      	mov	r0, r7
 800e776:	f7ff ffa5 	bl	800e6c4 <sbrk_aligned>
 800e77a:	3001      	adds	r0, #1
 800e77c:	d02b      	beq.n	800e7d6 <_malloc_r+0xd2>
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	442b      	add	r3, r5
 800e782:	6023      	str	r3, [r4, #0]
 800e784:	e00e      	b.n	800e7a4 <_malloc_r+0xa0>
 800e786:	6822      	ldr	r2, [r4, #0]
 800e788:	1b52      	subs	r2, r2, r5
 800e78a:	d41e      	bmi.n	800e7ca <_malloc_r+0xc6>
 800e78c:	2a0b      	cmp	r2, #11
 800e78e:	d916      	bls.n	800e7be <_malloc_r+0xba>
 800e790:	1961      	adds	r1, r4, r5
 800e792:	42a3      	cmp	r3, r4
 800e794:	6025      	str	r5, [r4, #0]
 800e796:	bf18      	it	ne
 800e798:	6059      	strne	r1, [r3, #4]
 800e79a:	6863      	ldr	r3, [r4, #4]
 800e79c:	bf08      	it	eq
 800e79e:	6031      	streq	r1, [r6, #0]
 800e7a0:	5162      	str	r2, [r4, r5]
 800e7a2:	604b      	str	r3, [r1, #4]
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f104 060b 	add.w	r6, r4, #11
 800e7aa:	f000 f9f1 	bl	800eb90 <__malloc_unlock>
 800e7ae:	f026 0607 	bic.w	r6, r6, #7
 800e7b2:	1d23      	adds	r3, r4, #4
 800e7b4:	1af2      	subs	r2, r6, r3
 800e7b6:	d0b6      	beq.n	800e726 <_malloc_r+0x22>
 800e7b8:	1b9b      	subs	r3, r3, r6
 800e7ba:	50a3      	str	r3, [r4, r2]
 800e7bc:	e7b3      	b.n	800e726 <_malloc_r+0x22>
 800e7be:	6862      	ldr	r2, [r4, #4]
 800e7c0:	42a3      	cmp	r3, r4
 800e7c2:	bf0c      	ite	eq
 800e7c4:	6032      	streq	r2, [r6, #0]
 800e7c6:	605a      	strne	r2, [r3, #4]
 800e7c8:	e7ec      	b.n	800e7a4 <_malloc_r+0xa0>
 800e7ca:	4623      	mov	r3, r4
 800e7cc:	6864      	ldr	r4, [r4, #4]
 800e7ce:	e7b2      	b.n	800e736 <_malloc_r+0x32>
 800e7d0:	4634      	mov	r4, r6
 800e7d2:	6876      	ldr	r6, [r6, #4]
 800e7d4:	e7b9      	b.n	800e74a <_malloc_r+0x46>
 800e7d6:	230c      	movs	r3, #12
 800e7d8:	603b      	str	r3, [r7, #0]
 800e7da:	4638      	mov	r0, r7
 800e7dc:	f000 f9d8 	bl	800eb90 <__malloc_unlock>
 800e7e0:	e7a1      	b.n	800e726 <_malloc_r+0x22>
 800e7e2:	6025      	str	r5, [r4, #0]
 800e7e4:	e7de      	b.n	800e7a4 <_malloc_r+0xa0>
 800e7e6:	bf00      	nop
 800e7e8:	20007068 	.word	0x20007068

0800e7ec <iprintf>:
 800e7ec:	b40f      	push	{r0, r1, r2, r3}
 800e7ee:	4b0a      	ldr	r3, [pc, #40]	; (800e818 <iprintf+0x2c>)
 800e7f0:	b513      	push	{r0, r1, r4, lr}
 800e7f2:	681c      	ldr	r4, [r3, #0]
 800e7f4:	b124      	cbz	r4, 800e800 <iprintf+0x14>
 800e7f6:	69a3      	ldr	r3, [r4, #24]
 800e7f8:	b913      	cbnz	r3, 800e800 <iprintf+0x14>
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f7ff fe2a 	bl	800e454 <__sinit>
 800e800:	ab05      	add	r3, sp, #20
 800e802:	9a04      	ldr	r2, [sp, #16]
 800e804:	68a1      	ldr	r1, [r4, #8]
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 f9f1 	bl	800ebf0 <_vfiprintf_r>
 800e80e:	b002      	add	sp, #8
 800e810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e814:	b004      	add	sp, #16
 800e816:	4770      	bx	lr
 800e818:	20000110 	.word	0x20000110

0800e81c <cleanup_glue>:
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	460c      	mov	r4, r1
 800e820:	6809      	ldr	r1, [r1, #0]
 800e822:	4605      	mov	r5, r0
 800e824:	b109      	cbz	r1, 800e82a <cleanup_glue+0xe>
 800e826:	f7ff fff9 	bl	800e81c <cleanup_glue>
 800e82a:	4621      	mov	r1, r4
 800e82c:	4628      	mov	r0, r5
 800e82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e832:	f7ff befb 	b.w	800e62c <_free_r>
	...

0800e838 <_reclaim_reent>:
 800e838:	4b2c      	ldr	r3, [pc, #176]	; (800e8ec <_reclaim_reent+0xb4>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4283      	cmp	r3, r0
 800e83e:	b570      	push	{r4, r5, r6, lr}
 800e840:	4604      	mov	r4, r0
 800e842:	d051      	beq.n	800e8e8 <_reclaim_reent+0xb0>
 800e844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e846:	b143      	cbz	r3, 800e85a <_reclaim_reent+0x22>
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d14a      	bne.n	800e8e4 <_reclaim_reent+0xac>
 800e84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e850:	6819      	ldr	r1, [r3, #0]
 800e852:	b111      	cbz	r1, 800e85a <_reclaim_reent+0x22>
 800e854:	4620      	mov	r0, r4
 800e856:	f7ff fee9 	bl	800e62c <_free_r>
 800e85a:	6961      	ldr	r1, [r4, #20]
 800e85c:	b111      	cbz	r1, 800e864 <_reclaim_reent+0x2c>
 800e85e:	4620      	mov	r0, r4
 800e860:	f7ff fee4 	bl	800e62c <_free_r>
 800e864:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e866:	b111      	cbz	r1, 800e86e <_reclaim_reent+0x36>
 800e868:	4620      	mov	r0, r4
 800e86a:	f7ff fedf 	bl	800e62c <_free_r>
 800e86e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e870:	b111      	cbz	r1, 800e878 <_reclaim_reent+0x40>
 800e872:	4620      	mov	r0, r4
 800e874:	f7ff feda 	bl	800e62c <_free_r>
 800e878:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e87a:	b111      	cbz	r1, 800e882 <_reclaim_reent+0x4a>
 800e87c:	4620      	mov	r0, r4
 800e87e:	f7ff fed5 	bl	800e62c <_free_r>
 800e882:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e884:	b111      	cbz	r1, 800e88c <_reclaim_reent+0x54>
 800e886:	4620      	mov	r0, r4
 800e888:	f7ff fed0 	bl	800e62c <_free_r>
 800e88c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e88e:	b111      	cbz	r1, 800e896 <_reclaim_reent+0x5e>
 800e890:	4620      	mov	r0, r4
 800e892:	f7ff fecb 	bl	800e62c <_free_r>
 800e896:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e898:	b111      	cbz	r1, 800e8a0 <_reclaim_reent+0x68>
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7ff fec6 	bl	800e62c <_free_r>
 800e8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8a2:	b111      	cbz	r1, 800e8aa <_reclaim_reent+0x72>
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f7ff fec1 	bl	800e62c <_free_r>
 800e8aa:	69a3      	ldr	r3, [r4, #24]
 800e8ac:	b1e3      	cbz	r3, 800e8e8 <_reclaim_reent+0xb0>
 800e8ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4798      	blx	r3
 800e8b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e8b6:	b1b9      	cbz	r1, 800e8e8 <_reclaim_reent+0xb0>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8be:	f7ff bfad 	b.w	800e81c <cleanup_glue>
 800e8c2:	5949      	ldr	r1, [r1, r5]
 800e8c4:	b941      	cbnz	r1, 800e8d8 <_reclaim_reent+0xa0>
 800e8c6:	3504      	adds	r5, #4
 800e8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ca:	2d80      	cmp	r5, #128	; 0x80
 800e8cc:	68d9      	ldr	r1, [r3, #12]
 800e8ce:	d1f8      	bne.n	800e8c2 <_reclaim_reent+0x8a>
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f7ff feab 	bl	800e62c <_free_r>
 800e8d6:	e7ba      	b.n	800e84e <_reclaim_reent+0x16>
 800e8d8:	680e      	ldr	r6, [r1, #0]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f7ff fea6 	bl	800e62c <_free_r>
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	e7ef      	b.n	800e8c4 <_reclaim_reent+0x8c>
 800e8e4:	2500      	movs	r5, #0
 800e8e6:	e7ef      	b.n	800e8c8 <_reclaim_reent+0x90>
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20000110 	.word	0x20000110

0800e8f0 <_sbrk_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d06      	ldr	r5, [pc, #24]	; (800e90c <_sbrk_r+0x1c>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	4608      	mov	r0, r1
 800e8fa:	602b      	str	r3, [r5, #0]
 800e8fc:	f7f2 ffac 	bl	8001858 <_sbrk>
 800e900:	1c43      	adds	r3, r0, #1
 800e902:	d102      	bne.n	800e90a <_sbrk_r+0x1a>
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	b103      	cbz	r3, 800e90a <_sbrk_r+0x1a>
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	bd38      	pop	{r3, r4, r5, pc}
 800e90c:	20007070 	.word	0x20007070

0800e910 <__sread>:
 800e910:	b510      	push	{r4, lr}
 800e912:	460c      	mov	r4, r1
 800e914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e918:	f000 fc2e 	bl	800f178 <_read_r>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	bfab      	itete	ge
 800e920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e922:	89a3      	ldrhlt	r3, [r4, #12]
 800e924:	181b      	addge	r3, r3, r0
 800e926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e92a:	bfac      	ite	ge
 800e92c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e92e:	81a3      	strhlt	r3, [r4, #12]
 800e930:	bd10      	pop	{r4, pc}

0800e932 <__swrite>:
 800e932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e936:	461f      	mov	r7, r3
 800e938:	898b      	ldrh	r3, [r1, #12]
 800e93a:	05db      	lsls	r3, r3, #23
 800e93c:	4605      	mov	r5, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	4616      	mov	r6, r2
 800e942:	d505      	bpl.n	800e950 <__swrite+0x1e>
 800e944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e948:	2302      	movs	r3, #2
 800e94a:	2200      	movs	r2, #0
 800e94c:	f000 f908 	bl	800eb60 <_lseek_r>
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	4632      	mov	r2, r6
 800e95e:	463b      	mov	r3, r7
 800e960:	4628      	mov	r0, r5
 800e962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e966:	f000 b817 	b.w	800e998 <_write_r>

0800e96a <__sseek>:
 800e96a:	b510      	push	{r4, lr}
 800e96c:	460c      	mov	r4, r1
 800e96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e972:	f000 f8f5 	bl	800eb60 <_lseek_r>
 800e976:	1c43      	adds	r3, r0, #1
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	bf15      	itete	ne
 800e97c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e97e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e986:	81a3      	strheq	r3, [r4, #12]
 800e988:	bf18      	it	ne
 800e98a:	81a3      	strhne	r3, [r4, #12]
 800e98c:	bd10      	pop	{r4, pc}

0800e98e <__sclose>:
 800e98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e992:	f000 b813 	b.w	800e9bc <_close_r>
	...

0800e998 <_write_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4d07      	ldr	r5, [pc, #28]	; (800e9b8 <_write_r+0x20>)
 800e99c:	4604      	mov	r4, r0
 800e99e:	4608      	mov	r0, r1
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	602a      	str	r2, [r5, #0]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	f7f2 ff05 	bl	80017b6 <_write>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d102      	bne.n	800e9b6 <_write_r+0x1e>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	b103      	cbz	r3, 800e9b6 <_write_r+0x1e>
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
 800e9b8:	20007070 	.word	0x20007070

0800e9bc <_close_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d06      	ldr	r5, [pc, #24]	; (800e9d8 <_close_r+0x1c>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	602b      	str	r3, [r5, #0]
 800e9c8:	f7f2 ff11 	bl	80017ee <_close>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d102      	bne.n	800e9d6 <_close_r+0x1a>
 800e9d0:	682b      	ldr	r3, [r5, #0]
 800e9d2:	b103      	cbz	r3, 800e9d6 <_close_r+0x1a>
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	20007070 	.word	0x20007070

0800e9dc <__sflush_r>:
 800e9dc:	898a      	ldrh	r2, [r1, #12]
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	0710      	lsls	r0, r2, #28
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	d458      	bmi.n	800ea9c <__sflush_r+0xc0>
 800e9ea:	684b      	ldr	r3, [r1, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dc05      	bgt.n	800e9fc <__sflush_r+0x20>
 800e9f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	dc02      	bgt.n	800e9fc <__sflush_r+0x20>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9fe:	2e00      	cmp	r6, #0
 800ea00:	d0f9      	beq.n	800e9f6 <__sflush_r+0x1a>
 800ea02:	2300      	movs	r3, #0
 800ea04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea08:	682f      	ldr	r7, [r5, #0]
 800ea0a:	602b      	str	r3, [r5, #0]
 800ea0c:	d032      	beq.n	800ea74 <__sflush_r+0x98>
 800ea0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	075a      	lsls	r2, r3, #29
 800ea14:	d505      	bpl.n	800ea22 <__sflush_r+0x46>
 800ea16:	6863      	ldr	r3, [r4, #4]
 800ea18:	1ac0      	subs	r0, r0, r3
 800ea1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea1c:	b10b      	cbz	r3, 800ea22 <__sflush_r+0x46>
 800ea1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea20:	1ac0      	subs	r0, r0, r3
 800ea22:	2300      	movs	r3, #0
 800ea24:	4602      	mov	r2, r0
 800ea26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea28:	6a21      	ldr	r1, [r4, #32]
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	47b0      	blx	r6
 800ea2e:	1c43      	adds	r3, r0, #1
 800ea30:	89a3      	ldrh	r3, [r4, #12]
 800ea32:	d106      	bne.n	800ea42 <__sflush_r+0x66>
 800ea34:	6829      	ldr	r1, [r5, #0]
 800ea36:	291d      	cmp	r1, #29
 800ea38:	d82c      	bhi.n	800ea94 <__sflush_r+0xb8>
 800ea3a:	4a2a      	ldr	r2, [pc, #168]	; (800eae4 <__sflush_r+0x108>)
 800ea3c:	40ca      	lsrs	r2, r1
 800ea3e:	07d6      	lsls	r6, r2, #31
 800ea40:	d528      	bpl.n	800ea94 <__sflush_r+0xb8>
 800ea42:	2200      	movs	r2, #0
 800ea44:	6062      	str	r2, [r4, #4]
 800ea46:	04d9      	lsls	r1, r3, #19
 800ea48:	6922      	ldr	r2, [r4, #16]
 800ea4a:	6022      	str	r2, [r4, #0]
 800ea4c:	d504      	bpl.n	800ea58 <__sflush_r+0x7c>
 800ea4e:	1c42      	adds	r2, r0, #1
 800ea50:	d101      	bne.n	800ea56 <__sflush_r+0x7a>
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	b903      	cbnz	r3, 800ea58 <__sflush_r+0x7c>
 800ea56:	6560      	str	r0, [r4, #84]	; 0x54
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	602f      	str	r7, [r5, #0]
 800ea5c:	2900      	cmp	r1, #0
 800ea5e:	d0ca      	beq.n	800e9f6 <__sflush_r+0x1a>
 800ea60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea64:	4299      	cmp	r1, r3
 800ea66:	d002      	beq.n	800ea6e <__sflush_r+0x92>
 800ea68:	4628      	mov	r0, r5
 800ea6a:	f7ff fddf 	bl	800e62c <_free_r>
 800ea6e:	2000      	movs	r0, #0
 800ea70:	6360      	str	r0, [r4, #52]	; 0x34
 800ea72:	e7c1      	b.n	800e9f8 <__sflush_r+0x1c>
 800ea74:	6a21      	ldr	r1, [r4, #32]
 800ea76:	2301      	movs	r3, #1
 800ea78:	4628      	mov	r0, r5
 800ea7a:	47b0      	blx	r6
 800ea7c:	1c41      	adds	r1, r0, #1
 800ea7e:	d1c7      	bne.n	800ea10 <__sflush_r+0x34>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0c4      	beq.n	800ea10 <__sflush_r+0x34>
 800ea86:	2b1d      	cmp	r3, #29
 800ea88:	d001      	beq.n	800ea8e <__sflush_r+0xb2>
 800ea8a:	2b16      	cmp	r3, #22
 800ea8c:	d101      	bne.n	800ea92 <__sflush_r+0xb6>
 800ea8e:	602f      	str	r7, [r5, #0]
 800ea90:	e7b1      	b.n	800e9f6 <__sflush_r+0x1a>
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea98:	81a3      	strh	r3, [r4, #12]
 800ea9a:	e7ad      	b.n	800e9f8 <__sflush_r+0x1c>
 800ea9c:	690f      	ldr	r7, [r1, #16]
 800ea9e:	2f00      	cmp	r7, #0
 800eaa0:	d0a9      	beq.n	800e9f6 <__sflush_r+0x1a>
 800eaa2:	0793      	lsls	r3, r2, #30
 800eaa4:	680e      	ldr	r6, [r1, #0]
 800eaa6:	bf08      	it	eq
 800eaa8:	694b      	ldreq	r3, [r1, #20]
 800eaaa:	600f      	str	r7, [r1, #0]
 800eaac:	bf18      	it	ne
 800eaae:	2300      	movne	r3, #0
 800eab0:	eba6 0807 	sub.w	r8, r6, r7
 800eab4:	608b      	str	r3, [r1, #8]
 800eab6:	f1b8 0f00 	cmp.w	r8, #0
 800eaba:	dd9c      	ble.n	800e9f6 <__sflush_r+0x1a>
 800eabc:	6a21      	ldr	r1, [r4, #32]
 800eabe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eac0:	4643      	mov	r3, r8
 800eac2:	463a      	mov	r2, r7
 800eac4:	4628      	mov	r0, r5
 800eac6:	47b0      	blx	r6
 800eac8:	2800      	cmp	r0, #0
 800eaca:	dc06      	bgt.n	800eada <__sflush_r+0xfe>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ead2:	81a3      	strh	r3, [r4, #12]
 800ead4:	f04f 30ff 	mov.w	r0, #4294967295
 800ead8:	e78e      	b.n	800e9f8 <__sflush_r+0x1c>
 800eada:	4407      	add	r7, r0
 800eadc:	eba8 0800 	sub.w	r8, r8, r0
 800eae0:	e7e9      	b.n	800eab6 <__sflush_r+0xda>
 800eae2:	bf00      	nop
 800eae4:	20400001 	.word	0x20400001

0800eae8 <_fflush_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	690b      	ldr	r3, [r1, #16]
 800eaec:	4605      	mov	r5, r0
 800eaee:	460c      	mov	r4, r1
 800eaf0:	b913      	cbnz	r3, 800eaf8 <_fflush_r+0x10>
 800eaf2:	2500      	movs	r5, #0
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	bd38      	pop	{r3, r4, r5, pc}
 800eaf8:	b118      	cbz	r0, 800eb02 <_fflush_r+0x1a>
 800eafa:	6983      	ldr	r3, [r0, #24]
 800eafc:	b90b      	cbnz	r3, 800eb02 <_fflush_r+0x1a>
 800eafe:	f7ff fca9 	bl	800e454 <__sinit>
 800eb02:	4b14      	ldr	r3, [pc, #80]	; (800eb54 <_fflush_r+0x6c>)
 800eb04:	429c      	cmp	r4, r3
 800eb06:	d11b      	bne.n	800eb40 <_fflush_r+0x58>
 800eb08:	686c      	ldr	r4, [r5, #4]
 800eb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0ef      	beq.n	800eaf2 <_fflush_r+0xa>
 800eb12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb14:	07d0      	lsls	r0, r2, #31
 800eb16:	d404      	bmi.n	800eb22 <_fflush_r+0x3a>
 800eb18:	0599      	lsls	r1, r3, #22
 800eb1a:	d402      	bmi.n	800eb22 <_fflush_r+0x3a>
 800eb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb1e:	f7ff fd5c 	bl	800e5da <__retarget_lock_acquire_recursive>
 800eb22:	4628      	mov	r0, r5
 800eb24:	4621      	mov	r1, r4
 800eb26:	f7ff ff59 	bl	800e9dc <__sflush_r>
 800eb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb2c:	07da      	lsls	r2, r3, #31
 800eb2e:	4605      	mov	r5, r0
 800eb30:	d4e0      	bmi.n	800eaf4 <_fflush_r+0xc>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	059b      	lsls	r3, r3, #22
 800eb36:	d4dd      	bmi.n	800eaf4 <_fflush_r+0xc>
 800eb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb3a:	f7ff fd4f 	bl	800e5dc <__retarget_lock_release_recursive>
 800eb3e:	e7d9      	b.n	800eaf4 <_fflush_r+0xc>
 800eb40:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <_fflush_r+0x70>)
 800eb42:	429c      	cmp	r4, r3
 800eb44:	d101      	bne.n	800eb4a <_fflush_r+0x62>
 800eb46:	68ac      	ldr	r4, [r5, #8]
 800eb48:	e7df      	b.n	800eb0a <_fflush_r+0x22>
 800eb4a:	4b04      	ldr	r3, [pc, #16]	; (800eb5c <_fflush_r+0x74>)
 800eb4c:	429c      	cmp	r4, r3
 800eb4e:	bf08      	it	eq
 800eb50:	68ec      	ldreq	r4, [r5, #12]
 800eb52:	e7da      	b.n	800eb0a <_fflush_r+0x22>
 800eb54:	0800f5e0 	.word	0x0800f5e0
 800eb58:	0800f600 	.word	0x0800f600
 800eb5c:	0800f5c0 	.word	0x0800f5c0

0800eb60 <_lseek_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4d07      	ldr	r5, [pc, #28]	; (800eb80 <_lseek_r+0x20>)
 800eb64:	4604      	mov	r4, r0
 800eb66:	4608      	mov	r0, r1
 800eb68:	4611      	mov	r1, r2
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	602a      	str	r2, [r5, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f7f2 fe64 	bl	800183c <_lseek>
 800eb74:	1c43      	adds	r3, r0, #1
 800eb76:	d102      	bne.n	800eb7e <_lseek_r+0x1e>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	b103      	cbz	r3, 800eb7e <_lseek_r+0x1e>
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	20007070 	.word	0x20007070

0800eb84 <__malloc_lock>:
 800eb84:	4801      	ldr	r0, [pc, #4]	; (800eb8c <__malloc_lock+0x8>)
 800eb86:	f7ff bd28 	b.w	800e5da <__retarget_lock_acquire_recursive>
 800eb8a:	bf00      	nop
 800eb8c:	20007064 	.word	0x20007064

0800eb90 <__malloc_unlock>:
 800eb90:	4801      	ldr	r0, [pc, #4]	; (800eb98 <__malloc_unlock+0x8>)
 800eb92:	f7ff bd23 	b.w	800e5dc <__retarget_lock_release_recursive>
 800eb96:	bf00      	nop
 800eb98:	20007064 	.word	0x20007064

0800eb9c <__sfputc_r>:
 800eb9c:	6893      	ldr	r3, [r2, #8]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	b410      	push	{r4}
 800eba4:	6093      	str	r3, [r2, #8]
 800eba6:	da08      	bge.n	800ebba <__sfputc_r+0x1e>
 800eba8:	6994      	ldr	r4, [r2, #24]
 800ebaa:	42a3      	cmp	r3, r4
 800ebac:	db01      	blt.n	800ebb2 <__sfputc_r+0x16>
 800ebae:	290a      	cmp	r1, #10
 800ebb0:	d103      	bne.n	800ebba <__sfputc_r+0x1e>
 800ebb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebb6:	f000 baf1 	b.w	800f19c <__swbuf_r>
 800ebba:	6813      	ldr	r3, [r2, #0]
 800ebbc:	1c58      	adds	r0, r3, #1
 800ebbe:	6010      	str	r0, [r2, #0]
 800ebc0:	7019      	strb	r1, [r3, #0]
 800ebc2:	4608      	mov	r0, r1
 800ebc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <__sfputs_r>:
 800ebca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebcc:	4606      	mov	r6, r0
 800ebce:	460f      	mov	r7, r1
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	18d5      	adds	r5, r2, r3
 800ebd4:	42ac      	cmp	r4, r5
 800ebd6:	d101      	bne.n	800ebdc <__sfputs_r+0x12>
 800ebd8:	2000      	movs	r0, #0
 800ebda:	e007      	b.n	800ebec <__sfputs_r+0x22>
 800ebdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe0:	463a      	mov	r2, r7
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7ff ffda 	bl	800eb9c <__sfputc_r>
 800ebe8:	1c43      	adds	r3, r0, #1
 800ebea:	d1f3      	bne.n	800ebd4 <__sfputs_r+0xa>
 800ebec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebf0 <_vfiprintf_r>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	460d      	mov	r5, r1
 800ebf6:	b09d      	sub	sp, #116	; 0x74
 800ebf8:	4614      	mov	r4, r2
 800ebfa:	4698      	mov	r8, r3
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	b118      	cbz	r0, 800ec08 <_vfiprintf_r+0x18>
 800ec00:	6983      	ldr	r3, [r0, #24]
 800ec02:	b90b      	cbnz	r3, 800ec08 <_vfiprintf_r+0x18>
 800ec04:	f7ff fc26 	bl	800e454 <__sinit>
 800ec08:	4b89      	ldr	r3, [pc, #548]	; (800ee30 <_vfiprintf_r+0x240>)
 800ec0a:	429d      	cmp	r5, r3
 800ec0c:	d11b      	bne.n	800ec46 <_vfiprintf_r+0x56>
 800ec0e:	6875      	ldr	r5, [r6, #4]
 800ec10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec12:	07d9      	lsls	r1, r3, #31
 800ec14:	d405      	bmi.n	800ec22 <_vfiprintf_r+0x32>
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	059a      	lsls	r2, r3, #22
 800ec1a:	d402      	bmi.n	800ec22 <_vfiprintf_r+0x32>
 800ec1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec1e:	f7ff fcdc 	bl	800e5da <__retarget_lock_acquire_recursive>
 800ec22:	89ab      	ldrh	r3, [r5, #12]
 800ec24:	071b      	lsls	r3, r3, #28
 800ec26:	d501      	bpl.n	800ec2c <_vfiprintf_r+0x3c>
 800ec28:	692b      	ldr	r3, [r5, #16]
 800ec2a:	b9eb      	cbnz	r3, 800ec68 <_vfiprintf_r+0x78>
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f000 fb06 	bl	800f240 <__swsetup_r>
 800ec34:	b1c0      	cbz	r0, 800ec68 <_vfiprintf_r+0x78>
 800ec36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec38:	07dc      	lsls	r4, r3, #31
 800ec3a:	d50e      	bpl.n	800ec5a <_vfiprintf_r+0x6a>
 800ec3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec40:	b01d      	add	sp, #116	; 0x74
 800ec42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec46:	4b7b      	ldr	r3, [pc, #492]	; (800ee34 <_vfiprintf_r+0x244>)
 800ec48:	429d      	cmp	r5, r3
 800ec4a:	d101      	bne.n	800ec50 <_vfiprintf_r+0x60>
 800ec4c:	68b5      	ldr	r5, [r6, #8]
 800ec4e:	e7df      	b.n	800ec10 <_vfiprintf_r+0x20>
 800ec50:	4b79      	ldr	r3, [pc, #484]	; (800ee38 <_vfiprintf_r+0x248>)
 800ec52:	429d      	cmp	r5, r3
 800ec54:	bf08      	it	eq
 800ec56:	68f5      	ldreq	r5, [r6, #12]
 800ec58:	e7da      	b.n	800ec10 <_vfiprintf_r+0x20>
 800ec5a:	89ab      	ldrh	r3, [r5, #12]
 800ec5c:	0598      	lsls	r0, r3, #22
 800ec5e:	d4ed      	bmi.n	800ec3c <_vfiprintf_r+0x4c>
 800ec60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec62:	f7ff fcbb 	bl	800e5dc <__retarget_lock_release_recursive>
 800ec66:	e7e9      	b.n	800ec3c <_vfiprintf_r+0x4c>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec76:	2330      	movs	r3, #48	; 0x30
 800ec78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee3c <_vfiprintf_r+0x24c>
 800ec7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec80:	f04f 0901 	mov.w	r9, #1
 800ec84:	4623      	mov	r3, r4
 800ec86:	469a      	mov	sl, r3
 800ec88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec8c:	b10a      	cbz	r2, 800ec92 <_vfiprintf_r+0xa2>
 800ec8e:	2a25      	cmp	r2, #37	; 0x25
 800ec90:	d1f9      	bne.n	800ec86 <_vfiprintf_r+0x96>
 800ec92:	ebba 0b04 	subs.w	fp, sl, r4
 800ec96:	d00b      	beq.n	800ecb0 <_vfiprintf_r+0xc0>
 800ec98:	465b      	mov	r3, fp
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7ff ff93 	bl	800ebca <__sfputs_r>
 800eca4:	3001      	adds	r0, #1
 800eca6:	f000 80aa 	beq.w	800edfe <_vfiprintf_r+0x20e>
 800ecaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecac:	445a      	add	r2, fp
 800ecae:	9209      	str	r2, [sp, #36]	; 0x24
 800ecb0:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 80a2 	beq.w	800edfe <_vfiprintf_r+0x20e>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecc4:	f10a 0a01 	add.w	sl, sl, #1
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	9307      	str	r3, [sp, #28]
 800eccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecd0:	931a      	str	r3, [sp, #104]	; 0x68
 800ecd2:	4654      	mov	r4, sl
 800ecd4:	2205      	movs	r2, #5
 800ecd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecda:	4858      	ldr	r0, [pc, #352]	; (800ee3c <_vfiprintf_r+0x24c>)
 800ecdc:	f7f1 fab0 	bl	8000240 <memchr>
 800ece0:	9a04      	ldr	r2, [sp, #16]
 800ece2:	b9d8      	cbnz	r0, 800ed1c <_vfiprintf_r+0x12c>
 800ece4:	06d1      	lsls	r1, r2, #27
 800ece6:	bf44      	itt	mi
 800ece8:	2320      	movmi	r3, #32
 800ecea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecee:	0713      	lsls	r3, r2, #28
 800ecf0:	bf44      	itt	mi
 800ecf2:	232b      	movmi	r3, #43	; 0x2b
 800ecf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecfe:	d015      	beq.n	800ed2c <_vfiprintf_r+0x13c>
 800ed00:	9a07      	ldr	r2, [sp, #28]
 800ed02:	4654      	mov	r4, sl
 800ed04:	2000      	movs	r0, #0
 800ed06:	f04f 0c0a 	mov.w	ip, #10
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed10:	3b30      	subs	r3, #48	; 0x30
 800ed12:	2b09      	cmp	r3, #9
 800ed14:	d94e      	bls.n	800edb4 <_vfiprintf_r+0x1c4>
 800ed16:	b1b0      	cbz	r0, 800ed46 <_vfiprintf_r+0x156>
 800ed18:	9207      	str	r2, [sp, #28]
 800ed1a:	e014      	b.n	800ed46 <_vfiprintf_r+0x156>
 800ed1c:	eba0 0308 	sub.w	r3, r0, r8
 800ed20:	fa09 f303 	lsl.w	r3, r9, r3
 800ed24:	4313      	orrs	r3, r2
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	46a2      	mov	sl, r4
 800ed2a:	e7d2      	b.n	800ecd2 <_vfiprintf_r+0xe2>
 800ed2c:	9b03      	ldr	r3, [sp, #12]
 800ed2e:	1d19      	adds	r1, r3, #4
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	9103      	str	r1, [sp, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	bfbb      	ittet	lt
 800ed38:	425b      	neglt	r3, r3
 800ed3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ed3e:	9307      	strge	r3, [sp, #28]
 800ed40:	9307      	strlt	r3, [sp, #28]
 800ed42:	bfb8      	it	lt
 800ed44:	9204      	strlt	r2, [sp, #16]
 800ed46:	7823      	ldrb	r3, [r4, #0]
 800ed48:	2b2e      	cmp	r3, #46	; 0x2e
 800ed4a:	d10c      	bne.n	800ed66 <_vfiprintf_r+0x176>
 800ed4c:	7863      	ldrb	r3, [r4, #1]
 800ed4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed50:	d135      	bne.n	800edbe <_vfiprintf_r+0x1ce>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	1d1a      	adds	r2, r3, #4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	9203      	str	r2, [sp, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	bfb8      	it	lt
 800ed5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed62:	3402      	adds	r4, #2
 800ed64:	9305      	str	r3, [sp, #20]
 800ed66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee4c <_vfiprintf_r+0x25c>
 800ed6a:	7821      	ldrb	r1, [r4, #0]
 800ed6c:	2203      	movs	r2, #3
 800ed6e:	4650      	mov	r0, sl
 800ed70:	f7f1 fa66 	bl	8000240 <memchr>
 800ed74:	b140      	cbz	r0, 800ed88 <_vfiprintf_r+0x198>
 800ed76:	2340      	movs	r3, #64	; 0x40
 800ed78:	eba0 000a 	sub.w	r0, r0, sl
 800ed7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ed80:	9b04      	ldr	r3, [sp, #16]
 800ed82:	4303      	orrs	r3, r0
 800ed84:	3401      	adds	r4, #1
 800ed86:	9304      	str	r3, [sp, #16]
 800ed88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed8c:	482c      	ldr	r0, [pc, #176]	; (800ee40 <_vfiprintf_r+0x250>)
 800ed8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed92:	2206      	movs	r2, #6
 800ed94:	f7f1 fa54 	bl	8000240 <memchr>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d03f      	beq.n	800ee1c <_vfiprintf_r+0x22c>
 800ed9c:	4b29      	ldr	r3, [pc, #164]	; (800ee44 <_vfiprintf_r+0x254>)
 800ed9e:	bb1b      	cbnz	r3, 800ede8 <_vfiprintf_r+0x1f8>
 800eda0:	9b03      	ldr	r3, [sp, #12]
 800eda2:	3307      	adds	r3, #7
 800eda4:	f023 0307 	bic.w	r3, r3, #7
 800eda8:	3308      	adds	r3, #8
 800edaa:	9303      	str	r3, [sp, #12]
 800edac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edae:	443b      	add	r3, r7
 800edb0:	9309      	str	r3, [sp, #36]	; 0x24
 800edb2:	e767      	b.n	800ec84 <_vfiprintf_r+0x94>
 800edb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800edb8:	460c      	mov	r4, r1
 800edba:	2001      	movs	r0, #1
 800edbc:	e7a5      	b.n	800ed0a <_vfiprintf_r+0x11a>
 800edbe:	2300      	movs	r3, #0
 800edc0:	3401      	adds	r4, #1
 800edc2:	9305      	str	r3, [sp, #20]
 800edc4:	4619      	mov	r1, r3
 800edc6:	f04f 0c0a 	mov.w	ip, #10
 800edca:	4620      	mov	r0, r4
 800edcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edd0:	3a30      	subs	r2, #48	; 0x30
 800edd2:	2a09      	cmp	r2, #9
 800edd4:	d903      	bls.n	800edde <_vfiprintf_r+0x1ee>
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d0c5      	beq.n	800ed66 <_vfiprintf_r+0x176>
 800edda:	9105      	str	r1, [sp, #20]
 800eddc:	e7c3      	b.n	800ed66 <_vfiprintf_r+0x176>
 800edde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ede2:	4604      	mov	r4, r0
 800ede4:	2301      	movs	r3, #1
 800ede6:	e7f0      	b.n	800edca <_vfiprintf_r+0x1da>
 800ede8:	ab03      	add	r3, sp, #12
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	462a      	mov	r2, r5
 800edee:	4b16      	ldr	r3, [pc, #88]	; (800ee48 <_vfiprintf_r+0x258>)
 800edf0:	a904      	add	r1, sp, #16
 800edf2:	4630      	mov	r0, r6
 800edf4:	f3af 8000 	nop.w
 800edf8:	4607      	mov	r7, r0
 800edfa:	1c78      	adds	r0, r7, #1
 800edfc:	d1d6      	bne.n	800edac <_vfiprintf_r+0x1bc>
 800edfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee00:	07d9      	lsls	r1, r3, #31
 800ee02:	d405      	bmi.n	800ee10 <_vfiprintf_r+0x220>
 800ee04:	89ab      	ldrh	r3, [r5, #12]
 800ee06:	059a      	lsls	r2, r3, #22
 800ee08:	d402      	bmi.n	800ee10 <_vfiprintf_r+0x220>
 800ee0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee0c:	f7ff fbe6 	bl	800e5dc <__retarget_lock_release_recursive>
 800ee10:	89ab      	ldrh	r3, [r5, #12]
 800ee12:	065b      	lsls	r3, r3, #25
 800ee14:	f53f af12 	bmi.w	800ec3c <_vfiprintf_r+0x4c>
 800ee18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee1a:	e711      	b.n	800ec40 <_vfiprintf_r+0x50>
 800ee1c:	ab03      	add	r3, sp, #12
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	462a      	mov	r2, r5
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <_vfiprintf_r+0x258>)
 800ee24:	a904      	add	r1, sp, #16
 800ee26:	4630      	mov	r0, r6
 800ee28:	f000 f880 	bl	800ef2c <_printf_i>
 800ee2c:	e7e4      	b.n	800edf8 <_vfiprintf_r+0x208>
 800ee2e:	bf00      	nop
 800ee30:	0800f5e0 	.word	0x0800f5e0
 800ee34:	0800f600 	.word	0x0800f600
 800ee38:	0800f5c0 	.word	0x0800f5c0
 800ee3c:	0800f624 	.word	0x0800f624
 800ee40:	0800f62e 	.word	0x0800f62e
 800ee44:	00000000 	.word	0x00000000
 800ee48:	0800ebcb 	.word	0x0800ebcb
 800ee4c:	0800f62a 	.word	0x0800f62a

0800ee50 <_printf_common>:
 800ee50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee54:	4616      	mov	r6, r2
 800ee56:	4699      	mov	r9, r3
 800ee58:	688a      	ldr	r2, [r1, #8]
 800ee5a:	690b      	ldr	r3, [r1, #16]
 800ee5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee60:	4293      	cmp	r3, r2
 800ee62:	bfb8      	it	lt
 800ee64:	4613      	movlt	r3, r2
 800ee66:	6033      	str	r3, [r6, #0]
 800ee68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee6c:	4607      	mov	r7, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	b10a      	cbz	r2, 800ee76 <_printf_common+0x26>
 800ee72:	3301      	adds	r3, #1
 800ee74:	6033      	str	r3, [r6, #0]
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	0699      	lsls	r1, r3, #26
 800ee7a:	bf42      	ittt	mi
 800ee7c:	6833      	ldrmi	r3, [r6, #0]
 800ee7e:	3302      	addmi	r3, #2
 800ee80:	6033      	strmi	r3, [r6, #0]
 800ee82:	6825      	ldr	r5, [r4, #0]
 800ee84:	f015 0506 	ands.w	r5, r5, #6
 800ee88:	d106      	bne.n	800ee98 <_printf_common+0x48>
 800ee8a:	f104 0a19 	add.w	sl, r4, #25
 800ee8e:	68e3      	ldr	r3, [r4, #12]
 800ee90:	6832      	ldr	r2, [r6, #0]
 800ee92:	1a9b      	subs	r3, r3, r2
 800ee94:	42ab      	cmp	r3, r5
 800ee96:	dc26      	bgt.n	800eee6 <_printf_common+0x96>
 800ee98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee9c:	1e13      	subs	r3, r2, #0
 800ee9e:	6822      	ldr	r2, [r4, #0]
 800eea0:	bf18      	it	ne
 800eea2:	2301      	movne	r3, #1
 800eea4:	0692      	lsls	r2, r2, #26
 800eea6:	d42b      	bmi.n	800ef00 <_printf_common+0xb0>
 800eea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eeac:	4649      	mov	r1, r9
 800eeae:	4638      	mov	r0, r7
 800eeb0:	47c0      	blx	r8
 800eeb2:	3001      	adds	r0, #1
 800eeb4:	d01e      	beq.n	800eef4 <_printf_common+0xa4>
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	68e5      	ldr	r5, [r4, #12]
 800eeba:	6832      	ldr	r2, [r6, #0]
 800eebc:	f003 0306 	and.w	r3, r3, #6
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	bf08      	it	eq
 800eec4:	1aad      	subeq	r5, r5, r2
 800eec6:	68a3      	ldr	r3, [r4, #8]
 800eec8:	6922      	ldr	r2, [r4, #16]
 800eeca:	bf0c      	ite	eq
 800eecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eed0:	2500      	movne	r5, #0
 800eed2:	4293      	cmp	r3, r2
 800eed4:	bfc4      	itt	gt
 800eed6:	1a9b      	subgt	r3, r3, r2
 800eed8:	18ed      	addgt	r5, r5, r3
 800eeda:	2600      	movs	r6, #0
 800eedc:	341a      	adds	r4, #26
 800eede:	42b5      	cmp	r5, r6
 800eee0:	d11a      	bne.n	800ef18 <_printf_common+0xc8>
 800eee2:	2000      	movs	r0, #0
 800eee4:	e008      	b.n	800eef8 <_printf_common+0xa8>
 800eee6:	2301      	movs	r3, #1
 800eee8:	4652      	mov	r2, sl
 800eeea:	4649      	mov	r1, r9
 800eeec:	4638      	mov	r0, r7
 800eeee:	47c0      	blx	r8
 800eef0:	3001      	adds	r0, #1
 800eef2:	d103      	bne.n	800eefc <_printf_common+0xac>
 800eef4:	f04f 30ff 	mov.w	r0, #4294967295
 800eef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eefc:	3501      	adds	r5, #1
 800eefe:	e7c6      	b.n	800ee8e <_printf_common+0x3e>
 800ef00:	18e1      	adds	r1, r4, r3
 800ef02:	1c5a      	adds	r2, r3, #1
 800ef04:	2030      	movs	r0, #48	; 0x30
 800ef06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef0a:	4422      	add	r2, r4
 800ef0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef14:	3302      	adds	r3, #2
 800ef16:	e7c7      	b.n	800eea8 <_printf_common+0x58>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	4649      	mov	r1, r9
 800ef1e:	4638      	mov	r0, r7
 800ef20:	47c0      	blx	r8
 800ef22:	3001      	adds	r0, #1
 800ef24:	d0e6      	beq.n	800eef4 <_printf_common+0xa4>
 800ef26:	3601      	adds	r6, #1
 800ef28:	e7d9      	b.n	800eede <_printf_common+0x8e>
	...

0800ef2c <_printf_i>:
 800ef2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef30:	7e0f      	ldrb	r7, [r1, #24]
 800ef32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef34:	2f78      	cmp	r7, #120	; 0x78
 800ef36:	4691      	mov	r9, r2
 800ef38:	4680      	mov	r8, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	469a      	mov	sl, r3
 800ef3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef42:	d807      	bhi.n	800ef54 <_printf_i+0x28>
 800ef44:	2f62      	cmp	r7, #98	; 0x62
 800ef46:	d80a      	bhi.n	800ef5e <_printf_i+0x32>
 800ef48:	2f00      	cmp	r7, #0
 800ef4a:	f000 80d8 	beq.w	800f0fe <_printf_i+0x1d2>
 800ef4e:	2f58      	cmp	r7, #88	; 0x58
 800ef50:	f000 80a3 	beq.w	800f09a <_printf_i+0x16e>
 800ef54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef5c:	e03a      	b.n	800efd4 <_printf_i+0xa8>
 800ef5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef62:	2b15      	cmp	r3, #21
 800ef64:	d8f6      	bhi.n	800ef54 <_printf_i+0x28>
 800ef66:	a101      	add	r1, pc, #4	; (adr r1, 800ef6c <_printf_i+0x40>)
 800ef68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef6c:	0800efc5 	.word	0x0800efc5
 800ef70:	0800efd9 	.word	0x0800efd9
 800ef74:	0800ef55 	.word	0x0800ef55
 800ef78:	0800ef55 	.word	0x0800ef55
 800ef7c:	0800ef55 	.word	0x0800ef55
 800ef80:	0800ef55 	.word	0x0800ef55
 800ef84:	0800efd9 	.word	0x0800efd9
 800ef88:	0800ef55 	.word	0x0800ef55
 800ef8c:	0800ef55 	.word	0x0800ef55
 800ef90:	0800ef55 	.word	0x0800ef55
 800ef94:	0800ef55 	.word	0x0800ef55
 800ef98:	0800f0e5 	.word	0x0800f0e5
 800ef9c:	0800f009 	.word	0x0800f009
 800efa0:	0800f0c7 	.word	0x0800f0c7
 800efa4:	0800ef55 	.word	0x0800ef55
 800efa8:	0800ef55 	.word	0x0800ef55
 800efac:	0800f107 	.word	0x0800f107
 800efb0:	0800ef55 	.word	0x0800ef55
 800efb4:	0800f009 	.word	0x0800f009
 800efb8:	0800ef55 	.word	0x0800ef55
 800efbc:	0800ef55 	.word	0x0800ef55
 800efc0:	0800f0cf 	.word	0x0800f0cf
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	1d1a      	adds	r2, r3, #4
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	602a      	str	r2, [r5, #0]
 800efcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efd4:	2301      	movs	r3, #1
 800efd6:	e0a3      	b.n	800f120 <_printf_i+0x1f4>
 800efd8:	6820      	ldr	r0, [r4, #0]
 800efda:	6829      	ldr	r1, [r5, #0]
 800efdc:	0606      	lsls	r6, r0, #24
 800efde:	f101 0304 	add.w	r3, r1, #4
 800efe2:	d50a      	bpl.n	800effa <_printf_i+0xce>
 800efe4:	680e      	ldr	r6, [r1, #0]
 800efe6:	602b      	str	r3, [r5, #0]
 800efe8:	2e00      	cmp	r6, #0
 800efea:	da03      	bge.n	800eff4 <_printf_i+0xc8>
 800efec:	232d      	movs	r3, #45	; 0x2d
 800efee:	4276      	negs	r6, r6
 800eff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eff4:	485e      	ldr	r0, [pc, #376]	; (800f170 <_printf_i+0x244>)
 800eff6:	230a      	movs	r3, #10
 800eff8:	e019      	b.n	800f02e <_printf_i+0x102>
 800effa:	680e      	ldr	r6, [r1, #0]
 800effc:	602b      	str	r3, [r5, #0]
 800effe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f002:	bf18      	it	ne
 800f004:	b236      	sxthne	r6, r6
 800f006:	e7ef      	b.n	800efe8 <_printf_i+0xbc>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	6820      	ldr	r0, [r4, #0]
 800f00c:	1d19      	adds	r1, r3, #4
 800f00e:	6029      	str	r1, [r5, #0]
 800f010:	0601      	lsls	r1, r0, #24
 800f012:	d501      	bpl.n	800f018 <_printf_i+0xec>
 800f014:	681e      	ldr	r6, [r3, #0]
 800f016:	e002      	b.n	800f01e <_printf_i+0xf2>
 800f018:	0646      	lsls	r6, r0, #25
 800f01a:	d5fb      	bpl.n	800f014 <_printf_i+0xe8>
 800f01c:	881e      	ldrh	r6, [r3, #0]
 800f01e:	4854      	ldr	r0, [pc, #336]	; (800f170 <_printf_i+0x244>)
 800f020:	2f6f      	cmp	r7, #111	; 0x6f
 800f022:	bf0c      	ite	eq
 800f024:	2308      	moveq	r3, #8
 800f026:	230a      	movne	r3, #10
 800f028:	2100      	movs	r1, #0
 800f02a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f02e:	6865      	ldr	r5, [r4, #4]
 800f030:	60a5      	str	r5, [r4, #8]
 800f032:	2d00      	cmp	r5, #0
 800f034:	bfa2      	ittt	ge
 800f036:	6821      	ldrge	r1, [r4, #0]
 800f038:	f021 0104 	bicge.w	r1, r1, #4
 800f03c:	6021      	strge	r1, [r4, #0]
 800f03e:	b90e      	cbnz	r6, 800f044 <_printf_i+0x118>
 800f040:	2d00      	cmp	r5, #0
 800f042:	d04d      	beq.n	800f0e0 <_printf_i+0x1b4>
 800f044:	4615      	mov	r5, r2
 800f046:	fbb6 f1f3 	udiv	r1, r6, r3
 800f04a:	fb03 6711 	mls	r7, r3, r1, r6
 800f04e:	5dc7      	ldrb	r7, [r0, r7]
 800f050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f054:	4637      	mov	r7, r6
 800f056:	42bb      	cmp	r3, r7
 800f058:	460e      	mov	r6, r1
 800f05a:	d9f4      	bls.n	800f046 <_printf_i+0x11a>
 800f05c:	2b08      	cmp	r3, #8
 800f05e:	d10b      	bne.n	800f078 <_printf_i+0x14c>
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	07de      	lsls	r6, r3, #31
 800f064:	d508      	bpl.n	800f078 <_printf_i+0x14c>
 800f066:	6923      	ldr	r3, [r4, #16]
 800f068:	6861      	ldr	r1, [r4, #4]
 800f06a:	4299      	cmp	r1, r3
 800f06c:	bfde      	ittt	le
 800f06e:	2330      	movle	r3, #48	; 0x30
 800f070:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f074:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f078:	1b52      	subs	r2, r2, r5
 800f07a:	6122      	str	r2, [r4, #16]
 800f07c:	f8cd a000 	str.w	sl, [sp]
 800f080:	464b      	mov	r3, r9
 800f082:	aa03      	add	r2, sp, #12
 800f084:	4621      	mov	r1, r4
 800f086:	4640      	mov	r0, r8
 800f088:	f7ff fee2 	bl	800ee50 <_printf_common>
 800f08c:	3001      	adds	r0, #1
 800f08e:	d14c      	bne.n	800f12a <_printf_i+0x1fe>
 800f090:	f04f 30ff 	mov.w	r0, #4294967295
 800f094:	b004      	add	sp, #16
 800f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09a:	4835      	ldr	r0, [pc, #212]	; (800f170 <_printf_i+0x244>)
 800f09c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f0a0:	6829      	ldr	r1, [r5, #0]
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f0a8:	6029      	str	r1, [r5, #0]
 800f0aa:	061d      	lsls	r5, r3, #24
 800f0ac:	d514      	bpl.n	800f0d8 <_printf_i+0x1ac>
 800f0ae:	07df      	lsls	r7, r3, #31
 800f0b0:	bf44      	itt	mi
 800f0b2:	f043 0320 	orrmi.w	r3, r3, #32
 800f0b6:	6023      	strmi	r3, [r4, #0]
 800f0b8:	b91e      	cbnz	r6, 800f0c2 <_printf_i+0x196>
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	f023 0320 	bic.w	r3, r3, #32
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	2310      	movs	r3, #16
 800f0c4:	e7b0      	b.n	800f028 <_printf_i+0xfc>
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	f043 0320 	orr.w	r3, r3, #32
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	2378      	movs	r3, #120	; 0x78
 800f0d0:	4828      	ldr	r0, [pc, #160]	; (800f174 <_printf_i+0x248>)
 800f0d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0d6:	e7e3      	b.n	800f0a0 <_printf_i+0x174>
 800f0d8:	0659      	lsls	r1, r3, #25
 800f0da:	bf48      	it	mi
 800f0dc:	b2b6      	uxthmi	r6, r6
 800f0de:	e7e6      	b.n	800f0ae <_printf_i+0x182>
 800f0e0:	4615      	mov	r5, r2
 800f0e2:	e7bb      	b.n	800f05c <_printf_i+0x130>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	6826      	ldr	r6, [r4, #0]
 800f0e8:	6961      	ldr	r1, [r4, #20]
 800f0ea:	1d18      	adds	r0, r3, #4
 800f0ec:	6028      	str	r0, [r5, #0]
 800f0ee:	0635      	lsls	r5, r6, #24
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	d501      	bpl.n	800f0f8 <_printf_i+0x1cc>
 800f0f4:	6019      	str	r1, [r3, #0]
 800f0f6:	e002      	b.n	800f0fe <_printf_i+0x1d2>
 800f0f8:	0670      	lsls	r0, r6, #25
 800f0fa:	d5fb      	bpl.n	800f0f4 <_printf_i+0x1c8>
 800f0fc:	8019      	strh	r1, [r3, #0]
 800f0fe:	2300      	movs	r3, #0
 800f100:	6123      	str	r3, [r4, #16]
 800f102:	4615      	mov	r5, r2
 800f104:	e7ba      	b.n	800f07c <_printf_i+0x150>
 800f106:	682b      	ldr	r3, [r5, #0]
 800f108:	1d1a      	adds	r2, r3, #4
 800f10a:	602a      	str	r2, [r5, #0]
 800f10c:	681d      	ldr	r5, [r3, #0]
 800f10e:	6862      	ldr	r2, [r4, #4]
 800f110:	2100      	movs	r1, #0
 800f112:	4628      	mov	r0, r5
 800f114:	f7f1 f894 	bl	8000240 <memchr>
 800f118:	b108      	cbz	r0, 800f11e <_printf_i+0x1f2>
 800f11a:	1b40      	subs	r0, r0, r5
 800f11c:	6060      	str	r0, [r4, #4]
 800f11e:	6863      	ldr	r3, [r4, #4]
 800f120:	6123      	str	r3, [r4, #16]
 800f122:	2300      	movs	r3, #0
 800f124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f128:	e7a8      	b.n	800f07c <_printf_i+0x150>
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	462a      	mov	r2, r5
 800f12e:	4649      	mov	r1, r9
 800f130:	4640      	mov	r0, r8
 800f132:	47d0      	blx	sl
 800f134:	3001      	adds	r0, #1
 800f136:	d0ab      	beq.n	800f090 <_printf_i+0x164>
 800f138:	6823      	ldr	r3, [r4, #0]
 800f13a:	079b      	lsls	r3, r3, #30
 800f13c:	d413      	bmi.n	800f166 <_printf_i+0x23a>
 800f13e:	68e0      	ldr	r0, [r4, #12]
 800f140:	9b03      	ldr	r3, [sp, #12]
 800f142:	4298      	cmp	r0, r3
 800f144:	bfb8      	it	lt
 800f146:	4618      	movlt	r0, r3
 800f148:	e7a4      	b.n	800f094 <_printf_i+0x168>
 800f14a:	2301      	movs	r3, #1
 800f14c:	4632      	mov	r2, r6
 800f14e:	4649      	mov	r1, r9
 800f150:	4640      	mov	r0, r8
 800f152:	47d0      	blx	sl
 800f154:	3001      	adds	r0, #1
 800f156:	d09b      	beq.n	800f090 <_printf_i+0x164>
 800f158:	3501      	adds	r5, #1
 800f15a:	68e3      	ldr	r3, [r4, #12]
 800f15c:	9903      	ldr	r1, [sp, #12]
 800f15e:	1a5b      	subs	r3, r3, r1
 800f160:	42ab      	cmp	r3, r5
 800f162:	dcf2      	bgt.n	800f14a <_printf_i+0x21e>
 800f164:	e7eb      	b.n	800f13e <_printf_i+0x212>
 800f166:	2500      	movs	r5, #0
 800f168:	f104 0619 	add.w	r6, r4, #25
 800f16c:	e7f5      	b.n	800f15a <_printf_i+0x22e>
 800f16e:	bf00      	nop
 800f170:	0800f635 	.word	0x0800f635
 800f174:	0800f646 	.word	0x0800f646

0800f178 <_read_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	; (800f198 <_read_r+0x20>)
 800f17c:	4604      	mov	r4, r0
 800f17e:	4608      	mov	r0, r1
 800f180:	4611      	mov	r1, r2
 800f182:	2200      	movs	r2, #0
 800f184:	602a      	str	r2, [r5, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f7f2 faf8 	bl	800177c <_read>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_read_r+0x1e>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_read_r+0x1e>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	20007070 	.word	0x20007070

0800f19c <__swbuf_r>:
 800f19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19e:	460e      	mov	r6, r1
 800f1a0:	4614      	mov	r4, r2
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	b118      	cbz	r0, 800f1ae <__swbuf_r+0x12>
 800f1a6:	6983      	ldr	r3, [r0, #24]
 800f1a8:	b90b      	cbnz	r3, 800f1ae <__swbuf_r+0x12>
 800f1aa:	f7ff f953 	bl	800e454 <__sinit>
 800f1ae:	4b21      	ldr	r3, [pc, #132]	; (800f234 <__swbuf_r+0x98>)
 800f1b0:	429c      	cmp	r4, r3
 800f1b2:	d12b      	bne.n	800f20c <__swbuf_r+0x70>
 800f1b4:	686c      	ldr	r4, [r5, #4]
 800f1b6:	69a3      	ldr	r3, [r4, #24]
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	071a      	lsls	r2, r3, #28
 800f1be:	d52f      	bpl.n	800f220 <__swbuf_r+0x84>
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	b36b      	cbz	r3, 800f220 <__swbuf_r+0x84>
 800f1c4:	6923      	ldr	r3, [r4, #16]
 800f1c6:	6820      	ldr	r0, [r4, #0]
 800f1c8:	1ac0      	subs	r0, r0, r3
 800f1ca:	6963      	ldr	r3, [r4, #20]
 800f1cc:	b2f6      	uxtb	r6, r6
 800f1ce:	4283      	cmp	r3, r0
 800f1d0:	4637      	mov	r7, r6
 800f1d2:	dc04      	bgt.n	800f1de <__swbuf_r+0x42>
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7ff fc86 	bl	800eae8 <_fflush_r>
 800f1dc:	bb30      	cbnz	r0, 800f22c <__swbuf_r+0x90>
 800f1de:	68a3      	ldr	r3, [r4, #8]
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	60a3      	str	r3, [r4, #8]
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	6022      	str	r2, [r4, #0]
 800f1ea:	701e      	strb	r6, [r3, #0]
 800f1ec:	6963      	ldr	r3, [r4, #20]
 800f1ee:	3001      	adds	r0, #1
 800f1f0:	4283      	cmp	r3, r0
 800f1f2:	d004      	beq.n	800f1fe <__swbuf_r+0x62>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	07db      	lsls	r3, r3, #31
 800f1f8:	d506      	bpl.n	800f208 <__swbuf_r+0x6c>
 800f1fa:	2e0a      	cmp	r6, #10
 800f1fc:	d104      	bne.n	800f208 <__swbuf_r+0x6c>
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f7ff fc71 	bl	800eae8 <_fflush_r>
 800f206:	b988      	cbnz	r0, 800f22c <__swbuf_r+0x90>
 800f208:	4638      	mov	r0, r7
 800f20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f20c:	4b0a      	ldr	r3, [pc, #40]	; (800f238 <__swbuf_r+0x9c>)
 800f20e:	429c      	cmp	r4, r3
 800f210:	d101      	bne.n	800f216 <__swbuf_r+0x7a>
 800f212:	68ac      	ldr	r4, [r5, #8]
 800f214:	e7cf      	b.n	800f1b6 <__swbuf_r+0x1a>
 800f216:	4b09      	ldr	r3, [pc, #36]	; (800f23c <__swbuf_r+0xa0>)
 800f218:	429c      	cmp	r4, r3
 800f21a:	bf08      	it	eq
 800f21c:	68ec      	ldreq	r4, [r5, #12]
 800f21e:	e7ca      	b.n	800f1b6 <__swbuf_r+0x1a>
 800f220:	4621      	mov	r1, r4
 800f222:	4628      	mov	r0, r5
 800f224:	f000 f80c 	bl	800f240 <__swsetup_r>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d0cb      	beq.n	800f1c4 <__swbuf_r+0x28>
 800f22c:	f04f 37ff 	mov.w	r7, #4294967295
 800f230:	e7ea      	b.n	800f208 <__swbuf_r+0x6c>
 800f232:	bf00      	nop
 800f234:	0800f5e0 	.word	0x0800f5e0
 800f238:	0800f600 	.word	0x0800f600
 800f23c:	0800f5c0 	.word	0x0800f5c0

0800f240 <__swsetup_r>:
 800f240:	4b32      	ldr	r3, [pc, #200]	; (800f30c <__swsetup_r+0xcc>)
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	681d      	ldr	r5, [r3, #0]
 800f246:	4606      	mov	r6, r0
 800f248:	460c      	mov	r4, r1
 800f24a:	b125      	cbz	r5, 800f256 <__swsetup_r+0x16>
 800f24c:	69ab      	ldr	r3, [r5, #24]
 800f24e:	b913      	cbnz	r3, 800f256 <__swsetup_r+0x16>
 800f250:	4628      	mov	r0, r5
 800f252:	f7ff f8ff 	bl	800e454 <__sinit>
 800f256:	4b2e      	ldr	r3, [pc, #184]	; (800f310 <__swsetup_r+0xd0>)
 800f258:	429c      	cmp	r4, r3
 800f25a:	d10f      	bne.n	800f27c <__swsetup_r+0x3c>
 800f25c:	686c      	ldr	r4, [r5, #4]
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f264:	0719      	lsls	r1, r3, #28
 800f266:	d42c      	bmi.n	800f2c2 <__swsetup_r+0x82>
 800f268:	06dd      	lsls	r5, r3, #27
 800f26a:	d411      	bmi.n	800f290 <__swsetup_r+0x50>
 800f26c:	2309      	movs	r3, #9
 800f26e:	6033      	str	r3, [r6, #0]
 800f270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f274:	81a3      	strh	r3, [r4, #12]
 800f276:	f04f 30ff 	mov.w	r0, #4294967295
 800f27a:	e03e      	b.n	800f2fa <__swsetup_r+0xba>
 800f27c:	4b25      	ldr	r3, [pc, #148]	; (800f314 <__swsetup_r+0xd4>)
 800f27e:	429c      	cmp	r4, r3
 800f280:	d101      	bne.n	800f286 <__swsetup_r+0x46>
 800f282:	68ac      	ldr	r4, [r5, #8]
 800f284:	e7eb      	b.n	800f25e <__swsetup_r+0x1e>
 800f286:	4b24      	ldr	r3, [pc, #144]	; (800f318 <__swsetup_r+0xd8>)
 800f288:	429c      	cmp	r4, r3
 800f28a:	bf08      	it	eq
 800f28c:	68ec      	ldreq	r4, [r5, #12]
 800f28e:	e7e6      	b.n	800f25e <__swsetup_r+0x1e>
 800f290:	0758      	lsls	r0, r3, #29
 800f292:	d512      	bpl.n	800f2ba <__swsetup_r+0x7a>
 800f294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f296:	b141      	cbz	r1, 800f2aa <__swsetup_r+0x6a>
 800f298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f29c:	4299      	cmp	r1, r3
 800f29e:	d002      	beq.n	800f2a6 <__swsetup_r+0x66>
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7ff f9c3 	bl	800e62c <_free_r>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	6363      	str	r3, [r4, #52]	; 0x34
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2b0:	81a3      	strh	r3, [r4, #12]
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6063      	str	r3, [r4, #4]
 800f2b6:	6923      	ldr	r3, [r4, #16]
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	f043 0308 	orr.w	r3, r3, #8
 800f2c0:	81a3      	strh	r3, [r4, #12]
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	b94b      	cbnz	r3, 800f2da <__swsetup_r+0x9a>
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2d0:	d003      	beq.n	800f2da <__swsetup_r+0x9a>
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	f000 f847 	bl	800f368 <__smakebuf_r>
 800f2da:	89a0      	ldrh	r0, [r4, #12]
 800f2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2e0:	f010 0301 	ands.w	r3, r0, #1
 800f2e4:	d00a      	beq.n	800f2fc <__swsetup_r+0xbc>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60a3      	str	r3, [r4, #8]
 800f2ea:	6963      	ldr	r3, [r4, #20]
 800f2ec:	425b      	negs	r3, r3
 800f2ee:	61a3      	str	r3, [r4, #24]
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	b943      	cbnz	r3, 800f306 <__swsetup_r+0xc6>
 800f2f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2f8:	d1ba      	bne.n	800f270 <__swsetup_r+0x30>
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	0781      	lsls	r1, r0, #30
 800f2fe:	bf58      	it	pl
 800f300:	6963      	ldrpl	r3, [r4, #20]
 800f302:	60a3      	str	r3, [r4, #8]
 800f304:	e7f4      	b.n	800f2f0 <__swsetup_r+0xb0>
 800f306:	2000      	movs	r0, #0
 800f308:	e7f7      	b.n	800f2fa <__swsetup_r+0xba>
 800f30a:	bf00      	nop
 800f30c:	20000110 	.word	0x20000110
 800f310:	0800f5e0 	.word	0x0800f5e0
 800f314:	0800f600 	.word	0x0800f600
 800f318:	0800f5c0 	.word	0x0800f5c0

0800f31c <__swhatbuf_r>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	460e      	mov	r6, r1
 800f320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f324:	2900      	cmp	r1, #0
 800f326:	b096      	sub	sp, #88	; 0x58
 800f328:	4614      	mov	r4, r2
 800f32a:	461d      	mov	r5, r3
 800f32c:	da08      	bge.n	800f340 <__swhatbuf_r+0x24>
 800f32e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f332:	2200      	movs	r2, #0
 800f334:	602a      	str	r2, [r5, #0]
 800f336:	061a      	lsls	r2, r3, #24
 800f338:	d410      	bmi.n	800f35c <__swhatbuf_r+0x40>
 800f33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f33e:	e00e      	b.n	800f35e <__swhatbuf_r+0x42>
 800f340:	466a      	mov	r2, sp
 800f342:	f000 f851 	bl	800f3e8 <_fstat_r>
 800f346:	2800      	cmp	r0, #0
 800f348:	dbf1      	blt.n	800f32e <__swhatbuf_r+0x12>
 800f34a:	9a01      	ldr	r2, [sp, #4]
 800f34c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f354:	425a      	negs	r2, r3
 800f356:	415a      	adcs	r2, r3
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	e7ee      	b.n	800f33a <__swhatbuf_r+0x1e>
 800f35c:	2340      	movs	r3, #64	; 0x40
 800f35e:	2000      	movs	r0, #0
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	b016      	add	sp, #88	; 0x58
 800f364:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f368 <__smakebuf_r>:
 800f368:	898b      	ldrh	r3, [r1, #12]
 800f36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f36c:	079d      	lsls	r5, r3, #30
 800f36e:	4606      	mov	r6, r0
 800f370:	460c      	mov	r4, r1
 800f372:	d507      	bpl.n	800f384 <__smakebuf_r+0x1c>
 800f374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	2301      	movs	r3, #1
 800f37e:	6163      	str	r3, [r4, #20]
 800f380:	b002      	add	sp, #8
 800f382:	bd70      	pop	{r4, r5, r6, pc}
 800f384:	ab01      	add	r3, sp, #4
 800f386:	466a      	mov	r2, sp
 800f388:	f7ff ffc8 	bl	800f31c <__swhatbuf_r>
 800f38c:	9900      	ldr	r1, [sp, #0]
 800f38e:	4605      	mov	r5, r0
 800f390:	4630      	mov	r0, r6
 800f392:	f7ff f9b7 	bl	800e704 <_malloc_r>
 800f396:	b948      	cbnz	r0, 800f3ac <__smakebuf_r+0x44>
 800f398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f39c:	059a      	lsls	r2, r3, #22
 800f39e:	d4ef      	bmi.n	800f380 <__smakebuf_r+0x18>
 800f3a0:	f023 0303 	bic.w	r3, r3, #3
 800f3a4:	f043 0302 	orr.w	r3, r3, #2
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	e7e3      	b.n	800f374 <__smakebuf_r+0xc>
 800f3ac:	4b0d      	ldr	r3, [pc, #52]	; (800f3e4 <__smakebuf_r+0x7c>)
 800f3ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3b0:	89a3      	ldrh	r3, [r4, #12]
 800f3b2:	6020      	str	r0, [r4, #0]
 800f3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	9b00      	ldr	r3, [sp, #0]
 800f3bc:	6163      	str	r3, [r4, #20]
 800f3be:	9b01      	ldr	r3, [sp, #4]
 800f3c0:	6120      	str	r0, [r4, #16]
 800f3c2:	b15b      	cbz	r3, 800f3dc <__smakebuf_r+0x74>
 800f3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f000 f81f 	bl	800f40c <_isatty_r>
 800f3ce:	b128      	cbz	r0, 800f3dc <__smakebuf_r+0x74>
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	f023 0303 	bic.w	r3, r3, #3
 800f3d6:	f043 0301 	orr.w	r3, r3, #1
 800f3da:	81a3      	strh	r3, [r4, #12]
 800f3dc:	89a0      	ldrh	r0, [r4, #12]
 800f3de:	4305      	orrs	r5, r0
 800f3e0:	81a5      	strh	r5, [r4, #12]
 800f3e2:	e7cd      	b.n	800f380 <__smakebuf_r+0x18>
 800f3e4:	0800e3ed 	.word	0x0800e3ed

0800f3e8 <_fstat_r>:
 800f3e8:	b538      	push	{r3, r4, r5, lr}
 800f3ea:	4d07      	ldr	r5, [pc, #28]	; (800f408 <_fstat_r+0x20>)
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	4608      	mov	r0, r1
 800f3f2:	4611      	mov	r1, r2
 800f3f4:	602b      	str	r3, [r5, #0]
 800f3f6:	f7f2 fa06 	bl	8001806 <_fstat>
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	d102      	bne.n	800f404 <_fstat_r+0x1c>
 800f3fe:	682b      	ldr	r3, [r5, #0]
 800f400:	b103      	cbz	r3, 800f404 <_fstat_r+0x1c>
 800f402:	6023      	str	r3, [r4, #0]
 800f404:	bd38      	pop	{r3, r4, r5, pc}
 800f406:	bf00      	nop
 800f408:	20007070 	.word	0x20007070

0800f40c <_isatty_r>:
 800f40c:	b538      	push	{r3, r4, r5, lr}
 800f40e:	4d06      	ldr	r5, [pc, #24]	; (800f428 <_isatty_r+0x1c>)
 800f410:	2300      	movs	r3, #0
 800f412:	4604      	mov	r4, r0
 800f414:	4608      	mov	r0, r1
 800f416:	602b      	str	r3, [r5, #0]
 800f418:	f7f2 fa05 	bl	8001826 <_isatty>
 800f41c:	1c43      	adds	r3, r0, #1
 800f41e:	d102      	bne.n	800f426 <_isatty_r+0x1a>
 800f420:	682b      	ldr	r3, [r5, #0]
 800f422:	b103      	cbz	r3, 800f426 <_isatty_r+0x1a>
 800f424:	6023      	str	r3, [r4, #0]
 800f426:	bd38      	pop	{r3, r4, r5, pc}
 800f428:	20007070 	.word	0x20007070

0800f42c <_init>:
 800f42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42e:	bf00      	nop
 800f430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f432:	bc08      	pop	{r3}
 800f434:	469e      	mov	lr, r3
 800f436:	4770      	bx	lr

0800f438 <_fini>:
 800f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43a:	bf00      	nop
 800f43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f43e:	bc08      	pop	{r3}
 800f440:	469e      	mov	lr, r3
 800f442:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800b7cc  0800b7cc  0001b7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b928  0800b928  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b930  0800b930  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800b938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a84  20000174  0800baac  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006bf8  0800baac  00026bf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022075  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a56  00000000  00000000  00042217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00046c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  00048600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b1b  00000000  00000000  00049d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f21e  00000000  00000000  000508a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104b94  00000000  00000000  0006fac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d90  00000000  00000000  001746a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000174 	.word	0x20000174
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b7b4 	.word	0x0800b7b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000178 	.word	0x20000178
 800023c:	0800b7b4 	.word	0x0800b7b4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Init_MsgQueue>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t buffer[32];			//Our own global Rx buffer. For use without msg queue

int Init_MsgQueue (void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  MSGQ_Rx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	200a      	movs	r0, #10
 8000622:	f007 fa79 	bl	8007b18 <osMessageQueueNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <Init_MsgQueue+0x48>)
 800062a:	6013      	str	r3, [r2, #0]
  if (MSGQ_Rx == NULL) {
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <Init_MsgQueue+0x48>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <Init_MsgQueue+0x22>
	  return -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e00f      	b.n	800065a <Init_MsgQueue+0x42>
  }
  MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	200a      	movs	r0, #10
 8000640:	f007 fa6a 	bl	8007b18 <osMessageQueueNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <Init_MsgQueue+0x4c>)
 8000648:	6013      	str	r3, [r2, #0]
    if (MSGQ_Tx == NULL) {
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <Init_MsgQueue+0x4c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d102      	bne.n	8000658 <Init_MsgQueue+0x40>
  	  return -1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e000      	b.n	800065a <Init_MsgQueue+0x42>
    }
  return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000019c 	.word	0x2000019c
 8000664:	200001a0 	.word	0x200001a0

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800066c:	f7ff ff6a 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000670:	f7ff ff8e 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fab4 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f834 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f8a2 	bl	80007c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000680:	f007 f90c 	bl	800789c <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  Init_MsgQueue();
 8000684:	f7ff ffc8 	bl	8000618 <Init_MsgQueue>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Tx */
  Task_TxHandle = osThreadNew(StartTask_Tx, NULL, &Task_Tx_attributes);
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <main+0x58>)
 800068a:	2100      	movs	r1, #0
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <main+0x5c>)
 800068e:	f007 f96f 	bl	8007970 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <main+0x60>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of Task_Rx */
  Task_RxHandle = osThreadNew(StartTask_Rx, NULL, &Task_Rx_attributes);
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <main+0x64>)
 800069a:	2100      	movs	r1, #0
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0x68>)
 800069e:	f007 f967 	bl	8007970 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <main+0x6c>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of Task_misc */
  Task_miscHandle = osThreadNew(StartTask_misc, NULL, &Task_misc_attributes);
 80006a8:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <main+0x70>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <main+0x74>)
 80006ae:	f007 f95f 	bl	8007970 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <main+0x78>)
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f007 f924 	bl	8007904 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0x54>
 80006be:	bf00      	nop
 80006c0:	0800b844 	.word	0x0800b844
 80006c4:	08000859 	.word	0x08000859
 80006c8:	20000190 	.word	0x20000190
 80006cc:	0800b868 	.word	0x0800b868
 80006d0:	080008a5 	.word	0x080008a5
 80006d4:	20000194 	.word	0x20000194
 80006d8:	0800b88c 	.word	0x0800b88c
 80006dc:	08000925 	.word	0x08000925
 80006e0:	20000198 	.word	0x20000198

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00a fef0 	bl	800b4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <SystemClock_Config+0xd8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <SystemClock_Config+0xd8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <SystemClock_Config+0xd8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SystemClock_Config+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SystemClock_Config+0xdc>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xdc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f85d 	bl	8002828 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f8f0 	bl	8000958 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f002 f806 	bl	8002788 <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000782:	f000 f8e9 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 faee 	bl	8002d84 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007ae:	f000 f8d3 	bl	8000958 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_GPIO_Init+0x8c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x90>)
 8000828:	f000 fcc2 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0x90>)
 8000844:	f000 fb08 	bl	8000e58 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400

08000858 <StartTask_Tx>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_Tx */
void StartTask_Tx(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000860:	f00a f844 	bl	800a8ec <MX_USB_DEVICE_Init>

  /* Infinite loop */
  for(;;)
  {

	  if( MSGQ_Tx != NULL )
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <StartTask_Tx+0x48>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0fb      	beq.n	8000864 <StartTask_Tx+0xc>
		{
			status = osMessageQueueGet(MSGQ_Tx, &msg, NULL, 0U);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <StartTask_Tx+0x48>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f107 010c 	add.w	r1, r7, #12
 8000874:	2300      	movs	r3, #0
 8000876:	2200      	movs	r2, #0
 8000878:	f007 fa48 	bl	8007d0c <osMessageQueueGet>
 800087c:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (status == osOK)
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ef      	bne.n	8000864 <StartTask_Tx+0xc>
			{
				CDC_Transmit_FS( /*(uint8_t *)*/ msg.Buf, sizeof(msg.Buf));		// Transmit what's been recieved in our msg queue
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2120      	movs	r1, #32
 800088a:	4618      	mov	r0, r3
 800088c:	f00a f912 	bl	800aab4 <CDC_Transmit_FS>
					  memset(msg.Buf, 0, sizeof(msg.Buf));						// Set rx memory to 0 to stop repetitive sending.
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00a fe1d 	bl	800b4d8 <memset>
	  if( MSGQ_Tx != NULL )
 800089e:	e7e1      	b.n	8000864 <StartTask_Tx+0xc>
 80008a0:	200001a0 	.word	0x200001a0

080008a4 <StartTask_Rx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Rx */
void StartTask_Rx(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Infinite loop */
  for(;;)
  {
	  if( MSGQ_Rx != NULL )
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <StartTask_Rx+0x7c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0fb      	beq.n	80008ac <StartTask_Rx+0x8>
	  		{
	  			status = osMessageQueueGet(MSGQ_Rx, &msg, NULL, 0U);
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <StartTask_Rx+0x7c>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f107 0108 	add.w	r1, r7, #8
 80008bc:	2300      	movs	r3, #0
 80008be:	2200      	movs	r2, #0
 80008c0:	f007 fa24 	bl	8007d0c <osMessageQueueGet>
 80008c4:	62b8      	str	r0, [r7, #40]	; 0x28
	  			if (status == osOK)
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1ef      	bne.n	80008ac <StartTask_Rx+0x8>
	  			{

	  			for (i = 0; i < sizeof(msg.Buf); i++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80008d2:	e012      	b.n	80008fa <StartTask_Rx+0x56>
					{
						msg.Buf[i] = msg.Buf[i] + 1;					//		Dummy processing of message. Could be in any other task
 80008d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008d8:	3330      	adds	r3, #48	; 0x30
 80008da:	443b      	add	r3, r7
 80008dc:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 80008e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008e4:	3201      	adds	r2, #1
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	3330      	adds	r3, #48	; 0x30
 80008ea:	443b      	add	r3, r7
 80008ec:	f803 2c28 	strb.w	r2, [r3, #-40]
	  			for (i = 0; i < sizeof(msg.Buf); i++)
 80008f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008f4:	3301      	adds	r3, #1
 80008f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80008fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008fe:	2b1f      	cmp	r3, #31
 8000900:	d9e8      	bls.n	80008d4 <StartTask_Rx+0x30>
					}

  				CDC_Transmit_FS( /*(uint8_t *)*/ msg.Buf, sizeof(msg.Buf));		// Transmit what's been received in our msg queue
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2120      	movs	r1, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f00a f8d3 	bl	800aab4 <CDC_Transmit_FS>
  					  memset(msg.Buf, 0, sizeof(msg.Buf));						// Set rx memory to 0 to stop repetitive sending.
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00a fdde 	bl	800b4d8 <memset>
	  if( MSGQ_Rx != NULL )
 800091c:	e7c6      	b.n	80008ac <StartTask_Rx+0x8>
 800091e:	bf00      	nop
 8000920:	2000019c 	.word	0x2000019c

08000924 <StartTask_misc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_misc */
void StartTask_misc(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_misc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f007 f8c5 	bl	8007abc <osDelay>
 8000932:	e7fb      	b.n	800092c <StartTask_misc+0x8>

08000934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000946:	f000 f961 	bl	8000c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40001000 	.word	0x40001000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fa2f 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_InitTick+0xe0>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <HAL_InitTick+0xe0>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_InitTick+0xe0>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 0210 	add.w	r2, r7, #16
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fbde 	bl	80031a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f6:	f002 fbc3 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80009fa:	6378      	str	r0, [r7, #52]	; 0x34
 80009fc:	e004      	b.n	8000a08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fe:	f002 fbbf 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8000a02:	4603      	mov	r3, r0
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <HAL_InitTick+0xe4>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	0c9b      	lsrs	r3, r3, #18
 8000a12:	3b01      	subs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a3e:	f003 f80d 	bl	8003a5c <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d11b      	bne.n	8000a88 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a52:	f003 f865 	bl	8003b20 <HAL_TIM_Base_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d111      	bne.n	8000a88 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a64:	2036      	movs	r0, #54	; 0x36
 8000a66:	f000 f9e9 	bl	8000e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d808      	bhi.n	8000a82 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2036      	movs	r0, #54	; 0x36
 8000a76:	f000 f9c5 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_InitTick+0xf0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e002      	b.n	8000a88 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3738      	adds	r7, #56	; 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	200001a4 	.word	0x200001a4
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM6_DAC_IRQHandler+0x10>)
 8000ada:	f003 f899 	bl	8003c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001a4 	.word	0x200001a4

08000ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <OTG_FS_IRQHandler+0x10>)
 8000aee:	f000 fcd8 	bl	80014a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200066e0 	.word	0x200066e0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f00a fc8a 	bl	800b444 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20080000 	.word	0x20080000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200001f0 	.word	0x200001f0
 8000b64:	20006bf8 	.word	0x20006bf8

08000b68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f00a fc49 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd53 	bl	8000668 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000bd0:	0800b938 	.word	0x0800b938
  ldr r2, =_sbss
 8000bd4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000bd8:	20006bf8 	.word	0x20006bf8

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f8fc 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f7ff fedc 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff feb2 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200001f4 	.word	0x200001f4

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200001f4 	.word	0x200001f4

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00
 8000cd8:	05fa0000 	.word	0x05fa0000

08000cdc <__NVIC_GetPriorityGrouping>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e175      	b.n	8001164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8164 	bne.w	800115e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d005      	beq.n	8000eae <HAL_GPIO_Init+0x56>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80be 	beq.w	800115e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <HAL_GPIO_Init+0x324>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a65      	ldr	r2, [pc, #404]	; (800117c <HAL_GPIO_Init+0x324>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ffa:	4a61      	ldr	r2, [pc, #388]	; (8001180 <HAL_GPIO_Init+0x328>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a58      	ldr	r2, [pc, #352]	; (8001184 <HAL_GPIO_Init+0x32c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d037      	beq.n	8001096 <HAL_GPIO_Init+0x23e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x330>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d031      	beq.n	8001092 <HAL_GPIO_Init+0x23a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a56      	ldr	r2, [pc, #344]	; (800118c <HAL_GPIO_Init+0x334>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x236>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a55      	ldr	r2, [pc, #340]	; (8001190 <HAL_GPIO_Init+0x338>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x232>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a54      	ldr	r2, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x33c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a53      	ldr	r2, [pc, #332]	; (8001198 <HAL_GPIO_Init+0x340>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x22a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_GPIO_Init+0x344>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <HAL_GPIO_Init+0x348>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x34c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <HAL_GPIO_Init+0x350>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x21a>
 800106e:	2309      	movs	r3, #9
 8001070:	e012      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001072:	230a      	movs	r3, #10
 8001074:	e010      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001076:	2308      	movs	r3, #8
 8001078:	e00e      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800107a:	2307      	movs	r3, #7
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800107e:	2306      	movs	r3, #6
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x328>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_GPIO_Init+0x354>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_GPIO_Init+0x354>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f ae86 	bls.w	8000e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40022400 	.word	0x40022400
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43d9      	mvns	r1, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	400b      	ands	r3, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001218:	b08f      	sub	sp, #60	; 0x3c
 800121a:	af0a      	add	r7, sp, #40	; 0x28
 800121c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e116      	b.n	8001456 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f009 fd90 	bl	800ad68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 ffe3 	bl	8004232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	687e      	ldr	r6, [r7, #4]
 8001274:	466d      	mov	r5, sp
 8001276:	f106 0410 	add.w	r4, r6, #16
 800127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001286:	e885 0003 	stmia.w	r5, {r0, r1}
 800128a:	1d33      	adds	r3, r6, #4
 800128c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f002 fec4 	bl	800401c <USB_CoreInit>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2202      	movs	r2, #2
 800129e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0d7      	b.n	8001456 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 ffd1 	bl	8004254 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e04a      	b.n	800134e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	333d      	adds	r3, #61	; 0x3d
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	333c      	adds	r3, #60	; 0x3c
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	b298      	uxth	r0, r3
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	3344      	adds	r3, #68	; 0x44
 80012f4:	4602      	mov	r2, r0
 80012f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3340      	adds	r3, #64	; 0x40
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3348      	adds	r3, #72	; 0x48
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	334c      	adds	r3, #76	; 0x4c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3354      	adds	r3, #84	; 0x54
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3af      	bcc.n	80012b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e044      	b.n	80013e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	3301      	adds	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3b5      	bcc.n	800135e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	687e      	ldr	r6, [r7, #4]
 80013fa:	466d      	mov	r5, sp
 80013fc:	f106 0410 	add.w	r4, r6, #16
 8001400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001410:	1d33      	adds	r3, r6, #4
 8001412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001414:	6838      	ldr	r0, [r7, #0]
 8001416:	f002 ff69 	bl	80042ec <USB_DevInit>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e014      	b.n	8001456 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 f97b 	bl	8002740 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f8b7 	bl	80055c2 <USB_DevDisconnect>

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_PCD_Start+0x16>
 8001470:	2302      	movs	r3, #2
 8001472:	e012      	b.n	800149a <HAL_PCD_Start+0x3c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fec5 	bl	8004210 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f878 	bl	8005580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b08d      	sub	sp, #52	; 0x34
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f936 	bl	800572a <USB_GetMode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 84b7 	bne.w	8001e34 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f89a 	bl	8005604 <USB_ReadInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 84ad 	beq.w	8001e32 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 f887 	bl	8005604 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d107      	bne.n	8001510 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f002 0202 	and.w	r2, r2, #2
 800150e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f004 f875 	bl	8005604 <USB_ReadInterrupts>
 800151a:	4603      	mov	r3, r0
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b10      	cmp	r3, #16
 8001522:	d161      	bne.n	80015e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0210 	bic.w	r2, r2, #16
 8001532:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f003 020f 	and.w	r2, r3, #15
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	3304      	adds	r3, #4
 8001552:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	0c5b      	lsrs	r3, r3, #17
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	2b02      	cmp	r3, #2
 800155e:	d124      	bne.n	80015aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d035      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	6a38      	ldr	r0, [r7, #32]
 8001580:	f003 feac 	bl	80052dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001590:	441a      	add	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a2:	441a      	add	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	e016      	b.n	80015d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	0c5b      	lsrs	r3, r3, #17
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d110      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015bc:	2208      	movs	r2, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f003 fe8b 	bl	80052dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	6a1a      	ldr	r2, [r3, #32]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d2:	441a      	add	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0210 	orr.w	r2, r2, #16
 80015e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 f809 	bl	8005604 <USB_ReadInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015fc:	f040 80a7 	bne.w	800174e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f80e 	bl	800562a <USB_ReadDevAllOutEpInterrupt>
 800160e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001610:	e099      	b.n	8001746 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 808e 	beq.w	800173a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f832 	bl	8005692 <USB_ReadDevOutEPInterrupt>
 800162e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	2301      	movs	r3, #1
 800164a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fef0 	bl	8002434 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166a:	461a      	mov	r2, r3
 800166c:	2308      	movs	r3, #8
 800166e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 ffc6 	bl	8002604 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168e:	461a      	mov	r2, r3
 8001690:	2310      	movs	r3, #16
 8001692:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d030      	beq.n	8001700 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	2b80      	cmp	r3, #128	; 0x80
 80016a8:	d109      	bne.n	80016be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2200      	movs	r2, #0
 80016e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f009 fc61 	bl	800afb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fa:	461a      	mov	r2, r3
 80016fc:	2302      	movs	r3, #2
 80016fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001716:	461a      	mov	r2, r3
 8001718:	2320      	movs	r3, #32
 800171a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001732:	461a      	mov	r2, r3
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f af62 	bne.w	8001612 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 ff56 	bl	8005604 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001762:	f040 80db 	bne.w	800191c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 ff77 	bl	800565e <USB_ReadDevAllInEpInterrupt>
 8001770:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001776:	e0cd      	b.n	8001914 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80c2 	beq.w	8001908 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f003 ff9d 	bl	80056ce <USB_ReadDevInEPInterrupt>
 8001794:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d057      	beq.n	8001850 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	2201      	movs	r2, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69f9      	ldr	r1, [r7, #28]
 80017bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017c0:	4013      	ands	r3, r2
 80017c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d0:	461a      	mov	r2, r3
 80017d2:	2301      	movs	r3, #1
 80017d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d132      	bne.n	8001844 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	334c      	adds	r3, #76	; 0x4c
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4403      	add	r3, r0
 80017fe:	3348      	adds	r3, #72	; 0x48
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4419      	add	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4403      	add	r3, r0
 8001812:	334c      	adds	r3, #76	; 0x4c
 8001814:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	d113      	bne.n	8001844 <HAL_PCD_IRQHandler+0x3a2>
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3354      	adds	r3, #84	; 0x54
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800183c:	461a      	mov	r2, r3
 800183e:	2101      	movs	r1, #1
 8001840:	f003 ffa6 	bl	8005790 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f009 fb2b 	bl	800aea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001866:	461a      	mov	r2, r3
 8001868:	2308      	movs	r3, #8
 800186a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001882:	461a      	mov	r2, r3
 8001884:	2310      	movs	r3, #16
 8001886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189e:	461a      	mov	r2, r3
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d023      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b0:	6a38      	ldr	r0, [r7, #32]
 80018b2:	f002 fe79 	bl	80045a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3338      	adds	r3, #56	; 0x38
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	3304      	adds	r3, #4
 80018c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2200      	movs	r2, #0
 80018d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f009 fb78 	bl	800afd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f0:	461a      	mov	r2, r3
 80018f2:	2302      	movs	r3, #2
 80018f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fd08 	bl	8002318 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f af2e 	bne.w	8001778 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fe6f 	bl	8005604 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800192c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001930:	d122      	bne.n	8001978 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f009 fcf2 	bl	800b344 <HAL_PCDEx_LPM_Callback>
 8001960:	e002      	b.n	8001968 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f009 fb16 	bl	800af94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fe41 	bl	8005604 <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800198c:	d112      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f009 fad2 	bl	800af48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fe23 	bl	8005604 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019c8:	d121      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80019d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019fe:	2101      	movs	r1, #1
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f009 fc9f 	bl	800b344 <HAL_PCDEx_LPM_Callback>
 8001a06:	e002      	b.n	8001a0e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f009 fa9d 	bl	800af48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fdf6 	bl	8005604 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	f040 80b7 	bne.w	8001b94 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fdb1 	bl	80045a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	e046      	b.n	8001ada <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa4:	0151      	lsls	r1, r2, #5
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001aae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac4:	0151      	lsls	r1, r2, #5
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	440a      	add	r2, r1
 8001aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ad2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3b3      	bcc.n	8001a4c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001af6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d016      	beq.n	8001b2e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b10:	f043 030b 	orr.w	r3, r3, #11
 8001b14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f043 030b 	orr.w	r3, r3, #11
 8001b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2c:	e015      	b.n	8001b5a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001b42:	4313      	orrs	r3, r2
 8001b44:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b54:	f043 030b 	orr.w	r3, r3, #11
 8001b58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f003 fe06 	bl	8005790 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fd33 	bl	8005604 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba8:	d124      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fdca 	bl	8005748 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fd72 	bl	80046a2 <USB_GetDevSpeed>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681c      	ldr	r4, [r3, #0]
 8001bca:	f001 facd 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8001bce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f002 fa77 	bl	80040cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f009 f989 	bl	800aef6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fd03 	bl	8005604 <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d10a      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f009 f966 	bl	800aeda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f002 0208 	and.w	r2, r2, #8
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fcee 	bl	8005604 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d122      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	e014      	b.n	8001c6e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fb27 	bl	80022b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3e5      	bcc.n	8001c44 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fcc1 	bl	8005604 <USB_ReadInterrupts>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8c:	d13b      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	e02b      	b.n	8001cec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3340      	adds	r3, #64	; 0x40
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d115      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da12      	bge.n	8001ce6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	333f      	adds	r3, #63	; 0x3f
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fae8 	bl	80022b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3ce      	bcc.n	8001c94 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fc7a 	bl	8005604 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d1a:	d155      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e045      	b.n	8001dae <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12e      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da2b      	bge.n	8001da8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d121      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da4:	6053      	str	r3, [r2, #4]
            break;
 8001da6:	e007      	b.n	8001db8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3301      	adds	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3b4      	bcc.n	8001d22 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fc19 	bl	8005604 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d10a      	bne.n	8001df4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f009 f90a 	bl	800aff8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fc03 	bl	8005604 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d115      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f009 f8fa 	bl	800b014 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	e000      	b.n	8001e34 <HAL_PCD_IRQHandler+0x992>
      return;
 8001e32:	bf00      	nop
    }
  }
}
 8001e34:	3734      	adds	r7, #52	; 0x34
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}

08001e3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_PCD_SetAddress+0x1a>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e013      	b.n	8001e7c <HAL_PCD_SetAddress+0x42>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fb61 	bl	8005534 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	70fb      	strb	r3, [r7, #3]
 8001e96:	460b      	mov	r3, r1
 8001e98:	803b      	strh	r3, [r7, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da0f      	bge.n	8001eca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	3338      	adds	r3, #56	; 0x38
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	705a      	strb	r2, [r3, #1]
 8001ec8:	e00f      	b.n	8001eea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ef6:	883a      	ldrh	r2, [r7, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	78ba      	ldrb	r2, [r7, #2]
 8001f00:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f14:	78bb      	ldrb	r3, [r7, #2]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d102      	bne.n	8001f20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_PCD_EP_Open+0xaa>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e00e      	b.n	8001f4c <HAL_PCD_EP_Open+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fbd5 	bl	80046ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0f      	bge.n	8001f88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3338      	adds	r3, #56	; 0x38
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	705a      	strb	r2, [r3, #1]
 8001f86:	e00f      	b.n	8001fa8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_EP_Close+0x6e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e00e      	b.n	8001fe0 <HAL_PCD_EP_Close+0x8c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fc13 	bl	80047fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b2da      	uxtb	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	f002 fefa 	bl	8004e54 <USB_EP0StartXfer>
 8002060:	e008      	b.n	8002074 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	f002 fca0 	bl	80049b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020a0:	681b      	ldr	r3, [r3, #0]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	460b      	mov	r3, r1
 80020bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3338      	adds	r3, #56	; 0x38
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2201      	movs	r2, #1
 80020ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6979      	ldr	r1, [r7, #20]
 8002120:	f002 fe98 	bl	8004e54 <USB_EP0StartXfer>
 8002124:	e008      	b.n	8002138 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	f002 fc3e 	bl	80049b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d901      	bls.n	8002160 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e050      	b.n	8002202 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002164:	2b00      	cmp	r3, #0
 8002166:	da0f      	bge.n	8002188 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 020f 	and.w	r2, r3, #15
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	3338      	adds	r3, #56	; 0x38
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
 8002186:	e00d      	b.n	80021a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_PCD_EP_SetStall+0x82>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e01e      	b.n	8002202 <HAL_PCD_EP_SetStall+0xc0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f8da 	bl	800538c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b2d9      	uxtb	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021f2:	461a      	mov	r2, r3
 80021f4:	f003 facc 	bl	8005790 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d901      	bls.n	8002228 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e042      	b.n	80022ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222c:	2b00      	cmp	r3, #0
 800222e:	da0f      	bge.n	8002250 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 020f 	and.w	r2, r3, #15
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	3338      	adds	r3, #56	; 0x38
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
 800224e:	e00f      	b.n	8002270 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	3304      	adds	r3, #4
 8002268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_PCD_EP_ClrStall+0x86>
 800228c:	2302      	movs	r3, #2
 800228e:	e00e      	b.n	80022ae <HAL_PCD_EP_ClrStall+0xa4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 f8e2 	bl	8005468 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da0c      	bge.n	80022e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	3338      	adds	r3, #56	; 0x38
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e00c      	b.n	80022fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 020f 	and.w	r2, r3, #15
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 ff01 	bl	800510c <USB_EPStopXfer>
 800230a:	4603      	mov	r3, r0
 800230c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800230e:	7afb      	ldrb	r3, [r7, #11]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	3338      	adds	r3, #56	; 0x38
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	429a      	cmp	r2, r3
 800234a:	d901      	bls.n	8002350 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e06c      	b.n	800242a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d902      	bls.n	800236c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3303      	adds	r3, #3
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002374:	e02b      	b.n	80023ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	429a      	cmp	r2, r3
 800238a:	d902      	bls.n	8002392 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3303      	adds	r3, #3
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4603      	mov	r3, r0
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f002 ff55 	bl	8005260 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	441a      	add	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	441a      	add	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d809      	bhi.n	80023f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d203      	bcs.n	80023f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1be      	bne.n	8002376 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d811      	bhi.n	8002428 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	43db      	mvns	r3, r3
 800241e:	6939      	ldr	r1, [r7, #16]
 8002420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002424:	4013      	ands	r3, r2
 8002426:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	333c      	adds	r3, #60	; 0x3c
 800244c:	3304      	adds	r3, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d17b      	bne.n	8002562 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	4a61      	ldr	r2, [pc, #388]	; (80025fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	f240 80b9 	bls.w	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80b3 	beq.w	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002496:	461a      	mov	r2, r3
 8002498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249c:	6093      	str	r3, [r2, #8]
 800249e:	e0a7      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	461a      	mov	r2, r3
 80024b8:	2320      	movs	r3, #32
 80024ba:	6093      	str	r3, [r2, #8]
 80024bc:	e098      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 8093 	bne.w	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d90f      	bls.n	80024f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ee:	6093      	str	r3, [r2, #8]
 80024f0:	e07e      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	0159      	lsls	r1, r3, #5
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	440b      	add	r3, r1
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d114      	bne.n	8002554 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800253c:	461a      	mov	r2, r3
 800253e:	2101      	movs	r1, #1
 8002540:	f003 f926 	bl	8005790 <USB_EP0_OutStart>
 8002544:	e006      	b.n	8002554 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f008 fc88 	bl	800ae70 <HAL_PCD_DataOutStageCallback>
 8002560:	e046      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d124      	bne.n	80025b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002580:	461a      	mov	r2, r3
 8002582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	e032      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a0:	461a      	mov	r2, r3
 80025a2:	2320      	movs	r3, #32
 80025a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f008 fc5f 	bl	800ae70 <HAL_PCD_DataOutStageCallback>
 80025b2:	e01d      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d108      	bne.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025dc:	461a      	mov	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f003 f8d6 	bl	8005790 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f008 fc40 	bl	800ae70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	4f54300a 	.word	0x4f54300a
 8002600:	4f54310a 	.word	0x4f54310a

08002604 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	3304      	adds	r3, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <PCD_EP_OutSetupPacket_int+0x88>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d90e      	bls.n	8002658 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002656:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f008 fbf7 	bl	800ae4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <PCD_EP_OutSetupPacket_int+0x88>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d90c      	bls.n	8002680 <PCD_EP_OutSetupPacket_int+0x7c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002678:	461a      	mov	r2, r3
 800267a:	2101      	movs	r1, #1
 800267c:	f003 f888 	bl	8005790 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	4f54300a 	.word	0x4f54300a

08002690 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026ae:	883b      	ldrh	r3, [r7, #0]
 80026b0:	0419      	lsls	r1, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
 80026bc:	e028      	b.n	8002710 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e00d      	b.n	80026ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3340      	adds	r3, #64	; 0x40
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	4413      	add	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3ec      	bcc.n	80026d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026f8:	883b      	ldrh	r3, [r7, #0]
 80026fa:	0418      	lsls	r0, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	3b01      	subs	r3, #1
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	4302      	orrs	r2, r0
 8002708:	3340      	adds	r3, #64	; 0x40
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_PCDEx_ActivateLPM+0x44>)
 8002770:	4313      	orrs	r3, r2
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	10000003 	.word	0x10000003

08002788 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_PWREx_EnableOverDrive+0x98>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a22      	ldr	r2, [pc, #136]	; (8002820 <HAL_PWREx_EnableOverDrive+0x98>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b6:	f7fe fa3d 	bl	8000c34 <HAL_GetTick>
 80027ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027bc:	e009      	b.n	80027d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027be:	f7fe fa39 	bl	8000c34 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027cc:	d901      	bls.n	80027d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e022      	b.n	8002818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027de:	d1ee      	bne.n	80027be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ec:	f7fe fa22 	bl	8000c34 <HAL_GetTick>
 80027f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027f2:	e009      	b.n	8002808 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027f4:	f7fe fa1e 	bl	8000c34 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002802:	d901      	bls.n	8002808 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e007      	b.n	8002818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_PWREx_EnableOverDrive+0x9c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002814:	d1ee      	bne.n	80027f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000

08002828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e29b      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8087 	beq.w	800295a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284c:	4b96      	ldr	r3, [pc, #600]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b04      	cmp	r3, #4
 8002856:	d00c      	beq.n	8002872 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002858:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d112      	bne.n	800288a <HAL_RCC_OscConfig+0x62>
 8002864:	4b90      	ldr	r3, [pc, #576]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002870:	d10b      	bne.n	800288a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002872:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d06c      	beq.n	8002958 <HAL_RCC_OscConfig+0x130>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d168      	bne.n	8002958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e275      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x7a>
 8002894:	4b84      	ldr	r3, [pc, #528]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a83      	ldr	r2, [pc, #524]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e02e      	b.n	8002900 <HAL_RCC_OscConfig+0xd8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x9c>
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7e      	ldr	r2, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7b      	ldr	r2, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xd8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xd8>
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe f994 	bl	8000c34 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe f990 	bl	8000c34 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e229      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe f980 	bl	8000c34 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe f97c 	bl	8000c34 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e215      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x110>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d069      	beq.n	8002a3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d11c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x190>
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e1e9      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	493d      	ldr	r1, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	e040      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d023      	beq.n	8002a08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c0:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe f932 	bl	8000c34 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe f92e 	bl	8000c34 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1c7      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe f90e 	bl	8000c34 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe f90a 	bl	8000c34 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1a3      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d038      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f8eb 	bl	8000c34 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe f8e7 	bl	8000c34 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e180      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x23a>
 8002a80:	e01a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe f8d1 	bl	8000c34 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe f8cd 	bl	8000c34 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d903      	bls.n	8002aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e166      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
 8002aa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ee      	bne.n	8002a96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a4 	beq.w	8002c0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a88      	ldr	r2, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b86      	ldr	r3, [pc, #536]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x4d4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002afa:	4b80      	ldr	r3, [pc, #512]	; (8002cfc <HAL_RCC_OscConfig+0x4d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7f      	ldr	r2, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x4d4>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7fe f895 	bl	8000c34 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe f891 	bl	8000c34 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e12a      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b20:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <HAL_RCC_OscConfig+0x4d4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x31a>
 8002b34:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a6f      	ldr	r2, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	e02d      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x33c>
 8002b4a:	4b6b      	ldr	r3, [pc, #428]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a6a      	ldr	r2, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	e01c      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x35e>
 8002b6c:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a61      	ldr	r2, [pc, #388]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5b      	ldr	r2, [pc, #364]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe f845 	bl	8000c34 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe f841 	bl	8000c34 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <HAL_RCC_OscConfig+0x386>
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f82f 	bl	8000c34 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe f82b 	bl	8000c34 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0c2      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80ae 	beq.w	8002d74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d06d      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d14b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fd fffc 	bl	8000c34 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fd fff8 	bl	8000c34 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e091      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fd ffca 	bl	8000c34 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fd ffc6 	bl	8000c34 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e05f      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
 8002cc2:	e057      	b.n	8002d74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fd ffb0 	bl	8000c34 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fd ffac 	bl	8000c34 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e045      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4b0>
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x54c>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <HAL_RCC_OscConfig+0x558>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d030      	beq.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d129      	bne.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d122      	bne.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d119      	bne.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d10f      	bne.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d0      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d910      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 020f 	bic.w	r2, r3, #15
 8002db2:	4965      	ldr	r1, [pc, #404]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b8      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	494d      	ldr	r1, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d040      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d115      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e073      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06b      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4936      	ldr	r1, [pc, #216]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fd fedc 	bl	8000c34 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fd fed8 	bl	8000c34 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e053      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d210      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	4922      	ldr	r1, [pc, #136]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e032      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4916      	ldr	r1, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	490e      	ldr	r1, [pc, #56]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f16:	f000 f821 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1cc>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1d0>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1d4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fd3c 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023c00 	.word	0x40023c00
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	0800b8b0 	.word	0x0800b8b0
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000004 	.word	0x20000004

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b094      	sub	sp, #80	; 0x50
 8002f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	647b      	str	r3, [r7, #68]	; 0x44
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d00d      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x40>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	f200 80e1 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x34>
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f8e:	e0db      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f94:	e0db      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f9a:	e0d8      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	6139      	str	r1, [r7, #16]
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003000:	4659      	mov	r1, fp
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4651      	mov	r1, sl
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4651      	mov	r1, sl
 8003010:	ebb2 0801 	subs.w	r8, r2, r1
 8003014:	4659      	mov	r1, fp
 8003016:	eb63 0901 	sbc.w	r9, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800302e:	4690      	mov	r8, r2
 8003030:	4699      	mov	r9, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb18 0303 	adds.w	r3, r8, r3
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	462b      	mov	r3, r5
 800303c:	eb49 0303 	adc.w	r3, r9, r3
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800304e:	4629      	mov	r1, r5
 8003050:	024b      	lsls	r3, r1, #9
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003058:	4621      	mov	r1, r4
 800305a:	024a      	lsls	r2, r1, #9
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
 8003066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800306c:	f7fd f8e8 	bl	8000240 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	e058      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	4618      	mov	r0, r3
 8003084:	4611      	mov	r1, r2
 8003086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
 8003090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	0159      	lsls	r1, r3, #5
 80030a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a6:	0150      	lsls	r0, r2, #5
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4641      	mov	r1, r8
 80030ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030cc:	ebb2 040a 	subs.w	r4, r2, sl
 80030d0:	eb63 050b 	sbc.w	r5, r3, fp
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	00eb      	lsls	r3, r5, #3
 80030de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e2:	00e2      	lsls	r2, r4, #3
 80030e4:	4614      	mov	r4, r2
 80030e6:	461d      	mov	r5, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	18e3      	adds	r3, r4, r3
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	464b      	mov	r3, r9
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003102:	4629      	mov	r1, r5
 8003104:	028b      	lsls	r3, r1, #10
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800310c:	4621      	mov	r1, r4
 800310e:	028a      	lsls	r2, r1, #10
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	2200      	movs	r2, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	61fa      	str	r2, [r7, #28]
 800311c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003120:	f7fd f88e 	bl	8000240 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800313c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetSysClockFreq+0x204>)
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003150:	4618      	mov	r0, r3
 8003152:	3750      	adds	r7, #80	; 0x50
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	0800b8c0 	.word	0x0800b8c0

080031a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	220f      	movs	r2, #15
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	08db      	lsrs	r3, r3, #3
 80031e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetClockConfig+0x60>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003234:	4b69      	ldr	r3, [pc, #420]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a68      	ldr	r2, [pc, #416]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800323e:	6093      	str	r3, [r2, #8]
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	4964      	ldr	r1, [pc, #400]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003266:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	4959      	ldr	r1, [pc, #356]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003284:	d101      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	494a      	ldr	r1, [pc, #296]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c0:	d101      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 808b 	beq.w	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fd fc8e 	bl	8000c34 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7fd fc8a 	bl	8000c34 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e38f      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d035      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d02e      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800337a:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d114      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd fc52 	bl	8000c34 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fd fc4e 	bl	8000c34 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e351      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c2:	d111      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033d2:	400b      	ands	r3, r1
 80033d4:	4901      	ldr	r1, [pc, #4]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
 80033da:	e00b      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
 80033e4:	0ffffcff 	.word	0x0ffffcff
 80033e8:	4bac      	ldr	r3, [pc, #688]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4aab      	ldr	r2, [pc, #684]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033f2:	6093      	str	r3, [r2, #8]
 80033f4:	4ba9      	ldr	r3, [pc, #676]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	49a6      	ldr	r1, [pc, #664]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	4313      	orrs	r3, r2
 8003404:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003412:	4ba2      	ldr	r3, [pc, #648]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003418:	4aa0      	ldr	r2, [pc, #640]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003422:	4b9e      	ldr	r3, [pc, #632]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003424:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	499b      	ldr	r1, [pc, #620]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003440:	4b96      	ldr	r3, [pc, #600]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	4993      	ldr	r1, [pc, #588]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003462:	4b8e      	ldr	r3, [pc, #568]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003470:	498a      	ldr	r1, [pc, #552]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003484:	4b85      	ldr	r3, [pc, #532]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003492:	4982      	ldr	r1, [pc, #520]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034a6:	4b7d      	ldr	r3, [pc, #500]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4979      	ldr	r1, [pc, #484]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c8:	4b74      	ldr	r3, [pc, #464]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4971      	ldr	r1, [pc, #452]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ea:	4b6c      	ldr	r3, [pc, #432]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f023 020c 	bic.w	r2, r3, #12
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	4968      	ldr	r1, [pc, #416]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800350c:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	4960      	ldr	r1, [pc, #384]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	4957      	ldr	r1, [pc, #348]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003550:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	494f      	ldr	r1, [pc, #316]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4946      	ldr	r1, [pc, #280]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003594:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	493e      	ldr	r1, [pc, #248]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035b6:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	4935      	ldr	r1, [pc, #212]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d8:	4b30      	ldr	r3, [pc, #192]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	492d      	ldr	r1, [pc, #180]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d011      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	4924      	ldr	r1, [pc, #144]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003618:	d101      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003648:	4914      	ldr	r1, [pc, #80]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366c:	490b      	ldr	r1, [pc, #44]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00f      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	4902      	ldr	r1, [pc, #8]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	4986      	ldr	r1, [pc, #536]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036d0:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	497d      	ldr	r1, [pc, #500]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d006      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80d6 	beq.w	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036fc:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a75      	ldr	r2, [pc, #468]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fd fa94 	bl	8000c34 <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003710:	f7fd fa90 	bl	8000c34 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e195      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003722:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11d      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0e1b      	lsrs	r3, r3, #24
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	019a      	lsls	r2, r3, #6
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	071b      	lsls	r3, r3, #28
 8003776:	4958      	ldr	r1, [pc, #352]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a8:	d129      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037aa:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037b8:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0f1b      	lsrs	r3, r3, #28
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	019a      	lsls	r2, r3, #6
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	071b      	lsls	r3, r3, #28
 80037de:	493e      	ldr	r1, [pc, #248]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037e6:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	f023 021f 	bic.w	r2, r3, #31
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4938      	ldr	r1, [pc, #224]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01d      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	0f1b      	lsrs	r3, r3, #28
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	019a      	lsls	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	061b      	lsls	r3, r3, #24
 8003838:	431a      	orrs	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	071b      	lsls	r3, r3, #28
 800383e:	4926      	ldr	r1, [pc, #152]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d011      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	071b      	lsls	r3, r3, #28
 800386e:	491a      	ldr	r1, [pc, #104]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003882:	f7fd f9d7 	bl	8000c34 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800388a:	f7fd f9d3 	bl	8000c34 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d901      	bls.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0d8      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800389c:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 80ce 	bne.w	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fd f9ba 	bl	8000c34 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038c2:	e00b      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c4:	f7fd f9b6 	bl	8000c34 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d904      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0bb      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e8:	d0ec      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d12a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003912:	4b51      	ldr	r3, [pc, #324]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	0f1b      	lsrs	r3, r3, #28
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	019a      	lsls	r2, r3, #6
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	071b      	lsls	r3, r3, #28
 8003946:	4944      	ldr	r1, [pc, #272]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800394e:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003954:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	493d      	ldr	r1, [pc, #244]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d022      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397c:	d11d      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	0e1b      	lsrs	r3, r3, #24
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	0f1b      	lsrs	r3, r3, #28
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	019a      	lsls	r2, r3, #6
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	061b      	lsls	r3, r3, #24
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	071b      	lsls	r3, r3, #28
 80039b2:	4929      	ldr	r1, [pc, #164]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d028      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4917      	ldr	r1, [pc, #92]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4911      	ldr	r1, [pc, #68]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd f906 	bl	8000c34 <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a2c:	f7fd f902 	bl	8000c34 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e007      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4a:	d1ef      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f841 	bl	8003b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fa00 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e054      	b.n	8003be2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d01d      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d115      	bne.n	8003bcc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_TIM_Base_Start_IT+0xec>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d015      	beq.n	8003bde <HAL_TIM_Base_Start_IT+0xbe>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d011      	beq.n	8003bde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	e008      	b.n	8003bde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e000      	b.n	8003be0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40001800 	.word	0x40001800
 8003c0c:	00010007 	.word	0x00010007

08003c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0202 	mvn.w	r2, #2
 8003c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f905 	bl	8003e62 <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8f7 	bl	8003e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f908 	bl	8003e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0204 	mvn.w	r2, #4
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8db 	bl	8003e62 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8cd 	bl	8003e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8de 	bl	8003e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0208 	mvn.w	r2, #8
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8b1 	bl	8003e62 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8a3 	bl	8003e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8b4 	bl	8003e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0210 	mvn.w	r2, #16
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f887 	bl	8003e62 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f879 	bl	8003e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f88a 	bl	8003e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0201 	mvn.w	r2, #1
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc fdd0 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f91a 	bl	8003ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dce:	d10e      	bne.n	8003dee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d107      	bne.n	8003dee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f90d 	bl	8004008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d10e      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d107      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f838 	bl	8003e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d10e      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0220 	mvn.w	r2, #32
 8003e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8cd 	bl	8003fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3d      	ldr	r2, [pc, #244]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d027      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d023      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <TIM_Base_SetConfig+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <TIM_Base_SetConfig+0x134>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <TIM_Base_SetConfig+0x138>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <TIM_Base_SetConfig+0x13c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	40001800 	.word	0x40001800
 8003fd8:	40001c00 	.word	0x40001c00
 8003fdc:	40002000 	.word	0x40002000

08003fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800401c:	b084      	sub	sp, #16
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	f107 001c 	add.w	r0, r7, #28
 800402a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	d120      	bne.n	8004076 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <USB_CoreInit+0xac>)
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 fbee 	bl	800584c <USB_CoreReset>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	e010      	b.n	8004098 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f001 fbe2 	bl	800584c <USB_CoreReset>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10b      	bne.n	80040b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f043 0206 	orr.w	r2, r3, #6
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c2:	b004      	add	sp, #16
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	ffbdffbf 	.word	0xffbdffbf

080040cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d165      	bne.n	80041ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <USB_SetTurnaroundTime+0x11c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d906      	bls.n	80040f6 <USB_SetTurnaroundTime+0x2a>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <USB_SetTurnaroundTime+0x120>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d202      	bcs.n	80040f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040f0:	230f      	movs	r3, #15
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e062      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a3c      	ldr	r2, [pc, #240]	; (80041ec <USB_SetTurnaroundTime+0x120>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d306      	bcc.n	800410c <USB_SetTurnaroundTime+0x40>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <USB_SetTurnaroundTime+0x124>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d202      	bcs.n	800410c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004106:	230e      	movs	r3, #14
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e057      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a38      	ldr	r2, [pc, #224]	; (80041f0 <USB_SetTurnaroundTime+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d306      	bcc.n	8004122 <USB_SetTurnaroundTime+0x56>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a37      	ldr	r2, [pc, #220]	; (80041f4 <USB_SetTurnaroundTime+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d202      	bcs.n	8004122 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800411c:	230d      	movs	r3, #13
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e04c      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <USB_SetTurnaroundTime+0x128>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d306      	bcc.n	8004138 <USB_SetTurnaroundTime+0x6c>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <USB_SetTurnaroundTime+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d802      	bhi.n	8004138 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004132:	230c      	movs	r3, #12
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e041      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <USB_SetTurnaroundTime+0x12c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d906      	bls.n	800414e <USB_SetTurnaroundTime+0x82>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <USB_SetTurnaroundTime+0x130>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d802      	bhi.n	800414e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004148:	230b      	movs	r3, #11
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e036      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <USB_SetTurnaroundTime+0x130>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d906      	bls.n	8004164 <USB_SetTurnaroundTime+0x98>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <USB_SetTurnaroundTime+0x134>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d802      	bhi.n	8004164 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800415e:	230a      	movs	r3, #10
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e02b      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a26      	ldr	r2, [pc, #152]	; (8004200 <USB_SetTurnaroundTime+0x134>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d906      	bls.n	800417a <USB_SetTurnaroundTime+0xae>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a25      	ldr	r2, [pc, #148]	; (8004204 <USB_SetTurnaroundTime+0x138>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d202      	bcs.n	800417a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004174:	2309      	movs	r3, #9
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e020      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <USB_SetTurnaroundTime+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d306      	bcc.n	8004190 <USB_SetTurnaroundTime+0xc4>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <USB_SetTurnaroundTime+0x13c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d802      	bhi.n	8004190 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800418a:	2308      	movs	r3, #8
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e015      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <USB_SetTurnaroundTime+0x13c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d906      	bls.n	80041a6 <USB_SetTurnaroundTime+0xda>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <USB_SetTurnaroundTime+0x140>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d202      	bcs.n	80041a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041a0:	2307      	movs	r3, #7
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00a      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041a6:	2306      	movs	r3, #6
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e007      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041b2:	2309      	movs	r3, #9
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e001      	b.n	80041bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041b8:	2309      	movs	r3, #9
 80041ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	00d8acbf 	.word	0x00d8acbf
 80041ec:	00e4e1c0 	.word	0x00e4e1c0
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	01067380 	.word	0x01067380
 80041f8:	011a499f 	.word	0x011a499f
 80041fc:	01312cff 	.word	0x01312cff
 8004200:	014ca43f 	.word	0x014ca43f
 8004204:	016e3600 	.word	0x016e3600
 8004208:	01a6ab1f 	.word	0x01a6ab1f
 800420c:	01e84800 	.word	0x01e84800

08004210 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d115      	bne.n	80042a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004282:	2001      	movs	r0, #1
 8004284:	f7fc fce2 	bl	8000c4c <HAL_Delay>
      ms++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3301      	adds	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 fa4b 	bl	800572a <USB_GetMode>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d01e      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b31      	cmp	r3, #49	; 0x31
 800429e:	d9f0      	bls.n	8004282 <USB_SetCurrentMode+0x2e>
 80042a0:	e01a      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fc fcc9 	bl	8000c4c <HAL_Delay>
      ms++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 fa32 	bl	800572a <USB_GetMode>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <USB_SetCurrentMode+0x84>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b31      	cmp	r3, #49	; 0x31
 80042d0:	d9f0      	bls.n	80042b4 <USB_SetCurrentMode+0x60>
 80042d2:	e001      	b.n	80042d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e005      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b32      	cmp	r3, #50	; 0x32
 80042dc:	d101      	bne.n	80042e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	e009      	b.n	8004320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3340      	adds	r3, #64	; 0x40
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0e      	cmp	r3, #14
 8004324:	d9f2      	bls.n	800430c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11c      	bne.n	8004366 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e005      	b.n	8004372 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	4619      	mov	r1, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	461a      	mov	r2, r3
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10c      	bne.n	80043b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f965 	bl	8004670 <USB_SetDevSpeed>
 80043a6:	e008      	b.n	80043ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f960 	bl	8004670 <USB_SetDevSpeed>
 80043b0:	e003      	b.n	80043ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b2:	2103      	movs	r1, #3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f95b 	bl	8004670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043ba:	2110      	movs	r1, #16
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8f3 	bl	80045a8 <USB_FlushTxFifo>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f91f 	bl	8004610 <USB_FlushRxFifo>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e043      	b.n	800448e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441c:	d118      	bne.n	8004450 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e013      	b.n	8004462 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e008      	b.n	8004462 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b7      	bcc.n	8004406 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e043      	b.n	8004524 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b2:	d118      	bne.n	80044e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e013      	b.n	80044f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e008      	b.n	80044f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800451c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3b7      	bcc.n	800449c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <USB_DevInit+0x2b4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800457e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <USB_DevInit+0x2b8>)
 800458a:	4313      	orrs	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004590:	7dfb      	ldrb	r3, [r7, #23]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459c:	b004      	add	sp, #16
 800459e:	4770      	bx	lr
 80045a0:	803c3800 	.word	0x803c3800
 80045a4:	40000004 	.word	0x40000004

080045a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <USB_FlushTxFifo+0x64>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e01b      	b.n	8004600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	daf2      	bge.n	80045b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	019b      	lsls	r3, r3, #6
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <USB_FlushTxFifo+0x64>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e006      	b.n	8004600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d0f0      	beq.n	80045e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	00030d40 	.word	0x00030d40

08004610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <USB_FlushRxFifo+0x5c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e018      	b.n	8004660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	daf2      	bge.n	800461c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2210      	movs	r2, #16
 800463e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <USB_FlushRxFifo+0x5c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e006      	b.n	8004660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b10      	cmp	r3, #16
 800465c:	d0f0      	beq.n	8004640 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	00030d40 	.word	0x00030d40

08004670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0306 	and.w	r3, r3, #6
 80046ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
 80046c6:	e00a      	b.n	80046de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d002      	beq.n	80046d4 <USB_GetDevSpeed+0x32>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d102      	bne.n	80046da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046d4:	2302      	movs	r3, #2
 80046d6:	75fb      	strb	r3, [r7, #23]
 80046d8:	e001      	b.n	80046de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046da:	230f      	movs	r3, #15
 80046dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d139      	bne.n	800477c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004726:	4313      	orrs	r3, r2
 8004728:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d153      	bne.n	80047e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	791b      	ldrb	r3, [r3, #4]
 800475a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800475c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	059b      	lsls	r3, r3, #22
 8004762:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004764:	431a      	orrs	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0159      	lsls	r1, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	440b      	add	r3, r1
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	4619      	mov	r1, r3
 8004774:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <USB_ActivateEndpoint+0x10c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
 800477a:	e035      	b.n	80047e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800479a:	4313      	orrs	r3, r2
 800479c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d119      	bne.n	80047e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	791b      	ldrb	r3, [r3, #4]
 80047ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047d0:	430b      	orrs	r3, r1
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	440b      	add	r3, r1
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	4619      	mov	r1, r3
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <USB_ActivateEndpoint+0x10c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	10008000 	.word	0x10008000

080047fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d161      	bne.n	80048dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482e:	d11f      	bne.n	8004870 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800484e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800486e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	b29b      	uxth	r3, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004890:	4013      	ands	r3, r2
 8004892:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	2101      	movs	r1, #1
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b4:	4013      	ands	r3, r2
 80048b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0159      	lsls	r1, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	4619      	mov	r1, r3
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <USB_DeactivateEndpoint+0x1b0>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
 80048da:	e060      	b.n	800499e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f2:	d11f      	bne.n	8004934 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004912:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004932:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	43db      	mvns	r3, r3
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004954:	4013      	ands	r3, r2
 8004956:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	2101      	movs	r1, #1
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	43db      	mvns	r3, r3
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004978:	4013      	ands	r3, r2
 800497a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	0159      	lsls	r1, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	440b      	add	r3, r1
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	4619      	mov	r1, r3
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <USB_DeactivateEndpoint+0x1b4>)
 800499a:	4013      	ands	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	ec337800 	.word	0xec337800
 80049b0:	eff37800 	.word	0xeff37800

080049b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 8163 	bne.w	8004c9c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d132      	bne.n	8004a44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	0159      	lsls	r1, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	440b      	add	r3, r1
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	4619      	mov	r1, r3
 80049fa:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <USB_EPStartXfer+0x2dc>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	0159      	lsls	r1, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	440b      	add	r3, r1
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4b95      	ldr	r3, [pc, #596]	; (8004c94 <USB_EPStartXfer+0x2e0>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
 8004a42:	e074      	b.n	8004b2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	0159      	lsls	r1, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	440b      	add	r3, r1
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4b8c      	ldr	r3, [pc, #560]	; (8004c94 <USB_EPStartXfer+0x2e0>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	4619      	mov	r1, r3
 8004a82:	4b83      	ldr	r3, [pc, #524]	; (8004c90 <USB_EPStartXfer+0x2dc>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	1e59      	subs	r1, r3, #1
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004aac:	4b7a      	ldr	r3, [pc, #488]	; (8004c98 <USB_EPStartXfer+0x2e4>)
 8004aae:	400b      	ands	r3, r1
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	0148      	lsls	r0, r1, #5
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	4401      	add	r1, r0
 8004ab8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004abc:	4313      	orrs	r3, r2
 8004abe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	0148      	lsls	r0, r1, #5
 8004ada:	69f9      	ldr	r1, [r7, #28]
 8004adc:	4401      	add	r1, r0
 8004ade:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	791b      	ldrb	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d11f      	bne.n	8004b2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d14b      	bne.n	8004bcc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d128      	bne.n	8004baa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d110      	bne.n	8004b8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e00f      	b.n	8004baa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e137      	b.n	8004e3c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	791b      	ldrb	r3, [r3, #4]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d015      	beq.n	8004c20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 811f 	beq.w	8004e3c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	69f9      	ldr	r1, [r7, #28]
 8004c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c1e:	e10d      	b.n	8004e3c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d110      	bne.n	8004c52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e00f      	b.n	8004c72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	b298      	uxth	r0, r3
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4603      	mov	r3, r0
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 faea 	bl	8005260 <USB_WritePacket>
 8004c8c:	e0d6      	b.n	8004e3c <USB_EPStartXfer+0x488>
 8004c8e:	bf00      	nop
 8004c90:	e007ffff 	.word	0xe007ffff
 8004c94:	fff80000 	.word	0xfff80000
 8004c98:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	0159      	lsls	r1, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <USB_EPStartXfer+0x494>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	0159      	lsls	r1, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4b5c      	ldr	r3, [pc, #368]	; (8004e4c <USB_EPStartXfer+0x498>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d123      	bne.n	8004d30 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfe:	69b9      	ldr	r1, [r7, #24]
 8004d00:	0148      	lsls	r0, r1, #5
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	4401      	add	r1, r0
 8004d06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2c:	6113      	str	r3, [r2, #16]
 8004d2e:	e037      	b.n	8004da0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	1e5a      	subs	r2, r3, #1
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	8afa      	ldrh	r2, [r7, #22]
 8004d4c:	fb03 f202 	mul.w	r2, r3, r2
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	8afb      	ldrh	r3, [r7, #22]
 8004d64:	04d9      	lsls	r1, r3, #19
 8004d66:	4b3a      	ldr	r3, [pc, #232]	; (8004e50 <USB_EPStartXfer+0x49c>)
 8004d68:	400b      	ands	r3, r1
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	0148      	lsls	r0, r1, #5
 8004d6e:	69f9      	ldr	r1, [r7, #28]
 8004d70:	4401      	add	r1, r0
 8004d72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d76:	4313      	orrs	r3, r2
 8004d78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d90:	69b9      	ldr	r1, [r7, #24]
 8004d92:	0148      	lsls	r0, r1, #5
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	4401      	add	r1, r0
 8004d98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10d      	bne.n	8004dc2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6919      	ldr	r1, [r3, #16]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	791b      	ldrb	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d128      	bne.n	8004e1c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e00f      	b.n	8004e1c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	fff80000 	.word	0xfff80000
 8004e4c:	e007ffff 	.word	0xe007ffff
 8004e50:	1ff80000 	.word	0x1ff80000

08004e54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 80ce 	bne.w	8005012 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d132      	bne.n	8004ee4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	0159      	lsls	r1, r3, #5
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	440b      	add	r3, r1
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4b9a      	ldr	r3, [pc, #616]	; (8005104 <USB_EP0StartXfer+0x2b0>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	0159      	lsls	r1, r3, #5
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	4619      	mov	r1, r3
 8004edc:	4b8a      	ldr	r3, [pc, #552]	; (8005108 <USB_EP0StartXfer+0x2b4>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
 8004ee2:	e04e      	b.n	8004f82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	0159      	lsls	r1, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	440b      	add	r3, r1
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	4619      	mov	r1, r3
 8004f00:	4b81      	ldr	r3, [pc, #516]	; (8005108 <USB_EP0StartXfer+0x2b4>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	0159      	lsls	r1, r3, #5
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	4619      	mov	r1, r3
 8004f22:	4b78      	ldr	r3, [pc, #480]	; (8005104 <USB_EP0StartXfer+0x2b0>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	0148      	lsls	r0, r1, #5
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4401      	add	r1, r0
 8004f7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d11e      	bne.n	8004fc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e097      	b.n	80050f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8083 	beq.w	80050f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2101      	movs	r1, #1
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500c:	4313      	orrs	r3, r2
 800500e:	634b      	str	r3, [r1, #52]	; 0x34
 8005010:	e071      	b.n	80050f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	440b      	add	r3, r1
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	4619      	mov	r1, r3
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <USB_EP0StartXfer+0x2b4>)
 8005030:	4013      	ands	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	0159      	lsls	r1, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	440b      	add	r3, r1
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	4619      	mov	r1, r3
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <USB_EP0StartXfer+0x2b0>)
 8005052:	4013      	ands	r3, r2
 8005054:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	6939      	ldr	r1, [r7, #16]
 80050a6:	0148      	lsls	r0, r1, #5
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	4401      	add	r1, r0
 80050ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10d      	bne.n	80050d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6919      	ldr	r1, [r3, #16]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	460a      	mov	r2, r1
 80050d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e007ffff 	.word	0xe007ffff
 8005108:	fff80000 	.word	0xfff80000

0800510c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d14a      	bne.n	80051c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005142:	f040 8086 	bne.w	8005252 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005168:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800518c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f242 7210 	movw	r2, #10000	; 0x2710
 800519a:	4293      	cmp	r3, r2
 800519c:	d902      	bls.n	80051a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
          break;
 80051a2:	e056      	b.n	8005252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051bc:	d0e7      	beq.n	800518e <USB_EPStopXfer+0x82>
 80051be:	e048      	b.n	8005252 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d8:	d13b      	bne.n	8005252 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f242 7210 	movw	r2, #10000	; 0x2710
 800522e:	4293      	cmp	r3, r2
 8005230:	d902      	bls.n	8005238 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
          break;
 8005236:	e00c      	b.n	8005252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005250:	d0e7      	beq.n	8005222 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	460b      	mov	r3, r1
 8005270:	71fb      	strb	r3, [r7, #7]
 8005272:	4613      	mov	r3, r2
 8005274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800527e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d123      	bne.n	80052ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005286:	88bb      	ldrh	r3, [r7, #4]
 8005288:	3303      	adds	r3, #3
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e018      	b.n	80052c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	031a      	lsls	r2, r3, #12
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a0:	461a      	mov	r2, r3
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3301      	adds	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3301      	adds	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3301      	adds	r3, #1
 80052be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	3301      	adds	r3, #1
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d3e2      	bcc.n	8005294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052dc:	b480      	push	{r7}
 80052de:	b08b      	sub	sp, #44	; 0x2c
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	e014      	b.n	8005332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	601a      	str	r2, [r3, #0]
    pDest++;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	3301      	adds	r3, #1
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	3301      	adds	r3, #1
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	3301      	adds	r3, #1
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	3301      	adds	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	3301      	adds	r3, #1
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	6a3a      	ldr	r2, [r7, #32]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	429a      	cmp	r2, r3
 8005338:	d3e6      	bcc.n	8005308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800533a:	8bfb      	ldrh	r3, [r7, #30]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534a:	461a      	mov	r2, r3
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	b2da      	uxtb	r2, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	701a      	strb	r2, [r3, #0]
      i++;
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	3301      	adds	r3, #1
 800536a:	623b      	str	r3, [r7, #32]
      pDest++;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	3301      	adds	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005372:	8bfb      	ldrh	r3, [r7, #30]
 8005374:	3b01      	subs	r3, #1
 8005376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005378:	8bfb      	ldrh	r3, [r7, #30]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ea      	bne.n	8005354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005380:	4618      	mov	r0, r3
 8005382:	372c      	adds	r7, #44	; 0x2c
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d12c      	bne.n	8005402 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db12      	blt.n	80053e0 <USB_EPSetStall+0x54>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e02b      	b.n	800545a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	db12      	blt.n	800543a <USB_EPSetStall+0xae>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00f      	beq.n	800543a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005438:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005458:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d128      	bne.n	80054d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	791b      	ldrb	r3, [r3, #4]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d003      	beq.n	80054b4 <USB_EPClearStall+0x4c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	791b      	ldrb	r3, [r3, #4]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d138      	bne.n	8005526 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e027      	b.n	8005526 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	791b      	ldrb	r3, [r3, #4]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d003      	beq.n	8005506 <USB_EPClearStall+0x9e>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	791b      	ldrb	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d10f      	bne.n	8005526 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005552:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005556:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ae:	f023 0302 	bic.w	r3, r3, #2
 80055b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055dc:	f023 0303 	bic.w	r3, r3, #3
 80055e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f0:	f043 0302 	orr.w	r3, r3, #2
 80055f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0c1b      	lsrs	r3, r3, #16
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	b29b      	uxth	r3, r3
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c0:	68bb      	ldr	r3, [r7, #8]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	b2db      	uxtb	r3, r3
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4013      	ands	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800571c:	68bb      	ldr	r3, [r7, #8]
}
 800571e:	4618      	mov	r0, r3
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	4619      	mov	r1, r3
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <USB_ActivateSetup+0x44>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	fffff800 	.word	0xfffff800

08005790 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	460b      	mov	r3, r1
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	333c      	adds	r3, #60	; 0x3c
 80057a6:	3304      	adds	r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4a26      	ldr	r2, [pc, #152]	; (8005848 <USB_EP0_OutStart+0xb8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d90a      	bls.n	80057ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c4:	d101      	bne.n	80057ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e037      	b.n	800583a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f8:	f043 0318 	orr.w	r3, r3, #24
 80057fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005810:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10f      	bne.n	8005838 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005832:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	4f54300a 	.word	0x4f54300a

0800584c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <USB_CoreReset+0x64>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e01b      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	daf2      	bge.n	8005858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <USB_CoreReset+0x64>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d0f0      	beq.n	8005882 <USB_CoreReset+0x36>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	00030d40 	.word	0x00030d40

080058b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058c4:	f005 fdea 	bl	800b49c <malloc>
 80058c8:	4603      	mov	r3, r0
 80058ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	32b0      	adds	r2, #176	; 0xb0
 80058dc:	2100      	movs	r1, #0
 80058de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0d4      	b.n	8005a90 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058e6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80058ea:	2100      	movs	r1, #0
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f005 fdf3 	bl	800b4d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	32b0      	adds	r2, #176	; 0xb0
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	32b0      	adds	r2, #176	; 0xb0
 800590c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7c1b      	ldrb	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d138      	bne.n	8005990 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800591e:	4b5e      	ldr	r3, [pc, #376]	; (8005a98 <USBD_CDC_Init+0x1e4>)
 8005920:	7819      	ldrb	r1, [r3, #0]
 8005922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005926:	2202      	movs	r2, #2
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f005 fbe8 	bl	800b0fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800592e:	4b5a      	ldr	r3, [pc, #360]	; (8005a98 <USBD_CDC_Init+0x1e4>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	2201      	movs	r2, #1
 8005946:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005948:	4b54      	ldr	r3, [pc, #336]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 800594a:	7819      	ldrb	r1, [r3, #0]
 800594c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005950:	2202      	movs	r2, #2
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f005 fbd3 	bl	800b0fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005958:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005970:	2201      	movs	r2, #1
 8005972:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005974:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <USBD_CDC_Init+0x1ec>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 020f 	and.w	r2, r3, #15
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	3326      	adds	r3, #38	; 0x26
 800598a:	2210      	movs	r2, #16
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e035      	b.n	80059fc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005990:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <USBD_CDC_Init+0x1e4>)
 8005992:	7819      	ldrb	r1, [r3, #0]
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	2202      	movs	r2, #2
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f005 fbb0 	bl	800b0fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <USBD_CDC_Init+0x1e4>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f003 020f 	and.w	r2, r3, #15
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	2201      	movs	r2, #1
 80059b6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059b8:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 80059ba:	7819      	ldrb	r1, [r3, #0]
 80059bc:	2340      	movs	r3, #64	; 0x40
 80059be:	2202      	movs	r2, #2
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f005 fb9c 	bl	800b0fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059c6:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f003 020f 	and.w	r2, r3, #15
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059de:	2201      	movs	r2, #1
 80059e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059e2:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <USBD_CDC_Init+0x1ec>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3326      	adds	r3, #38	; 0x26
 80059f8:	2210      	movs	r2, #16
 80059fa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <USBD_CDC_Init+0x1ec>)
 80059fe:	7819      	ldrb	r1, [r3, #0]
 8005a00:	2308      	movs	r3, #8
 8005a02:	2203      	movs	r2, #3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f005 fb7a 	bl	800b0fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <USBD_CDC_Init+0x1ec>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3324      	adds	r3, #36	; 0x24
 8005a20:	2201      	movs	r2, #1
 8005a22:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	33b0      	adds	r3, #176	; 0xb0
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e018      	b.n	8005a90 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7c1b      	ldrb	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 8005a68:	7819      	ldrb	r1, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f005 fc31 	bl	800b2dc <USBD_LL_PrepareReceive>
 8005a7a:	e008      	b.n	8005a8e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <USBD_CDC_Init+0x1e8>)
 8005a7e:	7819      	ldrb	r1, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a86:	2340      	movs	r3, #64	; 0x40
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f005 fc27 	bl	800b2dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000093 	.word	0x20000093
 8005a9c:	20000094 	.word	0x20000094
 8005aa0:	20000095 	.word	0x20000095

08005aa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ab0:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <USBD_CDC_DeInit+0xf8>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f005 fb47 	bl	800b14a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005abc:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <USBD_CDC_DeInit+0xf8>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005ad6:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <USBD_CDC_DeInit+0xfc>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f005 fb34 	bl	800b14a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <USBD_CDC_DeInit+0xfc>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005afa:	2200      	movs	r2, #0
 8005afc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005afe:	4b29      	ldr	r3, [pc, #164]	; (8005ba4 <USBD_CDC_DeInit+0x100>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f005 fb20 	bl	800b14a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b0a:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <USBD_CDC_DeInit+0x100>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	2200      	movs	r2, #0
 8005b22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <USBD_CDC_DeInit+0x100>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	3326      	adds	r3, #38	; 0x26
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	32b0      	adds	r2, #176	; 0xb0
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	33b0      	adds	r3, #176	; 0xb0
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	32b0      	adds	r2, #176	; 0xb0
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f005 fc9a 	bl	800b4ac <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32b0      	adds	r2, #176	; 0xb0
 8005b82:	2100      	movs	r1, #0
 8005b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000093 	.word	0x20000093
 8005ba0:	20000094 	.word	0x20000094
 8005ba4:	20000095 	.word	0x20000095

08005ba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	32b0      	adds	r2, #176	; 0xb0
 8005bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0bf      	b.n	8005d58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d050      	beq.n	8005c86 <USBD_CDC_Setup+0xde>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	f040 80af 	bne.w	8005d48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	88db      	ldrh	r3, [r3, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d03a      	beq.n	8005c68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b25b      	sxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da1b      	bge.n	8005c34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	33b0      	adds	r3, #176	; 0xb0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	88d2      	ldrh	r2, [r2, #6]
 8005c18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	88db      	ldrh	r3, [r3, #6]
 8005c1e:	2b07      	cmp	r3, #7
 8005c20:	bf28      	it	cs
 8005c22:	2307      	movcs	r3, #7
 8005c24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	89fa      	ldrh	r2, [r7, #14]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 fdad 	bl	800778c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c32:	e090      	b.n	8005d56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	785a      	ldrb	r2, [r3, #1]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	88db      	ldrh	r3, [r3, #6]
 8005c42:	2b3f      	cmp	r3, #63	; 0x3f
 8005c44:	d803      	bhi.n	8005c4e <USBD_CDC_Setup+0xa6>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	e000      	b.n	8005c50 <USBD_CDC_Setup+0xa8>
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c56:	6939      	ldr	r1, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fdbf 	bl	80077e4 <USBD_CtlPrepareRx>
      break;
 8005c66:	e076      	b.n	8005d56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	33b0      	adds	r3, #176	; 0xb0
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	7850      	ldrb	r0, [r2, #1]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4798      	blx	r3
      break;
 8005c84:	e067      	b.n	8005d56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	2b0b      	cmp	r3, #11
 8005c8c:	d851      	bhi.n	8005d32 <USBD_CDC_Setup+0x18a>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <USBD_CDC_Setup+0xec>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005d41 	.word	0x08005d41
 8005c9c:	08005d33 	.word	0x08005d33
 8005ca0:	08005d33 	.word	0x08005d33
 8005ca4:	08005d33 	.word	0x08005d33
 8005ca8:	08005d33 	.word	0x08005d33
 8005cac:	08005d33 	.word	0x08005d33
 8005cb0:	08005d33 	.word	0x08005d33
 8005cb4:	08005d33 	.word	0x08005d33
 8005cb8:	08005d33 	.word	0x08005d33
 8005cbc:	08005cef 	.word	0x08005cef
 8005cc0:	08005d19 	.word	0x08005d19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d107      	bne.n	8005ce0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cd0:	f107 030a 	add.w	r3, r7, #10
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fd57 	bl	800778c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cde:	e032      	b.n	8005d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fce1 	bl	80076aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	75fb      	strb	r3, [r7, #23]
          break;
 8005cec:	e02b      	b.n	8005d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d107      	bne.n	8005d0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cfa:	f107 030d 	add.w	r3, r7, #13
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fd42 	bl	800778c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d08:	e01d      	b.n	8005d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fccc 	bl	80076aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005d12:	2303      	movs	r3, #3
 8005d14:	75fb      	strb	r3, [r7, #23]
          break;
 8005d16:	e016      	b.n	8005d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d00f      	beq.n	8005d44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fcbf 	bl	80076aa <USBD_CtlError>
            ret = USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d30:	e008      	b.n	8005d44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 fcb8 	bl	80076aa <USBD_CtlError>
          ret = USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e002      	b.n	8005d46 <USBD_CDC_Setup+0x19e>
          break;
 8005d40:	bf00      	nop
 8005d42:	e008      	b.n	8005d56 <USBD_CDC_Setup+0x1ae>
          break;
 8005d44:	bf00      	nop
      }
      break;
 8005d46:	e006      	b.n	8005d56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fcad 	bl	80076aa <USBD_CtlError>
      ret = USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	75fb      	strb	r3, [r7, #23]
      break;
 8005d54:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32b0      	adds	r2, #176	; 0xb0
 8005d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e065      	b.n	8005e56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	32b0      	adds	r2, #176	; 0xb0
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	3318      	adds	r3, #24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02f      	beq.n	8005e14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	f003 020f 	and.w	r2, r3, #15
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 010f 	and.w	r1, r3, #15
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	440b      	add	r3, r1
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	3348      	adds	r3, #72	; 0x48
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d112      	bne.n	8005e14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	3318      	adds	r3, #24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e06:	78f9      	ldrb	r1, [r7, #3]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f005 fa44 	bl	800b29a <USBD_LL_Transmit>
 8005e12:	e01f      	b.n	8005e54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	33b0      	adds	r3, #176	; 0xb0
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	33b0      	adds	r3, #176	; 0xb0
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e50:	78fa      	ldrb	r2, [r7, #3]
 8005e52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	32b0      	adds	r2, #176	; 0xb0
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	32b0      	adds	r2, #176	; 0xb0
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01a      	b.n	8005ec6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f005 fa42 	bl	800b31e <USBD_LL_GetRxDataSize>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	33b0      	adds	r3, #176	; 0xb0
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	32b0      	adds	r2, #176	; 0xb0
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e025      	b.n	8005f3c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	33b0      	adds	r3, #176	; 0xb0
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <USBD_CDC_EP0_RxReady+0x6c>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f0a:	2bff      	cmp	r3, #255	; 0xff
 8005f0c:	d015      	beq.n	8005f3a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	33b0      	adds	r3, #176	; 0xb0
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f4c:	2182      	movs	r1, #130	; 0x82
 8005f4e:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f50:	f000 fd49 	bl	80069e6 <USBD_GetEpDesc>
 8005f54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f56:	2101      	movs	r1, #1
 8005f58:	4815      	ldr	r0, [pc, #84]	; (8005fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f5a:	f000 fd44 	bl	80069e6 <USBD_GetEpDesc>
 8005f5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f60:	2181      	movs	r1, #129	; 0x81
 8005f62:	4813      	ldr	r0, [pc, #76]	; (8005fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f64:	f000 fd3f 	bl	80069e6 <USBD_GetEpDesc>
 8005f68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2210      	movs	r2, #16
 8005f74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d006      	beq.n	8005f8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f84:	711a      	strb	r2, [r3, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f98:	711a      	strb	r2, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2243      	movs	r2, #67	; 0x43
 8005fa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000050 	.word	0x20000050

08005fb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fbc:	2182      	movs	r1, #130	; 0x82
 8005fbe:	4818      	ldr	r0, [pc, #96]	; (8006020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fc0:	f000 fd11 	bl	80069e6 <USBD_GetEpDesc>
 8005fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4815      	ldr	r0, [pc, #84]	; (8006020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fca:	f000 fd0c 	bl	80069e6 <USBD_GetEpDesc>
 8005fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fd0:	2181      	movs	r1, #129	; 0x81
 8005fd2:	4813      	ldr	r0, [pc, #76]	; (8006020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fd4:	f000 fd07 	bl	80069e6 <USBD_GetEpDesc>
 8005fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2210      	movs	r2, #16
 8005fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	711a      	strb	r2, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f042 0202 	orr.w	r2, r2, #2
 8005ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d006      	beq.n	800600e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	711a      	strb	r2, [r3, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f042 0202 	orr.w	r2, r2, #2
 800600c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2243      	movs	r2, #67	; 0x43
 8006012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000050 	.word	0x20000050

08006024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800602c:	2182      	movs	r1, #130	; 0x82
 800602e:	4818      	ldr	r0, [pc, #96]	; (8006090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006030:	f000 fcd9 	bl	80069e6 <USBD_GetEpDesc>
 8006034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006036:	2101      	movs	r1, #1
 8006038:	4815      	ldr	r0, [pc, #84]	; (8006090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800603a:	f000 fcd4 	bl	80069e6 <USBD_GetEpDesc>
 800603e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006040:	2181      	movs	r1, #129	; 0x81
 8006042:	4813      	ldr	r0, [pc, #76]	; (8006090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006044:	f000 fccf 	bl	80069e6 <USBD_GetEpDesc>
 8006048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2210      	movs	r2, #16
 8006054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2200      	movs	r2, #0
 8006060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006064:	711a      	strb	r2, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006078:	711a      	strb	r2, [r3, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2243      	movs	r2, #67	; 0x43
 8006082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006084:	4b02      	ldr	r3, [pc, #8]	; (8006090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000050 	.word	0x20000050

08006094 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	220a      	movs	r2, #10
 80060a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	2000000c 	.word	0x2000000c

080060b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e009      	b.n	80060dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	33b0      	adds	r3, #176	; 0xb0
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	32b0      	adds	r2, #176	; 0xb0
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800610a:	2303      	movs	r3, #3
 800610c:	e008      	b.n	8006120 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	32b0      	adds	r2, #176	; 0xb0
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	e004      	b.n	800615a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	32b0      	adds	r2, #176	; 0xb0
 800617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800618a:	2303      	movs	r3, #3
 800618c:	e025      	b.n	80061da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11f      	bne.n	80061d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2201      	movs	r2, #1
 800619c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <USBD_CDC_TransmitPacket+0x7c>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4403      	add	r3, r0
 80061ba:	3318      	adds	r3, #24
 80061bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <USBD_CDC_TransmitPacket+0x7c>)
 80061c0:	7819      	ldrb	r1, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f005 f863 	bl	800b29a <USBD_LL_Transmit>

    ret = USBD_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000093 	.word	0x20000093

080061e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	32b0      	adds	r2, #176	; 0xb0
 80061fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32b0      	adds	r2, #176	; 0xb0
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006212:	2303      	movs	r3, #3
 8006214:	e018      	b.n	8006248 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7c1b      	ldrb	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <USBD_CDC_ReceivePacket+0x68>)
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f005 f855 	bl	800b2dc <USBD_LL_PrepareReceive>
 8006232:	e008      	b.n	8006246 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <USBD_CDC_ReceivePacket+0x68>)
 8006236:	7819      	ldrb	r1, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f005 f84b 	bl	800b2dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000094 	.word	0x20000094

08006254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	e01f      	b.n	80062ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	79fa      	ldrb	r2, [r7, #7]
 800629e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f004 fec5 	bl	800b030 <USBD_LL_Init>
 80062a6:	4603      	mov	r3, r0
 80062a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e025      	b.n	8006318 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32ae      	adds	r2, #174	; 0xae
 80062de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	; 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	f107 020e 	add.w	r2, r7, #14
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	4602      	mov	r2, r0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f004 fecd 	bl	800b0c8 <USBD_LL_Start>
 800632e:	4603      	mov	r3, r0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006340:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	4611      	mov	r1, r2
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f932 	bl	8007636 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d01a      	beq.n	800642c <USBD_LL_SetupStage+0x72>
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d822      	bhi.n	8006440 <USBD_LL_SetupStage+0x86>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <USBD_LL_SetupStage+0x4a>
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d00a      	beq.n	8006418 <USBD_LL_SetupStage+0x5e>
 8006402:	e01d      	b.n	8006440 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fb5f 	bl	8006ad0 <USBD_StdDevReq>
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
      break;
 8006416:	e020      	b.n	800645a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fbc7 	bl	8006bb4 <USBD_StdItfReq>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
      break;
 800642a:	e016      	b.n	800645a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fc29 	bl	8006c8c <USBD_StdEPReq>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
      break;
 800643e:	e00c      	b.n	800645a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800644a:	b2db      	uxtb	r3, r3
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f004 fe9a 	bl	800b188 <USBD_LL_StallEP>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	bf00      	nop
  }

  return ret;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	460b      	mov	r3, r1
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d16e      	bne.n	800655a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006482:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800648a:	2b03      	cmp	r3, #3
 800648c:	f040 8098 	bne.w	80065c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d913      	bls.n	80064c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4293      	cmp	r3, r2
 80064b4:	bf28      	it	cs
 80064b6:	4613      	movcs	r3, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f001 f9ae 	bl	800781e <USBD_CtlContinueRx>
 80064c2:	e07d      	b.n	80065c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d014      	beq.n	80064fc <USBD_LL_DataOutStage+0x98>
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d81d      	bhi.n	8006512 <USBD_LL_DataOutStage+0xae>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <USBD_LL_DataOutStage+0x7c>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d003      	beq.n	80064e6 <USBD_LL_DataOutStage+0x82>
 80064de:	e018      	b.n	8006512 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75bb      	strb	r3, [r7, #22]
            break;
 80064e4:	e018      	b.n	8006518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fa5e 	bl	80069b2 <USBD_CoreFindIF>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75bb      	strb	r3, [r7, #22]
            break;
 80064fa:	e00d      	b.n	8006518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fa60 	bl	80069cc <USBD_CoreFindEP>
 800650c:	4603      	mov	r3, r0
 800650e:	75bb      	strb	r3, [r7, #22]
            break;
 8006510:	e002      	b.n	8006518 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	75bb      	strb	r3, [r7, #22]
            break;
 8006516:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006518:	7dbb      	ldrb	r3, [r7, #22]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d119      	bne.n	8006552 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d113      	bne.n	8006552 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800652a:	7dba      	ldrb	r2, [r7, #22]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	32ae      	adds	r2, #174	; 0xae
 8006530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800653a:	7dba      	ldrb	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006542:	7dba      	ldrb	r2, [r7, #22]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	32ae      	adds	r2, #174	; 0xae
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f001 f974 	bl	8007840 <USBD_CtlSendStatus>
 8006558:	e032      	b.n	80065c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fa31 	bl	80069cc <USBD_CoreFindEP>
 800656a:	4603      	mov	r3, r0
 800656c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800656e:	7dbb      	ldrb	r3, [r7, #22]
 8006570:	2bff      	cmp	r3, #255	; 0xff
 8006572:	d025      	beq.n	80065c0 <USBD_LL_DataOutStage+0x15c>
 8006574:	7dbb      	ldrb	r3, [r7, #22]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d122      	bne.n	80065c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b03      	cmp	r3, #3
 8006584:	d117      	bne.n	80065b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006586:	7dba      	ldrb	r2, [r7, #22]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	32ae      	adds	r2, #174	; 0xae
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006596:	7dba      	ldrb	r2, [r7, #22]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800659e:	7dba      	ldrb	r2, [r7, #22]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	32ae      	adds	r2, #174	; 0xae
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	7afa      	ldrb	r2, [r7, #11]
 80065ac:	4611      	mov	r1, r2
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	e000      	b.n	80065c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	460b      	mov	r3, r1
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065d8:	7afb      	ldrb	r3, [r7, #11]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d16f      	bne.n	80066be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3314      	adds	r3, #20
 80065e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d15a      	bne.n	80066a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d914      	bls.n	8006624 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	461a      	mov	r2, r3
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f001 f8d6 	bl	80077c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006616:	2300      	movs	r3, #0
 8006618:	2200      	movs	r2, #0
 800661a:	2100      	movs	r1, #0
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f004 fe5d 	bl	800b2dc <USBD_LL_PrepareReceive>
 8006622:	e03f      	b.n	80066a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d11c      	bne.n	800666a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006638:	429a      	cmp	r2, r3
 800663a:	d316      	bcc.n	800666a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006646:	429a      	cmp	r2, r3
 8006648:	d20f      	bcs.n	800666a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 f8b7 	bl	80077c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800665c:	2300      	movs	r3, #0
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f004 fe3a 	bl	800b2dc <USBD_LL_PrepareReceive>
 8006668:	e01c      	b.n	80066a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d10f      	bne.n	8006696 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006696:	2180      	movs	r1, #128	; 0x80
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f004 fd75 	bl	800b188 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 f8e1 	bl	8007866 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03a      	beq.n	8006724 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fe42 	bl	8006338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066bc:	e032      	b.n	8006724 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f97f 	bl	80069cc <USBD_CoreFindEP>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2bff      	cmp	r3, #255	; 0xff
 80066d6:	d025      	beq.n	8006724 <USBD_LL_DataInStage+0x15a>
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d122      	bne.n	8006724 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d11c      	bne.n	8006724 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ea:	7dfa      	ldrb	r2, [r7, #23]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	32ae      	adds	r2, #174	; 0xae
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d014      	beq.n	8006724 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066fa:	7dfa      	ldrb	r2, [r7, #23]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006702:	7dfa      	ldrb	r2, [r7, #23]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	32ae      	adds	r2, #174	; 0xae
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	7afa      	ldrb	r2, [r7, #11]
 8006710:	4611      	mov	r1, r2
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	4798      	blx	r3
 8006716:	4603      	mov	r3, r0
 8006718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800671a:	7dbb      	ldrb	r3, [r7, #22]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006720:	7dbb      	ldrb	r3, [r7, #22]
 8006722:	e000      	b.n	8006726 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6852      	ldr	r2, [r2, #4]
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	4611      	mov	r1, r2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006790:	2303      	movs	r3, #3
 8006792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f004 fcaf 	bl	800b0fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2240      	movs	r2, #64	; 0x40
 80067ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	; 0x80
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f004 fca1 	bl	800b0fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2240      	movs	r2, #64	; 0x40
 80067c6:	621a      	str	r2, [r3, #32]

  return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006800:	b2da      	uxtb	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b04      	cmp	r3, #4
 8006830:	d106      	bne.n	8006840 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006838:	b2da      	uxtb	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d110      	bne.n	8006884 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32ae      	adds	r2, #174	; 0xae
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e01c      	b.n	80068ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d115      	bne.n	80068e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32ae      	adds	r2, #174	; 0xae
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32ae      	adds	r2, #174	; 0xae
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4611      	mov	r1, r2
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32ae      	adds	r2, #174	; 0xae
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	e01c      	b.n	800694e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b03      	cmp	r3, #3
 800691e:	d115      	bne.n	800694c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	; 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	; 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	4611      	mov	r1, r2
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00e      	beq.n	80069a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6852      	ldr	r2, [r2, #4]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	4611      	mov	r1, r2
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b086      	sub	sp, #24
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	885b      	ldrh	r3, [r3, #2]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d920      	bls.n	8006a50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a16:	e013      	b.n	8006a40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a18:	f107 030a 	add.w	r3, r7, #10
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6978      	ldr	r0, [r7, #20]
 8006a20:	f000 f81b 	bl	8006a5a <USBD_GetNextDesc>
 8006a24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d108      	bne.n	8006a40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	789b      	ldrb	r3, [r3, #2]
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d008      	beq.n	8006a4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	897b      	ldrh	r3, [r7, #10]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d8e5      	bhi.n	8006a18 <USBD_GetEpDesc+0x32>
 8006a4c:	e000      	b.n	8006a50 <USBD_GetEpDesc+0x6a>
          break;
 8006a4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a50:	693b      	ldr	r3, [r7, #16]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ab2:	8a3b      	ldrh	r3, [r7, #16]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	b21a      	sxth	r2, r3
 8006ab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d005      	beq.n	8006af6 <USBD_StdDevReq+0x26>
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d857      	bhi.n	8006b9e <USBD_StdDevReq+0xce>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00f      	beq.n	8006b12 <USBD_StdDevReq+0x42>
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d153      	bne.n	8006b9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	32ae      	adds	r2, #174	; 0xae
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e04a      	b.n	8006ba8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b09      	cmp	r3, #9
 8006b18:	d83b      	bhi.n	8006b92 <USBD_StdDevReq+0xc2>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <USBD_StdDevReq+0x50>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b93 	.word	0x08006b93
 8006b2c:	08006b7f 	.word	0x08006b7f
 8006b30:	08006b93 	.word	0x08006b93
 8006b34:	08006b53 	.word	0x08006b53
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b93 	.word	0x08006b93
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b5d 	.word	0x08006b5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa3c 	bl	8006fc8 <USBD_GetDescriptor>
          break;
 8006b50:	e024      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fbcb 	bl	80072f0 <USBD_SetAddress>
          break;
 8006b5a:	e01f      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fc0a 	bl	8007378 <USBD_SetConfig>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
          break;
 8006b68:	e018      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fcad 	bl	80074cc <USBD_GetConfig>
          break;
 8006b72:	e013      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fcde 	bl	8007538 <USBD_GetStatus>
          break;
 8006b7c:	e00e      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fd0d 	bl	80075a0 <USBD_SetFeature>
          break;
 8006b86:	e009      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fd31 	bl	80075f2 <USBD_ClrFeature>
          break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fd88 	bl	80076aa <USBD_CtlError>
          break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd82 	bl	80076aa <USBD_CtlError>
      break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d005      	beq.n	8006bda <USBD_StdItfReq+0x26>
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d852      	bhi.n	8006c78 <USBD_StdItfReq+0xc4>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <USBD_StdItfReq+0x26>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d14e      	bne.n	8006c78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d840      	bhi.n	8006c6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	889b      	ldrh	r3, [r3, #4]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d836      	bhi.n	8006c60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	889b      	ldrh	r3, [r3, #4]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fed9 	bl	80069b2 <USBD_CoreFindIF>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2bff      	cmp	r3, #255	; 0xff
 8006c08:	d01d      	beq.n	8006c46 <USBD_StdItfReq+0x92>
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11a      	bne.n	8006c46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c10:	7bba      	ldrb	r2, [r7, #14]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	32ae      	adds	r2, #174	; 0xae
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c20:	7bba      	ldrb	r2, [r7, #14]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c28:	7bba      	ldrb	r2, [r7, #14]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c3e:	e004      	b.n	8006c4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c40:	2303      	movs	r3, #3
 8006c42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c44:	e001      	b.n	8006c4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c46:	2303      	movs	r3, #3
 8006c48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d110      	bne.n	8006c74 <USBD_StdItfReq+0xc0>
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fdf1 	bl	8007840 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c5e:	e009      	b.n	8006c74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fd21 	bl	80076aa <USBD_CtlError>
          break;
 8006c68:	e004      	b.n	8006c74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fd1c 	bl	80076aa <USBD_CtlError>
          break;
 8006c72:	e000      	b.n	8006c76 <USBD_StdItfReq+0xc2>
          break;
 8006c74:	bf00      	nop
      }
      break;
 8006c76:	e004      	b.n	8006c82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fd15 	bl	80076aa <USBD_CtlError>
      break;
 8006c80:	bf00      	nop
  }

  return ret;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	889b      	ldrh	r3, [r3, #4]
 8006c9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d007      	beq.n	8006cbc <USBD_StdEPReq+0x30>
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	f200 817f 	bhi.w	8006fb0 <USBD_StdEPReq+0x324>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d02a      	beq.n	8006d0c <USBD_StdEPReq+0x80>
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	f040 817a 	bne.w	8006fb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fe83 	bl	80069cc <USBD_CoreFindEP>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	2bff      	cmp	r3, #255	; 0xff
 8006cce:	f000 8174 	beq.w	8006fba <USBD_StdEPReq+0x32e>
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8170 	bne.w	8006fba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cda:	7b7a      	ldrb	r2, [r7, #13]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ce2:	7b7a      	ldrb	r2, [r7, #13]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	32ae      	adds	r2, #174	; 0xae
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8163 	beq.w	8006fba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32ae      	adds	r2, #174	; 0xae
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d0a:	e156      	b.n	8006fba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d008      	beq.n	8006d26 <USBD_StdEPReq+0x9a>
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	f300 8145 	bgt.w	8006fa4 <USBD_StdEPReq+0x318>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 809b 	beq.w	8006e56 <USBD_StdEPReq+0x1ca>
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d03c      	beq.n	8006d9e <USBD_StdEPReq+0x112>
 8006d24:	e13e      	b.n	8006fa4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d002      	beq.n	8006d38 <USBD_StdEPReq+0xac>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d016      	beq.n	8006d64 <USBD_StdEPReq+0xd8>
 8006d36:	e02c      	b.n	8006d92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00d      	beq.n	8006d5a <USBD_StdEPReq+0xce>
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d00a      	beq.n	8006d5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f004 fa1d 	bl	800b188 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f004 fa19 	bl	800b188 <USBD_LL_StallEP>
 8006d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d58:	e020      	b.n	8006d9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fca4 	bl	80076aa <USBD_CtlError>
              break;
 8006d62:	e01b      	b.n	8006d9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	885b      	ldrh	r3, [r3, #2]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10e      	bne.n	8006d8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <USBD_StdEPReq+0xfe>
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d008      	beq.n	8006d8a <USBD_StdEPReq+0xfe>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	88db      	ldrh	r3, [r3, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f004 f9ff 	bl	800b188 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd58 	bl	8007840 <USBD_CtlSendStatus>

              break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc88 	bl	80076aa <USBD_CtlError>
              break;
 8006d9a:	bf00      	nop
          }
          break;
 8006d9c:	e107      	b.n	8006fae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d002      	beq.n	8006db0 <USBD_StdEPReq+0x124>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d016      	beq.n	8006ddc <USBD_StdEPReq+0x150>
 8006dae:	e04b      	b.n	8006e48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <USBD_StdEPReq+0x146>
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d00a      	beq.n	8006dd2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f004 f9e1 	bl	800b188 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f004 f9dd 	bl	800b188 <USBD_LL_StallEP>
 8006dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd0:	e040      	b.n	8006e54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc68 	bl	80076aa <USBD_CtlError>
              break;
 8006dda:	e03b      	b.n	8006e54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d136      	bne.n	8006e52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f004 f9e7 	bl	800b1c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fd21 	bl	8007840 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fde2 	bl	80069cc <USBD_CoreFindEP>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e0c:	7b7b      	ldrb	r3, [r7, #13]
 8006e0e:	2bff      	cmp	r3, #255	; 0xff
 8006e10:	d01f      	beq.n	8006e52 <USBD_StdEPReq+0x1c6>
 8006e12:	7b7b      	ldrb	r3, [r7, #13]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11c      	bne.n	8006e52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e18:	7b7a      	ldrb	r2, [r7, #13]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e20:	7b7a      	ldrb	r2, [r7, #13]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32ae      	adds	r2, #174	; 0xae
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e30:	7b7a      	ldrb	r2, [r7, #13]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	; 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e46:	e004      	b.n	8006e52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc2d 	bl	80076aa <USBD_CtlError>
              break;
 8006e50:	e000      	b.n	8006e54 <USBD_StdEPReq+0x1c8>
              break;
 8006e52:	bf00      	nop
          }
          break;
 8006e54:	e0ab      	b.n	8006fae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d002      	beq.n	8006e68 <USBD_StdEPReq+0x1dc>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d032      	beq.n	8006ecc <USBD_StdEPReq+0x240>
 8006e66:	e097      	b.n	8006f98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <USBD_StdEPReq+0x1f2>
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d004      	beq.n	8006e7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc17 	bl	80076aa <USBD_CtlError>
                break;
 8006e7c:	e091      	b.n	8006fa2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	da0b      	bge.n	8006e9e <USBD_StdEPReq+0x212>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3310      	adds	r3, #16
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	e00b      	b.n	8006eb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc61 	bl	800778c <USBD_CtlSendData>
              break;
 8006eca:	e06a      	b.n	8006fa2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da11      	bge.n	8006ef8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	f003 020f 	and.w	r2, r3, #15
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d117      	bne.n	8006f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fbda 	bl	80076aa <USBD_CtlError>
                  break;
 8006ef6:	e054      	b.n	8006fa2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fbc7 	bl	80076aa <USBD_CtlError>
                  break;
 8006f1c:	e041      	b.n	8006fa2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da0b      	bge.n	8006f3e <USBD_StdEPReq+0x2b2>
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	3310      	adds	r3, #16
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	e00b      	b.n	8006f56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	3304      	adds	r3, #4
 8006f56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBD_StdEPReq+0x2d8>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d103      	bne.n	8006f6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e00e      	b.n	8006f8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f004 f947 	bl	800b204 <USBD_LL_IsStallEP>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e002      	b.n	8006f8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fbfb 	bl	800778c <USBD_CtlSendData>
              break;
 8006f96:	e004      	b.n	8006fa2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb85 	bl	80076aa <USBD_CtlError>
              break;
 8006fa0:	bf00      	nop
          }
          break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb7f 	bl	80076aa <USBD_CtlError>
          break;
 8006fac:	bf00      	nop
      }
      break;
 8006fae:	e005      	b.n	8006fbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb79 	bl	80076aa <USBD_CtlError>
      break;
 8006fb8:	e000      	b.n	8006fbc <USBD_StdEPReq+0x330>
      break;
 8006fba:	bf00      	nop
  }

  return ret;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b0e      	cmp	r3, #14
 8006fea:	f200 8152 	bhi.w	8007292 <USBD_GetDescriptor+0x2ca>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <USBD_GetDescriptor+0x2c>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007065 	.word	0x08007065
 8006ff8:	0800707d 	.word	0x0800707d
 8006ffc:	080070bd 	.word	0x080070bd
 8007000:	08007293 	.word	0x08007293
 8007004:	08007293 	.word	0x08007293
 8007008:	08007233 	.word	0x08007233
 800700c:	0800725f 	.word	0x0800725f
 8007010:	08007293 	.word	0x08007293
 8007014:	08007293 	.word	0x08007293
 8007018:	08007293 	.word	0x08007293
 800701c:	08007293 	.word	0x08007293
 8007020:	08007293 	.word	0x08007293
 8007024:	08007293 	.word	0x08007293
 8007028:	08007293 	.word	0x08007293
 800702c:	08007031 	.word	0x08007031
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	7c12      	ldrb	r2, [r2, #16]
 8007048:	f107 0108 	add.w	r1, r7, #8
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
 8007050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007052:	e126      	b.n	80072a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fb27 	bl	80076aa <USBD_CtlError>
        err++;
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	3301      	adds	r3, #1
 8007060:	72fb      	strb	r3, [r7, #11]
      break;
 8007062:	e11e      	b.n	80072a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 0108 	add.w	r1, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
      break;
 800707a:	e112      	b.n	80072a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7c1b      	ldrb	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10d      	bne.n	80070a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f107 0208 	add.w	r2, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800709e:	e100      	b.n	80072a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	f107 0208 	add.w	r2, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	2202      	movs	r2, #2
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e0f2      	b.n	80072a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	885b      	ldrh	r3, [r3, #2]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	f200 80ac 	bhi.w	8007220 <USBD_GetDescriptor+0x258>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBD_GetDescriptor+0x108>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e9 	.word	0x080070e9
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007185 	.word	0x08007185
 80070e0:	080071b9 	.word	0x080071b9
 80070e4:	080071ed 	.word	0x080071ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e091      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 facb 	bl	80076aa <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e089      	b.n	8007230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7c12      	ldrb	r2, [r2, #16]
 8007134:	f107 0108 	add.w	r1, r7, #8
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713e:	e077      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fab1 	bl	80076aa <USBD_CtlError>
            err++;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	3301      	adds	r3, #1
 800714c:	72fb      	strb	r3, [r7, #11]
          break;
 800714e:	e06f      	b.n	8007230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e05d      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa97 	bl	80076aa <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e055      	b.n	8007230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e043      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa7d 	bl	80076aa <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e03b      	b.n	8007230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e029      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa63 	bl	80076aa <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e021      	b.n	8007230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720e:	e00f      	b.n	8007230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa49 	bl	80076aa <USBD_CtlError>
            err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
          break;
 800721e:	e007      	b.n	8007230 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa41 	bl	80076aa <USBD_CtlError>
          err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800722e:	bf00      	nop
      }
      break;
 8007230:	e037      	b.n	80072a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7c1b      	ldrb	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	f107 0208 	add.w	r2, r7, #8
 8007246:	4610      	mov	r0, r2
 8007248:	4798      	blx	r3
 800724a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724c:	e029      	b.n	80072a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa2a 	bl	80076aa <USBD_CtlError>
        err++;
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	3301      	adds	r3, #1
 800725a:	72fb      	strb	r3, [r7, #11]
      break;
 800725c:	e021      	b.n	80072a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7c1b      	ldrb	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f107 0208 	add.w	r2, r7, #8
 8007272:	4610      	mov	r0, r2
 8007274:	4798      	blx	r3
 8007276:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	2207      	movs	r2, #7
 800727e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007280:	e00f      	b.n	80072a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa10 	bl	80076aa <USBD_CtlError>
        err++;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	3301      	adds	r3, #1
 800728e:	72fb      	strb	r3, [r7, #11]
      break;
 8007290:	e007      	b.n	80072a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa08 	bl	80076aa <USBD_CtlError>
      err++;
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	3301      	adds	r3, #1
 800729e:	72fb      	strb	r3, [r7, #11]
      break;
 80072a0:	bf00      	nop
  }

  if (err != 0U)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11e      	bne.n	80072e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	88db      	ldrh	r3, [r3, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d016      	beq.n	80072de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80072b0:	893b      	ldrh	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00e      	beq.n	80072d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88da      	ldrh	r2, [r3, #6]
 80072ba:	893b      	ldrh	r3, [r7, #8]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bf28      	it	cs
 80072c0:	4613      	movcs	r3, r2
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	461a      	mov	r2, r3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa5d 	bl	800778c <USBD_CtlSendData>
 80072d2:	e009      	b.n	80072e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9e7 	bl	80076aa <USBD_CtlError>
 80072dc:	e004      	b.n	80072e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 faae 	bl	8007840 <USBD_CtlSendStatus>
 80072e4:	e000      	b.n	80072e8 <USBD_GetDescriptor+0x320>
    return;
 80072e6:	bf00      	nop
  }
}
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	889b      	ldrh	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d131      	bne.n	8007366 <USBD_SetAddress+0x76>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d12d      	bne.n	8007366 <USBD_SetAddress+0x76>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d829      	bhi.n	8007366 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	885b      	ldrh	r3, [r3, #2]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d104      	bne.n	8007334 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9bc 	bl	80076aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	e01d      	b.n	8007370 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7bfa      	ldrb	r2, [r7, #15]
 8007338:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f003 ff8b 	bl	800b25c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa7a 	bl	8007840 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	e009      	b.n	8007370 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	e004      	b.n	8007370 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f99e 	bl	80076aa <USBD_CtlError>
  }
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	885b      	ldrh	r3, [r3, #2]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <USBD_SetConfig+0x150>)
 800738e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007390:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <USBD_SetConfig+0x150>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d905      	bls.n	80073a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f985 	bl	80076aa <USBD_CtlError>
    return USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e08c      	b.n	80074be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d002      	beq.n	80073b6 <USBD_SetConfig+0x3e>
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d029      	beq.n	8007408 <USBD_SetConfig+0x90>
 80073b4:	e075      	b.n	80074a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073b6:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <USBD_SetConfig+0x150>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073be:	4b42      	ldr	r3, [pc, #264]	; (80074c8 <USBD_SetConfig+0x150>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073c8:	4b3f      	ldr	r3, [pc, #252]	; (80074c8 <USBD_SetConfig+0x150>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fe ffbd 	bl	800634e <USBD_SetClassConfig>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f962 	bl	80076aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ee:	e065      	b.n	80074bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa25 	bl	8007840 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2203      	movs	r2, #3
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073fe:	e05d      	b.n	80074bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa1d 	bl	8007840 <USBD_CtlSendStatus>
      break;
 8007406:	e059      	b.n	80074bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007408:	4b2f      	ldr	r3, [pc, #188]	; (80074c8 <USBD_SetConfig+0x150>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d112      	bne.n	8007436 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007418:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <USBD_SetConfig+0x150>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007422:	4b29      	ldr	r3, [pc, #164]	; (80074c8 <USBD_SetConfig+0x150>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fe ffac 	bl	8006386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa06 	bl	8007840 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007434:	e042      	b.n	80074bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007436:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <USBD_SetConfig+0x150>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d02a      	beq.n	800749a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fe ff9a 	bl	8006386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007452:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <USBD_SetConfig+0x150>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800745c:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <USBD_SetConfig+0x150>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fe ff73 	bl	800634e <USBD_SetClassConfig>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f918 	bl	80076aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fe ff7f 	bl	8006386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007490:	e014      	b.n	80074bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9d4 	bl	8007840 <USBD_CtlSendStatus>
      break;
 8007498:	e010      	b.n	80074bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f9d0 	bl	8007840 <USBD_CtlSendStatus>
      break;
 80074a0:	e00c      	b.n	80074bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f900 	bl	80076aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <USBD_SetConfig+0x150>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fe ff68 	bl	8006386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074b6:	2303      	movs	r3, #3
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	bf00      	nop
  }

  return ret;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200001f8 	.word	0x200001f8

080074cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	88db      	ldrh	r3, [r3, #6]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d004      	beq.n	80074e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8e2 	bl	80076aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074e6:	e023      	b.n	8007530 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	dc02      	bgt.n	80074fa <USBD_GetConfig+0x2e>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc03      	bgt.n	8007500 <USBD_GetConfig+0x34>
 80074f8:	e015      	b.n	8007526 <USBD_GetConfig+0x5a>
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d00b      	beq.n	8007516 <USBD_GetConfig+0x4a>
 80074fe:	e012      	b.n	8007526 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3308      	adds	r3, #8
 800750a:	2201      	movs	r2, #1
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f93c 	bl	800778c <USBD_CtlSendData>
        break;
 8007514:	e00c      	b.n	8007530 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	2201      	movs	r2, #1
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f934 	bl	800778c <USBD_CtlSendData>
        break;
 8007524:	e004      	b.n	8007530 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f8be 	bl	80076aa <USBD_CtlError>
        break;
 800752e:	bf00      	nop
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007548:	b2db      	uxtb	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	2b02      	cmp	r3, #2
 800754e:	d81e      	bhi.n	800758e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	88db      	ldrh	r3, [r3, #6]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d004      	beq.n	8007562 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8a5 	bl	80076aa <USBD_CtlError>
        break;
 8007560:	e01a      	b.n	8007598 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f043 0202 	orr.w	r2, r3, #2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	330c      	adds	r3, #12
 8007582:	2202      	movs	r2, #2
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f900 	bl	800778c <USBD_CtlSendData>
      break;
 800758c:	e004      	b.n	8007598 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f88a 	bl	80076aa <USBD_CtlError>
      break;
 8007596:	bf00      	nop
  }
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d107      	bne.n	80075c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f940 	bl	8007840 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075c0:	e013      	b.n	80075ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d10b      	bne.n	80075e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	889b      	ldrh	r3, [r3, #4]
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f930 	bl	8007840 <USBD_CtlSendStatus>
}
 80075e0:	e003      	b.n	80075ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f860 	bl	80076aa <USBD_CtlError>
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	2b02      	cmp	r3, #2
 8007608:	d80b      	bhi.n	8007622 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d10c      	bne.n	800762c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f910 	bl	8007840 <USBD_CtlSendStatus>
      }
      break;
 8007620:	e004      	b.n	800762c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f840 	bl	80076aa <USBD_CtlError>
      break;
 800762a:	e000      	b.n	800762e <USBD_ClrFeature+0x3c>
      break;
 800762c:	bf00      	nop
  }
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff fa17 	bl	8006a94 <SWAPBYTE>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fa0a 	bl	8006a94 <SWAPBYTE>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff f9fd 	bl	8006a94 <SWAPBYTE>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	80da      	strh	r2, [r3, #6]
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f003 fd66 	bl	800b188 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f003 fd62 	bl	800b188 <USBD_LL_StallEP>
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d036      	beq.n	8007750 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f000 f836 	bl	8007758 <USBD_GetLen>
 80076ec:	4603      	mov	r3, r0
 80076ee:	3301      	adds	r3, #1
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4413      	add	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
  idx++;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	2203      	movs	r2, #3
 8007714:	701a      	strb	r2, [r3, #0]
  idx++;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	3301      	adds	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800771c:	e013      	b.n	8007746 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
    idx++;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	3301      	adds	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4413      	add	r3, r2
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	3301      	adds	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e7      	bne.n	800771e <USBD_GetString+0x52>
 800774e:	e000      	b.n	8007752 <USBD_GetString+0x86>
    return;
 8007750:	bf00      	nop
  }
}
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007768:	e005      	b.n	8007776 <USBD_GetLen+0x1e>
  {
    len++;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	3301      	adds	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3301      	adds	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f5      	bne.n	800776a <USBD_GetLen+0x12>
  }

  return len;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2202      	movs	r2, #2
 800779c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f003 fd71 	bl	800b29a <USBD_LL_Transmit>

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f003 fd60 	bl	800b29a <USBD_LL_Transmit>

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	2100      	movs	r1, #0
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f003 fd64 	bl	800b2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f003 fd53 	bl	800b2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2204      	movs	r2, #4
 800784c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007850:	2300      	movs	r3, #0
 8007852:	2200      	movs	r2, #0
 8007854:	2100      	movs	r1, #0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f003 fd1f 	bl	800b29a <USBD_LL_Transmit>

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2205      	movs	r2, #5
 8007872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007876:	2300      	movs	r3, #0
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f003 fd2d 	bl	800b2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a2:	f3ef 8305 	mrs	r3, IPSR
 80078a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ae:	f3ef 8310 	mrs	r3, PRIMASK
 80078b2:	607b      	str	r3, [r7, #4]
  return(result);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ba:	f3ef 8311 	mrs	r3, BASEPRI
 80078be:	603b      	str	r3, [r7, #0]
  return(result);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <osKernelInitialize+0x3a>
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <osKernelInitialize+0x64>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d103      	bne.n	80078d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80078ce:	f06f 0305 	mvn.w	r3, #5
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e00c      	b.n	80078f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <osKernelInitialize+0x64>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078de:	4b08      	ldr	r3, [pc, #32]	; (8007900 <osKernelInitialize+0x64>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e002      	b.n	80078f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295
 80078ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078f0:	68fb      	ldr	r3, [r7, #12]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	200001fc 	.word	0x200001fc

08007904 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800790a:	f3ef 8305 	mrs	r3, IPSR
 800790e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10f      	bne.n	8007936 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007916:	f3ef 8310 	mrs	r3, PRIMASK
 800791a:	607b      	str	r3, [r7, #4]
  return(result);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d105      	bne.n	800792e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007922:	f3ef 8311 	mrs	r3, BASEPRI
 8007926:	603b      	str	r3, [r7, #0]
  return(result);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <osKernelStart+0x3a>
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <osKernelStart+0x68>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d103      	bne.n	800793e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007936:	f06f 0305 	mvn.w	r3, #5
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e010      	b.n	8007960 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800793e:	4b0b      	ldr	r3, [pc, #44]	; (800796c <osKernelStart+0x68>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d109      	bne.n	800795a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007946:	f7ff ffa1 	bl	800788c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800794a:	4b08      	ldr	r3, [pc, #32]	; (800796c <osKernelStart+0x68>)
 800794c:	2202      	movs	r2, #2
 800794e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007950:	f001 fafe 	bl	8008f50 <vTaskStartScheduler>
      stat = osOK;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e002      	b.n	8007960 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800795a:	f04f 33ff 	mov.w	r3, #4294967295
 800795e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200001fc 	.word	0x200001fc

08007970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af04      	add	r7, sp, #16
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007980:	f3ef 8305 	mrs	r3, IPSR
 8007984:	61fb      	str	r3, [r7, #28]
  return(result);
 8007986:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 8090 	bne.w	8007aae <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798e:	f3ef 8310 	mrs	r3, PRIMASK
 8007992:	61bb      	str	r3, [r7, #24]
  return(result);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800799a:	f3ef 8311 	mrs	r3, BASEPRI
 800799e:	617b      	str	r3, [r7, #20]
  return(result);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <osThreadNew+0x3e>
 80079a6:	4b44      	ldr	r3, [pc, #272]	; (8007ab8 <osThreadNew+0x148>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d07f      	beq.n	8007aae <osThreadNew+0x13e>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d07c      	beq.n	8007aae <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80079b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80079ba:	2318      	movs	r3, #24
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d045      	beq.n	8007a5a <osThreadNew+0xea>
      if (attr->name != NULL) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <osThreadNew+0x6c>
        name = attr->name;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <osThreadNew+0x92>
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	2b38      	cmp	r3, #56	; 0x38
 80079f4:	d805      	bhi.n	8007a02 <osThreadNew+0x92>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <osThreadNew+0x96>
        return (NULL);
 8007a02:	2300      	movs	r3, #0
 8007a04:	e054      	b.n	8007ab0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	089b      	lsrs	r3, r3, #2
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <osThreadNew+0xcc>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2bbb      	cmp	r3, #187	; 0xbb
 8007a24:	d90a      	bls.n	8007a3c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d006      	beq.n	8007a3c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <osThreadNew+0xcc>
        mem = 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	623b      	str	r3, [r7, #32]
 8007a3a:	e010      	b.n	8007a5e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10c      	bne.n	8007a5e <osThreadNew+0xee>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d108      	bne.n	8007a5e <osThreadNew+0xee>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <osThreadNew+0xee>
          mem = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	623b      	str	r3, [r7, #32]
 8007a58:	e001      	b.n	8007a5e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d110      	bne.n	8007a86 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a6c:	9202      	str	r2, [sp, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f001 f872 	bl	8008b64 <xTaskCreateStatic>
 8007a80:	4603      	mov	r3, r0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e013      	b.n	8007aae <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f107 0310 	add.w	r3, r7, #16
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 f8c3 	bl	8008c2a <xTaskCreate>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d001      	beq.n	8007aae <osThreadNew+0x13e>
          hTask = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aae:	693b      	ldr	r3, [r7, #16]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3730      	adds	r7, #48	; 0x30
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200001fc 	.word	0x200001fc

08007abc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac4:	f3ef 8305 	mrs	r3, IPSR
 8007ac8:	613b      	str	r3, [r7, #16]
  return(result);
 8007aca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10f      	bne.n	8007af0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007adc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <osDelay+0x3c>
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <osDelay+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d103      	bne.n	8007af8 <osDelay+0x3c>
    stat = osErrorISR;
 8007af0:	f06f 0305 	mvn.w	r3, #5
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e007      	b.n	8007b08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f9ee 	bl	8008ee4 <vTaskDelay>
    }
  }

  return (stat);
 8007b08:	697b      	ldr	r3, [r7, #20]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	200001fc 	.word	0x200001fc

08007b18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	; 0x30
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b28:	f3ef 8305 	mrs	r3, IPSR
 8007b2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d16f      	bne.n	8007c14 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b34:	f3ef 8310 	mrs	r3, PRIMASK
 8007b38:	617b      	str	r3, [r7, #20]
  return(result);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b40:	f3ef 8311 	mrs	r3, BASEPRI
 8007b44:	613b      	str	r3, [r7, #16]
  return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <osMessageQueueNew+0x3c>
 8007b4c:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <osMessageQueueNew+0x108>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d05f      	beq.n	8007c14 <osMessageQueueNew+0xfc>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d05c      	beq.n	8007c14 <osMessageQueueNew+0xfc>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d059      	beq.n	8007c14 <osMessageQueueNew+0xfc>
    mem = -1;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d029      	beq.n	8007bc0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d012      	beq.n	8007b9a <osMessageQueueNew+0x82>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b4f      	cmp	r3, #79	; 0x4f
 8007b7a:	d90e      	bls.n	8007b9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d302      	bcc.n	8007b9a <osMessageQueueNew+0x82>
        mem = 1;
 8007b94:	2301      	movs	r3, #1
 8007b96:	623b      	str	r3, [r7, #32]
 8007b98:	e014      	b.n	8007bc4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d110      	bne.n	8007bc4 <osMessageQueueNew+0xac>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10c      	bne.n	8007bc4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d108      	bne.n	8007bc4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d104      	bne.n	8007bc4 <osMessageQueueNew+0xac>
          mem = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	e001      	b.n	8007bc4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d10b      	bne.n	8007be2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	9100      	str	r1, [sp, #0]
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa5b 	bl	8008094 <xQueueGenericCreateStatic>
 8007bde:	6278      	str	r0, [r7, #36]	; 0x24
 8007be0:	e008      	b.n	8007bf4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007be8:	2200      	movs	r2, #0
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fad3 	bl	8008198 <xQueueGenericCreate>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	e001      	b.n	8007c0c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007c0c:	69f9      	ldr	r1, [r7, #28]
 8007c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c10:	f000 ff4a 	bl	8008aa8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200001fc 	.word	0x200001fc

08007c24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08a      	sub	sp, #40	; 0x28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c3c:	f3ef 8305 	mrs	r3, IPSR
 8007c40:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c42:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10f      	bne.n	8007c68 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c48:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c54:	f3ef 8311 	mrs	r3, BASEPRI
 8007c58:	617b      	str	r3, [r7, #20]
  return(result);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02c      	beq.n	8007cba <osMessageQueuePut+0x96>
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <osMessageQueuePut+0xe0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d128      	bne.n	8007cba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <osMessageQueuePut+0x56>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <osMessageQueuePut+0x56>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007c7a:	f06f 0303 	mvn.w	r3, #3
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c80:	e039      	b.n	8007cf6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c86:	f107 0210 	add.w	r2, r7, #16
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	6a38      	ldr	r0, [r7, #32]
 8007c90:	f000 fbee 	bl	8008470 <xQueueGenericSendFromISR>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d003      	beq.n	8007ca2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c9a:	f06f 0302 	mvn.w	r3, #2
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ca0:	e029      	b.n	8007cf6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d026      	beq.n	8007cf6 <osMessageQueuePut+0xd2>
 8007ca8:	4b17      	ldr	r3, [pc, #92]	; (8007d08 <osMessageQueuePut+0xe4>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cb8:	e01d      	b.n	8007cf6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <osMessageQueuePut+0xa2>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d103      	bne.n	8007cce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007cc6:	f06f 0303 	mvn.w	r3, #3
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ccc:	e014      	b.n	8007cf8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007cce:	2300      	movs	r3, #0
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	6a38      	ldr	r0, [r7, #32]
 8007cd6:	f000 fac5 	bl	8008264 <xQueueGenericSend>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d00b      	beq.n	8007cf8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007ce6:	f06f 0301 	mvn.w	r3, #1
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
 8007cec:	e004      	b.n	8007cf8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007cee:	f06f 0302 	mvn.w	r3, #2
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	e000      	b.n	8007cf8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cf6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200001fc 	.word	0x200001fc
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d22:	f3ef 8305 	mrs	r3, IPSR
 8007d26:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d28:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10f      	bne.n	8007d4e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d32:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02c      	beq.n	8007da0 <osMessageQueueGet+0x94>
 8007d46:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <osMessageQueueGet+0xdc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d128      	bne.n	8007da0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <osMessageQueueGet+0x54>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <osMessageQueueGet+0x54>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007d60:	f06f 0303 	mvn.w	r3, #3
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d66:	e038      	b.n	8007dda <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007d6c:	f107 0310 	add.w	r3, r7, #16
 8007d70:	461a      	mov	r2, r3
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	6a38      	ldr	r0, [r7, #32]
 8007d76:	f000 fd01 	bl	800877c <xQueueReceiveFromISR>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d003      	beq.n	8007d88 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007d80:	f06f 0302 	mvn.w	r3, #2
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d86:	e028      	b.n	8007dda <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d025      	beq.n	8007dda <osMessageQueueGet+0xce>
 8007d8e:	4b17      	ldr	r3, [pc, #92]	; (8007dec <osMessageQueueGet+0xe0>)
 8007d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d9e:	e01c      	b.n	8007dda <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <osMessageQueueGet+0xa0>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007dac:	f06f 0303 	mvn.w	r3, #3
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
 8007db2:	e013      	b.n	8007ddc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	6a38      	ldr	r0, [r7, #32]
 8007dba:	f000 fbf9 	bl	80085b0 <xQueueReceive>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d00b      	beq.n	8007ddc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007dca:	f06f 0301 	mvn.w	r3, #1
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd0:	e004      	b.n	8007ddc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007dd2:	f06f 0302 	mvn.w	r3, #2
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd8:	e000      	b.n	8007ddc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200001fc 	.word	0x200001fc
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a07      	ldr	r2, [pc, #28]	; (8007e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a06      	ldr	r2, [pc, #24]	; (8007e20 <vApplicationGetIdleTaskMemory+0x30>)
 8007e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e0e:	601a      	str	r2, [r3, #0]
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000200 	.word	0x20000200
 8007e20:	200002bc 	.word	0x200002bc

08007e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a07      	ldr	r2, [pc, #28]	; (8007e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <vApplicationGetTimerTaskMemory+0x30>)
 8007e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	200006bc 	.word	0x200006bc
 8007e54:	20000778 	.word	0x20000778

08007e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f103 0208 	add.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0208 	add.w	r2, r3, #8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f103 0208 	add.w	r2, r3, #8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d103      	bne.n	8007f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e00c      	b.n	8007f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <vListInsert+0x2e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d2f6      	bcs.n	8007f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6892      	ldr	r2, [r2, #8]
 8007f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6852      	ldr	r2, [r2, #4]
 8007f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d103      	bne.n	8007fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
 8007fe8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007fee:	f002 f96d 	bl	800a2cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	441a      	add	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	3b01      	subs	r3, #1
 8008020:	68f9      	ldr	r1, [r7, #12]
 8008022:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d114      	bne.n	800806e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01a      	beq.n	8008082 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3310      	adds	r3, #16
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fa25 	bl	80094a0 <xTaskRemoveFromEventList>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <xQueueGenericReset+0xd0>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	e009      	b.n	8008082 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3310      	adds	r3, #16
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fef0 	bl	8007e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3324      	adds	r3, #36	; 0x24
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff feeb 	bl	8007e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008082:	f002 f957 	bl	800a334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008086:	2301      	movs	r3, #1
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	; 0x38
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10c      	bne.n	80080c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	b672      	cpsid	i
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	b662      	cpsie	i
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10c      	bne.n	80080e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	b672      	cpsid	i
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	b662      	cpsie	i
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <xQueueGenericCreateStatic+0x5a>
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <xQueueGenericCreateStatic+0x5e>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <xQueueGenericCreateStatic+0x60>
 80080f2:	2300      	movs	r3, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10c      	bne.n	8008112 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	b672      	cpsid	i
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	b662      	cpsie	i
 800810c:	623b      	str	r3, [r7, #32]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <xQueueGenericCreateStatic+0x8a>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <xQueueGenericCreateStatic+0x8e>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <xQueueGenericCreateStatic+0x90>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	b672      	cpsid	i
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	b662      	cpsie	i
 800813c:	61fb      	str	r3, [r7, #28]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008142:	2350      	movs	r3, #80	; 0x50
 8008144:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b50      	cmp	r3, #80	; 0x50
 800814a:	d00c      	beq.n	8008166 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	b672      	cpsid	i
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	b662      	cpsie	i
 8008160:	61bb      	str	r3, [r7, #24]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00d      	beq.n	800818e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800817a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4613      	mov	r3, r2
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f847 	bl	800821c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008190:	4618      	mov	r0, r3
 8008192:	3730      	adds	r7, #48	; 0x30
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10c      	bne.n	80081c6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e004      	b.n	80081dc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	3350      	adds	r3, #80	; 0x50
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 f99f 	bl	800a524 <pvPortMalloc>
 80081e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	3350      	adds	r3, #80	; 0x50
 80081f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f805 	bl	800821c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008212:	69bb      	ldr	r3, [r7, #24]
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e002      	b.n	800823e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800824a:	2101      	movs	r1, #1
 800824c:	69b8      	ldr	r0, [r7, #24]
 800824e:	f7ff feb7 	bl	8007fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08e      	sub	sp, #56	; 0x38
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008272:	2300      	movs	r3, #0
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <xQueueGenericSend+0x36>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <xQueueGenericSend+0x44>
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <xQueueGenericSend+0x48>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <xQueueGenericSend+0x4a>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10c      	bne.n	80082cc <xQueueGenericSend+0x68>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	b672      	cpsid	i
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	b662      	cpsie	i
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d103      	bne.n	80082da <xQueueGenericSend+0x76>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <xQueueGenericSend+0x7a>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericSend+0x7c>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <xQueueGenericSend+0x9a>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	b672      	cpsid	i
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	b662      	cpsie	i
 80082f8:	623b      	str	r3, [r7, #32]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082fe:	f001 fa99 	bl	8009834 <xTaskGetSchedulerState>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <xQueueGenericSend+0xaa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <xQueueGenericSend+0xae>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <xQueueGenericSend+0xb0>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <xQueueGenericSend+0xce>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	61fb      	str	r3, [r7, #28]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008332:	f001 ffcb 	bl	800a2cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	429a      	cmp	r2, r3
 8008340:	d302      	bcc.n	8008348 <xQueueGenericSend+0xe4>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d129      	bne.n	800839c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800834e:	f000 fa9b 	bl	8008888 <prvCopyDataToQueue>
 8008352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	d010      	beq.n	800837e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	4618      	mov	r0, r3
 8008362:	f001 f89d 	bl	80094a0 <xTaskRemoveFromEventList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d013      	beq.n	8008394 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800836c:	4b3f      	ldr	r3, [pc, #252]	; (800846c <xQueueGenericSend+0x208>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	e00a      	b.n	8008394 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008384:	4b39      	ldr	r3, [pc, #228]	; (800846c <xQueueGenericSend+0x208>)
 8008386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008394:	f001 ffce 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 8008398:	2301      	movs	r3, #1
 800839a:	e063      	b.n	8008464 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083a2:	f001 ffc7 	bl	800a334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e05c      	b.n	8008464 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d106      	bne.n	80083be <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b0:	f107 0314 	add.w	r3, r7, #20
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 f8d9 	bl	800956c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ba:	2301      	movs	r3, #1
 80083bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083be:	f001 ffb9 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c2:	f000 fe39 	bl	8009038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c6:	f001 ff81 	bl	800a2cc <vPortEnterCritical>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083d0:	b25b      	sxtb	r3, r3
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	d103      	bne.n	80083e0 <xQueueGenericSend+0x17c>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d103      	bne.n	80083f6 <xQueueGenericSend+0x192>
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f6:	f001 ff9d 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083fa:	1d3a      	adds	r2, r7, #4
 80083fc:	f107 0314 	add.w	r3, r7, #20
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f001 f8c8 	bl	8009598 <xTaskCheckForTimeOut>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d124      	bne.n	8008458 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800840e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008410:	f000 fb32 	bl	8008a78 <prvIsQueueFull>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d018      	beq.n	800844c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	3310      	adds	r3, #16
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f000 ffe8 	bl	80093f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800842a:	f000 fabd 	bl	80089a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800842e:	f000 fe11 	bl	8009054 <xTaskResumeAll>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	f47f af7c 	bne.w	8008332 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <xQueueGenericSend+0x208>)
 800843c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	e772      	b.n	8008332 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800844c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844e:	f000 faab 	bl	80089a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008452:	f000 fdff 	bl	8009054 <xTaskResumeAll>
 8008456:	e76c      	b.n	8008332 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845a:	f000 faa5 	bl	80089a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800845e:	f000 fdf9 	bl	8009054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008464:	4618      	mov	r0, r3
 8008466:	3738      	adds	r7, #56	; 0x38
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08e      	sub	sp, #56	; 0x38
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10c      	bne.n	80084a2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	b672      	cpsid	i
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	b662      	cpsie	i
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d103      	bne.n	80084b0 <xQueueGenericSendFromISR+0x40>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <xQueueGenericSendFromISR+0x44>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <xQueueGenericSendFromISR+0x46>
 80084b4:	2300      	movs	r3, #0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	623b      	str	r3, [r7, #32]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d103      	bne.n	80084e2 <xQueueGenericSendFromISR+0x72>
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <xQueueGenericSendFromISR+0x76>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <xQueueGenericSendFromISR+0x78>
 80084e6:	2300      	movs	r3, #0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	b672      	cpsid	i
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	b662      	cpsie	i
 8008500:	61fb      	str	r3, [r7, #28]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008506:	f001 ffc9 	bl	800a49c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800850a:	f3ef 8211 	mrs	r2, BASEPRI
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	b672      	cpsid	i
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	b662      	cpsie	i
 8008522:	61ba      	str	r2, [r7, #24]
 8008524:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008526:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xQueueGenericSendFromISR+0xcc>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d12c      	bne.n	8008596 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800854c:	f000 f99c 	bl	8008888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008550:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d112      	bne.n	8008580 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	4618      	mov	r0, r3
 8008568:	f000 ff9a 	bl	80094a0 <xTaskRemoveFromEventList>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e007      	b.n	8008590 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008584:	3301      	adds	r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	b25a      	sxtb	r2, r3
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008590:	2301      	movs	r3, #1
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008594:	e001      	b.n	800859a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008596:	2300      	movs	r3, #0
 8008598:	637b      	str	r3, [r7, #52]	; 0x34
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3738      	adds	r7, #56	; 0x38
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	; 0x30
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10c      	bne.n	80085e4 <xQueueReceive+0x34>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	b672      	cpsid	i
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	b662      	cpsie	i
 80085de:	623b      	str	r3, [r7, #32]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <xQueueReceive+0x42>
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <xQueueReceive+0x46>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <xQueueReceive+0x48>
 80085f6:	2300      	movs	r3, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10c      	bne.n	8008616 <xQueueReceive+0x66>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	b672      	cpsid	i
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	b662      	cpsie	i
 8008610:	61fb      	str	r3, [r7, #28]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008616:	f001 f90d 	bl	8009834 <xTaskGetSchedulerState>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <xQueueReceive+0x76>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <xQueueReceive+0x7a>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <xQueueReceive+0x7c>
 800862a:	2300      	movs	r3, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10c      	bne.n	800864a <xQueueReceive+0x9a>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	b672      	cpsid	i
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	b662      	cpsie	i
 8008644:	61bb      	str	r3, [r7, #24]
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800864a:	f001 fe3f 	bl	800a2cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01f      	beq.n	800869a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865e:	f000 f97d 	bl	800895c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00f      	beq.n	8008692 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	3310      	adds	r3, #16
 8008676:	4618      	mov	r0, r3
 8008678:	f000 ff12 	bl	80094a0 <xTaskRemoveFromEventList>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008682:	4b3d      	ldr	r3, [pc, #244]	; (8008778 <xQueueReceive+0x1c8>)
 8008684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008692:	f001 fe4f 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 8008696:	2301      	movs	r3, #1
 8008698:	e069      	b.n	800876e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086a0:	f001 fe48 	bl	800a334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e062      	b.n	800876e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086ae:	f107 0310 	add.w	r3, r7, #16
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 ff5a 	bl	800956c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086bc:	f001 fe3a 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086c0:	f000 fcba 	bl	8009038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086c4:	f001 fe02 	bl	800a2cc <vPortEnterCritical>
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ce:	b25b      	sxtb	r3, r3
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d103      	bne.n	80086de <xQueueReceive+0x12e>
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d103      	bne.n	80086f4 <xQueueReceive+0x144>
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086f4:	f001 fe1e 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086f8:	1d3a      	adds	r2, r7, #4
 80086fa:	f107 0310 	add.w	r3, r7, #16
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ff49 	bl	8009598 <xTaskCheckForTimeOut>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d123      	bne.n	8008754 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f000 f99d 	bl	8008a4c <prvIsQueueEmpty>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d017      	beq.n	8008748 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fe69 	bl	80093f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008728:	f000 f93e 	bl	80089a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800872c:	f000 fc92 	bl	8009054 <xTaskResumeAll>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d189      	bne.n	800864a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <xQueueReceive+0x1c8>)
 8008738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	e780      	b.n	800864a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f000 f92d 	bl	80089a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800874e:	f000 fc81 	bl	8009054 <xTaskResumeAll>
 8008752:	e77a      	b.n	800864a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008756:	f000 f927 	bl	80089a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800875a:	f000 fc7b 	bl	8009054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800875e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008760:	f000 f974 	bl	8008a4c <prvIsQueueEmpty>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	f43f af6f 	beq.w	800864a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800876c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800876e:	4618      	mov	r0, r3
 8008770:	3730      	adds	r7, #48	; 0x30
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08e      	sub	sp, #56	; 0x38
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	623b      	str	r3, [r7, #32]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <xQueueReceiveFromISR+0x3e>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <xQueueReceiveFromISR+0x42>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueReceiveFromISR+0x44>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10c      	bne.n	80087de <xQueueReceiveFromISR+0x62>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	61fb      	str	r3, [r7, #28]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087de:	f001 fe5d 	bl	800a49c <vPortValidateInterruptPriority>
	__asm volatile
 80087e2:	f3ef 8211 	mrs	r2, BASEPRI
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	b672      	cpsid	i
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	b662      	cpsie	i
 80087fa:	61ba      	str	r2, [r7, #24]
 80087fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d02f      	beq.n	800886e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881c:	f000 f89e 	bl	800895c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	1e5a      	subs	r2, r3, #1
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008830:	d112      	bne.n	8008858 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d016      	beq.n	8008868 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	3310      	adds	r3, #16
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fe2e 	bl	80094a0 <xTaskRemoveFromEventList>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00e      	beq.n	8008868 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e007      	b.n	8008868 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800885c:	3301      	adds	r3, #1
 800885e:	b2db      	uxtb	r3, r3
 8008860:	b25a      	sxtb	r2, r3
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008868:	2301      	movs	r3, #1
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
 800886c:	e001      	b.n	8008872 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f383 8811 	msr	BASEPRI, r3
}
 800887c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008880:	4618      	mov	r0, r3
 8008882:	3738      	adds	r7, #56	; 0x38
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10d      	bne.n	80088c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d14d      	bne.n	800894a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 ffdc 	bl	8009870 <xTaskPriorityDisinherit>
 80088b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	609a      	str	r2, [r3, #8]
 80088c0:	e043      	b.n	800894a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d119      	bne.n	80088fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6858      	ldr	r0, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	461a      	mov	r2, r3
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	f002 fdf2 	bl	800b4bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d32b      	bcc.n	800894a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	e026      	b.n	800894a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68d8      	ldr	r0, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	461a      	mov	r2, r3
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	f002 fdd8 	bl	800b4bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	425b      	negs	r3, r3
 8008916:	441a      	add	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d207      	bcs.n	8008938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008930:	425b      	negs	r3, r3
 8008932:	441a      	add	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d105      	bne.n	800894a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	3b01      	subs	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008952:	697b      	ldr	r3, [r7, #20]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	441a      	add	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	d303      	bcc.n	8008990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68d9      	ldr	r1, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	461a      	mov	r2, r3
 800899a:	6838      	ldr	r0, [r7, #0]
 800899c:	f002 fd8e 	bl	800b4bc <memcpy>
	}
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089b0:	f001 fc8c 	bl	800a2cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089bc:	e011      	b.n	80089e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d012      	beq.n	80089ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3324      	adds	r3, #36	; 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fd68 	bl	80094a0 <xTaskRemoveFromEventList>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089d6:	f000 fe45 	bl	8009664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	3b01      	subs	r3, #1
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dce9      	bgt.n	80089be <prvUnlockQueue+0x16>
 80089ea:	e000      	b.n	80089ee <prvUnlockQueue+0x46>
					break;
 80089ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089f6:	f001 fc9d 	bl	800a334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089fa:	f001 fc67 	bl	800a2cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a06:	e011      	b.n	8008a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d012      	beq.n	8008a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3310      	adds	r3, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fd43 	bl	80094a0 <xTaskRemoveFromEventList>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a20:	f000 fe20 	bl	8009664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dce9      	bgt.n	8008a08 <prvUnlockQueue+0x60>
 8008a34:	e000      	b.n	8008a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a40:	f001 fc78 	bl	800a334 <vPortExitCritical>
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a54:	f001 fc3a 	bl	800a2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e001      	b.n	8008a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a6a:	f001 fc63 	bl	800a334 <vPortExitCritical>

	return xReturn;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a80:	f001 fc24 	bl	800a2cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d102      	bne.n	8008a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e001      	b.n	8008a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a9a:	f001 fc4b 	bl	800a334 <vPortExitCritical>

	return xReturn;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e014      	b.n	8008ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ab8:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ac4:	490c      	ldr	r1, [pc, #48]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ada:	e006      	b.n	8008aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	d9e7      	bls.n	8008ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000f78 	.word	0x20000f78

08008afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b0c:	f001 fbde 	bl	800a2cc <vPortEnterCritical>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b16:	b25b      	sxtb	r3, r3
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d103      	bne.n	8008b26 <vQueueWaitForMessageRestricted+0x2a>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	d103      	bne.n	8008b3c <vQueueWaitForMessageRestricted+0x40>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b3c:	f001 fbfa 	bl	800a334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fc77 	bl	8009444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b56:	6978      	ldr	r0, [r7, #20]
 8008b58:	f7ff ff26 	bl	80089a8 <prvUnlockQueue>
	}
 8008b5c:	bf00      	nop
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10c      	bne.n	8008b92 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	b672      	cpsid	i
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	b662      	cpsie	i
 8008b8c:	623b      	str	r3, [r7, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10c      	bne.n	8008bb2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	b672      	cpsid	i
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	b662      	cpsie	i
 8008bac:	61fb      	str	r3, [r7, #28]
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bb2:	23bc      	movs	r3, #188	; 0xbc
 8008bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2bbc      	cmp	r3, #188	; 0xbc
 8008bba:	d00c      	beq.n	8008bd6 <xTaskCreateStatic+0x72>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	b672      	cpsid	i
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	b662      	cpsie	i
 8008bd0:	61bb      	str	r3, [r7, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01e      	beq.n	8008c1c <xTaskCreateStatic+0xb8>
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01b      	beq.n	8008c1c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 f850 	bl	8008cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c16:	f000 f8f5 	bl	8008e04 <prvAddNewTaskToReadyList>
 8008c1a:	e001      	b.n	8008c20 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c20:	697b      	ldr	r3, [r7, #20]
	}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3728      	adds	r7, #40	; 0x28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08c      	sub	sp, #48	; 0x30
 8008c2e:	af04      	add	r7, sp, #16
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fc70 	bl	800a524 <pvPortMalloc>
 8008c44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00e      	beq.n	8008c6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c4c:	20bc      	movs	r0, #188	; 0xbc
 8008c4e:	f001 fc69 	bl	800a524 <pvPortMalloc>
 8008c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c60:	e005      	b.n	8008c6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f001 fd28 	bl	800a6b8 <vPortFree>
 8008c68:	e001      	b.n	8008c6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d017      	beq.n	8008ca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9303      	str	r3, [sp, #12]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f80e 	bl	8008cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c98:	69f8      	ldr	r0, [r7, #28]
 8008c9a:	f000 f8b3 	bl	8008e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e002      	b.n	8008caa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008caa:	69bb      	ldr	r3, [r7, #24]
	}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3720      	adds	r7, #32
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	461a      	mov	r2, r3
 8008ccc:	21a5      	movs	r1, #165	; 0xa5
 8008cce:	f002 fc03 	bl	800b4d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008cdc:	440b      	add	r3, r1
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	b672      	cpsid	i
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	b662      	cpsie	i
 8008d0a:	617b      	str	r3, [r7, #20]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01f      	beq.n	8008d56 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d16:	2300      	movs	r3, #0
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	e012      	b.n	8008d42 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	4413      	add	r3, r2
 8008d22:	7819      	ldrb	r1, [r3, #0]
 8008d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	4413      	add	r3, r2
 8008d2a:	3334      	adds	r3, #52	; 0x34
 8008d2c:	460a      	mov	r2, r1
 8008d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b0f      	cmp	r3, #15
 8008d46:	d9e9      	bls.n	8008d1c <prvInitialiseNewTask+0x68>
 8008d48:	e000      	b.n	8008d4c <prvInitialiseNewTask+0x98>
			{
				break;
 8008d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d54:	e003      	b.n	8008d5e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	2b37      	cmp	r3, #55	; 0x37
 8008d62:	d901      	bls.n	8008d68 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d64:	2337      	movs	r3, #55	; 0x37
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	2200      	movs	r2, #0
 8008d78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff f88a 	bl	8007e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	3318      	adds	r3, #24
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff f885 	bl	8007e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	3354      	adds	r3, #84	; 0x54
 8008db8:	2260      	movs	r2, #96	; 0x60
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 fb8b 	bl	800b4d8 <memset>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	4a0c      	ldr	r2, [pc, #48]	; (8008df8 <prvInitialiseNewTask+0x144>)
 8008dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <prvInitialiseNewTask+0x148>)
 8008dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	4a0b      	ldr	r2, [pc, #44]	; (8008e00 <prvInitialiseNewTask+0x14c>)
 8008dd2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	69b8      	ldr	r0, [r7, #24]
 8008dda:	f001 f96b 	bl	800a0b4 <pxPortInitialiseStack>
 8008dde:	4602      	mov	r2, r0
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df0:	bf00      	nop
 8008df2:	3720      	adds	r7, #32
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	0800b8e8 	.word	0x0800b8e8
 8008dfc:	0800b908 	.word	0x0800b908
 8008e00:	0800b8c8 	.word	0x0800b8c8

08008e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e0c:	f001 fa5e 	bl	800a2cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e10:	4b2d      	ldr	r3, [pc, #180]	; (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	4a2c      	ldr	r2, [pc, #176]	; (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e1a:	4b2c      	ldr	r3, [pc, #176]	; (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e22:	4a2a      	ldr	r2, [pc, #168]	; (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e28:	4b27      	ldr	r3, [pc, #156]	; (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d110      	bne.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e30:	f000 fc3c 	bl	80096ac <prvInitialiseTaskLists>
 8008e34:	e00d      	b.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e36:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <prvAddNewTaskToReadyList+0xcc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e3e:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d802      	bhi.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e4c:	4a1f      	ldr	r2, [pc, #124]	; (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e52:	4b20      	ldr	r3, [pc, #128]	; (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3301      	adds	r3, #1
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e5c:	4b1d      	ldr	r3, [pc, #116]	; (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <prvAddNewTaskToReadyList+0xd4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d903      	bls.n	8008e78 <prvAddNewTaskToReadyList+0x74>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <prvAddNewTaskToReadyList+0xd4>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <prvAddNewTaskToReadyList+0xd8>)
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7ff f80f 	bl	8007eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e94:	f001 fa4e 	bl	800a334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <prvAddNewTaskToReadyList+0xcc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00e      	beq.n	8008ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d207      	bcs.n	8008ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <prvAddNewTaskToReadyList+0xdc>)
 8008eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	2000148c 	.word	0x2000148c
 8008ecc:	20000fb8 	.word	0x20000fb8
 8008ed0:	20001498 	.word	0x20001498
 8008ed4:	200014a8 	.word	0x200014a8
 8008ed8:	20001494 	.word	0x20001494
 8008edc:	20000fbc 	.word	0x20000fbc
 8008ee0:	e000ed04 	.word	0xe000ed04

08008ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d019      	beq.n	8008f2a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <vTaskDelay+0x64>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00c      	beq.n	8008f18 <vTaskDelay+0x34>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	b672      	cpsid	i
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	b662      	cpsie	i
 8008f12:	60bb      	str	r3, [r7, #8]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f18:	f000 f88e 	bl	8009038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fd18 	bl	8009954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f24:	f000 f896 	bl	8009054 <xTaskResumeAll>
 8008f28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <vTaskDelay+0x68>)
 8008f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	200014b4 	.word	0x200014b4
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f5e:	463a      	mov	r2, r7
 8008f60:	1d39      	adds	r1, r7, #4
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe ff42 	bl	8007df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	4926      	ldr	r1, [pc, #152]	; (8009018 <vTaskStartScheduler+0xc8>)
 8008f80:	4826      	ldr	r0, [pc, #152]	; (800901c <vTaskStartScheduler+0xcc>)
 8008f82:	f7ff fdef 	bl	8008b64 <xTaskCreateStatic>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4a25      	ldr	r2, [pc, #148]	; (8009020 <vTaskStartScheduler+0xd0>)
 8008f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f8c:	4b24      	ldr	r3, [pc, #144]	; (8009020 <vTaskStartScheduler+0xd0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e001      	b.n	8008f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d102      	bne.n	8008faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fa4:	f000 fd2a 	bl	80099fc <xTimerCreateTimerTask>
 8008fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d11d      	bne.n	8008fec <vTaskStartScheduler+0x9c>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	b672      	cpsid	i
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	b662      	cpsie	i
 8008fc4:	613b      	str	r3, [r7, #16]
}
 8008fc6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fc8:	4b16      	ldr	r3, [pc, #88]	; (8009024 <vTaskStartScheduler+0xd4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3354      	adds	r3, #84	; 0x54
 8008fce:	4a16      	ldr	r2, [pc, #88]	; (8009028 <vTaskStartScheduler+0xd8>)
 8008fd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fd2:	4b16      	ldr	r3, [pc, #88]	; (800902c <vTaskStartScheduler+0xdc>)
 8008fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <vTaskStartScheduler+0xe0>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <vTaskStartScheduler+0xe4>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fe6:	f001 f8f3 	bl	800a1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fea:	e010      	b.n	800900e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d10c      	bne.n	800900e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	b672      	cpsid	i
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	b662      	cpsie	i
 8009008:	60fb      	str	r3, [r7, #12]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <vTaskStartScheduler+0xbc>
}
 800900e:	bf00      	nop
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	0800b7e8 	.word	0x0800b7e8
 800901c:	0800967d 	.word	0x0800967d
 8009020:	200014b0 	.word	0x200014b0
 8009024:	20000fb8 	.word	0x20000fb8
 8009028:	20000110 	.word	0x20000110
 800902c:	200014ac 	.word	0x200014ac
 8009030:	20001498 	.word	0x20001498
 8009034:	20001490 	.word	0x20001490

08009038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800903c:	4b04      	ldr	r3, [pc, #16]	; (8009050 <vTaskSuspendAll+0x18>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	4a03      	ldr	r2, [pc, #12]	; (8009050 <vTaskSuspendAll+0x18>)
 8009044:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	200014b4 	.word	0x200014b4

08009054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009062:	4b43      	ldr	r3, [pc, #268]	; (8009170 <xTaskResumeAll+0x11c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10c      	bne.n	8009084 <xTaskResumeAll+0x30>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	b672      	cpsid	i
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	b662      	cpsie	i
 800907e:	603b      	str	r3, [r7, #0]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009084:	f001 f922 	bl	800a2cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009088:	4b39      	ldr	r3, [pc, #228]	; (8009170 <xTaskResumeAll+0x11c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3b01      	subs	r3, #1
 800908e:	4a38      	ldr	r2, [pc, #224]	; (8009170 <xTaskResumeAll+0x11c>)
 8009090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009092:	4b37      	ldr	r3, [pc, #220]	; (8009170 <xTaskResumeAll+0x11c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d162      	bne.n	8009160 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800909a:	4b36      	ldr	r3, [pc, #216]	; (8009174 <xTaskResumeAll+0x120>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d05e      	beq.n	8009160 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090a2:	e02f      	b.n	8009104 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a4:	4b34      	ldr	r3, [pc, #208]	; (8009178 <xTaskResumeAll+0x124>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3318      	adds	r3, #24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe ff5b 	bl	8007f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe ff56 	bl	8007f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4b2d      	ldr	r3, [pc, #180]	; (800917c <xTaskResumeAll+0x128>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d903      	bls.n	80090d4 <xTaskResumeAll+0x80>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a2a      	ldr	r2, [pc, #168]	; (800917c <xTaskResumeAll+0x128>)
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4a27      	ldr	r2, [pc, #156]	; (8009180 <xTaskResumeAll+0x12c>)
 80090e2:	441a      	add	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f7fe fee1 	bl	8007eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f4:	4b23      	ldr	r3, [pc, #140]	; (8009184 <xTaskResumeAll+0x130>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d302      	bcc.n	8009104 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80090fe:	4b22      	ldr	r3, [pc, #136]	; (8009188 <xTaskResumeAll+0x134>)
 8009100:	2201      	movs	r2, #1
 8009102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009104:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <xTaskResumeAll+0x124>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1cb      	bne.n	80090a4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009112:	f000 fb6f 	bl	80097f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009116:	4b1d      	ldr	r3, [pc, #116]	; (800918c <xTaskResumeAll+0x138>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d010      	beq.n	8009144 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009122:	f000 f847 	bl	80091b4 <xTaskIncrementTick>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800912c:	4b16      	ldr	r3, [pc, #88]	; (8009188 <xTaskResumeAll+0x134>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3b01      	subs	r3, #1
 8009136:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f1      	bne.n	8009122 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <xTaskResumeAll+0x138>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009144:	4b10      	ldr	r3, [pc, #64]	; (8009188 <xTaskResumeAll+0x134>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800914c:	2301      	movs	r3, #1
 800914e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <xTaskResumeAll+0x13c>)
 8009152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009160:	f001 f8e8 	bl	800a334 <vPortExitCritical>

	return xAlreadyYielded;
 8009164:	68bb      	ldr	r3, [r7, #8]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	200014b4 	.word	0x200014b4
 8009174:	2000148c 	.word	0x2000148c
 8009178:	2000144c 	.word	0x2000144c
 800917c:	20001494 	.word	0x20001494
 8009180:	20000fbc 	.word	0x20000fbc
 8009184:	20000fb8 	.word	0x20000fb8
 8009188:	200014a0 	.word	0x200014a0
 800918c:	2000149c 	.word	0x2000149c
 8009190:	e000ed04 	.word	0xe000ed04

08009194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <xTaskGetTickCount+0x1c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091a0:	687b      	ldr	r3, [r7, #4]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20001490 	.word	0x20001490

080091b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091be:	4b50      	ldr	r3, [pc, #320]	; (8009300 <xTaskIncrementTick+0x14c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 808b 	bne.w	80092de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091c8:	4b4e      	ldr	r3, [pc, #312]	; (8009304 <xTaskIncrementTick+0x150>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091d0:	4a4c      	ldr	r2, [pc, #304]	; (8009304 <xTaskIncrementTick+0x150>)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d122      	bne.n	8009222 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80091dc:	4b4a      	ldr	r3, [pc, #296]	; (8009308 <xTaskIncrementTick+0x154>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00c      	beq.n	8009200 <xTaskIncrementTick+0x4c>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	603b      	str	r3, [r7, #0]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <xTaskIncrementTick+0x4a>
 8009200:	4b41      	ldr	r3, [pc, #260]	; (8009308 <xTaskIncrementTick+0x154>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	4b41      	ldr	r3, [pc, #260]	; (800930c <xTaskIncrementTick+0x158>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a3f      	ldr	r2, [pc, #252]	; (8009308 <xTaskIncrementTick+0x154>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	4a3f      	ldr	r2, [pc, #252]	; (800930c <xTaskIncrementTick+0x158>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	4b3e      	ldr	r3, [pc, #248]	; (8009310 <xTaskIncrementTick+0x15c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	4a3d      	ldr	r2, [pc, #244]	; (8009310 <xTaskIncrementTick+0x15c>)
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	f000 fae9 	bl	80097f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009222:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <xTaskIncrementTick+0x160>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	429a      	cmp	r2, r3
 800922a:	d349      	bcc.n	80092c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800922c:	4b36      	ldr	r3, [pc, #216]	; (8009308 <xTaskIncrementTick+0x154>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009236:	4b37      	ldr	r3, [pc, #220]	; (8009314 <xTaskIncrementTick+0x160>)
 8009238:	f04f 32ff 	mov.w	r2, #4294967295
 800923c:	601a      	str	r2, [r3, #0]
					break;
 800923e:	e03f      	b.n	80092c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009240:	4b31      	ldr	r3, [pc, #196]	; (8009308 <xTaskIncrementTick+0x154>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d203      	bcs.n	8009260 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009258:	4a2e      	ldr	r2, [pc, #184]	; (8009314 <xTaskIncrementTick+0x160>)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800925e:	e02f      	b.n	80092c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fe81 	bl	8007f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3318      	adds	r3, #24
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fe78 	bl	8007f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	4b25      	ldr	r3, [pc, #148]	; (8009318 <xTaskIncrementTick+0x164>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d903      	bls.n	8009290 <xTaskIncrementTick+0xdc>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4a22      	ldr	r2, [pc, #136]	; (8009318 <xTaskIncrementTick+0x164>)
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4a1f      	ldr	r2, [pc, #124]	; (800931c <xTaskIncrementTick+0x168>)
 800929e:	441a      	add	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fe fe03 	bl	8007eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	4b1b      	ldr	r3, [pc, #108]	; (8009320 <xTaskIncrementTick+0x16c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d3b8      	bcc.n	800922c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092be:	e7b5      	b.n	800922c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092c0:	4b17      	ldr	r3, [pc, #92]	; (8009320 <xTaskIncrementTick+0x16c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	4915      	ldr	r1, [pc, #84]	; (800931c <xTaskIncrementTick+0x168>)
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d907      	bls.n	80092e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e004      	b.n	80092e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <xTaskIncrementTick+0x170>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	4a0f      	ldr	r2, [pc, #60]	; (8009324 <xTaskIncrementTick+0x170>)
 80092e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <xTaskIncrementTick+0x174>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092f4:	697b      	ldr	r3, [r7, #20]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200014b4 	.word	0x200014b4
 8009304:	20001490 	.word	0x20001490
 8009308:	20001444 	.word	0x20001444
 800930c:	20001448 	.word	0x20001448
 8009310:	200014a4 	.word	0x200014a4
 8009314:	200014ac 	.word	0x200014ac
 8009318:	20001494 	.word	0x20001494
 800931c:	20000fbc 	.word	0x20000fbc
 8009320:	20000fb8 	.word	0x20000fb8
 8009324:	2000149c 	.word	0x2000149c
 8009328:	200014a0 	.word	0x200014a0

0800932c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009332:	4b2b      	ldr	r3, [pc, #172]	; (80093e0 <vTaskSwitchContext+0xb4>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800933a:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <vTaskSwitchContext+0xb8>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009340:	e048      	b.n	80093d4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009342:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <vTaskSwitchContext+0xb8>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009348:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <vTaskSwitchContext+0xbc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	e012      	b.n	8009376 <vTaskSwitchContext+0x4a>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10c      	bne.n	8009370 <vTaskSwitchContext+0x44>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	b672      	cpsid	i
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	b662      	cpsie	i
 800936a:	607b      	str	r3, [r7, #4]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <vTaskSwitchContext+0x42>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3b01      	subs	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	491d      	ldr	r1, [pc, #116]	; (80093ec <vTaskSwitchContext+0xc0>)
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0e2      	beq.n	8009350 <vTaskSwitchContext+0x24>
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4a15      	ldr	r2, [pc, #84]	; (80093ec <vTaskSwitchContext+0xc0>)
 8009396:	4413      	add	r3, r2
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	605a      	str	r2, [r3, #4]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	3308      	adds	r3, #8
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d104      	bne.n	80093ba <vTaskSwitchContext+0x8e>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <vTaskSwitchContext+0xc4>)
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <vTaskSwitchContext+0xbc>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093ca:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <vTaskSwitchContext+0xc4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3354      	adds	r3, #84	; 0x54
 80093d0:	4a08      	ldr	r2, [pc, #32]	; (80093f4 <vTaskSwitchContext+0xc8>)
 80093d2:	6013      	str	r3, [r2, #0]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	200014b4 	.word	0x200014b4
 80093e4:	200014a0 	.word	0x200014a0
 80093e8:	20001494 	.word	0x20001494
 80093ec:	20000fbc 	.word	0x20000fbc
 80093f0:	20000fb8 	.word	0x20000fb8
 80093f4:	20000110 	.word	0x20000110

080093f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10c      	bne.n	8009422 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	60fb      	str	r3, [r7, #12]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009422:	4b07      	ldr	r3, [pc, #28]	; (8009440 <vTaskPlaceOnEventList+0x48>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3318      	adds	r3, #24
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7fe fd65 	bl	8007efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009430:	2101      	movs	r1, #1
 8009432:	6838      	ldr	r0, [r7, #0]
 8009434:	f000 fa8e 	bl	8009954 <prvAddCurrentTaskToDelayedList>
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000fb8 	.word	0x20000fb8

08009444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10c      	bne.n	8009470 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	b672      	cpsid	i
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	b662      	cpsie	i
 800946a:	617b      	str	r3, [r7, #20]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vTaskPlaceOnEventListRestricted+0x58>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3318      	adds	r3, #24
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7fe fd1a 	bl	8007eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f000 fa61 	bl	8009954 <prvAddCurrentTaskToDelayedList>
	}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000fb8 	.word	0x20000fb8

080094a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10c      	bne.n	80094d0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	b672      	cpsid	i
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	b662      	cpsie	i
 80094ca:	60fb      	str	r3, [r7, #12]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3318      	adds	r3, #24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fd49 	bl	8007f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094da:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d11d      	bne.n	800951e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	3304      	adds	r3, #4
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fd40 	bl	8007f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4b19      	ldr	r3, [pc, #100]	; (8009558 <xTaskRemoveFromEventList+0xb8>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d903      	bls.n	8009500 <xTaskRemoveFromEventList+0x60>
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	4a16      	ldr	r2, [pc, #88]	; (8009558 <xTaskRemoveFromEventList+0xb8>)
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4a13      	ldr	r2, [pc, #76]	; (800955c <xTaskRemoveFromEventList+0xbc>)
 800950e:	441a      	add	r2, r3
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f7fe fccb 	bl	8007eb2 <vListInsertEnd>
 800951c:	e005      	b.n	800952a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3318      	adds	r3, #24
 8009522:	4619      	mov	r1, r3
 8009524:	480e      	ldr	r0, [pc, #56]	; (8009560 <xTaskRemoveFromEventList+0xc0>)
 8009526:	f7fe fcc4 	bl	8007eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <xTaskRemoveFromEventList+0xc4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	429a      	cmp	r2, r3
 8009536:	d905      	bls.n	8009544 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <xTaskRemoveFromEventList+0xc8>)
 800953e:	2201      	movs	r2, #1
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	e001      	b.n	8009548 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009544:	2300      	movs	r3, #0
 8009546:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009548:	697b      	ldr	r3, [r7, #20]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200014b4 	.word	0x200014b4
 8009558:	20001494 	.word	0x20001494
 800955c:	20000fbc 	.word	0x20000fbc
 8009560:	2000144c 	.word	0x2000144c
 8009564:	20000fb8 	.word	0x20000fb8
 8009568:	200014a0 	.word	0x200014a0

0800956c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <vTaskInternalSetTimeOutState+0x24>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <vTaskInternalSetTimeOutState+0x28>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	200014a4 	.word	0x200014a4
 8009594:	20001490 	.word	0x20001490

08009598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10c      	bne.n	80095c2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	b672      	cpsid	i
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	b662      	cpsie	i
 80095bc:	613b      	str	r3, [r7, #16]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10c      	bne.n	80095e2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	b672      	cpsid	i
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	b662      	cpsie	i
 80095dc:	60fb      	str	r3, [r7, #12]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80095e2:	f000 fe73 	bl	800a2cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095e6:	4b1d      	ldr	r3, [pc, #116]	; (800965c <xTaskCheckForTimeOut+0xc4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fe:	d102      	bne.n	8009606 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009600:	2300      	movs	r3, #0
 8009602:	61fb      	str	r3, [r7, #28]
 8009604:	e023      	b.n	800964e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b15      	ldr	r3, [pc, #84]	; (8009660 <xTaskCheckForTimeOut+0xc8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d007      	beq.n	8009622 <xTaskCheckForTimeOut+0x8a>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	429a      	cmp	r2, r3
 800961a:	d302      	bcc.n	8009622 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e015      	b.n	800964e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	429a      	cmp	r2, r3
 800962a:	d20b      	bcs.n	8009644 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	1ad2      	subs	r2, r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ff97 	bl	800956c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800963e:	2300      	movs	r3, #0
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	e004      	b.n	800964e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800964e:	f000 fe71 	bl	800a334 <vPortExitCritical>

	return xReturn;
 8009652:	69fb      	ldr	r3, [r7, #28]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20001490 	.word	0x20001490
 8009660:	200014a4 	.word	0x200014a4

08009664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009664:	b480      	push	{r7}
 8009666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009668:	4b03      	ldr	r3, [pc, #12]	; (8009678 <vTaskMissedYield+0x14>)
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]
}
 800966e:	bf00      	nop
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	200014a0 	.word	0x200014a0

0800967c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009684:	f000 f852 	bl	800972c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009688:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <prvIdleTask+0x28>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d9f9      	bls.n	8009684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <prvIdleTask+0x2c>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096a0:	e7f0      	b.n	8009684 <prvIdleTask+0x8>
 80096a2:	bf00      	nop
 80096a4:	20000fbc 	.word	0x20000fbc
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]
 80096b6:	e00c      	b.n	80096d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4a12      	ldr	r2, [pc, #72]	; (800970c <prvInitialiseTaskLists+0x60>)
 80096c4:	4413      	add	r3, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fbc6 	bl	8007e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3301      	adds	r3, #1
 80096d0:	607b      	str	r3, [r7, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b37      	cmp	r3, #55	; 0x37
 80096d6:	d9ef      	bls.n	80096b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096d8:	480d      	ldr	r0, [pc, #52]	; (8009710 <prvInitialiseTaskLists+0x64>)
 80096da:	f7fe fbbd 	bl	8007e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096de:	480d      	ldr	r0, [pc, #52]	; (8009714 <prvInitialiseTaskLists+0x68>)
 80096e0:	f7fe fbba 	bl	8007e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096e4:	480c      	ldr	r0, [pc, #48]	; (8009718 <prvInitialiseTaskLists+0x6c>)
 80096e6:	f7fe fbb7 	bl	8007e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ea:	480c      	ldr	r0, [pc, #48]	; (800971c <prvInitialiseTaskLists+0x70>)
 80096ec:	f7fe fbb4 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096f0:	480b      	ldr	r0, [pc, #44]	; (8009720 <prvInitialiseTaskLists+0x74>)
 80096f2:	f7fe fbb1 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <prvInitialiseTaskLists+0x78>)
 80096f8:	4a05      	ldr	r2, [pc, #20]	; (8009710 <prvInitialiseTaskLists+0x64>)
 80096fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <prvInitialiseTaskLists+0x7c>)
 80096fe:	4a05      	ldr	r2, [pc, #20]	; (8009714 <prvInitialiseTaskLists+0x68>)
 8009700:	601a      	str	r2, [r3, #0]
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000fbc 	.word	0x20000fbc
 8009710:	2000141c 	.word	0x2000141c
 8009714:	20001430 	.word	0x20001430
 8009718:	2000144c 	.word	0x2000144c
 800971c:	20001460 	.word	0x20001460
 8009720:	20001478 	.word	0x20001478
 8009724:	20001444 	.word	0x20001444
 8009728:	20001448 	.word	0x20001448

0800972c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009732:	e019      	b.n	8009768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009734:	f000 fdca 	bl	800a2cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009738:	4b10      	ldr	r3, [pc, #64]	; (800977c <prvCheckTasksWaitingTermination+0x50>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fc11 	bl	8007f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800974a:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <prvCheckTasksWaitingTermination+0x54>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3b01      	subs	r3, #1
 8009750:	4a0b      	ldr	r2, [pc, #44]	; (8009780 <prvCheckTasksWaitingTermination+0x54>)
 8009752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009754:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3b01      	subs	r3, #1
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 800975c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800975e:	f000 fde9 	bl	800a334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f810 	bl	8009788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009768:	4b06      	ldr	r3, [pc, #24]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e1      	bne.n	8009734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009770:	bf00      	nop
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20001460 	.word	0x20001460
 8009780:	2000148c 	.word	0x2000148c
 8009784:	20001474 	.word	0x20001474

08009788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3354      	adds	r3, #84	; 0x54
 8009794:	4618      	mov	r0, r3
 8009796:	f001 ff95 	bl	800b6c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 ff85 	bl	800a6b8 <vPortFree>
				vPortFree( pxTCB );
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 ff82 	bl	800a6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b4:	e01a      	b.n	80097ec <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d103      	bne.n	80097c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 ff79 	bl	800a6b8 <vPortFree>
	}
 80097c6:	e011      	b.n	80097ec <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d00c      	beq.n	80097ec <prvDeleteTCB+0x64>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	b672      	cpsid	i
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	b662      	cpsie	i
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <prvDeleteTCB+0x62>
	}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097fa:	4b0c      	ldr	r3, [pc, #48]	; (800982c <prvResetNextTaskUnblockTime+0x38>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d104      	bne.n	800980e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <prvResetNextTaskUnblockTime+0x3c>)
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800980c:	e008      	b.n	8009820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <prvResetNextTaskUnblockTime+0x38>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	4a04      	ldr	r2, [pc, #16]	; (8009830 <prvResetNextTaskUnblockTime+0x3c>)
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20001444 	.word	0x20001444
 8009830:	200014ac 	.word	0x200014ac

08009834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800983a:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <xTaskGetSchedulerState+0x34>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009842:	2301      	movs	r3, #1
 8009844:	607b      	str	r3, [r7, #4]
 8009846:	e008      	b.n	800985a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <xTaskGetSchedulerState+0x38>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009850:	2302      	movs	r3, #2
 8009852:	607b      	str	r3, [r7, #4]
 8009854:	e001      	b.n	800985a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009856:	2300      	movs	r3, #0
 8009858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800985a:	687b      	ldr	r3, [r7, #4]
	}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	20001498 	.word	0x20001498
 800986c:	200014b4 	.word	0x200014b4

08009870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d05a      	beq.n	800993c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009886:	4b30      	ldr	r3, [pc, #192]	; (8009948 <xTaskPriorityDisinherit+0xd8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	429a      	cmp	r2, r3
 800988e:	d00c      	beq.n	80098aa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	b672      	cpsid	i
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	b662      	cpsie	i
 80098a4:	60fb      	str	r3, [r7, #12]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	b672      	cpsid	i
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	b662      	cpsie	i
 80098c6:	60bb      	str	r3, [r7, #8]
}
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d02c      	beq.n	800993c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d128      	bne.n	800993c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fb3c 	bl	8007f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b0f      	ldr	r3, [pc, #60]	; (800994c <xTaskPriorityDisinherit+0xdc>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <xTaskPriorityDisinherit+0xac>
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a0c      	ldr	r2, [pc, #48]	; (800994c <xTaskPriorityDisinherit+0xdc>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a09      	ldr	r2, [pc, #36]	; (8009950 <xTaskPriorityDisinherit+0xe0>)
 800992a:	441a      	add	r2, r3
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe fabd 	bl	8007eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800993c:	697b      	ldr	r3, [r7, #20]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000fb8 	.word	0x20000fb8
 800994c:	20001494 	.word	0x20001494
 8009950:	20000fbc 	.word	0x20000fbc

08009954 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800995e:	4b21      	ldr	r3, [pc, #132]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009964:	4b20      	ldr	r3, [pc, #128]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fafe 	bl	8007f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d10a      	bne.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d007      	beq.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4819      	ldr	r0, [pc, #100]	; (80099ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009988:	f7fe fa93 	bl	8007eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800998c:	e026      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d209      	bcs.n	80099ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a6:	4b12      	ldr	r3, [pc, #72]	; (80099f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7fe faa1 	bl	8007efa <vListInsert>
}
 80099b8:	e010      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ba:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fa97 	bl	8007efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d202      	bcs.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099d6:	4a08      	ldr	r2, [pc, #32]	; (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20001490 	.word	0x20001490
 80099e8:	20000fb8 	.word	0x20000fb8
 80099ec:	20001478 	.word	0x20001478
 80099f0:	20001448 	.word	0x20001448
 80099f4:	20001444 	.word	0x20001444
 80099f8:	200014ac 	.word	0x200014ac

080099fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a06:	f000 fb15 	bl	800a034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <xTimerCreateTimerTask+0x84>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d021      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a1a:	1d3a      	adds	r2, r7, #4
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	f107 030c 	add.w	r3, r7, #12
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe f9fd 	bl	8007e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	9202      	str	r2, [sp, #8]
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	2302      	movs	r3, #2
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	460a      	mov	r2, r1
 8009a3c:	4911      	ldr	r1, [pc, #68]	; (8009a84 <xTimerCreateTimerTask+0x88>)
 8009a3e:	4812      	ldr	r0, [pc, #72]	; (8009a88 <xTimerCreateTimerTask+0x8c>)
 8009a40:	f7ff f890 	bl	8008b64 <xTaskCreateStatic>
 8009a44:	4603      	mov	r3, r0
 8009a46:	4a11      	ldr	r2, [pc, #68]	; (8009a8c <xTimerCreateTimerTask+0x90>)
 8009a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a4a:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <xTimerCreateTimerTask+0x90>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a52:	2301      	movs	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10c      	bne.n	8009a76 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	b672      	cpsid	i
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	b662      	cpsie	i
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200014e8 	.word	0x200014e8
 8009a84:	0800b7f0 	.word	0x0800b7f0
 8009a88:	08009bcd 	.word	0x08009bcd
 8009a8c:	200014ec 	.word	0x200014ec

08009a90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <xTimerGenericCommand+0x32>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	b672      	cpsid	i
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	b662      	cpsie	i
 8009abc:	623b      	str	r3, [r7, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	; (8009b2c <xTimerGenericCommand+0x9c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d02a      	beq.n	8009b20 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	dc18      	bgt.n	8009b0e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009adc:	f7ff feaa 	bl	8009834 <xTaskGetSchedulerState>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d109      	bne.n	8009afa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ae6:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <xTimerGenericCommand+0x9c>)
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f107 0110 	add.w	r1, r7, #16
 8009aee:	2300      	movs	r3, #0
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	f7fe fbb7 	bl	8008264 <xQueueGenericSend>
 8009af6:	6278      	str	r0, [r7, #36]	; 0x24
 8009af8:	e012      	b.n	8009b20 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <xTimerGenericCommand+0x9c>)
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	f107 0110 	add.w	r1, r7, #16
 8009b02:	2300      	movs	r3, #0
 8009b04:	2200      	movs	r2, #0
 8009b06:	f7fe fbad 	bl	8008264 <xQueueGenericSend>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b0c:	e008      	b.n	8009b20 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b0e:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <xTimerGenericCommand+0x9c>)
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	f107 0110 	add.w	r1, r7, #16
 8009b16:	2300      	movs	r3, #0
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	f7fe fca9 	bl	8008470 <xQueueGenericSendFromISR>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3728      	adds	r7, #40	; 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200014e8 	.word	0x200014e8

08009b30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3a:	4b23      	ldr	r3, [pc, #140]	; (8009bc8 <prvProcessExpiredTimer+0x98>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fa0f 	bl	8007f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d024      	beq.n	8009ba6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	699a      	ldr	r2, [r3, #24]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	18d1      	adds	r1, r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	6978      	ldr	r0, [r7, #20]
 8009b6a:	f000 f8d3 	bl	8009d14 <prvInsertTimerInActiveList>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d021      	beq.n	8009bb8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b74:	2300      	movs	r3, #0
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	6978      	ldr	r0, [r7, #20]
 8009b80:	f7ff ff86 	bl	8009a90 <xTimerGenericCommand>
 8009b84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d115      	bne.n	8009bb8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	b672      	cpsid	i
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	b662      	cpsie	i
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	6978      	ldr	r0, [r7, #20]
 8009bbe:	4798      	blx	r3
}
 8009bc0:	bf00      	nop
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200014e0 	.word	0x200014e0

08009bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bd4:	f107 0308 	add.w	r3, r7, #8
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 f857 	bl	8009c8c <prvGetNextExpireTime>
 8009bde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4619      	mov	r1, r3
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 f803 	bl	8009bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bea:	f000 f8d5 	bl	8009d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bee:	e7f1      	b.n	8009bd4 <prvTimerTask+0x8>

08009bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bfa:	f7ff fa1d 	bl	8009038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f866 	bl	8009cd4 <prvSampleTimeNow>
 8009c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d130      	bne.n	8009c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <prvProcessTimerOrBlockTask+0x3c>
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d806      	bhi.n	8009c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c1e:	f7ff fa19 	bl	8009054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c22:	68f9      	ldr	r1, [r7, #12]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff83 	bl	8009b30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c2a:	e024      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c32:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <prvProcessTimerOrBlockTask+0x90>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <prvProcessTimerOrBlockTask+0x50>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <prvProcessTimerOrBlockTask+0x52>
 8009c40:	2300      	movs	r3, #0
 8009c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <prvProcessTimerOrBlockTask+0x94>)
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fe ff53 	bl	8008afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c56:	f7ff f9fd 	bl	8009054 <xTaskResumeAll>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <prvProcessTimerOrBlockTask+0x98>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
}
 8009c70:	e001      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c72:	f7ff f9ef 	bl	8009054 <xTaskResumeAll>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200014e4 	.word	0x200014e4
 8009c84:	200014e8 	.word	0x200014e8
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c94:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <prvGetNextExpireTime+0x44>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <prvGetNextExpireTime+0x16>
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	e000      	b.n	8009ca4 <prvGetNextExpireTime+0x18>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d105      	bne.n	8009cbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <prvGetNextExpireTime+0x44>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e001      	b.n	8009cc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	200014e0 	.word	0x200014e0

08009cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cdc:	f7ff fa5a 	bl	8009194 <xTaskGetTickCount>
 8009ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <prvSampleTimeNow+0x3c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d205      	bcs.n	8009cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cec:	f000 f93c 	bl	8009f68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	e002      	b.n	8009cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cfe:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <prvSampleTimeNow+0x3c>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d04:	68fb      	ldr	r3, [r7, #12]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200014f0 	.word	0x200014f0

08009d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d812      	bhi.n	8009d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d302      	bcc.n	8009d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e01b      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <prvInsertTimerInActiveList+0x7c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3304      	adds	r3, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7fe f8ce 	bl	8007efa <vListInsert>
 8009d5e:	e012      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d206      	bcs.n	8009d76 <prvInsertTimerInActiveList+0x62>
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d302      	bcc.n	8009d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	e007      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <prvInsertTimerInActiveList+0x80>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f7fe f8ba 	bl	8007efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d86:	697b      	ldr	r3, [r7, #20]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	200014e4 	.word	0x200014e4
 8009d94:	200014e0 	.word	0x200014e0

08009d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08e      	sub	sp, #56	; 0x38
 8009d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d9e:	e0d0      	b.n	8009f42 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da1a      	bge.n	8009ddc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009da6:	1d3b      	adds	r3, r7, #4
 8009da8:	3304      	adds	r3, #4
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10c      	bne.n	8009dcc <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	b672      	cpsid	i
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	b662      	cpsie	i
 8009dc6:	61fb      	str	r3, [r7, #28]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dd2:	6850      	ldr	r0, [r2, #4]
 8009dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dd6:	6892      	ldr	r2, [r2, #8]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f2c0 80ae 	blt.w	8009f40 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f8b9 	bl	8007f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff ff69 	bl	8009cd4 <prvSampleTimeNow>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b09      	cmp	r3, #9
 8009e08:	f200 809b 	bhi.w	8009f42 <prvProcessReceivedCommands+0x1aa>
 8009e0c:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <prvProcessReceivedCommands+0x7c>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e3d 	.word	0x08009e3d
 8009e1c:	08009e3d 	.word	0x08009e3d
 8009e20:	08009eb5 	.word	0x08009eb5
 8009e24:	08009ec9 	.word	0x08009ec9
 8009e28:	08009f17 	.word	0x08009f17
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e3d 	.word	0x08009e3d
 8009e34:	08009eb5 	.word	0x08009eb5
 8009e38:	08009ec9 	.word	0x08009ec9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	18d1      	adds	r1, r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5c:	f7ff ff5a 	bl	8009d14 <prvInsertTimerInActiveList>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d06d      	beq.n	8009f42 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d062      	beq.n	8009f42 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	441a      	add	r2, r3
 8009e84:	2300      	movs	r3, #0
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e8e:	f7ff fdff 	bl	8009a90 <xTimerGenericCommand>
 8009e92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d153      	bne.n	8009f42 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	b672      	cpsid	i
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	b662      	cpsie	i
 8009eae:	61bb      	str	r3, [r7, #24]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ec6:	e03c      	b.n	8009f42 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10c      	bne.n	8009f02 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	b672      	cpsid	i
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	b662      	cpsie	i
 8009efc:	617b      	str	r3, [r7, #20]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	18d1      	adds	r1, r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f10:	f7ff ff00 	bl	8009d14 <prvInsertTimerInActiveList>
					break;
 8009f14:	e015      	b.n	8009f42 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f26:	f000 fbc7 	bl	800a6b8 <vPortFree>
 8009f2a:	e00a      	b.n	8009f42 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f3e:	e000      	b.n	8009f42 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <prvProcessReceivedCommands+0x1cc>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	1d39      	adds	r1, r7, #4
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fb30 	bl	80085b0 <xQueueReceive>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f47f af24 	bne.w	8009da0 <prvProcessReceivedCommands+0x8>
	}
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	3730      	adds	r7, #48	; 0x30
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	200014e8 	.word	0x200014e8

08009f68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f6e:	e04a      	b.n	800a006 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f70:	4b2e      	ldr	r3, [pc, #184]	; (800a02c <prvSwitchTimerLists+0xc4>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7a:	4b2c      	ldr	r3, [pc, #176]	; (800a02c <prvSwitchTimerLists+0xc4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fd ffef 	bl	8007f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d030      	beq.n	800a006 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4413      	add	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d90e      	bls.n	8009fd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fc2:	4b1a      	ldr	r3, [pc, #104]	; (800a02c <prvSwitchTimerLists+0xc4>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7fd ff94 	bl	8007efa <vListInsert>
 8009fd2:	e018      	b.n	800a006 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fd56 	bl	8009a90 <xTimerGenericCommand>
 8009fe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10c      	bne.n	800a006 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	b672      	cpsid	i
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	b662      	cpsie	i
 800a000:	603b      	str	r3, [r7, #0]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a006:	4b09      	ldr	r3, [pc, #36]	; (800a02c <prvSwitchTimerLists+0xc4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1af      	bne.n	8009f70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <prvSwitchTimerLists+0xc4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <prvSwitchTimerLists+0xc8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a04      	ldr	r2, [pc, #16]	; (800a02c <prvSwitchTimerLists+0xc4>)
 800a01c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a01e:	4a04      	ldr	r2, [pc, #16]	; (800a030 <prvSwitchTimerLists+0xc8>)
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	bf00      	nop
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	200014e0 	.word	0x200014e0
 800a030:	200014e4 	.word	0x200014e4

0800a034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a03a:	f000 f947 	bl	800a2cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a03e:	4b15      	ldr	r3, [pc, #84]	; (800a094 <prvCheckForValidListAndQueue+0x60>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d120      	bne.n	800a088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a046:	4814      	ldr	r0, [pc, #80]	; (800a098 <prvCheckForValidListAndQueue+0x64>)
 800a048:	f7fd ff06 	bl	8007e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a04c:	4813      	ldr	r0, [pc, #76]	; (800a09c <prvCheckForValidListAndQueue+0x68>)
 800a04e:	f7fd ff03 	bl	8007e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a052:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <prvCheckForValidListAndQueue+0x6c>)
 800a054:	4a10      	ldr	r2, [pc, #64]	; (800a098 <prvCheckForValidListAndQueue+0x64>)
 800a056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a058:	4b12      	ldr	r3, [pc, #72]	; (800a0a4 <prvCheckForValidListAndQueue+0x70>)
 800a05a:	4a10      	ldr	r2, [pc, #64]	; (800a09c <prvCheckForValidListAndQueue+0x68>)
 800a05c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a05e:	2300      	movs	r3, #0
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	4b11      	ldr	r3, [pc, #68]	; (800a0a8 <prvCheckForValidListAndQueue+0x74>)
 800a064:	4a11      	ldr	r2, [pc, #68]	; (800a0ac <prvCheckForValidListAndQueue+0x78>)
 800a066:	2110      	movs	r1, #16
 800a068:	200a      	movs	r0, #10
 800a06a:	f7fe f813 	bl	8008094 <xQueueGenericCreateStatic>
 800a06e:	4603      	mov	r3, r0
 800a070:	4a08      	ldr	r2, [pc, #32]	; (800a094 <prvCheckForValidListAndQueue+0x60>)
 800a072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a074:	4b07      	ldr	r3, [pc, #28]	; (800a094 <prvCheckForValidListAndQueue+0x60>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <prvCheckForValidListAndQueue+0x60>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	490b      	ldr	r1, [pc, #44]	; (800a0b0 <prvCheckForValidListAndQueue+0x7c>)
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fd10 	bl	8008aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a088:	f000 f954 	bl	800a334 <vPortExitCritical>
}
 800a08c:	bf00      	nop
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200014e8 	.word	0x200014e8
 800a098:	200014b8 	.word	0x200014b8
 800a09c:	200014cc 	.word	0x200014cc
 800a0a0:	200014e0 	.word	0x200014e0
 800a0a4:	200014e4 	.word	0x200014e4
 800a0a8:	20001594 	.word	0x20001594
 800a0ac:	200014f4 	.word	0x200014f4
 800a0b0:	0800b7f8 	.word	0x0800b7f8

0800a0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3b04      	subs	r3, #4
 800a0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3b04      	subs	r3, #4
 800a0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f023 0201 	bic.w	r2, r3, #1
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b04      	subs	r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0e4:	4a0c      	ldr	r2, [pc, #48]	; (800a118 <pxPortInitialiseStack+0x64>)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3b14      	subs	r3, #20
 800a0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b04      	subs	r3, #4
 800a0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f06f 0202 	mvn.w	r2, #2
 800a102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3b20      	subs	r3, #32
 800a108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a10a:	68fb      	ldr	r3, [r7, #12]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	0800a11d 	.word	0x0800a11d

0800a11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a126:	4b14      	ldr	r3, [pc, #80]	; (800a178 <prvTaskExitError+0x5c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d00c      	beq.n	800a14a <prvTaskExitError+0x2e>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	b672      	cpsid	i
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	b662      	cpsie	i
 800a144:	60fb      	str	r3, [r7, #12]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <prvTaskExitError+0x2c>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	60bb      	str	r3, [r7, #8]
}
 800a160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a162:	bf00      	nop
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0fc      	beq.n	800a164 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20000098 	.word	0x20000098
 800a17c:	00000000 	.word	0x00000000

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	20000fb8 	.word	0x20000fb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1a8:	4808      	ldr	r0, [pc, #32]	; (800a1cc <prvPortStartFirstTask+0x24>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8814 	msr	CONTROL, r0
 800a1ba:	b662      	cpsie	i
 800a1bc:	b661      	cpsie	f
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	df00      	svc	0
 800a1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed08 	.word	0xe000ed08

0800a1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1d6:	4b37      	ldr	r3, [pc, #220]	; (800a2b4 <xPortStartScheduler+0xe4>)
 800a1d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22ff      	movs	r2, #255	; 0xff
 800a1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <xPortStartScheduler+0xe8>)
 800a1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1fe:	4b2f      	ldr	r3, [pc, #188]	; (800a2bc <xPortStartScheduler+0xec>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a204:	e009      	b.n	800a21a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a206:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <xPortStartScheduler+0xec>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4a2b      	ldr	r2, [pc, #172]	; (800a2bc <xPortStartScheduler+0xec>)
 800a20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	b2db      	uxtb	r3, r3
 800a218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	2b80      	cmp	r3, #128	; 0x80
 800a224:	d0ef      	beq.n	800a206 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <xPortStartScheduler+0xec>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1c3 0307 	rsb	r3, r3, #7
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d00c      	beq.n	800a24c <xPortStartScheduler+0x7c>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	b672      	cpsid	i
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	b662      	cpsie	i
 800a246:	60bb      	str	r3, [r7, #8]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a24c:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <xPortStartScheduler+0xec>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <xPortStartScheduler+0xec>)
 800a254:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a256:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <xPortStartScheduler+0xec>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a25e:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <xPortStartScheduler+0xec>)
 800a260:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a14      	ldr	r2, [pc, #80]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a274:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a276:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a11      	ldr	r2, [pc, #68]	; (800a2c0 <xPortStartScheduler+0xf0>)
 800a27c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a280:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a282:	f000 f8dd 	bl	800a440 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a286:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <xPortStartScheduler+0xf4>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a28c:	f000 f8fc 	bl	800a488 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a290:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <xPortStartScheduler+0xf8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <xPortStartScheduler+0xf8>)
 800a296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a29a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a29c:	f7ff ff84 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2a0:	f7ff f844 	bl	800932c <vTaskSwitchContext>
	prvTaskExitError();
 800a2a4:	f7ff ff3a 	bl	800a11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	e000e400 	.word	0xe000e400
 800a2b8:	200015e4 	.word	0x200015e4
 800a2bc:	200015e8 	.word	0x200015e8
 800a2c0:	e000ed20 	.word	0xe000ed20
 800a2c4:	20000098 	.word	0x20000098
 800a2c8:	e000ef34 	.word	0xe000ef34

0800a2cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	b672      	cpsid	i
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	b662      	cpsie	i
 800a2e6:	607b      	str	r3, [r7, #4]
}
 800a2e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <vPortEnterCritical+0x60>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <vPortEnterCritical+0x60>)
 800a2f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2f4:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <vPortEnterCritical+0x60>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d111      	bne.n	800a320 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2fc:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <vPortEnterCritical+0x64>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <vPortEnterCritical+0x54>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	b672      	cpsid	i
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	b662      	cpsie	i
 800a31a:	603b      	str	r3, [r7, #0]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <vPortEnterCritical+0x52>
	}
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20000098 	.word	0x20000098
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <vPortExitCritical+0x54>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10c      	bne.n	800a35c <vPortExitCritical+0x28>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	b672      	cpsid	i
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	b662      	cpsie	i
 800a356:	607b      	str	r3, [r7, #4]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <vPortExitCritical+0x54>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	4a09      	ldr	r2, [pc, #36]	; (800a388 <vPortExitCritical+0x54>)
 800a364:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a366:	4b08      	ldr	r3, [pc, #32]	; (800a388 <vPortExitCritical+0x54>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d105      	bne.n	800a37a <vPortExitCritical+0x46>
 800a36e:	2300      	movs	r3, #0
 800a370:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	f383 8811 	msr	BASEPRI, r3
}
 800a378:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20000098 	.word	0x20000098
 800a38c:	00000000 	.word	0x00000000

0800a390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a390:	f3ef 8009 	mrs	r0, PSP
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <pxCurrentTCBConst>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f01e 0f10 	tst.w	lr, #16
 800a3a0:	bf08      	it	eq
 800a3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3b4:	b672      	cpsid	i
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	b662      	cpsie	i
 800a3c4:	f7fe ffb2 	bl	800932c <vTaskSwitchContext>
 800a3c8:	f04f 0000 	mov.w	r0, #0
 800a3cc:	f380 8811 	msr	BASEPRI, r0
 800a3d0:	bc09      	pop	{r0, r3}
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	6808      	ldr	r0, [r1, #0]
 800a3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	f01e 0f10 	tst.w	lr, #16
 800a3de:	bf08      	it	eq
 800a3e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3e4:	f380 8809 	msr	PSP, r0
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	20000fb8 	.word	0x20000fb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	b672      	cpsid	i
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	b662      	cpsie	i
 800a412:	607b      	str	r3, [r7, #4]
}
 800a414:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a416:	f7fe fecd 	bl	80091b4 <xTaskIncrementTick>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <SysTick_Handler+0x44>)
 800a422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	f383 8811 	msr	BASEPRI, r3
}
 800a432:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <vPortSetupTimerInterrupt+0x34>)
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <vPortSetupTimerInterrupt+0x38>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <vPortSetupTimerInterrupt+0x3c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <vPortSetupTimerInterrupt+0x40>)
 800a456:	fba2 2303 	umull	r2, r3, r2, r3
 800a45a:	099b      	lsrs	r3, r3, #6
 800a45c:	4a09      	ldr	r2, [pc, #36]	; (800a484 <vPortSetupTimerInterrupt+0x44>)
 800a45e:	3b01      	subs	r3, #1
 800a460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <vPortSetupTimerInterrupt+0x34>)
 800a464:	2207      	movs	r2, #7
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	e000e010 	.word	0xe000e010
 800a478:	e000e018 	.word	0xe000e018
 800a47c:	20000000 	.word	0x20000000
 800a480:	10624dd3 	.word	0x10624dd3
 800a484:	e000e014 	.word	0xe000e014

0800a488 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a488:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a498 <vPortEnableVFP+0x10>
 800a48c:	6801      	ldr	r1, [r0, #0]
 800a48e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a492:	6001      	str	r1, [r0, #0]
 800a494:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a496:	bf00      	nop
 800a498:	e000ed88 	.word	0xe000ed88

0800a49c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4a2:	f3ef 8305 	mrs	r3, IPSR
 800a4a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b0f      	cmp	r3, #15
 800a4ac:	d916      	bls.n	800a4dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ae:	4a19      	ldr	r2, [pc, #100]	; (800a514 <vPortValidateInterruptPriority+0x78>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <vPortValidateInterruptPriority+0x7c>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	7afa      	ldrb	r2, [r7, #11]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d20c      	bcs.n	800a4dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	b672      	cpsid	i
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	b662      	cpsie	i
 800a4d6:	607b      	str	r3, [r7, #4]
}
 800a4d8:	bf00      	nop
 800a4da:	e7fe      	b.n	800a4da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <vPortValidateInterruptPriority+0x80>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <vPortValidateInterruptPriority+0x84>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d90c      	bls.n	800a506 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	b672      	cpsid	i
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	b662      	cpsie	i
 800a500:	603b      	str	r3, [r7, #0]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <vPortValidateInterruptPriority+0x68>
	}
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	e000e3f0 	.word	0xe000e3f0
 800a518:	200015e4 	.word	0x200015e4
 800a51c:	e000ed0c 	.word	0xe000ed0c
 800a520:	200015e8 	.word	0x200015e8

0800a524 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08a      	sub	sp, #40	; 0x28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a530:	f7fe fd82 	bl	8009038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a534:	4b5b      	ldr	r3, [pc, #364]	; (800a6a4 <pvPortMalloc+0x180>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a53c:	f000 f91a 	bl	800a774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a540:	4b59      	ldr	r3, [pc, #356]	; (800a6a8 <pvPortMalloc+0x184>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f040 8092 	bne.w	800a672 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01f      	beq.n	800a594 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a554:	2208      	movs	r2, #8
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b00      	cmp	r3, #0
 800a564:	d016      	beq.n	800a594 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	3308      	adds	r3, #8
 800a56e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00c      	beq.n	800a594 <pvPortMalloc+0x70>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	b672      	cpsid	i
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	b662      	cpsie	i
 800a58e:	617b      	str	r3, [r7, #20]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d06b      	beq.n	800a672 <pvPortMalloc+0x14e>
 800a59a:	4b44      	ldr	r3, [pc, #272]	; (800a6ac <pvPortMalloc+0x188>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d866      	bhi.n	800a672 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5a4:	4b42      	ldr	r3, [pc, #264]	; (800a6b0 <pvPortMalloc+0x18c>)
 800a5a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5a8:	4b41      	ldr	r3, [pc, #260]	; (800a6b0 <pvPortMalloc+0x18c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ae:	e004      	b.n	800a5ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d903      	bls.n	800a5cc <pvPortMalloc+0xa8>
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f1      	bne.n	800a5b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5cc:	4b35      	ldr	r3, [pc, #212]	; (800a6a4 <pvPortMalloc+0x180>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d04d      	beq.n	800a672 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2208      	movs	r2, #8
 800a5dc:	4413      	add	r3, r2
 800a5de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d921      	bls.n	800a63c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00c      	beq.n	800a624 <pvPortMalloc+0x100>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	b672      	cpsid	i
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	b662      	cpsie	i
 800a61e:	613b      	str	r3, [r7, #16]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad2      	subs	r2, r2, r3
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a636:	69b8      	ldr	r0, [r7, #24]
 800a638:	f000 f8fe 	bl	800a838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <pvPortMalloc+0x188>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <pvPortMalloc+0x188>)
 800a648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a64a:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <pvPortMalloc+0x188>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b19      	ldr	r3, [pc, #100]	; (800a6b4 <pvPortMalloc+0x190>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d203      	bcs.n	800a65e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <pvPortMalloc+0x188>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a16      	ldr	r2, [pc, #88]	; (800a6b4 <pvPortMalloc+0x190>)
 800a65c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	4b11      	ldr	r3, [pc, #68]	; (800a6a8 <pvPortMalloc+0x184>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	431a      	orrs	r2, r3
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a672:	f7fe fcef 	bl	8009054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <pvPortMalloc+0x176>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	60fb      	str	r3, [r7, #12]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <pvPortMalloc+0x174>
	return pvReturn;
 800a69a:	69fb      	ldr	r3, [r7, #28]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3728      	adds	r7, #40	; 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200051f4 	.word	0x200051f4
 800a6a8:	20005200 	.word	0x20005200
 800a6ac:	200051f8 	.word	0x200051f8
 800a6b0:	200051ec 	.word	0x200051ec
 800a6b4:	200051fc 	.word	0x200051fc

0800a6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04c      	beq.n	800a764 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	425b      	negs	r3, r3
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b23      	ldr	r3, [pc, #140]	; (800a76c <vPortFree+0xb4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <vPortFree+0x48>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	b672      	cpsid	i
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	b662      	cpsie	i
 800a6fa:	60fb      	str	r3, [r7, #12]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00c      	beq.n	800a722 <vPortFree+0x6a>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	b672      	cpsid	i
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	b662      	cpsie	i
 800a71c:	60bb      	str	r3, [r7, #8]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	4b11      	ldr	r3, [pc, #68]	; (800a76c <vPortFree+0xb4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4013      	ands	r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d019      	beq.n	800a764 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d115      	bne.n	800a764 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <vPortFree+0xb4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	43db      	mvns	r3, r3
 800a742:	401a      	ands	r2, r3
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a748:	f7fe fc76 	bl	8009038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b07      	ldr	r3, [pc, #28]	; (800a770 <vPortFree+0xb8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4413      	add	r3, r2
 800a756:	4a06      	ldr	r2, [pc, #24]	; (800a770 <vPortFree+0xb8>)
 800a758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a75a:	6938      	ldr	r0, [r7, #16]
 800a75c:	f000 f86c 	bl	800a838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a760:	f7fe fc78 	bl	8009054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20005200 	.word	0x20005200
 800a770:	200051f8 	.word	0x200051f8

0800a774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a77a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a780:	4b27      	ldr	r3, [pc, #156]	; (800a820 <prvHeapInit+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3307      	adds	r3, #7
 800a792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	4a1f      	ldr	r2, [pc, #124]	; (800a820 <prvHeapInit+0xac>)
 800a7a4:	4413      	add	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	; (800a824 <prvHeapInit+0xb0>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <prvHeapInit+0xb0>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0307 	bic.w	r3, r3, #7
 800a7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a15      	ldr	r2, [pc, #84]	; (800a828 <prvHeapInit+0xb4>)
 800a7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <prvHeapInit+0xb4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <prvHeapInit+0xb4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <prvHeapInit+0xb4>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <prvHeapInit+0xb8>)
 800a802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <prvHeapInit+0xbc>)
 800a80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a80c:	4b09      	ldr	r3, [pc, #36]	; (800a834 <prvHeapInit+0xc0>)
 800a80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	200015ec 	.word	0x200015ec
 800a824:	200051ec 	.word	0x200051ec
 800a828:	200051f4 	.word	0x200051f4
 800a82c:	200051fc 	.word	0x200051fc
 800a830:	200051f8 	.word	0x200051f8
 800a834:	20005200 	.word	0x20005200

0800a838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <prvInsertBlockIntoFreeList+0xac>)
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e002      	b.n	800a84c <prvInsertBlockIntoFreeList+0x14>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d8f7      	bhi.n	800a846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	4413      	add	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	429a      	cmp	r2, r3
 800a866:	d108      	bne.n	800a87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	441a      	add	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	441a      	add	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d118      	bne.n	800a8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d00d      	beq.n	800a8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	e008      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e003      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d002      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d6:	bf00      	nop
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	200051ec 	.word	0x200051ec
 800a8e8:	200051f4 	.word	0x200051f4

0800a8ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4912      	ldr	r1, [pc, #72]	; (800a93c <MX_USB_DEVICE_Init+0x50>)
 800a8f4:	4812      	ldr	r0, [pc, #72]	; (800a940 <MX_USB_DEVICE_Init+0x54>)
 800a8f6:	f7fb fcad 	bl	8006254 <USBD_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a900:	f7f6 f82a 	bl	8000958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a904:	490f      	ldr	r1, [pc, #60]	; (800a944 <MX_USB_DEVICE_Init+0x58>)
 800a906:	480e      	ldr	r0, [pc, #56]	; (800a940 <MX_USB_DEVICE_Init+0x54>)
 800a908:	f7fb fcd4 	bl	80062b4 <USBD_RegisterClass>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a912:	f7f6 f821 	bl	8000958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a916:	490c      	ldr	r1, [pc, #48]	; (800a948 <MX_USB_DEVICE_Init+0x5c>)
 800a918:	4809      	ldr	r0, [pc, #36]	; (800a940 <MX_USB_DEVICE_Init+0x54>)
 800a91a:	f7fb fbcb 	bl	80060b4 <USBD_CDC_RegisterInterface>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a924:	f7f6 f818 	bl	8000958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a928:	4805      	ldr	r0, [pc, #20]	; (800a940 <MX_USB_DEVICE_Init+0x54>)
 800a92a:	f7fb fcf9 	bl	8006320 <USBD_Start>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a934:	f7f6 f810 	bl	8000958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a938:	bf00      	nop
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	200000b0 	.word	0x200000b0
 800a940:	20005204 	.word	0x20005204
 800a944:	20000018 	.word	0x20000018
 800a948:	2000009c 	.word	0x2000009c

0800a94c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a950:	2200      	movs	r2, #0
 800a952:	4905      	ldr	r1, [pc, #20]	; (800a968 <CDC_Init_FS+0x1c>)
 800a954:	4805      	ldr	r0, [pc, #20]	; (800a96c <CDC_Init_FS+0x20>)
 800a956:	f7fb fbc7 	bl	80060e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a95a:	4905      	ldr	r1, [pc, #20]	; (800a970 <CDC_Init_FS+0x24>)
 800a95c:	4803      	ldr	r0, [pc, #12]	; (800a96c <CDC_Init_FS+0x20>)
 800a95e:	f7fb fbe5 	bl	800612c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a962:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20005ce0 	.word	0x20005ce0
 800a96c:	20005204 	.word	0x20005204
 800a970:	200054e0 	.word	0x200054e0

0800a974 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a978:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
 800a990:	4613      	mov	r3, r2
 800a992:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b23      	cmp	r3, #35	; 0x23
 800a998:	d84a      	bhi.n	800aa30 <CDC_Control_FS+0xac>
 800a99a:	a201      	add	r2, pc, #4	; (adr r2, 800a9a0 <CDC_Control_FS+0x1c>)
 800a99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a0:	0800aa31 	.word	0x0800aa31
 800a9a4:	0800aa31 	.word	0x0800aa31
 800a9a8:	0800aa31 	.word	0x0800aa31
 800a9ac:	0800aa31 	.word	0x0800aa31
 800a9b0:	0800aa31 	.word	0x0800aa31
 800a9b4:	0800aa31 	.word	0x0800aa31
 800a9b8:	0800aa31 	.word	0x0800aa31
 800a9bc:	0800aa31 	.word	0x0800aa31
 800a9c0:	0800aa31 	.word	0x0800aa31
 800a9c4:	0800aa31 	.word	0x0800aa31
 800a9c8:	0800aa31 	.word	0x0800aa31
 800a9cc:	0800aa31 	.word	0x0800aa31
 800a9d0:	0800aa31 	.word	0x0800aa31
 800a9d4:	0800aa31 	.word	0x0800aa31
 800a9d8:	0800aa31 	.word	0x0800aa31
 800a9dc:	0800aa31 	.word	0x0800aa31
 800a9e0:	0800aa31 	.word	0x0800aa31
 800a9e4:	0800aa31 	.word	0x0800aa31
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa31 	.word	0x0800aa31
 800a9f0:	0800aa31 	.word	0x0800aa31
 800a9f4:	0800aa31 	.word	0x0800aa31
 800a9f8:	0800aa31 	.word	0x0800aa31
 800a9fc:	0800aa31 	.word	0x0800aa31
 800aa00:	0800aa31 	.word	0x0800aa31
 800aa04:	0800aa31 	.word	0x0800aa31
 800aa08:	0800aa31 	.word	0x0800aa31
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aa31 	.word	0x0800aa31
 800aa18:	0800aa31 	.word	0x0800aa31
 800aa1c:	0800aa31 	.word	0x0800aa31
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa31 	.word	0x0800aa31
 800aa28:	0800aa31 	.word	0x0800aa31
 800aa2c:	0800aa31 	.word	0x0800aa31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa30:	bf00      	nop
  }

  return (USBD_OK);
 800aa32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);		//Default two lines of receive code.
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	4816      	ldr	r0, [pc, #88]	; (800aaa8 <CDC_Receive_FS+0x68>)
 800aa4e:	f7fb fb6d 	bl	800612c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa52:	4815      	ldr	r0, [pc, #84]	; (800aaa8 <CDC_Receive_FS+0x68>)
 800aa54:	f7fb fbc8 	bl	80061e8 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  //memset (buffer, '\0', 64);			//These 3 lines clear our own rx buffer, copies USB buffer to our own rx buffer
  //memcpy (buffer, Buf, len);			// and then clear the USB buffer.
  //memset (Buf, '\0', len);

  if( MSGQ_Rx != NULL )
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <CDC_Receive_FS+0x6c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01a      	beq.n	800aa9e <CDC_Receive_FS+0x5e>
  	{
	  	memset (msg.Buf, '\0', 32);					//Clear msg-obj
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 fd31 	bl	800b4d8 <memset>
  		memcpy (msg.Buf, Buf, len);					//Copy usb buffer to msg-obj
 800aa76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aa7a:	f107 030c 	add.w	r3, r7, #12
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 fd1b 	bl	800b4bc <memcpy>
  		osMessageQueuePut(MSGQ_Rx, &msg, 0U, 0U);		//Put object in queue
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <CDC_Receive_FS+0x6c>)
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f107 010c 	add.w	r1, r7, #12
 800aa8e:	2300      	movs	r3, #0
 800aa90:	2200      	movs	r2, #0
 800aa92:	f7fd f8c7 	bl	8007c24 <osMessageQueuePut>

  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	//Toggle indicator LED, to show RTOS communication / interrupt possibilities.
 800aa96:	2180      	movs	r1, #128	; 0x80
 800aa98:	4805      	ldr	r0, [pc, #20]	; (800aab0 <CDC_Receive_FS+0x70>)
 800aa9a:	f7f6 fba2 	bl	80011e2 <HAL_GPIO_TogglePin>

  	}



  return (USBD_OK);
 800aa9e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3730      	adds	r7, #48	; 0x30
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	20005204 	.word	0x20005204
 800aaac:	2000019c 	.word	0x2000019c
 800aab0:	40020400 	.word	0x40020400

0800aab4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aac4:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <CDC_Transmit_FS+0x48>)
 800aac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e00b      	b.n	800aaf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aada:	887b      	ldrh	r3, [r7, #2]
 800aadc:	461a      	mov	r2, r3
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4806      	ldr	r0, [pc, #24]	; (800aafc <CDC_Transmit_FS+0x48>)
 800aae2:	f7fb fb01 	bl	80060e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aae6:	4805      	ldr	r0, [pc, #20]	; (800aafc <CDC_Transmit_FS+0x48>)
 800aae8:	f7fb fb3e 	bl	8006168 <USBD_CDC_TransmitPacket>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20005204 	.word	0x20005204

0800ab00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b087      	sub	sp, #28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	6039      	str	r1, [r7, #0]
 800ab2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2212      	movs	r2, #18
 800ab34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	200000d0 	.word	0x200000d0

0800ab48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2204      	movs	r2, #4
 800ab58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab5a:	4b03      	ldr	r3, [pc, #12]	; (800ab68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	200000f0 	.word	0x200000f0

0800ab6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4907      	ldr	r1, [pc, #28]	; (800aba0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab82:	4808      	ldr	r0, [pc, #32]	; (800aba4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab84:	f7fc fda2 	bl	80076cc <USBD_GetString>
 800ab88:	e004      	b.n	800ab94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab8e:	4805      	ldr	r0, [pc, #20]	; (800aba4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab90:	f7fc fd9c 	bl	80076cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab94:	4b02      	ldr	r3, [pc, #8]	; (800aba0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200064e0 	.word	0x200064e0
 800aba4:	0800b800 	.word	0x0800b800

0800aba8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	4904      	ldr	r1, [pc, #16]	; (800abc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800abb8:	4804      	ldr	r0, [pc, #16]	; (800abcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800abba:	f7fc fd87 	bl	80076cc <USBD_GetString>
  return USBD_StrDesc;
 800abbe:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	200064e0 	.word	0x200064e0
 800abcc:	0800b814 	.word	0x0800b814

0800abd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	6039      	str	r1, [r7, #0]
 800abda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	221a      	movs	r2, #26
 800abe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abe2:	f000 f855 	bl	800ac90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800abe6:	4b02      	ldr	r3, [pc, #8]	; (800abf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	200000f4 	.word	0x200000f4

0800abf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d105      	bne.n	800ac12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4907      	ldr	r1, [pc, #28]	; (800ac28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac0a:	4808      	ldr	r0, [pc, #32]	; (800ac2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac0c:	f7fc fd5e 	bl	80076cc <USBD_GetString>
 800ac10:	e004      	b.n	800ac1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	4904      	ldr	r1, [pc, #16]	; (800ac28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac16:	4805      	ldr	r0, [pc, #20]	; (800ac2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac18:	f7fc fd58 	bl	80076cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200064e0 	.word	0x200064e0
 800ac2c:	0800b828 	.word	0x0800b828

0800ac30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac3c:	79fb      	ldrb	r3, [r7, #7]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d105      	bne.n	800ac4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	4907      	ldr	r1, [pc, #28]	; (800ac64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac46:	4808      	ldr	r0, [pc, #32]	; (800ac68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac48:	f7fc fd40 	bl	80076cc <USBD_GetString>
 800ac4c:	e004      	b.n	800ac58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4904      	ldr	r1, [pc, #16]	; (800ac64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac52:	4805      	ldr	r0, [pc, #20]	; (800ac68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac54:	f7fc fd3a 	bl	80076cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	200064e0 	.word	0x200064e0
 800ac68:	0800b834 	.word	0x0800b834

0800ac6c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	6039      	str	r1, [r7, #0]
 800ac76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	220c      	movs	r2, #12
 800ac7c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ac7e:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	200000e4 	.word	0x200000e4

0800ac90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac96:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <Get_SerialNum+0x44>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <Get_SerialNum+0x48>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <Get_SerialNum+0x4c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acb6:	2208      	movs	r2, #8
 800acb8:	4909      	ldr	r1, [pc, #36]	; (800ace0 <Get_SerialNum+0x50>)
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f814 	bl	800ace8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acc0:	2204      	movs	r2, #4
 800acc2:	4908      	ldr	r1, [pc, #32]	; (800ace4 <Get_SerialNum+0x54>)
 800acc4:	68b8      	ldr	r0, [r7, #8]
 800acc6:	f000 f80f 	bl	800ace8 <IntToUnicode>
  }
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	1ff0f420 	.word	0x1ff0f420
 800acd8:	1ff0f424 	.word	0x1ff0f424
 800acdc:	1ff0f428 	.word	0x1ff0f428
 800ace0:	200000f6 	.word	0x200000f6
 800ace4:	20000106 	.word	0x20000106

0800ace8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	4613      	mov	r3, r2
 800acf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	75fb      	strb	r3, [r7, #23]
 800acfe:	e027      	b.n	800ad50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	0f1b      	lsrs	r3, r3, #28
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d80b      	bhi.n	800ad20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	0f1b      	lsrs	r3, r3, #28
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	4619      	mov	r1, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	440b      	add	r3, r1
 800ad18:	3230      	adds	r2, #48	; 0x30
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	e00a      	b.n	800ad36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	0f1b      	lsrs	r3, r3, #28
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	440b      	add	r3, r1
 800ad30:	3237      	adds	r2, #55	; 0x37
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	3301      	adds	r3, #1
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	4413      	add	r3, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	75fb      	strb	r3, [r7, #23]
 800ad50:	7dfa      	ldrb	r2, [r7, #23]
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d3d3      	bcc.n	800ad00 <IntToUnicode+0x18>
  }
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	371c      	adds	r7, #28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b0ae      	sub	sp, #184	; 0xb8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	605a      	str	r2, [r3, #4]
 800ad7a:	609a      	str	r2, [r3, #8]
 800ad7c:	60da      	str	r2, [r3, #12]
 800ad7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	2290      	movs	r2, #144	; 0x90
 800ad86:	2100      	movs	r1, #0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fba5 	bl	800b4d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad96:	d151      	bne.n	800ae3c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ad98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7f8 fa2f 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800adb4:	f7f5 fdd0 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adb8:	4b22      	ldr	r3, [pc, #136]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	4a21      	ldr	r2, [pc, #132]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	6313      	str	r3, [r2, #48]	; 0x30
 800adc4:	4b1f      	ldr	r3, [pc, #124]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800add0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800add4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add8:	2302      	movs	r3, #2
 800adda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade4:	2303      	movs	r3, #3
 800ade6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800adea:	230a      	movs	r3, #10
 800adec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800adf4:	4619      	mov	r1, r3
 800adf6:	4814      	ldr	r0, [pc, #80]	; (800ae48 <HAL_PCD_MspInit+0xe0>)
 800adf8:	f7f6 f82e 	bl	8000e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800ae02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae06:	6353      	str	r3, [r2, #52]	; 0x34
 800ae08:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800ae0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800ae16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae18:	4a0a      	ldr	r2, [pc, #40]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800ae1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae1e:	6453      	str	r3, [r2, #68]	; 0x44
 800ae20:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <HAL_PCD_MspInit+0xdc>)
 800ae22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae28:	60bb      	str	r3, [r7, #8]
 800ae2a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2105      	movs	r1, #5
 800ae30:	2043      	movs	r0, #67	; 0x43
 800ae32:	f7f5 ffe7 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae36:	2043      	movs	r0, #67	; 0x43
 800ae38:	f7f6 f800 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	37b8      	adds	r7, #184	; 0xb8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	40023800 	.word	0x40023800
 800ae48:	40020000 	.word	0x40020000

0800ae4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f7fb faa9 	bl	80063ba <USBD_LL_SetupStage>
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	440b      	add	r3, r1
 800ae90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f7fb fae3 	bl	8006464 <USBD_LL_DataOutStage>
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	4613      	mov	r3, r2
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	334c      	adds	r3, #76	; 0x4c
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	4619      	mov	r1, r3
 800aece:	f7fb fb7c 	bl	80065ca <USBD_LL_DataInStage>
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fb fcb0 	bl	800684e <USBD_LL_SOF>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aefe:	2301      	movs	r3, #1
 800af00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d102      	bne.n	800af10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
 800af0e:	e008      	b.n	800af22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	2b02      	cmp	r3, #2
 800af16:	d102      	bne.n	800af1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
 800af1c:	e001      	b.n	800af22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af1e:	f7f5 fd1b 	bl	8000958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af28:	7bfa      	ldrb	r2, [r7, #15]
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fb fc50 	bl	80067d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fb fbf8 	bl	800672e <USBD_LL_Reset>
}
 800af3e:	bf00      	nop
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af56:	4618      	mov	r0, r3
 800af58:	f7fb fc4b 	bl	80067f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <HAL_PCD_SuspendCallback+0x48>)
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	4a03      	ldr	r2, [pc, #12]	; (800af90 <HAL_PCD_SuspendCallback+0x48>)
 800af82:	f043 0306 	orr.w	r3, r3, #6
 800af86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	e000ed00 	.word	0xe000ed00

0800af94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fb fc3b 	bl	800681e <USBD_LL_Resume>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fb fc93 	bl	80068f2 <USBD_LL_IsoOUTIncomplete>
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800afe6:	78fa      	ldrb	r2, [r7, #3]
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7fb fc4f 	bl	800688e <USBD_LL_IsoINIncomplete>
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b006:	4618      	mov	r0, r3
 800b008:	f7fb fca5 	bl	8006956 <USBD_LL_DevConnected>
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b022:	4618      	mov	r0, r3
 800b024:	f7fb fca2 	bl	800696c <USBD_LL_DevDisconnected>
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d13c      	bne.n	800b0ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b040:	4a20      	ldr	r2, [pc, #128]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a1e      	ldr	r2, [pc, #120]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b04c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b050:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b056:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b05a:	2206      	movs	r2, #6
 800b05c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b05e:	4b19      	ldr	r3, [pc, #100]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b060:	2202      	movs	r2, #2
 800b062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b064:	4b17      	ldr	r3, [pc, #92]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b066:	2200      	movs	r2, #0
 800b068:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b06a:	4b16      	ldr	r3, [pc, #88]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b06c:	2202      	movs	r2, #2
 800b06e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b070:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b072:	2200      	movs	r2, #0
 800b074:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b076:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b078:	2200      	movs	r2, #0
 800b07a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b07c:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b07e:	2200      	movs	r2, #0
 800b080:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b082:	4b10      	ldr	r3, [pc, #64]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b084:	2200      	movs	r2, #0
 800b086:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b088:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b08e:	480d      	ldr	r0, [pc, #52]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b090:	f7f6 f8c1 	bl	8001216 <HAL_PCD_Init>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b09a:	f7f5 fc5d 	bl	8000958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	4808      	ldr	r0, [pc, #32]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b0a2:	f7f7 fb3c 	bl	800271e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b0a6:	2240      	movs	r2, #64	; 0x40
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4806      	ldr	r0, [pc, #24]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b0ac:	f7f7 faf0 	bl	8002690 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b0b0:	2280      	movs	r2, #128	; 0x80
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	4803      	ldr	r0, [pc, #12]	; (800b0c4 <USBD_LL_Init+0x94>)
 800b0b6:	f7f7 faeb 	bl	8002690 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	200066e0 	.word	0x200066e0

0800b0c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f6 f9bd 	bl	800145e <HAL_PCD_Start>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f97e 	bl	800b3ec <USBD_Get_USB_Status>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	4608      	mov	r0, r1
 800b108:	4611      	mov	r1, r2
 800b10a:	461a      	mov	r2, r3
 800b10c:	4603      	mov	r3, r0
 800b10e:	70fb      	strb	r3, [r7, #3]
 800b110:	460b      	mov	r3, r1
 800b112:	70bb      	strb	r3, [r7, #2]
 800b114:	4613      	mov	r3, r2
 800b116:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b126:	78bb      	ldrb	r3, [r7, #2]
 800b128:	883a      	ldrh	r2, [r7, #0]
 800b12a:	78f9      	ldrb	r1, [r7, #3]
 800b12c:	f7f6 feaa 	bl	8001e84 <HAL_PCD_EP_Open>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f958 	bl	800b3ec <USBD_Get_USB_Status>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b140:	7bbb      	ldrb	r3, [r7, #14]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b164:	78fa      	ldrb	r2, [r7, #3]
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f6 fef3 	bl	8001f54 <HAL_PCD_EP_Close>
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 f939 	bl	800b3ec <USBD_Get_USB_Status>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7f6 ffcb 	bl	8002142 <HAL_PCD_EP_SetStall>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 f91a 	bl	800b3ec <USBD_Get_USB_Status>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1e0:	78fa      	ldrb	r2, [r7, #3]
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7f7 f810 	bl	800220a <HAL_PCD_EP_ClrStall>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 f8fb 	bl	800b3ec <USBD_Get_USB_Status>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b216:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	da0b      	bge.n	800b238 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b226:	68f9      	ldr	r1, [r7, #12]
 800b228:	4613      	mov	r3, r2
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	440b      	add	r3, r1
 800b232:	333e      	adds	r3, #62	; 0x3e
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	e00b      	b.n	800b250 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	4613      	mov	r3, r2
 800b242:	00db      	lsls	r3, r3, #3
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b24e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b276:	78fa      	ldrb	r2, [r7, #3]
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f6 fddd 	bl	8001e3a <HAL_PCD_SetAddress>
 800b280:	4603      	mov	r3, r0
 800b282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4618      	mov	r0, r3
 800b288:	f000 f8b0 	bl	800b3ec <USBD_Get_USB_Status>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b290:	7bbb      	ldrb	r3, [r7, #14]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2b8:	7af9      	ldrb	r1, [r7, #11]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	f7f6 fef6 	bl	80020ae <HAL_PCD_EP_Transmit>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f88f 	bl	800b3ec <USBD_Get_USB_Status>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	603b      	str	r3, [r7, #0]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2fa:	7af9      	ldrb	r1, [r7, #11]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	f7f6 fe72 	bl	8001fe8 <HAL_PCD_EP_Receive>
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 f86e 	bl	800b3ec <USBD_Get_USB_Status>
 800b310:	4603      	mov	r3, r0
 800b312:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b314:	7dbb      	ldrb	r3, [r7, #22]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	460b      	mov	r3, r1
 800b328:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b330:	78fa      	ldrb	r2, [r7, #3]
 800b332:	4611      	mov	r1, r2
 800b334:	4618      	mov	r0, r3
 800b336:	f7f6 fea2 	bl	800207e <HAL_PCD_EP_GetRxCount>
 800b33a:	4603      	mov	r3, r0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <HAL_PCDEx_LPM_Callback+0x18>
 800b356:	2b01      	cmp	r3, #1
 800b358:	d01f      	beq.n	800b39a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b35a:	e03b      	b.n	800b3d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a1b      	ldr	r3, [r3, #32]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d007      	beq.n	800b374 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b364:	f000 f83c 	bl	800b3e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b368:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <HAL_PCDEx_LPM_Callback+0x98>)
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	4a1b      	ldr	r2, [pc, #108]	; (800b3dc <HAL_PCDEx_LPM_Callback+0x98>)
 800b36e:	f023 0306 	bic.w	r3, r3, #6
 800b372:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6812      	ldr	r2, [r2, #0]
 800b382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b386:	f023 0301 	bic.w	r3, r3, #1
 800b38a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b392:	4618      	mov	r0, r3
 800b394:	f7fb fa43 	bl	800681e <USBD_LL_Resume>
    break;
 800b398:	e01c      	b.n	800b3d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3ac:	f043 0301 	orr.w	r3, r3, #1
 800b3b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fb fa1a 	bl	80067f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3c6:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <HAL_PCDEx_LPM_Callback+0x98>)
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	4a04      	ldr	r2, [pc, #16]	; (800b3dc <HAL_PCDEx_LPM_Callback+0x98>)
 800b3cc:	f043 0306 	orr.w	r3, r3, #6
 800b3d0:	6113      	str	r3, [r2, #16]
    break;
 800b3d2:	bf00      	nop
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	e000ed00 	.word	0xe000ed00

0800b3e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b3e4:	f7f5 f97e 	bl	80006e4 <SystemClock_Config>
}
 800b3e8:	bf00      	nop
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d817      	bhi.n	800b430 <USBD_Get_USB_Status+0x44>
 800b400:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <USBD_Get_USB_Status+0x1c>)
 800b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b406:	bf00      	nop
 800b408:	0800b419 	.word	0x0800b419
 800b40c:	0800b41f 	.word	0x0800b41f
 800b410:	0800b425 	.word	0x0800b425
 800b414:	0800b42b 	.word	0x0800b42b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
    break;
 800b41c:	e00b      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	73fb      	strb	r3, [r7, #15]
    break;
 800b422:	e008      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b424:	2301      	movs	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
    break;
 800b428:	e005      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b42a:	2303      	movs	r3, #3
 800b42c:	73fb      	strb	r3, [r7, #15]
    break;
 800b42e:	e002      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	73fb      	strb	r3, [r7, #15]
    break;
 800b434:	bf00      	nop
  }
  return usb_status;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000110 	.word	0x20000110

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4d0d      	ldr	r5, [pc, #52]	; (800b488 <__libc_init_array+0x38>)
 800b454:	4c0d      	ldr	r4, [pc, #52]	; (800b48c <__libc_init_array+0x3c>)
 800b456:	1b64      	subs	r4, r4, r5
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	2600      	movs	r6, #0
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	4d0b      	ldr	r5, [pc, #44]	; (800b490 <__libc_init_array+0x40>)
 800b462:	4c0c      	ldr	r4, [pc, #48]	; (800b494 <__libc_init_array+0x44>)
 800b464:	f000 f9a6 	bl	800b7b4 <_init>
 800b468:	1b64      	subs	r4, r4, r5
 800b46a:	10a4      	asrs	r4, r4, #2
 800b46c:	2600      	movs	r6, #0
 800b46e:	42a6      	cmp	r6, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f855 3b04 	ldr.w	r3, [r5], #4
 800b478:	4798      	blx	r3
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b482:	4798      	blx	r3
 800b484:	3601      	adds	r6, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	0800b930 	.word	0x0800b930
 800b48c:	0800b930 	.word	0x0800b930
 800b490:	0800b930 	.word	0x0800b930
 800b494:	0800b934 	.word	0x0800b934

0800b498 <__retarget_lock_acquire_recursive>:
 800b498:	4770      	bx	lr

0800b49a <__retarget_lock_release_recursive>:
 800b49a:	4770      	bx	lr

0800b49c <malloc>:
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <malloc+0xc>)
 800b49e:	4601      	mov	r1, r0
 800b4a0:	6818      	ldr	r0, [r3, #0]
 800b4a2:	f000 b88d 	b.w	800b5c0 <_malloc_r>
 800b4a6:	bf00      	nop
 800b4a8:	20000110 	.word	0x20000110

0800b4ac <free>:
 800b4ac:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <free+0xc>)
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	6818      	ldr	r0, [r3, #0]
 800b4b2:	f000 b819 	b.w	800b4e8 <_free_r>
 800b4b6:	bf00      	nop
 800b4b8:	20000110 	.word	0x20000110

0800b4bc <memcpy>:
 800b4bc:	440a      	add	r2, r1
 800b4be:	4291      	cmp	r1, r2
 800b4c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4c4:	d100      	bne.n	800b4c8 <memcpy+0xc>
 800b4c6:	4770      	bx	lr
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4d2:	4291      	cmp	r1, r2
 800b4d4:	d1f9      	bne.n	800b4ca <memcpy+0xe>
 800b4d6:	bd10      	pop	{r4, pc}

0800b4d8 <memset>:
 800b4d8:	4402      	add	r2, r0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d100      	bne.n	800b4e2 <memset+0xa>
 800b4e0:	4770      	bx	lr
 800b4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4e6:	e7f9      	b.n	800b4dc <memset+0x4>

0800b4e8 <_free_r>:
 800b4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ea:	2900      	cmp	r1, #0
 800b4ec:	d044      	beq.n	800b578 <_free_r+0x90>
 800b4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f2:	9001      	str	r0, [sp, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b4fa:	bfb8      	it	lt
 800b4fc:	18e4      	addlt	r4, r4, r3
 800b4fe:	f000 f94d 	bl	800b79c <__malloc_lock>
 800b502:	4a1e      	ldr	r2, [pc, #120]	; (800b57c <_free_r+0x94>)
 800b504:	9801      	ldr	r0, [sp, #4]
 800b506:	6813      	ldr	r3, [r2, #0]
 800b508:	b933      	cbnz	r3, 800b518 <_free_r+0x30>
 800b50a:	6063      	str	r3, [r4, #4]
 800b50c:	6014      	str	r4, [r2, #0]
 800b50e:	b003      	add	sp, #12
 800b510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b514:	f000 b948 	b.w	800b7a8 <__malloc_unlock>
 800b518:	42a3      	cmp	r3, r4
 800b51a:	d908      	bls.n	800b52e <_free_r+0x46>
 800b51c:	6825      	ldr	r5, [r4, #0]
 800b51e:	1961      	adds	r1, r4, r5
 800b520:	428b      	cmp	r3, r1
 800b522:	bf01      	itttt	eq
 800b524:	6819      	ldreq	r1, [r3, #0]
 800b526:	685b      	ldreq	r3, [r3, #4]
 800b528:	1949      	addeq	r1, r1, r5
 800b52a:	6021      	streq	r1, [r4, #0]
 800b52c:	e7ed      	b.n	800b50a <_free_r+0x22>
 800b52e:	461a      	mov	r2, r3
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	b10b      	cbz	r3, 800b538 <_free_r+0x50>
 800b534:	42a3      	cmp	r3, r4
 800b536:	d9fa      	bls.n	800b52e <_free_r+0x46>
 800b538:	6811      	ldr	r1, [r2, #0]
 800b53a:	1855      	adds	r5, r2, r1
 800b53c:	42a5      	cmp	r5, r4
 800b53e:	d10b      	bne.n	800b558 <_free_r+0x70>
 800b540:	6824      	ldr	r4, [r4, #0]
 800b542:	4421      	add	r1, r4
 800b544:	1854      	adds	r4, r2, r1
 800b546:	42a3      	cmp	r3, r4
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	d1e0      	bne.n	800b50e <_free_r+0x26>
 800b54c:	681c      	ldr	r4, [r3, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	6053      	str	r3, [r2, #4]
 800b552:	4421      	add	r1, r4
 800b554:	6011      	str	r1, [r2, #0]
 800b556:	e7da      	b.n	800b50e <_free_r+0x26>
 800b558:	d902      	bls.n	800b560 <_free_r+0x78>
 800b55a:	230c      	movs	r3, #12
 800b55c:	6003      	str	r3, [r0, #0]
 800b55e:	e7d6      	b.n	800b50e <_free_r+0x26>
 800b560:	6825      	ldr	r5, [r4, #0]
 800b562:	1961      	adds	r1, r4, r5
 800b564:	428b      	cmp	r3, r1
 800b566:	bf04      	itt	eq
 800b568:	6819      	ldreq	r1, [r3, #0]
 800b56a:	685b      	ldreq	r3, [r3, #4]
 800b56c:	6063      	str	r3, [r4, #4]
 800b56e:	bf04      	itt	eq
 800b570:	1949      	addeq	r1, r1, r5
 800b572:	6021      	streq	r1, [r4, #0]
 800b574:	6054      	str	r4, [r2, #4]
 800b576:	e7ca      	b.n	800b50e <_free_r+0x26>
 800b578:	b003      	add	sp, #12
 800b57a:	bd30      	pop	{r4, r5, pc}
 800b57c:	20006bec 	.word	0x20006bec

0800b580 <sbrk_aligned>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4e0e      	ldr	r6, [pc, #56]	; (800b5bc <sbrk_aligned+0x3c>)
 800b584:	460c      	mov	r4, r1
 800b586:	6831      	ldr	r1, [r6, #0]
 800b588:	4605      	mov	r5, r0
 800b58a:	b911      	cbnz	r1, 800b592 <sbrk_aligned+0x12>
 800b58c:	f000 f8f6 	bl	800b77c <_sbrk_r>
 800b590:	6030      	str	r0, [r6, #0]
 800b592:	4621      	mov	r1, r4
 800b594:	4628      	mov	r0, r5
 800b596:	f000 f8f1 	bl	800b77c <_sbrk_r>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d00a      	beq.n	800b5b4 <sbrk_aligned+0x34>
 800b59e:	1cc4      	adds	r4, r0, #3
 800b5a0:	f024 0403 	bic.w	r4, r4, #3
 800b5a4:	42a0      	cmp	r0, r4
 800b5a6:	d007      	beq.n	800b5b8 <sbrk_aligned+0x38>
 800b5a8:	1a21      	subs	r1, r4, r0
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f000 f8e6 	bl	800b77c <_sbrk_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d101      	bne.n	800b5b8 <sbrk_aligned+0x38>
 800b5b4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	20006bf0 	.word	0x20006bf0

0800b5c0 <_malloc_r>:
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	1ccd      	adds	r5, r1, #3
 800b5c6:	f025 0503 	bic.w	r5, r5, #3
 800b5ca:	3508      	adds	r5, #8
 800b5cc:	2d0c      	cmp	r5, #12
 800b5ce:	bf38      	it	cc
 800b5d0:	250c      	movcc	r5, #12
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	db01      	blt.n	800b5dc <_malloc_r+0x1c>
 800b5d8:	42a9      	cmp	r1, r5
 800b5da:	d905      	bls.n	800b5e8 <_malloc_r+0x28>
 800b5dc:	230c      	movs	r3, #12
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	2600      	movs	r6, #0
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	4e2e      	ldr	r6, [pc, #184]	; (800b6a4 <_malloc_r+0xe4>)
 800b5ea:	f000 f8d7 	bl	800b79c <__malloc_lock>
 800b5ee:	6833      	ldr	r3, [r6, #0]
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	bb34      	cbnz	r4, 800b642 <_malloc_r+0x82>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7ff ffc2 	bl	800b580 <sbrk_aligned>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	4604      	mov	r4, r0
 800b600:	d14d      	bne.n	800b69e <_malloc_r+0xde>
 800b602:	6834      	ldr	r4, [r6, #0]
 800b604:	4626      	mov	r6, r4
 800b606:	2e00      	cmp	r6, #0
 800b608:	d140      	bne.n	800b68c <_malloc_r+0xcc>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	4631      	mov	r1, r6
 800b60e:	4638      	mov	r0, r7
 800b610:	eb04 0803 	add.w	r8, r4, r3
 800b614:	f000 f8b2 	bl	800b77c <_sbrk_r>
 800b618:	4580      	cmp	r8, r0
 800b61a:	d13a      	bne.n	800b692 <_malloc_r+0xd2>
 800b61c:	6821      	ldr	r1, [r4, #0]
 800b61e:	3503      	adds	r5, #3
 800b620:	1a6d      	subs	r5, r5, r1
 800b622:	f025 0503 	bic.w	r5, r5, #3
 800b626:	3508      	adds	r5, #8
 800b628:	2d0c      	cmp	r5, #12
 800b62a:	bf38      	it	cc
 800b62c:	250c      	movcc	r5, #12
 800b62e:	4629      	mov	r1, r5
 800b630:	4638      	mov	r0, r7
 800b632:	f7ff ffa5 	bl	800b580 <sbrk_aligned>
 800b636:	3001      	adds	r0, #1
 800b638:	d02b      	beq.n	800b692 <_malloc_r+0xd2>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	442b      	add	r3, r5
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	e00e      	b.n	800b660 <_malloc_r+0xa0>
 800b642:	6822      	ldr	r2, [r4, #0]
 800b644:	1b52      	subs	r2, r2, r5
 800b646:	d41e      	bmi.n	800b686 <_malloc_r+0xc6>
 800b648:	2a0b      	cmp	r2, #11
 800b64a:	d916      	bls.n	800b67a <_malloc_r+0xba>
 800b64c:	1961      	adds	r1, r4, r5
 800b64e:	42a3      	cmp	r3, r4
 800b650:	6025      	str	r5, [r4, #0]
 800b652:	bf18      	it	ne
 800b654:	6059      	strne	r1, [r3, #4]
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	bf08      	it	eq
 800b65a:	6031      	streq	r1, [r6, #0]
 800b65c:	5162      	str	r2, [r4, r5]
 800b65e:	604b      	str	r3, [r1, #4]
 800b660:	4638      	mov	r0, r7
 800b662:	f104 060b 	add.w	r6, r4, #11
 800b666:	f000 f89f 	bl	800b7a8 <__malloc_unlock>
 800b66a:	f026 0607 	bic.w	r6, r6, #7
 800b66e:	1d23      	adds	r3, r4, #4
 800b670:	1af2      	subs	r2, r6, r3
 800b672:	d0b6      	beq.n	800b5e2 <_malloc_r+0x22>
 800b674:	1b9b      	subs	r3, r3, r6
 800b676:	50a3      	str	r3, [r4, r2]
 800b678:	e7b3      	b.n	800b5e2 <_malloc_r+0x22>
 800b67a:	6862      	ldr	r2, [r4, #4]
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	bf0c      	ite	eq
 800b680:	6032      	streq	r2, [r6, #0]
 800b682:	605a      	strne	r2, [r3, #4]
 800b684:	e7ec      	b.n	800b660 <_malloc_r+0xa0>
 800b686:	4623      	mov	r3, r4
 800b688:	6864      	ldr	r4, [r4, #4]
 800b68a:	e7b2      	b.n	800b5f2 <_malloc_r+0x32>
 800b68c:	4634      	mov	r4, r6
 800b68e:	6876      	ldr	r6, [r6, #4]
 800b690:	e7b9      	b.n	800b606 <_malloc_r+0x46>
 800b692:	230c      	movs	r3, #12
 800b694:	603b      	str	r3, [r7, #0]
 800b696:	4638      	mov	r0, r7
 800b698:	f000 f886 	bl	800b7a8 <__malloc_unlock>
 800b69c:	e7a1      	b.n	800b5e2 <_malloc_r+0x22>
 800b69e:	6025      	str	r5, [r4, #0]
 800b6a0:	e7de      	b.n	800b660 <_malloc_r+0xa0>
 800b6a2:	bf00      	nop
 800b6a4:	20006bec 	.word	0x20006bec

0800b6a8 <cleanup_glue>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	6809      	ldr	r1, [r1, #0]
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	b109      	cbz	r1, 800b6b6 <cleanup_glue+0xe>
 800b6b2:	f7ff fff9 	bl	800b6a8 <cleanup_glue>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6be:	f7ff bf13 	b.w	800b4e8 <_free_r>
	...

0800b6c4 <_reclaim_reent>:
 800b6c4:	4b2c      	ldr	r3, [pc, #176]	; (800b778 <_reclaim_reent+0xb4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4283      	cmp	r3, r0
 800b6ca:	b570      	push	{r4, r5, r6, lr}
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	d051      	beq.n	800b774 <_reclaim_reent+0xb0>
 800b6d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b6d2:	b143      	cbz	r3, 800b6e6 <_reclaim_reent+0x22>
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d14a      	bne.n	800b770 <_reclaim_reent+0xac>
 800b6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6dc:	6819      	ldr	r1, [r3, #0]
 800b6de:	b111      	cbz	r1, 800b6e6 <_reclaim_reent+0x22>
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7ff ff01 	bl	800b4e8 <_free_r>
 800b6e6:	6961      	ldr	r1, [r4, #20]
 800b6e8:	b111      	cbz	r1, 800b6f0 <_reclaim_reent+0x2c>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7ff fefc 	bl	800b4e8 <_free_r>
 800b6f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b6f2:	b111      	cbz	r1, 800b6fa <_reclaim_reent+0x36>
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7ff fef7 	bl	800b4e8 <_free_r>
 800b6fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6fc:	b111      	cbz	r1, 800b704 <_reclaim_reent+0x40>
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff fef2 	bl	800b4e8 <_free_r>
 800b704:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b706:	b111      	cbz	r1, 800b70e <_reclaim_reent+0x4a>
 800b708:	4620      	mov	r0, r4
 800b70a:	f7ff feed 	bl	800b4e8 <_free_r>
 800b70e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b710:	b111      	cbz	r1, 800b718 <_reclaim_reent+0x54>
 800b712:	4620      	mov	r0, r4
 800b714:	f7ff fee8 	bl	800b4e8 <_free_r>
 800b718:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b71a:	b111      	cbz	r1, 800b722 <_reclaim_reent+0x5e>
 800b71c:	4620      	mov	r0, r4
 800b71e:	f7ff fee3 	bl	800b4e8 <_free_r>
 800b722:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b724:	b111      	cbz	r1, 800b72c <_reclaim_reent+0x68>
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff fede 	bl	800b4e8 <_free_r>
 800b72c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b72e:	b111      	cbz	r1, 800b736 <_reclaim_reent+0x72>
 800b730:	4620      	mov	r0, r4
 800b732:	f7ff fed9 	bl	800b4e8 <_free_r>
 800b736:	69a3      	ldr	r3, [r4, #24]
 800b738:	b1e3      	cbz	r3, 800b774 <_reclaim_reent+0xb0>
 800b73a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b73c:	4620      	mov	r0, r4
 800b73e:	4798      	blx	r3
 800b740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b742:	b1b9      	cbz	r1, 800b774 <_reclaim_reent+0xb0>
 800b744:	4620      	mov	r0, r4
 800b746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b74a:	f7ff bfad 	b.w	800b6a8 <cleanup_glue>
 800b74e:	5949      	ldr	r1, [r1, r5]
 800b750:	b941      	cbnz	r1, 800b764 <_reclaim_reent+0xa0>
 800b752:	3504      	adds	r5, #4
 800b754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b756:	2d80      	cmp	r5, #128	; 0x80
 800b758:	68d9      	ldr	r1, [r3, #12]
 800b75a:	d1f8      	bne.n	800b74e <_reclaim_reent+0x8a>
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7ff fec3 	bl	800b4e8 <_free_r>
 800b762:	e7ba      	b.n	800b6da <_reclaim_reent+0x16>
 800b764:	680e      	ldr	r6, [r1, #0]
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff febe 	bl	800b4e8 <_free_r>
 800b76c:	4631      	mov	r1, r6
 800b76e:	e7ef      	b.n	800b750 <_reclaim_reent+0x8c>
 800b770:	2500      	movs	r5, #0
 800b772:	e7ef      	b.n	800b754 <_reclaim_reent+0x90>
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	bf00      	nop
 800b778:	20000110 	.word	0x20000110

0800b77c <_sbrk_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d06      	ldr	r5, [pc, #24]	; (800b798 <_sbrk_r+0x1c>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	f7f5 f9b8 	bl	8000afc <_sbrk>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_sbrk_r+0x1a>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_sbrk_r+0x1a>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	20006bf4 	.word	0x20006bf4

0800b79c <__malloc_lock>:
 800b79c:	4801      	ldr	r0, [pc, #4]	; (800b7a4 <__malloc_lock+0x8>)
 800b79e:	f7ff be7b 	b.w	800b498 <__retarget_lock_acquire_recursive>
 800b7a2:	bf00      	nop
 800b7a4:	20006be8 	.word	0x20006be8

0800b7a8 <__malloc_unlock>:
 800b7a8:	4801      	ldr	r0, [pc, #4]	; (800b7b0 <__malloc_unlock+0x8>)
 800b7aa:	f7ff be76 	b.w	800b49a <__retarget_lock_release_recursive>
 800b7ae:	bf00      	nop
 800b7b0:	20006be8 	.word	0x20006be8

0800b7b4 <_init>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_fini>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr

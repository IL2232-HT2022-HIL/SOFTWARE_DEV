
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d04  08004d04  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d04  08004d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d0c  08004d0c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004d20  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004dc0  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000033c  2000014c  08004e60  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000488  08004e60  00020488  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019d69  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000290b  00000000  00000000  00039ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a8  00000000  00000000  0003c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014a0  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029f56  00000000  00000000  0003f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000197e3  00000000  00000000  0006918e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108745  00000000  00000000  00082971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018b0b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005e04  00000000  00000000  0018b108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004cd4 	.word	0x08004cd4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004cd4 	.word	0x08004cd4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 ff45 	bl	80013ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f814 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fa88 	bl	8000a5c <MX_GPIO_Init>
  MX_CAN1_Init();
 800054c:	f000 f880 	bl	8000650 <MX_CAN1_Init>
  MX_DAC_Init();
 8000550:	f000 f8b2 	bl	80006b8 <MX_DAC_Init>
  MX_ETH_Init();
 8000554:	f000 f8da 	bl	800070c <MX_ETH_Init>
  MX_I2C1_Init();
 8000558:	f000 f926 	bl	80007a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800055c:	f000 f964 	bl	8000828 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000560:	f000 f99c 	bl	800089c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000564:	f000 f9d4 	bl	8000910 <MX_TIM1_Init>
  MX_UART7_Init();
 8000568:	f000 fa48 	bl	80009fc <MX_UART7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x30>
	...

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fba0 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemClock_Config+0xd8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <SystemClock_Config+0xd8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xdc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <SystemClock_Config+0xdc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f821 	bl	800263c <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000600:	f000 fb66 	bl	8000cd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000604:	f001 ffca 	bl	800259c <HAL_PWREx_EnableOverDrive>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800060e:	f000 fb5f 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fab2 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800063a:	f000 fb49 	bl	8000cd0 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_CAN1_Init+0x64>)
 8000658:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_CAN1_Init+0x60>)
 800065c:	2210      	movs	r2, #16
 800065e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_CAN1_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_CAN1_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_CAN1_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_CAN1_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_CAN1_Init+0x60>)
 800069e:	f000 ff17 	bl	80014d0 <HAL_CAN_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fb12 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200001a0 	.word	0x200001a0
 80006b4:	40006400 	.word	0x40006400

080006b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_DAC_Init+0x4c>)
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <MX_DAC_Init+0x50>)
 80006ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_DAC_Init+0x4c>)
 80006ce:	f001 f8e0 	bl	8001892 <HAL_DAC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006d8:	f000 fafa 	bl	8000cd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_DAC_Init+0x4c>)
 80006ec:	f001 f8f3 	bl	80018d6 <HAL_DAC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006f6:	f000 faeb 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001c8 	.word	0x200001c8
 8000708:	40007400 	.word	0x40007400

0800070c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ETH_Init+0x84>)
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <MX_ETH_Init+0x88>)
 8000714:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ETH_Init+0x8c>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ETH_Init+0x8c>)
 8000724:	22e1      	movs	r2, #225	; 0xe1
 8000726:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ETH_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ETH_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_ETH_Init+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_ETH_Init+0x84>)
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_ETH_Init+0x8c>)
 800073e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_ETH_Init+0x84>)
 8000742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000746:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_ETH_Init+0x84>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_ETH_Init+0x90>)
 800074c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_ETH_Init+0x84>)
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_ETH_Init+0x94>)
 8000752:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_ETH_Init+0x84>)
 8000756:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800075a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_ETH_Init+0x84>)
 800075e:	f001 f909 	bl	8001974 <HAL_ETH_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 fab2 	bl	8000cd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800076c:	2238      	movs	r2, #56	; 0x38
 800076e:	2100      	movs	r1, #0
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ETH_Init+0x98>)
 8000772:	f004 faa7 	bl	8004cc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_ETH_Init+0x98>)
 8000778:	2221      	movs	r2, #33	; 0x21
 800077a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_ETH_Init+0x98>)
 800077e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000782:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_ETH_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001dc 	.word	0x200001dc
 8000794:	40028000 	.word	0x40028000
 8000798:	2000047c 	.word	0x2000047c
 800079c:	200000ac 	.word	0x200000ac
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	20000168 	.word	0x20000168

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f001 fdb2 	bl	800234c <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 fa6f 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f001 fe39 	bl	800246c <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 fa66 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C1_Init+0x74>)
 8000808:	f001 fe7b 	bl	8002502 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fa5d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000028c 	.word	0x2000028c
 8000820:	40005400 	.word	0x40005400
 8000824:	20303e5d 	.word	0x20303e5d

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_SPI1_Init+0x6c>)
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <MX_SPI1_Init+0x70>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x6c>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000842:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000846:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI1_Init+0x6c>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_SPI1_Init+0x6c>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_SPI1_Init+0x6c>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000870:	2207      	movs	r2, #7
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x6c>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_SPI1_Init+0x6c>)
 8000882:	f002 ffd7 	bl	8003834 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 800088c:	f000 fa20 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200002e0 	.word	0x200002e0
 8000898:	40013000 	.word	0x40013000

0800089c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <MX_SPI3_Init+0x70>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI3_Init+0x6c>)
 80008f6:	f002 ff9d 	bl	8003834 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000900:	f000 f9e6 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000344 	.word	0x20000344
 800090c:	40003c00 	.word	0x40003c00

08000910 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_TIM1_Init+0xe4>)
 800093e:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <MX_TIM1_Init+0xe8>)
 8000940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_TIM1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_TIM1_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <MX_TIM1_Init+0xe4>)
 800096a:	f003 f80e 	bl	800398a <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000974:	f000 f9ac 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4619      	mov	r1, r3
 8000984:	481b      	ldr	r0, [pc, #108]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000986:	f003 f955 	bl	8003c34 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000990:	f000 f99e 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <MX_TIM1_Init+0xe4>)
 8000996:	f003 f84f 	bl	8003a38 <HAL_TIM_IC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009a0:	f000 f996 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <MX_TIM1_Init+0xe4>)
 80009b8:	f003 fc6a 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80009c2:	f000 f985 	bl	8000cd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM1_Init+0xe4>)
 80009de:	f003 f88c 	bl	8003afa <HAL_TIM_IC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009e8:	f000 f972 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200003a8 	.word	0x200003a8
 80009f8:	40010000 	.word	0x40010000

080009fc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_UART7_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_UART7_Init+0x58>)
 8000a40:	f003 fcb4 	bl	80043ac <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f941 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200003f4 	.word	0x200003f4
 8000a58:	40007800 	.word	0x40007800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	4b8f      	ldr	r3, [pc, #572]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a8e      	ldr	r2, [pc, #568]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b8c      	ldr	r3, [pc, #560]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a88      	ldr	r2, [pc, #544]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b86      	ldr	r3, [pc, #536]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa2:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a82      	ldr	r2, [pc, #520]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b7d      	ldr	r3, [pc, #500]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7c      	ldr	r2, [pc, #496]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b7a      	ldr	r3, [pc, #488]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a76      	ldr	r2, [pc, #472]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b74      	ldr	r3, [pc, #464]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	4b71      	ldr	r3, [pc, #452]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a70      	ldr	r2, [pc, #448]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b6e      	ldr	r3, [pc, #440]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b6b      	ldr	r3, [pc, #428]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a6a      	ldr	r2, [pc, #424]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b68      	ldr	r3, [pc, #416]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4865      	ldr	r0, [pc, #404]	; (8000cb4 <MX_GPIO_Init+0x258>)
 8000b20:	f001 fbfa 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000b24:	2200      	movs	r2, #0
 8000b26:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000b2a:	4863      	ldr	r0, [pc, #396]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000b2c:	f001 fbf4 	bl	8002318 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	210c      	movs	r1, #12
 8000b34:	4861      	ldr	r0, [pc, #388]	; (8000cbc <MX_GPIO_Init+0x260>)
 8000b36:	f001 fbef 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000b40:	485f      	ldr	r0, [pc, #380]	; (8000cc0 <MX_GPIO_Init+0x264>)
 8000b42:	f001 fbe9 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	485d      	ldr	r0, [pc, #372]	; (8000cc4 <MX_GPIO_Init+0x268>)
 8000b4e:	f001 fbe3 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2174      	movs	r1, #116	; 0x74
 8000b56:	485c      	ldr	r0, [pc, #368]	; (8000cc8 <MX_GPIO_Init+0x26c>)
 8000b58:	f001 fbde 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000b5c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4856      	ldr	r0, [pc, #344]	; (8000ccc <MX_GPIO_Init+0x270>)
 8000b72:	f001 fa25 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000b76:	f248 0305 	movw	r3, #32773	; 0x8005
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	484e      	ldr	r0, [pc, #312]	; (8000cc4 <MX_GPIO_Init+0x268>)
 8000b8c:	f001 fa18 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4843      	ldr	r0, [pc, #268]	; (8000cb4 <MX_GPIO_Init+0x258>)
 8000ba8:	f001 fa0a 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4840      	ldr	r0, [pc, #256]	; (8000cc0 <MX_GPIO_Init+0x264>)
 8000bc0:	f001 f9fe 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000bd8:	f001 f9f2 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000bdc:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000be2:	2311      	movs	r3, #17
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000bf6:	f001 f9e3 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bfe:	2311      	movs	r3, #17
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	482a      	ldr	r0, [pc, #168]	; (8000cbc <MX_GPIO_Init+0x260>)
 8000c12:	f001 f9d5 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000c16:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <MX_GPIO_Init+0x264>)
 8000c30:	f001 f9c6 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0x268>)
 8000c4e:	f001 f9b7 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000c52:	2304      	movs	r3, #4
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <MX_GPIO_Init+0x26c>)
 8000c6a:	f001 f9a9 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000c6e:	2370      	movs	r3, #112	; 0x70
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c72:	2311      	movs	r3, #17
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <MX_GPIO_Init+0x26c>)
 8000c86:	f001 f99b 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000ca2:	f001 f98d 	bl	8001fc0 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40021400 	.word	0x40021400
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_CAN_MspInit+0x7c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d127      	bne.n	8000d96 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_CAN_MspInit+0x80>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d86:	2309      	movs	r3, #9
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_CAN_MspInit+0x84>)
 8000d92:	f001 f915 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40006400 	.word	0x40006400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020c00 	.word	0x40020c00

08000dac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_DAC_MspInit+0x74>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d123      	bne.n	8000e16 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000dd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_DAC_MspInit+0x78>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_DAC_MspInit+0x7c>)
 8000e12:	f001 f8d5 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40007400 	.word	0x40007400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08e      	sub	sp, #56	; 0x38
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_ETH_MspInit+0x158>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f040 8096 	bne.w	8000f7c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a46      	ldr	r2, [pc, #280]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a40      	ldr	r2, [pc, #256]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_ETH_MspInit+0x15c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ef8:	2332      	movs	r3, #50	; 0x32
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <HAL_ETH_MspInit+0x160>)
 8000f14:	f001 f854 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f18:	2386      	movs	r3, #134	; 0x86
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f28:	230b      	movs	r3, #11
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4817      	ldr	r0, [pc, #92]	; (8000f90 <HAL_ETH_MspInit+0x164>)
 8000f34:	f001 f844 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <HAL_ETH_MspInit+0x168>)
 8000f56:	f001 f833 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_ETH_MspInit+0x16c>)
 8000f78:	f001 f822 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40028000 	.word	0x40028000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ae      	sub	sp, #184	; 0xb8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2290      	movs	r2, #144	; 0x90
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fe81 	bl	8004cc4 <memset>
  if(hi2c->Instance==I2C1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_I2C_MspInit+0xb4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d13c      	bne.n	8001046 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 f802 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fe73 	bl	8000cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101c:	2304      	movs	r3, #4
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001026:	4619      	mov	r1, r3
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_I2C_MspInit+0xbc>)
 800102a:	f000 ffc9 	bl	8001fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_I2C_MspInit+0xb8>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37b8      	adds	r7, #184	; 0xb8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40005400 	.word	0x40005400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a4a      	ldr	r2, [pc, #296]	; (80011a4 <HAL_SPI_MspInit+0x148>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d144      	bne.n	8001108 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4832      	ldr	r0, [pc, #200]	; (80011ac <HAL_SPI_MspInit+0x150>)
 80010e2:	f000 ff6d 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e6:	2308      	movs	r3, #8
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f6:	2305      	movs	r3, #5
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	482b      	ldr	r0, [pc, #172]	; (80011b0 <HAL_SPI_MspInit+0x154>)
 8001102:	f000 ff5d 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001106:	e049      	b.n	800119c <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <HAL_SPI_MspInit+0x158>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d144      	bne.n	800119c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800115a:	2304      	movs	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800116a:	2307      	movs	r3, #7
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <HAL_SPI_MspInit+0x154>)
 8001176:	f000 ff23 	bl	8001fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 800117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800118c:	2306      	movs	r3, #6
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001198:	f000 ff12 	bl	8001fc0 <HAL_GPIO_Init>
}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013000 	.word	0x40013000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40003c00 	.word	0x40003c00
 80011b8:	40020800 	.word	0x40020800

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_TIM_Base_MspInit+0x7c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d128      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_Base_MspInit+0x80>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800120e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_Base_MspInit+0x84>)
 800122c:	f000 fec8 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010000 	.word	0x40010000
 800123c:	40023800 	.word	0x40023800
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2290      	movs	r2, #144	; 0x90
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fd2d 	bl	8004cc4 <memset>
  if(huart->Instance==UART7)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_UART_MspInit+0xb4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d13c      	bne.n	80012ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800127a:	2300      	movs	r3, #0
 800127c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f001 feae 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff fd1f 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80012c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80012dc:	2308      	movs	r3, #8
 80012de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0xbc>)
 80012ea:	f000 fe69 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	37b8      	adds	r7, #184	; 0xb8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40007800 	.word	0x40007800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40021000 	.word	0x40021000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f87a 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a6:	f7ff ffd7 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fc67 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f8c5 	bl	800053c <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013c0:	08004d14 	.word	0x08004d14
  ldr r2, =_sbss
 80013c4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80013c8:	20000488 	.word	0x20000488

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>

080013ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 fa2a 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f805 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fc7d 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fa37 	bl	800187a <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 fa0d 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20000484 	.word	0x20000484

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000484 	.word	0x20000484

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0ed      	b.n	80016be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fc18 	bl	8000d24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff ffb4 	bl	8001470 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150a:	e012      	b.n	8001532 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150c:	f7ff ffb0 	bl	8001470 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d90b      	bls.n	8001532 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0c5      	b.n	80016be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0e5      	beq.n	800150c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0202 	bic.w	r2, r2, #2
 800154e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001550:	f7ff ff8e 	bl	8001470 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001556:	e012      	b.n	800157e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001558:	f7ff ff8a 	bl	8001470 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b0a      	cmp	r3, #10
 8001564:	d90b      	bls.n	800157e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2205      	movs	r2, #5
 8001576:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e09f      	b.n	80016be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e5      	bne.n	8001558 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7e1b      	ldrb	r3, [r3, #24]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e007      	b.n	80015b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7e5b      	ldrb	r3, [r3, #25]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e9b      	ldrb	r3, [r3, #26]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0220 	orr.w	r2, r2, #32
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e007      	b.n	800160a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0220 	bic.w	r2, r2, #32
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7edb      	ldrb	r3, [r3, #27]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d108      	bne.n	8001624 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0210 	bic.w	r2, r2, #16
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e007      	b.n	8001634 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0210 	orr.w	r2, r2, #16
 8001632:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7f1b      	ldrb	r3, [r3, #28]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0208 	orr.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e007      	b.n	800165e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0208 	bic.w	r2, r2, #8
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7f5b      	ldrb	r3, [r3, #29]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0204 	orr.w	r2, r2, #4
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e007      	b.n	8001688 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0204 	bic.w	r2, r2, #4
 8001686:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	ea42 0103 	orr.w	r1, r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff47 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff5c 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffb0 	bl	80017e8 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e014      	b.n	80018ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fa79 	bl	8000dac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2202      	movs	r2, #2
 80018be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_DAC_ConfigChannel+0x18>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e03c      	b.n	8001968 <HAL_DAC_ConfigChannel+0x92>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2202      	movs	r2, #2
 80018f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	f640 72fe 	movw	r2, #4094	; 0xffe
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	22c0      	movs	r2, #192	; 0xc0
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43da      	mvns	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06a      	b.n	8001a5c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2223      	movs	r2, #35	; 0x23
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fa47 	bl	8000e2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_ETH_Init+0xf0>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff fd40 	bl	8001470 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f2:	e011      	b.n	8001a18 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f4:	f7ff fd3c 	bl	8001470 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a02:	d909      	bls.n	8001a18 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	22e0      	movs	r2, #224	; 0xe0
 8001a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e021      	b.n	8001a5c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e4      	bne.n	80019f4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f958 	bl	8001ce0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f9ff 	bl	8001e34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa55 	bl	8001ee6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f9bd 	bl	8001dc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2210      	movs	r2, #16
 8001a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800

08001a6c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <ETH_SetMACConfig+0x15c>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7c1b      	ldrb	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <ETH_SetMACConfig+0x28>
 8001a8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a92:	e000      	b.n	8001a96 <ETH_SetMACConfig+0x2a>
 8001a94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	7c5b      	ldrb	r3, [r3, #17]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <ETH_SetMACConfig+0x38>
 8001a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa2:	e000      	b.n	8001aa6 <ETH_SetMACConfig+0x3a>
 8001aa4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aa6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	7fdb      	ldrb	r3, [r3, #31]
 8001ab2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001aba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	7f92      	ldrb	r2, [r2, #30]
 8001ac0:	2a00      	cmp	r2, #0
 8001ac2:	d102      	bne.n	8001aca <ETH_SetMACConfig+0x5e>
 8001ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac8:	e000      	b.n	8001acc <ETH_SetMACConfig+0x60>
 8001aca:	2200      	movs	r2, #0
                        macconf->Speed |
 8001acc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
 8001ad2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ada:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ae2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetMACConfig+0x88>
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	e000      	b.n	8001af6 <ETH_SetMACConfig+0x8a>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7bdb      	ldrb	r3, [r3, #15]
 8001afc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001afe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fcae 	bl	8001488 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d101      	bne.n	8001b5a <ETH_SetMACConfig+0xee>
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	e000      	b.n	8001b5c <ETH_SetMACConfig+0xf0>
 8001b5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d101      	bne.n	8001b72 <ETH_SetMACConfig+0x106>
 8001b6e:	2208      	movs	r2, #8
 8001b70:	e000      	b.n	8001b74 <ETH_SetMACConfig+0x108>
 8001b72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b7c:	2a01      	cmp	r2, #1
 8001b7e:	d101      	bne.n	8001b84 <ETH_SetMACConfig+0x118>
 8001b80:	2204      	movs	r2, #4
 8001b82:	e000      	b.n	8001b86 <ETH_SetMACConfig+0x11a>
 8001b84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d101      	bne.n	8001b96 <ETH_SetMACConfig+0x12a>
 8001b92:	2202      	movs	r2, #2
 8001b94:	e000      	b.n	8001b98 <ETH_SetMACConfig+0x12c>
 8001b96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fc69 	bl	8001488 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	ff20810f 	.word	0xff20810f

08001bcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <ETH_SetDMAConfig+0x110>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7b1b      	ldrb	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <ETH_SetDMAConfig+0x2c>
 8001bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf6:	e000      	b.n	8001bfa <ETH_SetDMAConfig+0x2e>
 8001bf8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7b5b      	ldrb	r3, [r3, #13]
 8001bfe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	7f52      	ldrb	r2, [r2, #29]
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <ETH_SetDMAConfig+0x44>
 8001c0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c0e:	e000      	b.n	8001c12 <ETH_SetDMAConfig+0x46>
 8001c10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	7b9b      	ldrb	r3, [r3, #14]
 8001c18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7f1b      	ldrb	r3, [r3, #28]
 8001c26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	7f9b      	ldrb	r3, [r3, #30]
 8001c2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c40:	4313      	orrs	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff fc10 	bl	8001488 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ca4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fbe1 	bl	8001488 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f8de3f23 	.word	0xf8de3f23

08001ce0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0a6      	sub	sp, #152	; 0x98
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fe86 	bl	8001a6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff08 	bl	8001bcc <ETH_SetDMAConfig>
}
 8001dbc:	bf00      	nop
 8001dbe:	3798      	adds	r7, #152	; 0x98
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	3204      	adds	r2, #4
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <ETH_MACAddressConfig+0x68>)
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3303      	adds	r3, #3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	061a      	lsls	r2, r3, #24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <ETH_MACAddressConfig+0x6c>)
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40028040 	.word	0x40028040
 8001e30:	40028044 	.word	0x40028044

08001e34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e03e      	b.n	8001ec0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	3206      	adds	r2, #6
 8001e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d80c      	bhi.n	8001ea4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e004      	b.n	8001eae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d9bd      	bls.n	8001e42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e046      	b.n	8001f82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	3212      	adds	r2, #18
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d80c      	bhi.n	8001f72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	e004      	b.n	8001f7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d9b5      	bls.n	8001ef4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	60da      	str	r2, [r3, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e175      	b.n	80022cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8164 	bne.w	80022c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x56>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d130      	bne.n	8002078 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80be 	beq.w	80022c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_GPIO_Init+0x324>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002162:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d037      	beq.n	80021fe <HAL_GPIO_Init+0x23e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_GPIO_Init+0x23a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_Init+0x334>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x236>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_GPIO_Init+0x338>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x232>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x33c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_GPIO_Init+0x340>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x22a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x344>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a51      	ldr	r2, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x348>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a50      	ldr	r2, [pc, #320]	; (800230c <HAL_GPIO_Init+0x34c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_GPIO_Init+0x350>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x21a>
 80021d6:	2309      	movs	r3, #9
 80021d8:	e012      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021da:	230a      	movs	r3, #10
 80021dc:	e010      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021de:	2308      	movs	r3, #8
 80021e0:	e00e      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e6:	2306      	movs	r3, #6
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <HAL_GPIO_Init+0x328>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x354>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x354>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x354>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x354>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae86 	bls.w	8001fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40022000 	.word	0x40022000
 8002310:	40022400 	.word	0x40022400
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fe12 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800239c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d104      	bne.n	80023e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_I2C_Init+0x11c>)
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	02008000 	.word	0x02008000

0800246c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	d138      	bne.n	80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800248c:	2302      	movs	r3, #2
 800248e:	e032      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	d139      	bne.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002522:	2302      	movs	r3, #2
 8002524:	e033      	b.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	; 0x24
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002554:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ca:	f7fe ff51 	bl	8001470 <HAL_GetTick>
 80025ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025d0:	e009      	b.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025d2:	f7fe ff4d 	bl	8001470 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e0:	d901      	bls.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e022      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f2:	d1ee      	bne.n	80025d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002600:	f7fe ff36 	bl	8001470 <HAL_GetTick>
 8002604:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002606:	e009      	b.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002608:	f7fe ff32 	bl	8001470 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002616:	d901      	bls.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e007      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002628:	d1ee      	bne.n	8002608 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e29b      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	4b96      	ldr	r3, [pc, #600]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266c:	4b93      	ldr	r3, [pc, #588]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d112      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06c      	beq.n	800276c <HAL_RCC_OscConfig+0x130>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d168      	bne.n	800276c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e275      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7a>
 80026a8:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x9c>
 80026be:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0xc0>
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b73      	ldr	r3, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a72      	ldr	r2, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fea8 	bl	8001470 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fea4 	bl	8001470 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e229      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fe94 	bl	8001470 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fe90 	bl	8001470 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e215      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x110>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d069      	beq.n	800284e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1e9      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	493d      	ldr	r1, [pc, #244]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e040      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe46 	bl	8001470 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fe42 	bl	8001470 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4929      	ldr	r1, [pc, #164]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fe22 	bl	8001470 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fe1e 	bl	8001470 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1a3      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d038      	beq.n	80028cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fdff 	bl	8001470 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fdfb 	bl	8001470 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e180      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x23a>
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fde5 	bl	8001470 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe fde1 	bl	8001470 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e166      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
 80028bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a4 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a88      	ldr	r2, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b86      	ldr	r3, [pc, #536]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800290e:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7f      	ldr	r2, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe fda9 	bl	8001470 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fda5 	bl	8001470 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e12a      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31a>
 8002948:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x33c>
 800295e:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x35e>
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b5f      	ldr	r3, [pc, #380]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a5e      	ldr	r2, [pc, #376]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 800299a:	4b5c      	ldr	r3, [pc, #368]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe fd59 	bl	8001470 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fd55 	bl	8001470 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0d8      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x386>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fd43 	bl	8001470 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fd3f 	bl	8001470 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0c2      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80ae 	beq.w	8002b88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d06d      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d14b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd10 	bl	8001470 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fd0c 	bl	8001470 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e091      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	491b      	ldr	r1, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fcde 	bl	8001470 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fcda 	bl	8001470 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e05f      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
 8002ad6:	e057      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fcc4 	bl	8001470 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fcc0 	bl	8001470 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x4b0>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_RCC_OscConfig+0x558>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d030      	beq.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d129      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d122      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d119      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10f      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d0      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d910      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4965      	ldr	r1, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d040      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e073      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4936      	ldr	r1, [pc, #216]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fbf0 	bl	8001470 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe fbec 	bl	8001470 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e053      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4922      	ldr	r1, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1cc>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1d0>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fb4c 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08004cec 	.word	0x08004cec
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	; 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e80:	f7fd f9da 	bl	8000238 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd f980 	bl	8000238 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	; 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004cfc 	.word	0x08004cfc

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08004cfc 	.word	0x08004cfc

08002fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800300c:	4b69      	ldr	r3, [pc, #420]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a68      	ldr	r2, [pc, #416]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003016:	6093      	str	r3, [r2, #8]
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	4964      	ldr	r1, [pc, #400]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d017      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800303e:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	4959      	ldr	r1, [pc, #356]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d017      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800307a:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	494a      	ldr	r1, [pc, #296]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 808b 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe f9c0 	bl	8001470 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7fe f9bc 	bl	8001470 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e38f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d035      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d02e      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d114      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f984 	bl	8001470 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe f980 	bl	8001470 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e351      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ee      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319a:	d111      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	4901      	ldr	r1, [pc, #4]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
 80031b2:	e00b      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
 80031bc:	0ffffcff 	.word	0x0ffffcff
 80031c0:	4bac      	ldr	r3, [pc, #688]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4aab      	ldr	r2, [pc, #684]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	4ba9      	ldr	r3, [pc, #676]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	49a6      	ldr	r1, [pc, #664]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ea:	4ba2      	ldr	r3, [pc, #648]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f0:	4aa0      	ldr	r2, [pc, #640]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031fa:	4b9e      	ldr	r3, [pc, #632]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	499b      	ldr	r1, [pc, #620]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003218:	4b96      	ldr	r3, [pc, #600]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	4993      	ldr	r1, [pc, #588]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800323a:	4b8e      	ldr	r3, [pc, #568]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003248:	498a      	ldr	r1, [pc, #552]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800325c:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	4982      	ldr	r1, [pc, #520]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800327e:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4979      	ldr	r1, [pc, #484]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a0:	4b74      	ldr	r3, [pc, #464]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4971      	ldr	r1, [pc, #452]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032c2:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f023 020c 	bic.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	4968      	ldr	r1, [pc, #416]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032e4:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	4960      	ldr	r1, [pc, #384]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	4957      	ldr	r1, [pc, #348]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003328:	4b52      	ldr	r3, [pc, #328]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	494f      	ldr	r1, [pc, #316]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4946      	ldr	r1, [pc, #280]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800336c:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	493e      	ldr	r1, [pc, #248]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	4935      	ldr	r1, [pc, #212]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d011      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e0:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	4914      	ldr	r1, [pc, #80]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003444:	490b      	ldr	r1, [pc, #44]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00f      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003468:	4902      	ldr	r1, [pc, #8]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003484:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	4986      	ldr	r1, [pc, #536]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034a8:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b8:	497d      	ldr	r1, [pc, #500]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d006      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80d6 	beq.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034d4:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fd ffc6 	bl	8001470 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034e8:	f7fd ffc2 	bl	8001470 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e195      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fa:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d021      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800351a:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	019a      	lsls	r2, r3, #6
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	4958      	ldr	r1, [pc, #352]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02e      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003580:	d129      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003582:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003590:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003596:	0f1b      	lsrs	r3, r3, #28
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	019a      	lsls	r2, r3, #6
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	493e      	ldr	r1, [pc, #248]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035be:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f023 021f 	bic.w	r2, r3, #31
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	3b01      	subs	r3, #1
 80035ce:	4938      	ldr	r1, [pc, #224]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01d      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e2:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e8:	0e1b      	lsrs	r3, r3, #24
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f6:	0f1b      	lsrs	r3, r3, #28
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	019a      	lsls	r2, r3, #6
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	4926      	ldr	r1, [pc, #152]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	019a      	lsls	r2, r3, #6
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	071b      	lsls	r3, r3, #28
 8003646:	491a      	ldr	r1, [pc, #104]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365a:	f7fd ff09 	bl	8001470 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003662:	f7fd ff05 	bl	8001470 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0d8      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	f040 80ce 	bne.w	8003824 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd feec 	bl	8001470 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800369a:	e00b      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800369c:	f7fd fee8 	bl	8001470 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d904      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0bb      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c0:	d0ec      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02e      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d12a      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	0f1b      	lsrs	r3, r3, #28
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	019a      	lsls	r2, r3, #6
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	4944      	ldr	r1, [pc, #272]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	493d      	ldr	r1, [pc, #244]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d022      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003754:	d11d      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	0e1b      	lsrs	r3, r3, #24
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	0f1b      	lsrs	r3, r3, #28
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	019a      	lsls	r2, r3, #6
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	071b      	lsls	r3, r3, #28
 800378a:	4929      	ldr	r1, [pc, #164]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d028      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	019a      	lsls	r2, r3, #6
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	4917      	ldr	r1, [pc, #92]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7fd fe38 	bl	8001470 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003804:	f7fd fe34 	bl	8001470 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e007      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003822:	d1ef      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e09d      	b.n	8003982 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d009      	beq.n	800386c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
 800385e:	e005      	b.n	800386c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fbe8 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ac:	d902      	bls.n	80038b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e002      	b.n	80038ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038c2:	d007      	beq.n	80038d4 <HAL_SPI_Init+0xa0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	ea42 0103 	orr.w	r1, r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0204 	and.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003950:	ea42 0103 	orr.w	r1, r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e049      	b.n	8003a30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd fc03 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 f9fd 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e049      	b.n	8003ade <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f841 	bl	8003ae6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 f9a6 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e088      	b.n	8003c2a <HAL_TIM_IC_ConfigChannel+0x130>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11b      	bne.n	8003b5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f000 f9e7 	bl	8003f08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 020c 	bic.w	r2, r2, #12
 8003b48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6999      	ldr	r1, [r3, #24]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
 8003b5c:	e060      	b.n	8003c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d11c      	bne.n	8003b9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f000 fa6b 	bl	800404e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
 8003b9c:	e040      	b.n	8003c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f000 fab8 	bl	8004128 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 020c 	bic.w	r2, r2, #12
 8003bc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69d9      	ldr	r1, [r3, #28]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	61da      	str	r2, [r3, #28]
 8003bda:	e021      	b.n	8003c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d11c      	bne.n	8003c1c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 fad5 	bl	80041a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	61da      	str	r2, [r3, #28]
 8003c1a:	e001      	b.n	8003c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_ConfigClockSource+0x1c>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0b4      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x186>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_TIM_ConfigClockSource+0x190>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d03e      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xd4>
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	f200 8087 	bhi.w	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	f000 8086 	beq.w	8003da6 <HAL_TIM_ConfigClockSource+0x172>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d87f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d01a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xa6>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d87b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d050      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x11a>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d877      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d03c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xfa>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d873      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d058      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x13a>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d86f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d064      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d86b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d060      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d867      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d05a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	e062      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f000 fab1 	bl	8004250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	609a      	str	r2, [r3, #8]
      break;
 8003d06:	e04f      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f000 fa9a 	bl	8004250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e03c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f958 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2150      	movs	r1, #80	; 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa67 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e02c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f9b4 	bl	80040c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2160      	movs	r1, #96	; 0x60
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa57 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e01c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 f938 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fa47 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 fa3e 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e003      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e000      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	fffeff88 	.word	0xfffeff88

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a40      	ldr	r2, [pc, #256]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de6:	d00f      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3d      	ldr	r2, [pc, #244]	; (8003ee0 <TIM_Base_SetConfig+0x118>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <TIM_Base_SetConfig+0x11c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <TIM_Base_SetConfig+0x120>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d027      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ee0 <TIM_Base_SetConfig+0x118>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d023      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <TIM_Base_SetConfig+0x11c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <TIM_Base_SetConfig+0x120>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d017      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <TIM_Base_SetConfig+0x128>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <TIM_Base_SetConfig+0x12c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <TIM_Base_SetConfig+0x130>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a25      	ldr	r2, [pc, #148]	; (8003efc <TIM_Base_SetConfig+0x134>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <TIM_Base_SetConfig+0x138>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a23      	ldr	r2, [pc, #140]	; (8003f04 <TIM_Base_SetConfig+0x13c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <TIM_Base_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0xf8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <TIM_Base_SetConfig+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d103      	bne.n	8003ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	40001800 	.word	0x40001800
 8003f00:	40001c00 	.word	0x40001c00
 8003f04:	40002000 	.word	0x40002000

08003f08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <TIM_TI1_SetConfig+0xcc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01b      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d017      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <TIM_TI1_SetConfig+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a24      	ldr	r2, [pc, #144]	; (8003fdc <TIM_TI1_SetConfig+0xd4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00f      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <TIM_TI1_SetConfig+0xd8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <TIM_TI1_SetConfig+0xdc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <TIM_TI1_SetConfig+0xe0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_TI1_SetConfig+0x66>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <TIM_TI1_SetConfig+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <TIM_TI1_SetConfig+0x6a>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <TIM_TI1_SetConfig+0x6c>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e003      	b.n	8003f92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 030a 	bic.w	r3, r3, #10
 8003fac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 030a 	and.w	r3, r3, #10
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f023 030a 	bic.w	r3, r3, #10
 800402c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 0210 	bic.w	r2, r3, #16
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800408c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	031b      	lsls	r3, r3, #12
 8004092:	b29b      	uxth	r3, r3
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 0210 	bic.w	r2, r3, #16
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	031b      	lsls	r3, r3, #12
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0303 	bic.w	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	b2db      	uxtb	r3, r3
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004178:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	031b      	lsls	r3, r3, #12
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	f043 0307 	orr.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e06d      	b.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a30      	ldr	r2, [pc, #192]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d01d      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d10c      	bne.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000
 8004394:	40010400 	.word	0x40010400
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40001800 	.word	0x40001800

080043ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e040      	b.n	8004440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc ff38 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f82c 	bl	8004448 <UART_SetConfig>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e022      	b.n	8004440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa84 	bl	8004910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb0b 	bl	8004a54 <UART_CheckIdleState>
 800443e:	4603      	mov	r3, r0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4ba6      	ldr	r3, [pc, #664]	; (800470c <UART_SetConfig+0x2c4>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	430b      	orrs	r3, r1
 800447e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a94      	ldr	r2, [pc, #592]	; (8004710 <UART_SetConfig+0x2c8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d120      	bne.n	8004506 <UART_SetConfig+0xbe>
 80044c4:	4b93      	ldr	r3, [pc, #588]	; (8004714 <UART_SetConfig+0x2cc>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d816      	bhi.n	8004500 <UART_SetConfig+0xb8>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x90>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044f5 	.word	0x080044f5
 80044e0:	080044ef 	.word	0x080044ef
 80044e4:	080044fb 	.word	0x080044fb
 80044e8:	2301      	movs	r3, #1
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e150      	b.n	8004790 <UART_SetConfig+0x348>
 80044ee:	2302      	movs	r3, #2
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e14d      	b.n	8004790 <UART_SetConfig+0x348>
 80044f4:	2304      	movs	r3, #4
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e14a      	b.n	8004790 <UART_SetConfig+0x348>
 80044fa:	2308      	movs	r3, #8
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e147      	b.n	8004790 <UART_SetConfig+0x348>
 8004500:	2310      	movs	r3, #16
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e144      	b.n	8004790 <UART_SetConfig+0x348>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a83      	ldr	r2, [pc, #524]	; (8004718 <UART_SetConfig+0x2d0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d132      	bne.n	8004576 <UART_SetConfig+0x12e>
 8004510:	4b80      	ldr	r3, [pc, #512]	; (8004714 <UART_SetConfig+0x2cc>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d828      	bhi.n	8004570 <UART_SetConfig+0x128>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0xdc>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004559 	.word	0x08004559
 8004528:	08004571 	.word	0x08004571
 800452c:	08004571 	.word	0x08004571
 8004530:	08004571 	.word	0x08004571
 8004534:	08004565 	.word	0x08004565
 8004538:	08004571 	.word	0x08004571
 800453c:	08004571 	.word	0x08004571
 8004540:	08004571 	.word	0x08004571
 8004544:	0800455f 	.word	0x0800455f
 8004548:	08004571 	.word	0x08004571
 800454c:	08004571 	.word	0x08004571
 8004550:	08004571 	.word	0x08004571
 8004554:	0800456b 	.word	0x0800456b
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e118      	b.n	8004790 <UART_SetConfig+0x348>
 800455e:	2302      	movs	r3, #2
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e115      	b.n	8004790 <UART_SetConfig+0x348>
 8004564:	2304      	movs	r3, #4
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e112      	b.n	8004790 <UART_SetConfig+0x348>
 800456a:	2308      	movs	r3, #8
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e10f      	b.n	8004790 <UART_SetConfig+0x348>
 8004570:	2310      	movs	r3, #16
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e10c      	b.n	8004790 <UART_SetConfig+0x348>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a68      	ldr	r2, [pc, #416]	; (800471c <UART_SetConfig+0x2d4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d120      	bne.n	80045c2 <UART_SetConfig+0x17a>
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <UART_SetConfig+0x2cc>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800458a:	2b30      	cmp	r3, #48	; 0x30
 800458c:	d013      	beq.n	80045b6 <UART_SetConfig+0x16e>
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d814      	bhi.n	80045bc <UART_SetConfig+0x174>
 8004592:	2b20      	cmp	r3, #32
 8004594:	d009      	beq.n	80045aa <UART_SetConfig+0x162>
 8004596:	2b20      	cmp	r3, #32
 8004598:	d810      	bhi.n	80045bc <UART_SetConfig+0x174>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <UART_SetConfig+0x15c>
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d006      	beq.n	80045b0 <UART_SetConfig+0x168>
 80045a2:	e00b      	b.n	80045bc <UART_SetConfig+0x174>
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e0f2      	b.n	8004790 <UART_SetConfig+0x348>
 80045aa:	2302      	movs	r3, #2
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e0ef      	b.n	8004790 <UART_SetConfig+0x348>
 80045b0:	2304      	movs	r3, #4
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e0ec      	b.n	8004790 <UART_SetConfig+0x348>
 80045b6:	2308      	movs	r3, #8
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e0e9      	b.n	8004790 <UART_SetConfig+0x348>
 80045bc:	2310      	movs	r3, #16
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e0e6      	b.n	8004790 <UART_SetConfig+0x348>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a56      	ldr	r2, [pc, #344]	; (8004720 <UART_SetConfig+0x2d8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d120      	bne.n	800460e <UART_SetConfig+0x1c6>
 80045cc:	4b51      	ldr	r3, [pc, #324]	; (8004714 <UART_SetConfig+0x2cc>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045d6:	2bc0      	cmp	r3, #192	; 0xc0
 80045d8:	d013      	beq.n	8004602 <UART_SetConfig+0x1ba>
 80045da:	2bc0      	cmp	r3, #192	; 0xc0
 80045dc:	d814      	bhi.n	8004608 <UART_SetConfig+0x1c0>
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d009      	beq.n	80045f6 <UART_SetConfig+0x1ae>
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d810      	bhi.n	8004608 <UART_SetConfig+0x1c0>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <UART_SetConfig+0x1a8>
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d006      	beq.n	80045fc <UART_SetConfig+0x1b4>
 80045ee:	e00b      	b.n	8004608 <UART_SetConfig+0x1c0>
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0cc      	b.n	8004790 <UART_SetConfig+0x348>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e0c9      	b.n	8004790 <UART_SetConfig+0x348>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0c6      	b.n	8004790 <UART_SetConfig+0x348>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e0c3      	b.n	8004790 <UART_SetConfig+0x348>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e0c0      	b.n	8004790 <UART_SetConfig+0x348>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a44      	ldr	r2, [pc, #272]	; (8004724 <UART_SetConfig+0x2dc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d125      	bne.n	8004664 <UART_SetConfig+0x21c>
 8004618:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <UART_SetConfig+0x2cc>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004626:	d017      	beq.n	8004658 <UART_SetConfig+0x210>
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d817      	bhi.n	800465e <UART_SetConfig+0x216>
 800462e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004632:	d00b      	beq.n	800464c <UART_SetConfig+0x204>
 8004634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004638:	d811      	bhi.n	800465e <UART_SetConfig+0x216>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <UART_SetConfig+0x1fe>
 800463e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004642:	d006      	beq.n	8004652 <UART_SetConfig+0x20a>
 8004644:	e00b      	b.n	800465e <UART_SetConfig+0x216>
 8004646:	2300      	movs	r3, #0
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e0a1      	b.n	8004790 <UART_SetConfig+0x348>
 800464c:	2302      	movs	r3, #2
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e09e      	b.n	8004790 <UART_SetConfig+0x348>
 8004652:	2304      	movs	r3, #4
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e09b      	b.n	8004790 <UART_SetConfig+0x348>
 8004658:	2308      	movs	r3, #8
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e098      	b.n	8004790 <UART_SetConfig+0x348>
 800465e:	2310      	movs	r3, #16
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e095      	b.n	8004790 <UART_SetConfig+0x348>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2f      	ldr	r2, [pc, #188]	; (8004728 <UART_SetConfig+0x2e0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d125      	bne.n	80046ba <UART_SetConfig+0x272>
 800466e:	4b29      	ldr	r3, [pc, #164]	; (8004714 <UART_SetConfig+0x2cc>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800467c:	d017      	beq.n	80046ae <UART_SetConfig+0x266>
 800467e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004682:	d817      	bhi.n	80046b4 <UART_SetConfig+0x26c>
 8004684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004688:	d00b      	beq.n	80046a2 <UART_SetConfig+0x25a>
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468e:	d811      	bhi.n	80046b4 <UART_SetConfig+0x26c>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <UART_SetConfig+0x254>
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004698:	d006      	beq.n	80046a8 <UART_SetConfig+0x260>
 800469a:	e00b      	b.n	80046b4 <UART_SetConfig+0x26c>
 800469c:	2301      	movs	r3, #1
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e076      	b.n	8004790 <UART_SetConfig+0x348>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e073      	b.n	8004790 <UART_SetConfig+0x348>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e070      	b.n	8004790 <UART_SetConfig+0x348>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e06d      	b.n	8004790 <UART_SetConfig+0x348>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e06a      	b.n	8004790 <UART_SetConfig+0x348>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1b      	ldr	r2, [pc, #108]	; (800472c <UART_SetConfig+0x2e4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d138      	bne.n	8004736 <UART_SetConfig+0x2ee>
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <UART_SetConfig+0x2cc>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046d2:	d017      	beq.n	8004704 <UART_SetConfig+0x2bc>
 80046d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046d8:	d82a      	bhi.n	8004730 <UART_SetConfig+0x2e8>
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046de:	d00b      	beq.n	80046f8 <UART_SetConfig+0x2b0>
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e4:	d824      	bhi.n	8004730 <UART_SetConfig+0x2e8>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <UART_SetConfig+0x2aa>
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d006      	beq.n	80046fe <UART_SetConfig+0x2b6>
 80046f0:	e01e      	b.n	8004730 <UART_SetConfig+0x2e8>
 80046f2:	2300      	movs	r3, #0
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e04b      	b.n	8004790 <UART_SetConfig+0x348>
 80046f8:	2302      	movs	r3, #2
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e048      	b.n	8004790 <UART_SetConfig+0x348>
 80046fe:	2304      	movs	r3, #4
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e045      	b.n	8004790 <UART_SetConfig+0x348>
 8004704:	2308      	movs	r3, #8
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e042      	b.n	8004790 <UART_SetConfig+0x348>
 800470a:	bf00      	nop
 800470c:	efff69f3 	.word	0xefff69f3
 8004710:	40011000 	.word	0x40011000
 8004714:	40023800 	.word	0x40023800
 8004718:	40004400 	.word	0x40004400
 800471c:	40004800 	.word	0x40004800
 8004720:	40004c00 	.word	0x40004c00
 8004724:	40005000 	.word	0x40005000
 8004728:	40011400 	.word	0x40011400
 800472c:	40007800 	.word	0x40007800
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e02c      	b.n	8004790 <UART_SetConfig+0x348>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a72      	ldr	r2, [pc, #456]	; (8004904 <UART_SetConfig+0x4bc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d125      	bne.n	800478c <UART_SetConfig+0x344>
 8004740:	4b71      	ldr	r3, [pc, #452]	; (8004908 <UART_SetConfig+0x4c0>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800474a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800474e:	d017      	beq.n	8004780 <UART_SetConfig+0x338>
 8004750:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004754:	d817      	bhi.n	8004786 <UART_SetConfig+0x33e>
 8004756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475a:	d00b      	beq.n	8004774 <UART_SetConfig+0x32c>
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	d811      	bhi.n	8004786 <UART_SetConfig+0x33e>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <UART_SetConfig+0x326>
 8004766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476a:	d006      	beq.n	800477a <UART_SetConfig+0x332>
 800476c:	e00b      	b.n	8004786 <UART_SetConfig+0x33e>
 800476e:	2300      	movs	r3, #0
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e00d      	b.n	8004790 <UART_SetConfig+0x348>
 8004774:	2302      	movs	r3, #2
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e00a      	b.n	8004790 <UART_SetConfig+0x348>
 800477a:	2304      	movs	r3, #4
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e007      	b.n	8004790 <UART_SetConfig+0x348>
 8004780:	2308      	movs	r3, #8
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e004      	b.n	8004790 <UART_SetConfig+0x348>
 8004786:	2310      	movs	r3, #16
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e001      	b.n	8004790 <UART_SetConfig+0x348>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d15b      	bne.n	8004852 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800479a:	7ffb      	ldrb	r3, [r7, #31]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d828      	bhi.n	80047f2 <UART_SetConfig+0x3aa>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x360>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fbe2 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80047d0:	61b8      	str	r0, [r7, #24]
        break;
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fe fbf2 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 80047d8:	61b8      	str	r0, [r7, #24]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b4b      	ldr	r3, [pc, #300]	; (800490c <UART_SetConfig+0x4c4>)
 80047de:	61bb      	str	r3, [r7, #24]
        break;
 80047e0:	e00c      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe fac5 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 80047e6:	61b8      	str	r0, [r7, #24]
        break;
 80047e8:	e008      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	61bb      	str	r3, [r7, #24]
        break;
 80047f0:	e004      	b.n	80047fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	77bb      	strb	r3, [r7, #30]
        break;
 80047fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d074      	beq.n	80048ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d916      	bls.n	800484c <UART_SetConfig+0x404>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d212      	bcs.n	800484c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f023 030f 	bic.w	r3, r3, #15
 800482e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	b29a      	uxth	r2, r3
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	4313      	orrs	r3, r2
 8004840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	89fa      	ldrh	r2, [r7, #14]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e04f      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77bb      	strb	r3, [r7, #30]
 8004850:	e04c      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d828      	bhi.n	80048aa <UART_SetConfig+0x462>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x418>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fe fb86 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004888:	61b8      	str	r0, [r7, #24]
        break;
 800488a:	e013      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fe fb96 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <UART_SetConfig+0x4c4>)
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe fa69 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800489e:	61b8      	str	r0, [r7, #24]
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77bb      	strb	r3, [r7, #30]
        break;
 80048b2:	bf00      	nop
    }

    if (pclk != 0U)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d909      	bls.n	80048e8 <UART_SetConfig+0x4a0>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d205      	bcs.n	80048e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40007c00 	.word	0x40007c00
 8004908:	40023800 	.word	0x40023800
 800490c:	00f42400 	.word	0x00f42400

08004910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d10a      	bne.n	8004a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a64:	f7fc fd04 	bl	8001470 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d10e      	bne.n	8004a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f831 	bl	8004aee <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e027      	b.n	8004ae6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d10e      	bne.n	8004ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f81b 	bl	8004aee <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e011      	b.n	8004ae6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b09c      	sub	sp, #112	; 0x70
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	e0a7      	b.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	f000 80a3 	beq.w	8004c50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fc fcb1 	bl	8001470 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d13f      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b34:	667b      	str	r3, [r7, #100]	; 0x64
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	663b      	str	r3, [r7, #96]	; 0x60
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e068      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d050      	beq.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bbc:	d148      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e6      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c1a:	623a      	str	r2, [r7, #32]
 8004c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	69f9      	ldr	r1, [r7, #28]
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e010      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69da      	ldr	r2, [r3, #28]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	f43f af48 	beq.w	8004b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3770      	adds	r7, #112	; 0x70
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4d0d      	ldr	r5, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1b64      	subs	r4, r4, r5
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2600      	movs	r6, #0
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4d0b      	ldr	r5, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f000 f820 	bl	8004cd4 <_init>
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2600      	movs	r6, #0
 8004c9a:	42a6      	cmp	r6, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca4:	4798      	blx	r3
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cae:	4798      	blx	r3
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08004d0c 	.word	0x08004d0c
 8004cb8:	08004d0c 	.word	0x08004d0c
 8004cbc:	08004d0c 	.word	0x08004d0c
 8004cc0:	08004d10 	.word	0x08004d10

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <_init>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr

08004ce0 <_fini>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr

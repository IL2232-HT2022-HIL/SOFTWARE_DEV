
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800df60  0800df60  0001df60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e130  0800e130  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e130  0800e130  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e138  0800e138  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800e2b4  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800e354  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006da8  200002b4  0800e3f4  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000705c  0800e3f4  0002705c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032b8c  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005e69  00000000  00000000  00052e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025a0  00000000  00000000  00058cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002338  00000000  00000000  0005b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008c15  00000000  00000000  0005d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ea0c  00000000  00000000  000661c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00118582  00000000  00000000  00094bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001ad153  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a3a8  00000000  00000000  001ad1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800df48 	.word	0x0800df48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800df48 	.word	0x0800df48

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f8a0 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f860 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fad4 	bl	8000bd8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000630:	f000 f8cc 	bl	80007cc <MX_CAN1_Init>
  MX_DAC_Init();
 8000634:	f000 f8fe 	bl	8000834 <MX_DAC_Init>
  MX_ETH_Init();
 8000638:	f000 f926 	bl	8000888 <MX_ETH_Init>
  MX_I2C1_Init();
 800063c:	f000 f972 	bl	8000924 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000640:	f000 f9b0 	bl	80009a4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000644:	f000 f9e8 	bl	8000a18 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000648:	f000 fa20 	bl	8000a8c <MX_TIM1_Init>
  MX_UART7_Init();
 800064c:	f000 fa94 	bl	8000b78 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000650:	f009 fe14 	bl	800a27c <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 8000654:	f007 fe36 	bl	80082c4 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <main+0x98>)
 800065a:	2100      	movs	r1, #0
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <main+0x9c>)
 800065e:	f009 fe77 	bl	800a350 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <main+0xa0>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <main+0xa4>)
 800066a:	2100      	movs	r1, #0
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <main+0xa8>)
 800066e:	f009 fe6f 	bl	800a350 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <main+0xac>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <main+0xb0>)
 800067a:	2100      	movs	r1, #0
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <main+0xb4>)
 800067e:	f009 fe67 	bl	800a350 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0xb8>)
 8000686:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <main+0xbc>)
 800068a:	2100      	movs	r1, #0
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0xc0>)
 800068e:	f009 fe5f 	bl	800a350 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <main+0xc4>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <main+0xc8>)
 800069a:	2100      	movs	r1, #0
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <main+0xcc>)
 800069e:	f009 fe57 	bl	800a350 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <main+0xd0>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f009 fe1c 	bl	800a2e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x94>
 80006ae:	bf00      	nop
 80006b0:	0800e004 	.word	0x0800e004
 80006b4:	08000e65 	.word	0x08000e65
 80006b8:	200005e4 	.word	0x200005e4
 80006bc:	0800e028 	.word	0x0800e028
 80006c0:	08000e79 	.word	0x08000e79
 80006c4:	200005e8 	.word	0x200005e8
 80006c8:	0800e04c 	.word	0x0800e04c
 80006cc:	08000e89 	.word	0x08000e89
 80006d0:	200005ec 	.word	0x200005ec
 80006d4:	0800e070 	.word	0x0800e070
 80006d8:	08000e99 	.word	0x08000e99
 80006dc:	200005f0 	.word	0x200005f0
 80006e0:	0800e094 	.word	0x0800e094
 80006e4:	08000ea9 	.word	0x08000ea9
 80006e8:	200005f4 	.word	0x200005f4

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00d fab6 	bl	800dc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <SystemClock_Config+0xd8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <SystemClock_Config+0xd8>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <SystemClock_Config+0xd8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <SystemClock_Config+0xdc>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <SystemClock_Config+0xdc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fc2d 	bl	8003fd0 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 fbae 	bl	8000edc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000780:	f003 fbd6 	bl	8003f30 <HAL_PWREx_EnableOverDrive>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800078a:	f000 fba7 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2103      	movs	r1, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 febe 	bl	800452c <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007b6:	f000 fb91 	bl	8000edc <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_CAN1_Init+0x60>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_CAN1_Init+0x60>)
 80007d8:	2210      	movs	r2, #16
 80007da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_CAN1_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_CAN1_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_CAN1_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_CAN1_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_CAN1_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_CAN1_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_CAN1_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_CAN1_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_CAN1_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_CAN1_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_CAN1_Init+0x60>)
 800081a:	f000 ffff 	bl	800181c <HAL_CAN_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fb5a 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000308 	.word	0x20000308
 8000830:	40006400 	.word	0x40006400

08000834 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_DAC_Init+0x4c>)
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <MX_DAC_Init+0x50>)
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_DAC_Init+0x4c>)
 800084a:	f001 f9c5 	bl	8001bd8 <HAL_DAC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000854:	f000 fb42 	bl	8000edc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_DAC_Init+0x4c>)
 8000868:	f001 fa3c 	bl	8001ce4 <HAL_DAC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000872:	f000 fb33 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000330 	.word	0x20000330
 8000884:	40007400 	.word	0x40007400

08000888 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ETH_Init+0x84>)
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <MX_ETH_Init+0x88>)
 8000890:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_ETH_Init+0x8c>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_ETH_Init+0x8c>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ETH_Init+0x8c>)
 80008a0:	22e1      	movs	r2, #225	; 0xe1
 80008a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_ETH_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ETH_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_ETH_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_ETH_Init+0x84>)
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_ETH_Init+0x8c>)
 80008ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_ETH_Init+0x84>)
 80008be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ETH_Init+0x84>)
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <MX_ETH_Init+0x90>)
 80008c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_ETH_Init+0x84>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_ETH_Init+0x94>)
 80008ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_ETH_Init+0x84>)
 80008d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_ETH_Init+0x84>)
 80008da:	f001 fa5d 	bl	8001d98 <HAL_ETH_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008e4:	f000 fafa 	bl	8000edc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e8:	2238      	movs	r2, #56	; 0x38
 80008ea:	2100      	movs	r1, #0
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_ETH_Init+0x98>)
 80008ee:	f00d f9bd 	bl	800dc6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_ETH_Init+0x98>)
 80008f4:	2221      	movs	r2, #33	; 0x21
 80008f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_ETH_Init+0x98>)
 80008fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_ETH_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000344 	.word	0x20000344
 8000910:	40028000 	.word	0x40028000
 8000914:	20000600 	.word	0x20000600
 8000918:	20000214 	.word	0x20000214
 800091c:	20000174 	.word	0x20000174
 8000920:	200002d0 	.word	0x200002d0

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_I2C1_Init+0x74>)
 8000960:	f001 ff06 	bl	8002770 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 fab7 	bl	8000edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000972:	f001 ff8d 	bl	8002890 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 faae 	bl	8000edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2C1_Init+0x74>)
 8000984:	f001 ffcf 	bl	8002926 <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 faa5 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200003f4 	.word	0x200003f4
 800099c:	40005400 	.word	0x40005400
 80009a0:	20303e5d 	.word	0x20303e5d

080009a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <MX_SPI1_Init+0x70>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_SPI1_Init+0x6c>)
 80009fe:	f004 fc15 	bl	800522c <HAL_SPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a08:	f000 fa68 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000448 	.word	0x20000448
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <MX_SPI3_Init+0x70>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_SPI3_Init+0x6c>)
 8000a72:	f004 fbdb 	bl	800522c <HAL_SPI_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a7c:	f000 fa2e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200004ac 	.word	0x200004ac
 8000a88:	40003c00 	.word	0x40003c00

08000a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000aba:	4a2e      	ldr	r2, [pc, #184]	; (8000b74 <MX_TIM1_Init+0xe8>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae4:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000ae6:	f004 fc4c 	bl	8005382 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000af0:	f000 f9f4 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000b02:	f004 ff29 	bl	8005958 <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f000 f9e6 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000b12:	f004 fd05 	bl	8005520 <HAL_TIM_IC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b1c:	f000 f9de 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000b34:	f005 fa66 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b3e:	f000 f9cd 	bl	8000edc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_TIM1_Init+0xe4>)
 8000b5a:	f004 fe61 	bl	8005820 <HAL_TIM_IC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b64:	f000 f9ba 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000510 	.word	0x20000510
 8000b74:	40010000 	.word	0x40010000

08000b78 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_UART7_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_UART7_Init+0x58>)
 8000bbc:	f005 face 	bl	800615c <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f989 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000055c 	.word	0x2000055c
 8000bd4:	40007800 	.word	0x40007800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b95      	ldr	r3, [pc, #596]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a94      	ldr	r2, [pc, #592]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b92      	ldr	r3, [pc, #584]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	623b      	str	r3, [r7, #32]
 8000c04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b8f      	ldr	r3, [pc, #572]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a8e      	ldr	r2, [pc, #568]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a88      	ldr	r2, [pc, #544]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b86      	ldr	r3, [pc, #536]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	4b83      	ldr	r3, [pc, #524]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a82      	ldr	r2, [pc, #520]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b80      	ldr	r3, [pc, #512]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b7d      	ldr	r3, [pc, #500]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a7c      	ldr	r2, [pc, #496]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b7a      	ldr	r3, [pc, #488]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b77      	ldr	r3, [pc, #476]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a76      	ldr	r2, [pc, #472]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b74      	ldr	r3, [pc, #464]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	4b71      	ldr	r3, [pc, #452]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a70      	ldr	r2, [pc, #448]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b6e      	ldr	r3, [pc, #440]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a6a      	ldr	r2, [pc, #424]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <MX_GPIO_Init+0x26c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4865      	ldr	r0, [pc, #404]	; (8000e48 <MX_GPIO_Init+0x270>)
 8000cb4:	f001 fd42 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000cbe:	4863      	ldr	r0, [pc, #396]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000cc0:	f001 fd3c 	bl	800273c <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	210c      	movs	r1, #12
 8000cc8:	4861      	ldr	r0, [pc, #388]	; (8000e50 <MX_GPIO_Init+0x278>)
 8000cca:	f001 fd37 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000cd4:	485f      	ldr	r0, [pc, #380]	; (8000e54 <MX_GPIO_Init+0x27c>)
 8000cd6:	f001 fd31 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	485d      	ldr	r0, [pc, #372]	; (8000e58 <MX_GPIO_Init+0x280>)
 8000ce2:	f001 fd2b 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2174      	movs	r1, #116	; 0x74
 8000cea:	485c      	ldr	r0, [pc, #368]	; (8000e5c <MX_GPIO_Init+0x284>)
 8000cec:	f001 fd26 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000cf0:	f241 0308 	movw	r3, #4104	; 0x1008
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4856      	ldr	r0, [pc, #344]	; (8000e60 <MX_GPIO_Init+0x288>)
 8000d06:	f001 fb6d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000d0a:	f248 0305 	movw	r3, #32773	; 0x8005
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484e      	ldr	r0, [pc, #312]	; (8000e58 <MX_GPIO_Init+0x280>)
 8000d20:	f001 fb60 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4843      	ldr	r0, [pc, #268]	; (8000e48 <MX_GPIO_Init+0x270>)
 8000d3c:	f001 fb52 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4840      	ldr	r0, [pc, #256]	; (8000e54 <MX_GPIO_Init+0x27c>)
 8000d54:	f001 fb46 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4838      	ldr	r0, [pc, #224]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000d6c:	f001 fb3a 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000d70:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d76:	2311      	movs	r3, #17
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4830      	ldr	r0, [pc, #192]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000d8a:	f001 fb2b 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d92:	2311      	movs	r3, #17
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	482a      	ldr	r0, [pc, #168]	; (8000e50 <MX_GPIO_Init+0x278>)
 8000da6:	f001 fb1d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000daa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4824      	ldr	r0, [pc, #144]	; (8000e54 <MX_GPIO_Init+0x27c>)
 8000dc4:	f001 fb0e 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_GPIO_Init+0x280>)
 8000de2:	f001 faff 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000de6:	2304      	movs	r3, #4
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x284>)
 8000dfe:	f001 faf1 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000e02:	2370      	movs	r3, #112	; 0x70
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e06:	2311      	movs	r3, #17
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <MX_GPIO_Init+0x284>)
 8000e1a:	f001 fae3 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_GPIO_Init+0x274>)
 8000e36:	f001 fad5 	bl	80023e4 <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3738      	adds	r7, #56	; 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40021400 	.word	0x40021400
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40021800 	.word	0x40021800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021000 	.word	0x40021000

08000e64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e6c:	f00c f936 	bl	800d0dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f009 fb13 	bl	800a49c <osDelay>
 8000e76:	e7fb      	b.n	8000e70 <StartDefaultTask+0xc>

08000e78 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f009 fb0b 	bl	800a49c <osDelay>
 8000e86:	e7fb      	b.n	8000e80 <StartTask_gateway+0x8>

08000e88 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_controller */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f009 fb03 	bl	800a49c <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <StartTask_controller+0x8>

08000e98 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f009 fafb 	bl	800a49c <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <StartTask_SHT20+0x8>

08000ea8 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f009 faf3 	bl	800a49c <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <StartTask_74HC595D+0x8>

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f000 fc63 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40001000 	.word	0x40001000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	210f      	movs	r1, #15
 8000f22:	f06f 0001 	mvn.w	r0, #1
 8000f26:	f000 fe2d 	bl	8001b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_CAN_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d127      	bne.n	8000faa <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_CAN_MspInit+0x80>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_CAN_MspInit+0x84>)
 8000fa6:	f001 fa1d 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40006400 	.word	0x40006400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_DAC_MspInit+0x84>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12b      	bne.n	800103a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8000fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_DAC_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 8001012:	2310      	movs	r3, #16
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_DAC_MspInit+0x8c>)
 8001026:	f001 f9dd 	bl	80023e4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	210f      	movs	r1, #15
 800102e:	2036      	movs	r0, #54	; 0x36
 8001030:	f000 fda8 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001034:	2036      	movs	r0, #54	; 0x36
 8001036:	f000 fdc1 	bl	8001bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40007400 	.word	0x40007400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_ETH_MspInit+0x158>)
 800106e:	4293      	cmp	r3, r2
 8001070:	f040 8096 	bne.w	80011a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001074:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 800107a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 8001092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b44      	ldr	r3, [pc, #272]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a34      	ldr	r2, [pc, #208]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 800110a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_ETH_MspInit+0x15c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800111c:	2332      	movs	r3, #50	; 0x32
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112c:	230b      	movs	r3, #11
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <HAL_ETH_MspInit+0x160>)
 8001138:	f001 f954 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800113c:	2386      	movs	r3, #134	; 0x86
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114c:	230b      	movs	r3, #11
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <HAL_ETH_MspInit+0x164>)
 8001158:	f001 f944 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800115c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116e:	230b      	movs	r3, #11
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <HAL_ETH_MspInit+0x168>)
 800117a:	f001 f933 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800117e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001190:	230b      	movs	r3, #11
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <HAL_ETH_MspInit+0x16c>)
 800119c:	f001 f922 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3738      	adds	r7, #56	; 0x38
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40028000 	.word	0x40028000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40021800 	.word	0x40021800

080011c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ae      	sub	sp, #184	; 0xb8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2290      	movs	r2, #144	; 0x90
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c fd43 	bl	800dc6c <memset>
  if(hi2c->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <HAL_I2C_MspInit+0xb4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d13c      	bne.n	800126a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fbec 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800120a:	f7ff fe67 	bl	8000edc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001240:	2304      	movs	r3, #4
 8001242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800124a:	4619      	mov	r1, r3
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <HAL_I2C_MspInit+0xbc>)
 800124e:	f001 f8c9 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_I2C_MspInit+0xb8>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	37b8      	adds	r7, #184	; 0xb8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40005400 	.word	0x40005400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_SPI_MspInit+0x148>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d144      	bne.n	800132c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a43      	ldr	r2, [pc, #268]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fa:	2305      	movs	r3, #5
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4832      	ldr	r0, [pc, #200]	; (80013d0 <HAL_SPI_MspInit+0x150>)
 8001306:	f001 f86d 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800130a:	2308      	movs	r3, #8
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800131a:	2305      	movs	r3, #5
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	482b      	ldr	r0, [pc, #172]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 8001326:	f001 f85d 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800132a:	e049      	b.n	80013c0 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <HAL_SPI_MspInit+0x158>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d144      	bne.n	80013c0 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 800133c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_SPI_MspInit+0x14c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800137e:	2304      	movs	r3, #4
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800138e:	2307      	movs	r3, #7
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <HAL_SPI_MspInit+0x154>)
 800139a:	f001 f823 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b0:	2306      	movs	r3, #6
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <HAL_SPI_MspInit+0x15c>)
 80013bc:	f001 f812 	bl	80023e4 <HAL_GPIO_Init>
}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013000 	.word	0x40013000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40003c00 	.word	0x40003c00
 80013dc:	40020800 	.word	0x40020800

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_TIM_Base_MspInit+0x7c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d128      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001444:	2301      	movs	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_TIM_Base_MspInit+0x84>)
 8001450:	f000 ffc8 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010000 	.word	0x40010000
 8001460:	40023800 	.word	0x40023800
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0ae      	sub	sp, #184	; 0xb8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2290      	movs	r2, #144	; 0x90
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f00c fbef 	bl	800dc6c <memset>
  if(huart->Instance==UART7)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_UART_MspInit+0xb4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d13c      	bne.n	8001512 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800149e:	2300      	movs	r3, #0
 80014a0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fa98 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014b2:	f7ff fd13 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80014e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001500:	2308      	movs	r3, #8
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0xbc>)
 800150e:	f000 ff69 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	37b8      	adds	r7, #184	; 0xb8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40007800 	.word	0x40007800
 8001520:	40023800 	.word	0x40023800
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_InitTick+0xe0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_InitTick+0xe0>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_InitTick+0xe0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fa0c 	bl	8004978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800156a:	f003 f9dd 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 800156e:	6378      	str	r0, [r7, #52]	; 0x34
 8001570:	e004      	b.n	800157c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001572:	f003 f9d9 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 8001576:	4603      	mov	r3, r0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_InitTick+0xe4>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	3b01      	subs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_InitTick+0xe8>)
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <HAL_InitTick+0xec>)
 800158e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_InitTick+0xe8>)
 8001592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001596:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_InitTick+0xe8>)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_InitTick+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_InitTick+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_InitTick+0xe8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015b0:	4817      	ldr	r0, [pc, #92]	; (8001610 <HAL_InitTick+0xe8>)
 80015b2:	f003 fee6 	bl	8005382 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d11b      	bne.n	80015fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <HAL_InitTick+0xe8>)
 80015c6:	f003 ff33 	bl	8005430 <HAL_TIM_Base_Start_IT>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d8:	2036      	movs	r0, #54	; 0x36
 80015da:	f000 faef 	bl	8001bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d808      	bhi.n	80015f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2036      	movs	r0, #54	; 0x36
 80015ea:	f000 facb 	bl	8001b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_InitTick+0xf0>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e002      	b.n	80015fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001600:	4618      	mov	r0, r3
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	431bde83 	.word	0x431bde83
 8001610:	20000608 	.word	0x20000608
 8001614:	40001000 	.word	0x40001000
 8001618:	20000004 	.word	0x20000004

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <TIM6_DAC_IRQHandler+0x20>)
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <TIM6_DAC_IRQHandler+0x20>)
 8001658:	f000 fae0 	bl	8001c1c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <TIM6_DAC_IRQHandler+0x24>)
 800165e:	f003 ffc0 	bl	80055e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000330 	.word	0x20000330
 800166c:	20000608 	.word	0x20000608

08001670 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <OTG_FS_IRQHandler+0x10>)
 8001676:	f001 fae8 	bl	8002c4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20006b44 	.word	0x20006b44

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f00c fa90 	bl	800dbd8 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20080000 	.word	0x20080000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20000654 	.word	0x20000654
 80016ec:	20007060 	.word	0x20007060

080016f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001730:	4c0b      	ldr	r4, [pc, #44]	; (8001760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173e:	f7ff ffd7 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f00c fa4f 	bl	800dbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7fe ff67 	bl	8000618 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001758:	0800e140 	.word	0x0800e140
  ldr r2, =_sbss
 800175c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001760:	2000705c 	.word	0x2000705c

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x28>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f9f8 	bl	8001b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f7ff fed2 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fbb0 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000658 	.word	0x20000658

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000658 	.word	0x20000658

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0ed      	b.n	8001a0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fb7c 	bl	8000f38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001850:	f7ff ffb4 	bl	80017bc <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001856:	e012      	b.n	800187e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001858:	f7ff ffb0 	bl	80017bc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b0a      	cmp	r3, #10
 8001864:	d90b      	bls.n	800187e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2205      	movs	r2, #5
 8001876:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0c5      	b.n	8001a0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0e5      	beq.n	8001858 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0202 	bic.w	r2, r2, #2
 800189a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff ff8e 	bl	80017bc <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018a2:	e012      	b.n	80018ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a4:	f7ff ff8a 	bl	80017bc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d90b      	bls.n	80018ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e09f      	b.n	8001a0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e5      	bne.n	80018a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7e1b      	ldrb	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d108      	bne.n	80018f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e007      	b.n	8001902 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7e5b      	ldrb	r3, [r3, #25]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e007      	b.n	800192c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e9b      	ldrb	r3, [r3, #26]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e007      	b.n	8001956 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0220 	bic.w	r2, r2, #32
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7edb      	ldrb	r3, [r3, #27]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0210 	bic.w	r2, r2, #16
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e007      	b.n	8001980 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0210 	orr.w	r2, r2, #16
 800197e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f1b      	ldrb	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e007      	b.n	80019aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0208 	bic.w	r2, r2, #8
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7f5b      	ldrb	r3, [r3, #29]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0204 	orr.w	r2, r2, #4
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0204 	bic.w	r2, r2, #4
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	ea42 0103 	orr.w	r1, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <__NVIC_SetPriorityGrouping>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x40>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	05fa0000 	.word	0x05fa0000

08001a5c <__NVIC_GetPriorityGrouping>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff4c 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b96:	f7ff ff61 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7ff ffb1 	bl	8001b08 <NVIC_EncodePriority>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff80 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff54 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e014      	b.n	8001c14 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff f9e0 	bl	8000fc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c32:	d120      	bne.n	8001c76 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	d118      	bne.n	8001c76 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f82d 	bl	8001cd0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c84:	d120      	bne.n	8001cc8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c94:	d118      	bne.n	8001cc8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f85d 	bl	8001d82 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_DAC_ConfigChannel+0x18>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e03c      	b.n	8001d76 <HAL_DAC_ConfigChannel+0x92>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4013      	ands	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06a      	b.n	8001e80 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2223      	movs	r2, #35	; 0x23
 8001db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff f947 	bl	8001050 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_ETH_Init+0xf0>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <HAL_ETH_Init+0xf0>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_ETH_Init+0xf0>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_ETH_Init+0xf4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_ETH_Init+0xf4>)
 8001de0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001de4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_ETH_Init+0xf4>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_ETH_Init+0xf4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_ETH_Init+0xf4>)
 8001df6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff fcd4 	bl	80017bc <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e16:	e011      	b.n	8001e3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e18:	f7ff fcd0 	bl	80017bc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e26:	d909      	bls.n	8001e3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	22e0      	movs	r2, #224	; 0xe0
 8001e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e021      	b.n	8001e80 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e4      	bne.n	8001e18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f958 	bl	8002104 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9ff 	bl	8002258 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa55 	bl	800230a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f9bd 	bl	80021e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800

08001e90 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4b51      	ldr	r3, [pc, #324]	; (8001fec <ETH_SetMACConfig+0x15c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7c1b      	ldrb	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <ETH_SetMACConfig+0x28>
 8001eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eb6:	e000      	b.n	8001eba <ETH_SetMACConfig+0x2a>
 8001eb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7c5b      	ldrb	r3, [r3, #17]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <ETH_SetMACConfig+0x38>
 8001ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec6:	e000      	b.n	8001eca <ETH_SetMACConfig+0x3a>
 8001ec8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ed0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7fdb      	ldrb	r3, [r3, #31]
 8001ed6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	7f92      	ldrb	r2, [r2, #30]
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d102      	bne.n	8001eee <ETH_SetMACConfig+0x5e>
 8001ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eec:	e000      	b.n	8001ef0 <ETH_SetMACConfig+0x60>
 8001eee:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ef0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7f1b      	ldrb	r3, [r3, #28]
 8001ef6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d102      	bne.n	8001f18 <ETH_SetMACConfig+0x88>
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	e000      	b.n	8001f1a <ETH_SetMACConfig+0x8a>
 8001f18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7bdb      	ldrb	r3, [r3, #15]
 8001f20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f32:	4313      	orrs	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fc42 	bl	80017d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d101      	bne.n	8001f7e <ETH_SetMACConfig+0xee>
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	e000      	b.n	8001f80 <ETH_SetMACConfig+0xf0>
 8001f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	d101      	bne.n	8001f96 <ETH_SetMACConfig+0x106>
 8001f92:	2208      	movs	r2, #8
 8001f94:	e000      	b.n	8001f98 <ETH_SetMACConfig+0x108>
 8001f96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fa0:	2a01      	cmp	r2, #1
 8001fa2:	d101      	bne.n	8001fa8 <ETH_SetMACConfig+0x118>
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x11a>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001faa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d101      	bne.n	8001fba <ETH_SetMACConfig+0x12a>
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	e000      	b.n	8001fbc <ETH_SetMACConfig+0x12c>
 8001fba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff fbfd 	bl	80017d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ff20810f 	.word	0xff20810f

08001ff0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <ETH_SetDMAConfig+0x110>)
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <ETH_SetDMAConfig+0x2c>
 8002016:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800201a:	e000      	b.n	800201e <ETH_SetDMAConfig+0x2e>
 800201c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7b5b      	ldrb	r3, [r3, #13]
 8002022:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002024:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	7f52      	ldrb	r2, [r2, #29]
 800202a:	2a00      	cmp	r2, #0
 800202c:	d102      	bne.n	8002034 <ETH_SetDMAConfig+0x44>
 800202e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002032:	e000      	b.n	8002036 <ETH_SetDMAConfig+0x46>
 8002034:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002036:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	7b9b      	ldrb	r3, [r3, #14]
 800203c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7f1b      	ldrb	r3, [r3, #28]
 800204a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800204c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7f9b      	ldrb	r3, [r3, #30]
 8002052:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002054:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002062:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002064:	4313      	orrs	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff fba4 	bl	80017d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fb75 	bl	80017d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f8de3f23 	.word	0xf8de3f23

08002104 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0a6      	sub	sp, #152	; 0x98
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002140:	2300      	movs	r3, #0
 8002142:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800214a:	2300      	movs	r3, #0
 800214c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800216c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002170:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002178:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fe86 	bl	8001e90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff08 	bl	8001ff0 <ETH_SetDMAConfig>
}
 80021e0:	bf00      	nop
 80021e2:	3798      	adds	r7, #152	; 0x98
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3305      	adds	r3, #5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	3204      	adds	r2, #4
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <ETH_MACAddressConfig+0x68>)
 800220a:	4413      	add	r3, r2
 800220c:	461a      	mov	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3303      	adds	r3, #3
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3302      	adds	r3, #2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <ETH_MACAddressConfig+0x6c>)
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40028040 	.word	0x40028040
 8002254:	40028044 	.word	0x40028044

08002258 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e03e      	b.n	80022e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	3206      	adds	r2, #6
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d80c      	bhi.n	80022c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e004      	b.n	80022d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d9bd      	bls.n	8002266 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	611a      	str	r2, [r3, #16]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e046      	b.n	80023a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002354:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800235c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	3212      	adds	r2, #18
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d80c      	bhi.n	8002396 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	e004      	b.n	80023a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d9b5      	bls.n	8002318 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	60da      	str	r2, [r3, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e175      	b.n	80026f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8164 	bne.w	80026ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x56>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80be 	beq.w	80026ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_GPIO_Init+0x324>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_GPIO_Init+0x324>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_GPIO_Init+0x324>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002586:	4a61      	ldr	r2, [pc, #388]	; (800270c <HAL_GPIO_Init+0x328>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_GPIO_Init+0x32c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d037      	beq.n	8002622 <HAL_GPIO_Init+0x23e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_GPIO_Init+0x330>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_GPIO_Init+0x23a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a56      	ldr	r2, [pc, #344]	; (8002718 <HAL_GPIO_Init+0x334>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x236>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_GPIO_Init+0x338>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x232>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a54      	ldr	r2, [pc, #336]	; (8002720 <HAL_GPIO_Init+0x33c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x22e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <HAL_GPIO_Init+0x340>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x22a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x344>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_GPIO_Init+0x348>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a50      	ldr	r2, [pc, #320]	; (8002730 <HAL_GPIO_Init+0x34c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_GPIO_Init+0x350>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x21a>
 80025fa:	2309      	movs	r3, #9
 80025fc:	e012      	b.n	8002624 <HAL_GPIO_Init+0x240>
 80025fe:	230a      	movs	r3, #10
 8002600:	e010      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002602:	2308      	movs	r3, #8
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002606:	2307      	movs	r3, #7
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	; (800270c <HAL_GPIO_Init+0x328>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_GPIO_Init+0x354>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a29      	ldr	r2, [pc, #164]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae86 	bls.w	8002404 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40022000 	.word	0x40022000
 8002734:	40022400 	.word	0x40022400
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07f      	b.n	8002882 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fd12 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e006      	b.n	80027f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d104      	bne.n	800280a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002808:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_I2C_Init+0x11c>)
 8002816:	430b      	orrs	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	02008000 	.word	0x02008000

08002890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d138      	bne.n	8002918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e032      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	d139      	bne.n	80029b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002946:	2302      	movs	r3, #2
 8002948:	e033      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c0:	b08f      	sub	sp, #60	; 0x3c
 80029c2:	af0a      	add	r7, sp, #40	; 0x28
 80029c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e116      	b.n	8002bfe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f00a fd86 	bl	800d4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2203      	movs	r2, #3
 80029f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f917 	bl	8006c42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	687e      	ldr	r6, [r7, #4]
 8002a1c:	466d      	mov	r5, sp
 8002a1e:	f106 0410 	add.w	r4, r6, #16
 8002a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a32:	1d33      	adds	r3, r6, #4
 8002a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f003 fff8 	bl	8006a2c <USB_CoreInit>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0d7      	b.n	8002bfe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 f905 	bl	8006c64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e04a      	b.n	8002af6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	333d      	adds	r3, #61	; 0x3d
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	333c      	adds	r3, #60	; 0x3c
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	b298      	uxth	r0, r3
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3344      	adds	r3, #68	; 0x44
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3340      	adds	r3, #64	; 0x40
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3348      	adds	r3, #72	; 0x48
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334c      	adds	r3, #76	; 0x4c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3354      	adds	r3, #84	; 0x54
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	3301      	adds	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3af      	bcc.n	8002a60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e044      	b.n	8002b90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3b5      	bcc.n	8002b06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	687e      	ldr	r6, [r7, #4]
 8002ba2:	466d      	mov	r5, sp
 8002ba4:	f106 0410 	add.w	r4, r6, #16
 8002ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bb8:	1d33      	adds	r3, r6, #4
 8002bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bbc:	6838      	ldr	r0, [r7, #0]
 8002bbe:	f004 f89d 	bl	8006cfc <USB_DevInit>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e014      	b.n	8002bfe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f001 f97b 	bl	8003ee8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f005 f9eb 	bl	8007fd2 <USB_DevDisconnect>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_PCD_Start+0x16>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e012      	b.n	8002c42 <HAL_PCD_Start+0x3c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fff9 	bl	8006c20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 f9ac 	bl	8007f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c4a:	b590      	push	{r4, r7, lr}
 8002c4c:	b08d      	sub	sp, #52	; 0x34
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f005 fa6a 	bl	800813a <USB_GetMode>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 84b7 	bne.w	80035dc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 f9ce 	bl	8008014 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 84ad 	beq.w	80035da <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 f9bb 	bl	8008014 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d107      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f002 0202 	and.w	r2, r2, #2
 8002cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f9a9 	bl	8008014 <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d161      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0210 	bic.w	r2, r2, #16
 8002cda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d124      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d035      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6a38      	ldr	r0, [r7, #32]
 8002d28:	f004 ffe0 	bl	8007cec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d38:	441a      	add	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	441a      	add	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
 8002d50:	e016      	b.n	8002d80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	0c5b      	lsrs	r3, r3, #17
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d110      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d64:	2208      	movs	r2, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	6a38      	ldr	r0, [r7, #32]
 8002d6a:	f004 ffbf 	bl	8007cec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	441a      	add	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0210 	orr.w	r2, r2, #16
 8002d8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 f93d 	bl	8008014 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da4:	f040 80a7 	bne.w	8002ef6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f005 f942 	bl	800803a <USB_ReadDevAllOutEpInterrupt>
 8002db6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002db8:	e099      	b.n	8002eee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 808e 	beq.w	8002ee2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f005 f966 	bl	80080a2 <USB_ReadDevOutEPInterrupt>
 8002dd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	2301      	movs	r3, #1
 8002df2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fef0 	bl	8003bdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	461a      	mov	r2, r3
 8002e14:	2308      	movs	r3, #8
 8002e16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 ffc6 	bl	8003dac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	2310      	movs	r3, #16
 8002e3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d030      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d109      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	78db      	ldrb	r3, [r3, #3]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d108      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00a fc57 	bl	800d744 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af62 	bne.w	8002dba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f005 f88a 	bl	8008014 <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f0a:	f040 80db 	bne.w	80030c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f005 f8ab 	bl	800806e <USB_ReadDevAllInEpInterrupt>
 8002f18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f1e:	e0cd      	b.n	80030bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80c2 	beq.w	80030b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 f8d1 	bl	80080de <USB_ReadDevInEPInterrupt>
 8002f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d057      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	2201      	movs	r2, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69f9      	ldr	r1, [r7, #28]
 8002f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f68:	4013      	ands	r3, r2
 8002f6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d132      	bne.n	8002fec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334c      	adds	r3, #76	; 0x4c
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4403      	add	r3, r0
 8002fa6:	3348      	adds	r3, #72	; 0x48
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4419      	add	r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	334c      	adds	r3, #76	; 0x4c
 8002fbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d113      	bne.n	8002fec <HAL_PCD_IRQHandler+0x3a2>
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3354      	adds	r3, #84	; 0x54
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	f005 f8da 	bl	80081a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f00a fb21 	bl	800d63a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300e:	461a      	mov	r2, r3
 8003010:	2308      	movs	r3, #8
 8003012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302a:	461a      	mov	r2, r3
 800302c:	2310      	movs	r3, #16
 800302e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	461a      	mov	r2, r3
 8003048:	2340      	movs	r3, #64	; 0x40
 800304a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d023      	beq.n	800309e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003058:	6a38      	ldr	r0, [r7, #32]
 800305a:	f003 ffad 	bl	8006fb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	3338      	adds	r3, #56	; 0x38
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	78db      	ldrb	r3, [r3, #3]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f00a fb6e 	bl	800d768 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	461a      	mov	r2, r3
 800309a:	2302      	movs	r3, #2
 800309c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fd08 	bl	8003ac0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3301      	adds	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f47f af2e 	bne.w	8002f20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 ffa3 	bl	8008014 <USB_ReadInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d8:	d122      	bne.n	8003120 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003100:	2100      	movs	r1, #0
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f00a fce8 	bl	800dad8 <HAL_PCDEx_LPM_Callback>
 8003108:	e002      	b.n	8003110 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f00a fb0c 	bl	800d728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800311e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f004 ff75 	bl	8008014 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003134:	d112      	bne.n	800315c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f00a fac8 	bl	800d6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800315a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f004 ff57 	bl	8008014 <USB_ReadInterrupts>
 8003166:	4603      	mov	r3, r0
 8003168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003170:	d121      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003180:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d111      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031a6:	2101      	movs	r1, #1
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f00a fc95 	bl	800dad8 <HAL_PCDEx_LPM_Callback>
 80031ae:	e002      	b.n	80031b6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f00a fa93 	bl	800d6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 ff2a 	bl	8008014 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ca:	f040 80b7 	bne.w	800333c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2110      	movs	r1, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 fee5 	bl	8006fb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	e046      	b.n	8003282 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003200:	461a      	mov	r2, r3
 8003202:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003206:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	0151      	lsls	r1, r2, #5
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	440a      	add	r2, r1
 800321e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003226:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	440a      	add	r2, r1
 8003252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003256:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800325a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800327a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	3301      	adds	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d3b3      	bcc.n	80031f4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800329e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d016      	beq.n	80032d6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b8:	f043 030b 	orr.w	r3, r3, #11
 80032bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ce:	f043 030b 	orr.w	r3, r3, #11
 80032d2:	6453      	str	r3, [r2, #68]	; 0x44
 80032d4:	e015      	b.n	8003302 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e4:	4619      	mov	r1, r3
 80032e6:	f242 032b 	movw	r3, #8235	; 0x202b
 80032ea:	4313      	orrs	r3, r2
 80032ec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f043 030b 	orr.w	r3, r3, #11
 8003300:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003310:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003314:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003326:	461a      	mov	r2, r3
 8003328:	f004 ff3a 	bl	80081a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800333a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fe67 	bl	8008014 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d124      	bne.n	800339c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f004 fefe 	bl	8008158 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fea6 	bl	80070b2 <USB_GetDevSpeed>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681c      	ldr	r4, [r3, #0]
 8003372:	f001 facd 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8003376:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4620      	mov	r0, r4
 8003382:	f003 fbab 	bl	8006adc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f00a f97f 	bl	800d68a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800339a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 fe37 	bl	8008014 <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10a      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f00a f95c 	bl	800d66e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 0208 	and.w	r2, r2, #8
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fe22 	bl	8008014 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d122      	bne.n	8003420 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e6:	2301      	movs	r3, #1
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	e014      	b.n	8003416 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fb27 	bl	8003a5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3301      	adds	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	429a      	cmp	r2, r3
 800341e:	d3e5      	bcc.n	80033ec <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fdf5 	bl	8008014 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d13b      	bne.n	80034ae <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	e02b      	b.n	8003494 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3340      	adds	r3, #64	; 0x40
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d115      	bne.n	800348e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003462:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	da12      	bge.n	800348e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	333f      	adds	r3, #63	; 0x3f
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fae8 	bl	8003a5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	3301      	adds	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	429a      	cmp	r2, r3
 800349c:	d3ce      	bcc.n	800343c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fdae 	bl	8008014 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c2:	d155      	bne.n	8003570 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e045      	b.n	8003556 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12e      	bne.n	8003550 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da2b      	bge.n	8003550 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003504:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003508:	429a      	cmp	r2, r3
 800350a:	d121      	bne.n	8003550 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354c:	6053      	str	r3, [r2, #4]
            break;
 800354e:	e007      	b.n	8003560 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	3301      	adds	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	429a      	cmp	r2, r3
 800355e:	d3b4      	bcc.n	80034ca <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800356e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f004 fd4d 	bl	8008014 <USB_ReadInterrupts>
 800357a:	4603      	mov	r3, r0
 800357c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d10a      	bne.n	800359c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f00a f900 	bl	800d78c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800359a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fd37 	bl	8008014 <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d115      	bne.n	80035dc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f00a f8f0 	bl	800d7a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	e000      	b.n	80035dc <HAL_PCD_IRQHandler+0x992>
      return;
 80035da:	bf00      	nop
    }
  }
}
 80035dc:	3734      	adds	r7, #52	; 0x34
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}

080035e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_SetAddress+0x1a>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e013      	b.n	8003624 <HAL_PCD_SetAddress+0x42>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fc95 	bl	8007f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	70fb      	strb	r3, [r7, #3]
 800363e:	460b      	mov	r3, r1
 8003640:	803b      	strh	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800364a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	da0f      	bge.n	8003672 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 020f 	and.w	r2, r3, #15
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	3338      	adds	r3, #56	; 0x38
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	3304      	adds	r3, #4
 8003668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	705a      	strb	r2, [r3, #1]
 8003670:	e00f      	b.n	8003692 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	3304      	adds	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800369e:	883a      	ldrh	r2, [r7, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	78ba      	ldrb	r2, [r7, #2]
 80036a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036bc:	78bb      	ldrb	r3, [r7, #2]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d102      	bne.n	80036c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_PCD_EP_Open+0xaa>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e00e      	b.n	80036f4 <HAL_PCD_EP_Open+0xc8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 fd09 	bl	80070fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da0f      	bge.n	8003730 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	3338      	adds	r3, #56	; 0x38
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	705a      	strb	r2, [r3, #1]
 800372e:	e00f      	b.n	8003750 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 020f 	and.w	r2, r3, #15
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	b2da      	uxtb	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_PCD_EP_Close+0x6e>
 8003766:	2302      	movs	r3, #2
 8003768:	e00e      	b.n	8003788 <HAL_PCD_EP_Close+0x8c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fd47 	bl	800720c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	460b      	mov	r3, r1
 800379e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	f003 020f 	and.w	r2, r3, #15
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d102      	bne.n	80037ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	f004 f82e 	bl	8007864 <USB_EP0StartXfer>
 8003808:	e008      	b.n	800381c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	f003 fdd4 	bl	80073c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003848:	681b      	ldr	r3, [r3, #0]
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	460b      	mov	r3, r1
 8003864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	3338      	adds	r3, #56	; 0x38
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2201      	movs	r2, #1
 8003894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	f003 ffcc 	bl	8007864 <USB_EP0StartXfer>
 80038cc:	e008      	b.n	80038e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	f003 fd72 	bl	80073c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e050      	b.n	80039aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0f      	bge.n	8003930 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3338      	adds	r3, #56	; 0x38
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00d      	b.n	800394c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_PCD_EP_SetStall+0x82>
 8003968:	2302      	movs	r3, #2
 800396a:	e01e      	b.n	80039aa <HAL_PCD_EP_SetStall+0xc0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fa0e 	bl	8007d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	b2d9      	uxtb	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399a:	461a      	mov	r2, r3
 800399c:	f004 fc00 	bl	80081a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d901      	bls.n	80039d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e042      	b.n	8003a56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0f      	bge.n	80039f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3338      	adds	r3, #56	; 0x38
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	705a      	strb	r2, [r3, #1]
 80039f6:	e00f      	b.n	8003a18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_PCD_EP_ClrStall+0x86>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e00e      	b.n	8003a56 <HAL_PCD_EP_ClrStall+0xa4>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 fa16 	bl	8007e78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da0c      	bge.n	8003a8c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3338      	adds	r3, #56	; 0x38
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e00c      	b.n	8003aa6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 020f 	and.w	r2, r3, #15
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 f835 	bl	8007b1c <USB_EPStopXfer>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3338      	adds	r3, #56	; 0x38
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d901      	bls.n	8003af8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e06c      	b.n	8003bd2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d902      	bls.n	8003b14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3303      	adds	r3, #3
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1c:	e02b      	b.n	8003b76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d902      	bls.n	8003b3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6919      	ldr	r1, [r3, #16]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4603      	mov	r3, r0
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f004 f889 	bl	8007c70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d809      	bhi.n	8003ba0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d203      	bcs.n	8003ba0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1be      	bne.n	8003b1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d811      	bhi.n	8003bd0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	6939      	ldr	r1, [r7, #16]
 8003bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bcc:	4013      	ands	r3, r2
 8003bce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	333c      	adds	r3, #60	; 0x3c
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d17b      	bne.n	8003d0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a61      	ldr	r2, [pc, #388]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f240 80b9 	bls.w	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80b3 	beq.w	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	e0a7      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2320      	movs	r3, #32
 8003c62:	6093      	str	r3, [r2, #8]
 8003c64:	e098      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8093 	bne.w	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4a4b      	ldr	r2, [pc, #300]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d90f      	bls.n	8003c9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	e07e      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	0159      	lsls	r1, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	440b      	add	r3, r1
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d114      	bne.n	8003cfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	f004 fa5a 	bl	80081a0 <USB_EP0_OutStart>
 8003cec:	e006      	b.n	8003cfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f009 fc7e 	bl	800d604 <HAL_PCD_DataOutStageCallback>
 8003d08:	e046      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d124      	bne.n	8003d5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	e032      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2320      	movs	r3, #32
 8003d4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f009 fc55 	bl	800d604 <HAL_PCD_DataOutStageCallback>
 8003d5a:	e01d      	b.n	8003d98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d114      	bne.n	8003d8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d84:	461a      	mov	r2, r3
 8003d86:	2100      	movs	r1, #0
 8003d88:	f004 fa0a 	bl	80081a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f009 fc36 	bl	800d604 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	4f54300a 	.word	0x4f54300a
 8003da8:	4f54310a 	.word	0x4f54310a

08003dac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	333c      	adds	r3, #60	; 0x3c
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d90e      	bls.n	8003e00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f009 fbed 	bl	800d5e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d90c      	bls.n	8003e28 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e20:	461a      	mov	r2, r3
 8003e22:	2101      	movs	r1, #1
 8003e24:	f004 f9bc 	bl	80081a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	4f54300a 	.word	0x4f54300a

08003e38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
 8003e44:	4613      	mov	r3, r2
 8003e46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e56:	883b      	ldrh	r3, [r7, #0]
 8003e58:	0419      	lsls	r1, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
 8003e64:	e028      	b.n	8003eb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e00d      	b.n	8003e96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	3340      	adds	r3, #64	; 0x40
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	3301      	adds	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3ec      	bcc.n	8003e7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ea0:	883b      	ldrh	r3, [r7, #0]
 8003ea2:	0418      	lsls	r0, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	4302      	orrs	r2, r0
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_PCDEx_ActivateLPM+0x44>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	10000003 	.word	0x10000003

08003f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5e:	f7fd fc2d 	bl	80017bc <HAL_GetTick>
 8003f62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f64:	e009      	b.n	8003f7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f66:	f7fd fc29 	bl	80017bc <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f74:	d901      	bls.n	8003f7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e022      	b.n	8003fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d1ee      	bne.n	8003f66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f94:	f7fd fc12 	bl	80017bc <HAL_GetTick>
 8003f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f9a:	e009      	b.n	8003fb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f9c:	f7fd fc0e 	bl	80017bc <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003faa:	d901      	bls.n	8003fb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e007      	b.n	8003fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fbc:	d1ee      	bne.n	8003f9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e29b      	b.n	800451e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8087 	beq.w	8004102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff4:	4b96      	ldr	r3, [pc, #600]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00c      	beq.n	800401a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004000:	4b93      	ldr	r3, [pc, #588]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d112      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
 800400c:	4b90      	ldr	r3, [pc, #576]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d06c      	beq.n	8004100 <HAL_RCC_OscConfig+0x130>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d168      	bne.n	8004100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e275      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x7a>
 800403c:	4b84      	ldr	r3, [pc, #528]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a83      	ldr	r2, [pc, #524]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e02e      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x9c>
 8004052:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7e      	ldr	r2, [pc, #504]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b7c      	ldr	r3, [pc, #496]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a7b      	ldr	r2, [pc, #492]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0xc0>
 8004076:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a72      	ldr	r2, [pc, #456]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6e      	ldr	r2, [pc, #440]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b6c      	ldr	r3, [pc, #432]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd fb84 	bl	80017bc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fd fb80 	bl	80017bc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e229      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fb70 	bl	80017bc <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd fb6c 	bl	80017bc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e215      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b57      	ldr	r3, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x110>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d069      	beq.n	80041e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410e:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
 8004126:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1e9      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	493d      	ldr	r1, [pc, #244]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e040      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d023      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fb22 	bl	80017bc <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fd fb1e 	bl	80017bc <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1c7      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4929      	ldr	r1, [pc, #164]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
 80041ae:	e018      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fafe 	bl	80017bc <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd fafa 	bl	80017bc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1a3      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d038      	beq.n	8004260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fd fadb 	bl	80017bc <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fd fad7 	bl	80017bc <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e180      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x23a>
 8004228:	e01a      	b.n	8004260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fd fac1 	bl	80017bc <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fd fabd 	bl	80017bc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d903      	bls.n	8004254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e166      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
 8004250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b92      	ldr	r3, [pc, #584]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a4 	beq.w	80043b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b8c      	ldr	r3, [pc, #560]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b89      	ldr	r3, [pc, #548]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a88      	ldr	r2, [pc, #544]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b86      	ldr	r3, [pc, #536]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004296:	4b83      	ldr	r3, [pc, #524]	; (80044a4 <HAL_RCC_OscConfig+0x4d4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042a2:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCC_OscConfig+0x4d4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x4d4>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fd fa85 	bl	80017bc <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fd fa81 	bl	80017bc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e12a      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c8:	4b76      	ldr	r3, [pc, #472]	; (80044a4 <HAL_RCC_OscConfig+0x4d4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x31a>
 80042dc:	4b70      	ldr	r3, [pc, #448]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a6f      	ldr	r2, [pc, #444]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	e02d      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x33c>
 80042f2:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a6a      	ldr	r2, [pc, #424]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b68      	ldr	r3, [pc, #416]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a67      	ldr	r2, [pc, #412]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	e01c      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x35e>
 8004314:	4b62      	ldr	r3, [pc, #392]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a61      	ldr	r2, [pc, #388]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a5e      	ldr	r2, [pc, #376]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800432e:	4b5c      	ldr	r3, [pc, #368]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a58      	ldr	r2, [pc, #352]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d015      	beq.n	800437a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fd fa35 	bl	80017bc <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fa31 	bl	80017bc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0d8      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b4c      	ldr	r3, [pc, #304]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCC_OscConfig+0x386>
 8004378:	e014      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fa1f 	bl	80017bc <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd fa1b 	bl	80017bc <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0c2      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80ae 	beq.w	800451c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c0:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d06d      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d14b      	bne.n	800446c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a31      	ldr	r2, [pc, #196]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd f9ec 	bl	80017bc <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd f9e8 	bl	80017bc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e091      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	491b      	ldr	r1, [pc, #108]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd f9ba 	bl	80017bc <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd f9b6 	bl	80017bc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e05f      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x47c>
 800446a:	e057      	b.n	800451c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd f9a0 	bl	80017bc <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd f99c 	bl	80017bc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e045      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x4b0>
 800449e:	e03d      	b.n	800451c <HAL_RCC_OscConfig+0x54c>
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <HAL_RCC_OscConfig+0x558>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d030      	beq.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d129      	bne.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d122      	bne.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d119      	bne.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d10f      	bne.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0d0      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d910      	bls.n	8004574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 020f 	bic.w	r2, r3, #15
 800455a:	4965      	ldr	r1, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0b8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d040      	beq.n	8004650 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d115      	bne.n	800460e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e073      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06b      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4936      	ldr	r1, [pc, #216]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fd f8cc 	bl	80017bc <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fd f8c8 	bl	80017bc <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e053      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d210      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	4922      	ldr	r1, [pc, #136]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046be:	f000 f821 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x1cc>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1d0>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1d4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc ff22 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	0800e0b8 	.word	0x0800e0b8
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b094      	sub	sp, #80	; 0x50
 800470a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	647b      	str	r3, [r7, #68]	; 0x44
 8004710:	2300      	movs	r3, #0
 8004712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004714:	2300      	movs	r3, #0
 8004716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471c:	4b79      	ldr	r3, [pc, #484]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00d      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x40>
 8004728:	2b08      	cmp	r3, #8
 800472a:	f200 80e1 	bhi.w	80048f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x34>
 8004732:	2b04      	cmp	r3, #4
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x3a>
 8004736:	e0db      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_GetSysClockFreq+0x204>)
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473c:	e0db      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b73      	ldr	r3, [pc, #460]	; (800490c <HAL_RCC_GetSysClockFreq+0x208>)
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004742:	e0d8      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	2200      	movs	r2, #0
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
 8004764:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	2300      	movs	r3, #0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
 8004772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f04f 0000 	mov.w	r0, #0
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	0159      	lsls	r1, r3, #5
 8004784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004788:	0150      	lsls	r0, r2, #5
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4621      	mov	r1, r4
 8004790:	1a51      	subs	r1, r2, r1
 8004792:	6139      	str	r1, [r7, #16]
 8004794:	4629      	mov	r1, r5
 8004796:	eb63 0301 	sbc.w	r3, r3, r1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a8:	4659      	mov	r1, fp
 80047aa:	018b      	lsls	r3, r1, #6
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047b2:	4651      	mov	r1, sl
 80047b4:	018a      	lsls	r2, r1, #6
 80047b6:	4651      	mov	r1, sl
 80047b8:	ebb2 0801 	subs.w	r8, r2, r1
 80047bc:	4659      	mov	r1, fp
 80047be:	eb63 0901 	sbc.w	r9, r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d6:	4690      	mov	r8, r2
 80047d8:	4699      	mov	r9, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	eb18 0303 	adds.w	r3, r8, r3
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	462b      	mov	r3, r5
 80047e4:	eb49 0303 	adc.w	r3, r9, r3
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f6:	4629      	mov	r1, r5
 80047f8:	024b      	lsls	r3, r1, #9
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004800:	4621      	mov	r1, r4
 8004802:	024a      	lsls	r2, r1, #9
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	2200      	movs	r2, #0
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 800480e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004814:	f7fb fd14 	bl	8000240 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004820:	e058      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004822:	4b38      	ldr	r3, [pc, #224]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	2200      	movs	r2, #0
 800482a:	4618      	mov	r0, r3
 800482c:	4611      	mov	r1, r2
 800482e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	0159      	lsls	r1, r3, #5
 800484a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484e:	0150      	lsls	r0, r2, #5
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4641      	mov	r1, r8
 8004856:	ebb2 0a01 	subs.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800486c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004874:	ebb2 040a 	subs.w	r4, r2, sl
 8004878:	eb63 050b 	sbc.w	r5, r3, fp
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	00eb      	lsls	r3, r5, #3
 8004886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488a:	00e2      	lsls	r2, r4, #3
 800488c:	4614      	mov	r4, r2
 800488e:	461d      	mov	r5, r3
 8004890:	4643      	mov	r3, r8
 8004892:	18e3      	adds	r3, r4, r3
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	464b      	mov	r3, r9
 8004898:	eb45 0303 	adc.w	r3, r5, r3
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048aa:	4629      	mov	r1, r5
 80048ac:	028b      	lsls	r3, r1, #10
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b4:	4621      	mov	r1, r4
 80048b6:	028a      	lsls	r2, r1, #10
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048be:	2200      	movs	r2, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	61fa      	str	r2, [r7, #28]
 80048c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c8:	f7fb fcba 	bl	8000240 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80048e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetSysClockFreq+0x204>)
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	00f42400 	.word	0x00f42400
 800490c:	007a1200 	.word	0x007a1200

08004910 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <HAL_RCC_GetHCLKFreq+0x14>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000000 	.word	0x20000000

08004928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800492c:	f7ff fff0 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0a9b      	lsrs	r3, r3, #10
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_GetPCLK1Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	0800e0c8 	.word	0x0800e0c8

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004954:	f7ff ffdc 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0b5b      	lsrs	r3, r3, #13
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	0800e0c8 	.word	0x0800e0c8

08004978 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	220f      	movs	r2, #15
 8004986:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004988:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCC_GetClockConfig+0x5c>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0203 	and.w	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_RCC_GetClockConfig+0x5c>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_GetClockConfig+0x5c>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <HAL_RCC_GetClockConfig+0x60>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40023c00 	.word	0x40023c00

080049dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a04:	4b69      	ldr	r3, [pc, #420]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a68      	ldr	r2, [pc, #416]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a0e:	6093      	str	r3, [r2, #8]
 8004a10:	4b66      	ldr	r3, [pc, #408]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	4964      	ldr	r1, [pc, #400]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a36:	4b5d      	ldr	r3, [pc, #372]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	4959      	ldr	r1, [pc, #356]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d017      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a72:	4b4e      	ldr	r3, [pc, #312]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	494a      	ldr	r1, [pc, #296]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a90:	d101      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 808b 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac0:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	4a39      	ldr	r2, [pc, #228]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aca:	6413      	str	r3, [r2, #64]	; 0x40
 8004acc:	4b37      	ldr	r3, [pc, #220]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ad8:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae4:	f7fc fe6a 	bl	80017bc <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fc fe66 	bl	80017bc <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e38f      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004afe:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d035      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d02e      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b32:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a1a      	ldr	r2, [pc, #104]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b4a:	4a18      	ldr	r2, [pc, #96]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d114      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fc fe2e 	bl	80017bc <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fc fe2a 	bl	80017bc <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e351      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ee      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b92:	d111      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ba2:	400b      	ands	r3, r1
 8004ba4:	4901      	ldr	r1, [pc, #4]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	0ffffcff 	.word	0x0ffffcff
 8004bb8:	4bac      	ldr	r3, [pc, #688]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4aab      	ldr	r2, [pc, #684]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	4ba9      	ldr	r3, [pc, #676]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd0:	49a6      	ldr	r1, [pc, #664]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004be2:	4ba2      	ldr	r3, [pc, #648]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be8:	4aa0      	ldr	r2, [pc, #640]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bf2:	4b9e      	ldr	r3, [pc, #632]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	499b      	ldr	r1, [pc, #620]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1e:	4993      	ldr	r1, [pc, #588]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c32:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c40:	498a      	ldr	r1, [pc, #552]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c54:	4b85      	ldr	r3, [pc, #532]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c62:	4982      	ldr	r1, [pc, #520]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c76:	4b7d      	ldr	r3, [pc, #500]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4979      	ldr	r1, [pc, #484]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c98:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	4971      	ldr	r1, [pc, #452]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cba:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f023 020c 	bic.w	r2, r3, #12
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	4968      	ldr	r1, [pc, #416]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cdc:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	4960      	ldr	r1, [pc, #384]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	4957      	ldr	r1, [pc, #348]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d20:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	494f      	ldr	r1, [pc, #316]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	4946      	ldr	r1, [pc, #280]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	493e      	ldr	r1, [pc, #248]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	4935      	ldr	r1, [pc, #212]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	492d      	ldr	r1, [pc, #180]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dca:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd8:	4924      	ldr	r1, [pc, #144]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de8:	d101      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	4914      	ldr	r1, [pc, #80]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3c:	490b      	ldr	r1, [pc, #44]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	4902      	ldr	r1, [pc, #8]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e7c:	4b8a      	ldr	r3, [pc, #552]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	4986      	ldr	r1, [pc, #536]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ea0:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb0:	497d      	ldr	r1, [pc, #500]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d006      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 80d6 	beq.w	8005078 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ecc:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed8:	f7fc fc70 	bl	80017bc <HAL_GetTick>
 8004edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ee0:	f7fc fc6c 	bl	80017bc <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e195      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef2:	4b6d      	ldr	r3, [pc, #436]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d021      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d11d      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f12:	4b65      	ldr	r3, [pc, #404]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	019a      	lsls	r2, r3, #6
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	4958      	ldr	r1, [pc, #352]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02e      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d129      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f7a:	4b4b      	ldr	r3, [pc, #300]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f88:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8e:	0f1b      	lsrs	r3, r3, #28
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	019a      	lsls	r2, r3, #6
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	071b      	lsls	r3, r3, #28
 8004fae:	493e      	ldr	r1, [pc, #248]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fb6:	4b3c      	ldr	r3, [pc, #240]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbc:	f023 021f 	bic.w	r2, r3, #31
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	4938      	ldr	r1, [pc, #224]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01d      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fda:	4b33      	ldr	r3, [pc, #204]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fe8:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fee:	0f1b      	lsrs	r3, r3, #28
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	019a      	lsls	r2, r3, #6
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	4926      	ldr	r1, [pc, #152]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d011      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	019a      	lsls	r2, r3, #6
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	071b      	lsls	r3, r3, #28
 800503e:	491a      	ldr	r1, [pc, #104]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005046:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005052:	f7fc fbb3 	bl	80017bc <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800505a:	f7fc fbaf 	bl	80017bc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b64      	cmp	r3, #100	; 0x64
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0d8      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b01      	cmp	r3, #1
 800507c:	f040 80ce 	bne.w	800521c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508c:	f7fc fb96 	bl	80017bc <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005092:	e00b      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005094:	f7fc fb92 	bl	80017bc <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d904      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0bb      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ac:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b8:	d0ec      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02e      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d12a      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050e2:	4b51      	ldr	r3, [pc, #324]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050f0:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	019a      	lsls	r2, r3, #6
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	071b      	lsls	r3, r3, #28
 8005116:	4944      	ldr	r1, [pc, #272]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800511e:	4b42      	ldr	r3, [pc, #264]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	3b01      	subs	r3, #1
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	493d      	ldr	r1, [pc, #244]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d022      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514c:	d11d      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800514e:	4b36      	ldr	r3, [pc, #216]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	0e1b      	lsrs	r3, r3, #24
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800515c:	4b32      	ldr	r3, [pc, #200]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	0f1b      	lsrs	r3, r3, #28
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	019a      	lsls	r2, r3, #6
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	431a      	orrs	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	071b      	lsls	r3, r3, #28
 8005182:	4929      	ldr	r1, [pc, #164]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d028      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	0e1b      	lsrs	r3, r3, #24
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051a4:	4b20      	ldr	r3, [pc, #128]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	019a      	lsls	r2, r3, #6
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	431a      	orrs	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	071b      	lsls	r3, r3, #28
 80051ca:	4917      	ldr	r1, [pc, #92]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	4911      	ldr	r1, [pc, #68]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051e8:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc fae2 	bl	80017bc <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051fc:	f7fc fade 	bl	80017bc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e007      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521a:	d1ef      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e09d      	b.n	800537a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fffe 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a4:	d902      	bls.n	80052ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e002      	b.n	80052b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052ba:	d007      	beq.n	80052cc <HAL_SPI_Init+0xa0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	ea42 0103 	orr.w	r1, r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0204 	and.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e049      	b.n	8005428 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fc f819 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f000 fbbb 	bl	8005b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e054      	b.n	80054f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a26      	ldr	r2, [pc, #152]	; (8005500 <HAL_TIM_Base_Start_IT+0xd0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005472:	d01d      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <HAL_TIM_Base_Start_IT+0xd4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a21      	ldr	r2, [pc, #132]	; (8005508 <HAL_TIM_Base_Start_IT+0xd8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1f      	ldr	r2, [pc, #124]	; (800550c <HAL_TIM_Base_Start_IT+0xdc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_TIM_Base_Start_IT+0xe0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIM_Base_Start_IT+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <HAL_TIM_Base_Start_IT+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d115      	bne.n	80054dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_TIM_Base_Start_IT+0xec>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d015      	beq.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c8:	d011      	beq.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	e008      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800
 800551c:	00010007 	.word	0x00010007

08005520 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e049      	b.n	80055c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f841 	bl	80055ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f000 faec 	bl	8005b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d122      	bne.n	800563e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d11b      	bne.n	800563e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0202 	mvn.w	r2, #2
 800560e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa6b 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 800562a:	e005      	b.n	8005638 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa5d 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa6e 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d122      	bne.n	8005692 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d11b      	bne.n	8005692 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0204 	mvn.w	r2, #4
 8005662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa41 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 800567e:	e005      	b.n	800568c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa33 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa44 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d122      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d11b      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f06f 0208 	mvn.w	r2, #8
 80056b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2204      	movs	r2, #4
 80056bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fa17 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 80056d2:	e005      	b.n	80056e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa09 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fa1a 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d122      	bne.n	800573a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d11b      	bne.n	800573a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0210 	mvn.w	r2, #16
 800570a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2208      	movs	r2, #8
 8005710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9ed 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 8005726:	e005      	b.n	8005734 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9df 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f9f0 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10e      	bne.n	8005766 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0201 	mvn.w	r2, #1
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb fba9 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fcd1 	bl	8006134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fcc4 	bl	8006148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f99e 	bl	8005b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d10e      	bne.n	8005818 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b20      	cmp	r3, #32
 8005806:	d107      	bne.n	8005818 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0220 	mvn.w	r2, #32
 8005810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fc84 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_TIM_IC_ConfigChannel+0x1e>
 800583a:	2302      	movs	r3, #2
 800583c:	e088      	b.n	8005950 <HAL_TIM_IC_ConfigChannel+0x130>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11b      	bne.n	8005884 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f000 fa0e 	bl	8005c7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 020c 	bic.w	r2, r2, #12
 800586e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	619a      	str	r2, [r3, #24]
 8005882:	e060      	b.n	8005946 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d11c      	bne.n	80058c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f000 fa92 	bl	8005dc2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6999      	ldr	r1, [r3, #24]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	619a      	str	r2, [r3, #24]
 80058c2:	e040      	b.n	8005946 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d11b      	bne.n	8005902 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6819      	ldr	r1, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 fadf 	bl	8005e9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 020c 	bic.w	r2, r2, #12
 80058ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	61da      	str	r2, [r3, #28]
 8005900:	e021      	b.n	8005946 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d11c      	bne.n	8005942 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f000 fafc 	bl	8005f14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800592a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69d9      	ldr	r1, [r3, #28]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	61da      	str	r2, [r3, #28]
 8005940:	e001      	b.n	8005946 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIM_ConfigClockSource+0x1c>
 8005970:	2302      	movs	r3, #2
 8005972:	e0b4      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x186>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	4b56      	ldr	r3, [pc, #344]	; (8005ae8 <HAL_TIM_ConfigClockSource+0x190>)
 8005990:	4013      	ands	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ac:	d03e      	beq.n	8005a2c <HAL_TIM_ConfigClockSource+0xd4>
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b2:	f200 8087 	bhi.w	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	f000 8086 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x172>
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	d87f      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b70      	cmp	r3, #112	; 0x70
 80059c6:	d01a      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0xa6>
 80059c8:	2b70      	cmp	r3, #112	; 0x70
 80059ca:	d87b      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b60      	cmp	r3, #96	; 0x60
 80059ce:	d050      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x11a>
 80059d0:	2b60      	cmp	r3, #96	; 0x60
 80059d2:	d877      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b50      	cmp	r3, #80	; 0x50
 80059d6:	d03c      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0xfa>
 80059d8:	2b50      	cmp	r3, #80	; 0x50
 80059da:	d873      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d058      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x13a>
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d86f      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d064      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d86b      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d060      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d867      	bhi.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d05c      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d05a      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80059fc:	e062      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6899      	ldr	r1, [r3, #8]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f000 fad9 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
      break;
 8005a2a:	e04f      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f000 fac2 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a4e:	609a      	str	r2, [r3, #8]
      break;
 8005a50:	e03c      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f000 f980 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2150      	movs	r1, #80	; 0x50
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fa8f 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005a70:	e02c      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f000 f9dc 	bl	8005e3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2160      	movs	r1, #96	; 0x60
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fa7f 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005a90:	e01c      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 f960 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2140      	movs	r1, #64	; 0x40
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fa6f 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e00c      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4619      	mov	r1, r3
 8005abc:	4610      	mov	r0, r2
 8005abe:	f000 fa66 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005ac2:	e003      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e000      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	fffeff88 	.word	0xfffeff88

08005aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a40      	ldr	r2, [pc, #256]	; (8005c50 <TIM_Base_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5a:	d00f      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3d      	ldr	r2, [pc, #244]	; (8005c54 <TIM_Base_SetConfig+0x118>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <TIM_Base_SetConfig+0x11c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	; (8005c5c <TIM_Base_SetConfig+0x120>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3a      	ldr	r2, [pc, #232]	; (8005c60 <TIM_Base_SetConfig+0x124>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2f      	ldr	r2, [pc, #188]	; (8005c50 <TIM_Base_SetConfig+0x114>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9c:	d027      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2c      	ldr	r2, [pc, #176]	; (8005c54 <TIM_Base_SetConfig+0x118>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d023      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2b      	ldr	r2, [pc, #172]	; (8005c58 <TIM_Base_SetConfig+0x11c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01f      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <TIM_Base_SetConfig+0x120>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	; (8005c60 <TIM_Base_SetConfig+0x124>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d017      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a28      	ldr	r2, [pc, #160]	; (8005c64 <TIM_Base_SetConfig+0x128>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <TIM_Base_SetConfig+0x12c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <TIM_Base_SetConfig+0x130>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <TIM_Base_SetConfig+0x134>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <TIM_Base_SetConfig+0x138>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a23      	ldr	r2, [pc, #140]	; (8005c78 <TIM_Base_SetConfig+0x13c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <TIM_Base_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_Base_SetConfig+0xf8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <TIM_Base_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d103      	bne.n	8005c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	615a      	str	r2, [r3, #20]
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40001800 	.word	0x40001800
 8005c74:	40001c00 	.word	0x40001c00
 8005c78:	40002000 	.word	0x40002000

08005c7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a28      	ldr	r2, [pc, #160]	; (8005d48 <TIM_TI1_SetConfig+0xcc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01b      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d017      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <TIM_TI1_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a24      	ldr	r2, [pc, #144]	; (8005d50 <TIM_TI1_SetConfig+0xd4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a23      	ldr	r2, [pc, #140]	; (8005d54 <TIM_TI1_SetConfig+0xd8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <TIM_TI1_SetConfig+0xdc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <TIM_TI1_SetConfig+0xe0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x66>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <TIM_TI1_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <TIM_TI1_SetConfig+0x6a>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <TIM_TI1_SetConfig+0x6c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e003      	b.n	8005d06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 030a 	bic.w	r3, r3, #10
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 030a 	and.w	r3, r3, #10
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40001800 	.word	0x40001800

08005d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f023 0210 	bic.w	r2, r3, #16
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f023 0210 	bic.w	r2, r3, #16
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	031b      	lsls	r3, r3, #12
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	031b      	lsls	r3, r3, #12
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f043 0307 	orr.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e06d      	b.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a30      	ldr	r2, [pc, #192]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a20      	ldr	r2, [pc, #128]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608e:	d01d      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1d      	ldr	r2, [pc, #116]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a16      	ldr	r2, [pc, #88]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10c      	bne.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40014000 	.word	0x40014000
 800611c:	40001800 	.word	0x40001800

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e040      	b.n	80061f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb f972 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f82c 	bl	80061f8 <UART_SetConfig>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e022      	b.n	80061f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa84 	bl	80066c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb0b 	bl	8006804 <UART_CheckIdleState>
 80061ee:	4603      	mov	r3, r0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4ba6      	ldr	r3, [pc, #664]	; (80064bc <UART_SetConfig+0x2c4>)
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	430b      	orrs	r3, r1
 800622e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a94      	ldr	r2, [pc, #592]	; (80064c0 <UART_SetConfig+0x2c8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d120      	bne.n	80062b6 <UART_SetConfig+0xbe>
 8006274:	4b93      	ldr	r3, [pc, #588]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d816      	bhi.n	80062b0 <UART_SetConfig+0xb8>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x90>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	08006299 	.word	0x08006299
 800628c:	080062a5 	.word	0x080062a5
 8006290:	0800629f 	.word	0x0800629f
 8006294:	080062ab 	.word	0x080062ab
 8006298:	2301      	movs	r3, #1
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e150      	b.n	8006540 <UART_SetConfig+0x348>
 800629e:	2302      	movs	r3, #2
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e14d      	b.n	8006540 <UART_SetConfig+0x348>
 80062a4:	2304      	movs	r3, #4
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e14a      	b.n	8006540 <UART_SetConfig+0x348>
 80062aa:	2308      	movs	r3, #8
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e147      	b.n	8006540 <UART_SetConfig+0x348>
 80062b0:	2310      	movs	r3, #16
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e144      	b.n	8006540 <UART_SetConfig+0x348>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a83      	ldr	r2, [pc, #524]	; (80064c8 <UART_SetConfig+0x2d0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d132      	bne.n	8006326 <UART_SetConfig+0x12e>
 80062c0:	4b80      	ldr	r3, [pc, #512]	; (80064c4 <UART_SetConfig+0x2cc>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d828      	bhi.n	8006320 <UART_SetConfig+0x128>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0xdc>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006321 	.word	0x08006321
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006321 	.word	0x08006321
 80062e4:	08006315 	.word	0x08006315
 80062e8:	08006321 	.word	0x08006321
 80062ec:	08006321 	.word	0x08006321
 80062f0:	08006321 	.word	0x08006321
 80062f4:	0800630f 	.word	0x0800630f
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006321 	.word	0x08006321
 8006304:	0800631b 	.word	0x0800631b
 8006308:	2300      	movs	r3, #0
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e118      	b.n	8006540 <UART_SetConfig+0x348>
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e115      	b.n	8006540 <UART_SetConfig+0x348>
 8006314:	2304      	movs	r3, #4
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e112      	b.n	8006540 <UART_SetConfig+0x348>
 800631a:	2308      	movs	r3, #8
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e10f      	b.n	8006540 <UART_SetConfig+0x348>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e10c      	b.n	8006540 <UART_SetConfig+0x348>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a68      	ldr	r2, [pc, #416]	; (80064cc <UART_SetConfig+0x2d4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d120      	bne.n	8006372 <UART_SetConfig+0x17a>
 8006330:	4b64      	ldr	r3, [pc, #400]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800633a:	2b30      	cmp	r3, #48	; 0x30
 800633c:	d013      	beq.n	8006366 <UART_SetConfig+0x16e>
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d814      	bhi.n	800636c <UART_SetConfig+0x174>
 8006342:	2b20      	cmp	r3, #32
 8006344:	d009      	beq.n	800635a <UART_SetConfig+0x162>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d810      	bhi.n	800636c <UART_SetConfig+0x174>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <UART_SetConfig+0x15c>
 800634e:	2b10      	cmp	r3, #16
 8006350:	d006      	beq.n	8006360 <UART_SetConfig+0x168>
 8006352:	e00b      	b.n	800636c <UART_SetConfig+0x174>
 8006354:	2300      	movs	r3, #0
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e0f2      	b.n	8006540 <UART_SetConfig+0x348>
 800635a:	2302      	movs	r3, #2
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e0ef      	b.n	8006540 <UART_SetConfig+0x348>
 8006360:	2304      	movs	r3, #4
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e0ec      	b.n	8006540 <UART_SetConfig+0x348>
 8006366:	2308      	movs	r3, #8
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0e9      	b.n	8006540 <UART_SetConfig+0x348>
 800636c:	2310      	movs	r3, #16
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e0e6      	b.n	8006540 <UART_SetConfig+0x348>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a56      	ldr	r2, [pc, #344]	; (80064d0 <UART_SetConfig+0x2d8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d120      	bne.n	80063be <UART_SetConfig+0x1c6>
 800637c:	4b51      	ldr	r3, [pc, #324]	; (80064c4 <UART_SetConfig+0x2cc>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006386:	2bc0      	cmp	r3, #192	; 0xc0
 8006388:	d013      	beq.n	80063b2 <UART_SetConfig+0x1ba>
 800638a:	2bc0      	cmp	r3, #192	; 0xc0
 800638c:	d814      	bhi.n	80063b8 <UART_SetConfig+0x1c0>
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d009      	beq.n	80063a6 <UART_SetConfig+0x1ae>
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d810      	bhi.n	80063b8 <UART_SetConfig+0x1c0>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <UART_SetConfig+0x1a8>
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d006      	beq.n	80063ac <UART_SetConfig+0x1b4>
 800639e:	e00b      	b.n	80063b8 <UART_SetConfig+0x1c0>
 80063a0:	2300      	movs	r3, #0
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e0cc      	b.n	8006540 <UART_SetConfig+0x348>
 80063a6:	2302      	movs	r3, #2
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e0c9      	b.n	8006540 <UART_SetConfig+0x348>
 80063ac:	2304      	movs	r3, #4
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e0c6      	b.n	8006540 <UART_SetConfig+0x348>
 80063b2:	2308      	movs	r3, #8
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e0c3      	b.n	8006540 <UART_SetConfig+0x348>
 80063b8:	2310      	movs	r3, #16
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e0c0      	b.n	8006540 <UART_SetConfig+0x348>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a44      	ldr	r2, [pc, #272]	; (80064d4 <UART_SetConfig+0x2dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d125      	bne.n	8006414 <UART_SetConfig+0x21c>
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <UART_SetConfig+0x2cc>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d6:	d017      	beq.n	8006408 <UART_SetConfig+0x210>
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063dc:	d817      	bhi.n	800640e <UART_SetConfig+0x216>
 80063de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e2:	d00b      	beq.n	80063fc <UART_SetConfig+0x204>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d811      	bhi.n	800640e <UART_SetConfig+0x216>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <UART_SetConfig+0x1fe>
 80063ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f2:	d006      	beq.n	8006402 <UART_SetConfig+0x20a>
 80063f4:	e00b      	b.n	800640e <UART_SetConfig+0x216>
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e0a1      	b.n	8006540 <UART_SetConfig+0x348>
 80063fc:	2302      	movs	r3, #2
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e09e      	b.n	8006540 <UART_SetConfig+0x348>
 8006402:	2304      	movs	r3, #4
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e09b      	b.n	8006540 <UART_SetConfig+0x348>
 8006408:	2308      	movs	r3, #8
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e098      	b.n	8006540 <UART_SetConfig+0x348>
 800640e:	2310      	movs	r3, #16
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e095      	b.n	8006540 <UART_SetConfig+0x348>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <UART_SetConfig+0x2e0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d125      	bne.n	800646a <UART_SetConfig+0x272>
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800642c:	d017      	beq.n	800645e <UART_SetConfig+0x266>
 800642e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006432:	d817      	bhi.n	8006464 <UART_SetConfig+0x26c>
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d00b      	beq.n	8006452 <UART_SetConfig+0x25a>
 800643a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643e:	d811      	bhi.n	8006464 <UART_SetConfig+0x26c>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x254>
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x260>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x26c>
 800644c:	2301      	movs	r3, #1
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e076      	b.n	8006540 <UART_SetConfig+0x348>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e073      	b.n	8006540 <UART_SetConfig+0x348>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e070      	b.n	8006540 <UART_SetConfig+0x348>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e06d      	b.n	8006540 <UART_SetConfig+0x348>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e06a      	b.n	8006540 <UART_SetConfig+0x348>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <UART_SetConfig+0x2e4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d138      	bne.n	80064e6 <UART_SetConfig+0x2ee>
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <UART_SetConfig+0x2cc>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800647e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006482:	d017      	beq.n	80064b4 <UART_SetConfig+0x2bc>
 8006484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006488:	d82a      	bhi.n	80064e0 <UART_SetConfig+0x2e8>
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648e:	d00b      	beq.n	80064a8 <UART_SetConfig+0x2b0>
 8006490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006494:	d824      	bhi.n	80064e0 <UART_SetConfig+0x2e8>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <UART_SetConfig+0x2aa>
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d006      	beq.n	80064ae <UART_SetConfig+0x2b6>
 80064a0:	e01e      	b.n	80064e0 <UART_SetConfig+0x2e8>
 80064a2:	2300      	movs	r3, #0
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e04b      	b.n	8006540 <UART_SetConfig+0x348>
 80064a8:	2302      	movs	r3, #2
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e048      	b.n	8006540 <UART_SetConfig+0x348>
 80064ae:	2304      	movs	r3, #4
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e045      	b.n	8006540 <UART_SetConfig+0x348>
 80064b4:	2308      	movs	r3, #8
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e042      	b.n	8006540 <UART_SetConfig+0x348>
 80064ba:	bf00      	nop
 80064bc:	efff69f3 	.word	0xefff69f3
 80064c0:	40011000 	.word	0x40011000
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40004400 	.word	0x40004400
 80064cc:	40004800 	.word	0x40004800
 80064d0:	40004c00 	.word	0x40004c00
 80064d4:	40005000 	.word	0x40005000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	40007800 	.word	0x40007800
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e02c      	b.n	8006540 <UART_SetConfig+0x348>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a72      	ldr	r2, [pc, #456]	; (80066b4 <UART_SetConfig+0x4bc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d125      	bne.n	800653c <UART_SetConfig+0x344>
 80064f0:	4b71      	ldr	r3, [pc, #452]	; (80066b8 <UART_SetConfig+0x4c0>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064fe:	d017      	beq.n	8006530 <UART_SetConfig+0x338>
 8006500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006504:	d817      	bhi.n	8006536 <UART_SetConfig+0x33e>
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d00b      	beq.n	8006524 <UART_SetConfig+0x32c>
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	d811      	bhi.n	8006536 <UART_SetConfig+0x33e>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <UART_SetConfig+0x326>
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d006      	beq.n	800652a <UART_SetConfig+0x332>
 800651c:	e00b      	b.n	8006536 <UART_SetConfig+0x33e>
 800651e:	2300      	movs	r3, #0
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e00d      	b.n	8006540 <UART_SetConfig+0x348>
 8006524:	2302      	movs	r3, #2
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e00a      	b.n	8006540 <UART_SetConfig+0x348>
 800652a:	2304      	movs	r3, #4
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e007      	b.n	8006540 <UART_SetConfig+0x348>
 8006530:	2308      	movs	r3, #8
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e004      	b.n	8006540 <UART_SetConfig+0x348>
 8006536:	2310      	movs	r3, #16
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e001      	b.n	8006540 <UART_SetConfig+0x348>
 800653c:	2310      	movs	r3, #16
 800653e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006548:	d15b      	bne.n	8006602 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800654a:	7ffb      	ldrb	r3, [r7, #31]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d828      	bhi.n	80065a2 <UART_SetConfig+0x3aa>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x360>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	0800658d 	.word	0x0800658d
 8006564:	080065a3 	.word	0x080065a3
 8006568:	08006593 	.word	0x08006593
 800656c:	080065a3 	.word	0x080065a3
 8006570:	080065a3 	.word	0x080065a3
 8006574:	080065a3 	.word	0x080065a3
 8006578:	0800659b 	.word	0x0800659b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe f9d4 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 8006580:	61b8      	str	r0, [r7, #24]
        break;
 8006582:	e013      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fe f9e4 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8006588:	61b8      	str	r0, [r7, #24]
        break;
 800658a:	e00f      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <UART_SetConfig+0x4c4>)
 800658e:	61bb      	str	r3, [r7, #24]
        break;
 8006590:	e00c      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006592:	f7fe f8b7 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8006596:	61b8      	str	r0, [r7, #24]
        break;
 8006598:	e008      	b.n	80065ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659e:	61bb      	str	r3, [r7, #24]
        break;
 80065a0:	e004      	b.n	80065ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	77bb      	strb	r3, [r7, #30]
        break;
 80065aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d074      	beq.n	800669c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	005a      	lsls	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d916      	bls.n	80065fc <UART_SetConfig+0x404>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d4:	d212      	bcs.n	80065fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f023 030f 	bic.w	r3, r3, #15
 80065de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	89fb      	ldrh	r3, [r7, #14]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	89fa      	ldrh	r2, [r7, #14]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e04f      	b.n	800669c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77bb      	strb	r3, [r7, #30]
 8006600:	e04c      	b.n	800669c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d828      	bhi.n	800665a <UART_SetConfig+0x462>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x418>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006635 	.word	0x08006635
 8006614:	0800663d 	.word	0x0800663d
 8006618:	08006645 	.word	0x08006645
 800661c:	0800665b 	.word	0x0800665b
 8006620:	0800664b 	.word	0x0800664b
 8006624:	0800665b 	.word	0x0800665b
 8006628:	0800665b 	.word	0x0800665b
 800662c:	0800665b 	.word	0x0800665b
 8006630:	08006653 	.word	0x08006653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fe f978 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 8006638:	61b8      	str	r0, [r7, #24]
        break;
 800663a:	e013      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe f988 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8006640:	61b8      	str	r0, [r7, #24]
        break;
 8006642:	e00f      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <UART_SetConfig+0x4c4>)
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e00c      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664a:	f7fe f85b 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 800664e:	61b8      	str	r0, [r7, #24]
        break;
 8006650:	e008      	b.n	8006664 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	61bb      	str	r3, [r7, #24]
        break;
 8006658:	e004      	b.n	8006664 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	77bb      	strb	r3, [r7, #30]
        break;
 8006662:	bf00      	nop
    }

    if (pclk != 0U)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085a      	lsrs	r2, r3, #1
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b0f      	cmp	r3, #15
 8006682:	d909      	bls.n	8006698 <UART_SetConfig+0x4a0>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668a:	d205      	bcs.n	8006698 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	e001      	b.n	800669c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40007c00 	.word	0x40007c00
 80066b8:	40023800 	.word	0x40023800
 80066bc:	00f42400 	.word	0x00f42400

080066c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01a      	beq.n	80067d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067be:	d10a      	bne.n	80067d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006814:	f7fa ffd2 	bl	80017bc <HAL_GetTick>
 8006818:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b08      	cmp	r3, #8
 8006826:	d10e      	bne.n	8006846 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f831 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e027      	b.n	8006896 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b04      	cmp	r3, #4
 8006852:	d10e      	bne.n	8006872 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f81b 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e011      	b.n	8006896 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b09c      	sub	sp, #112	; 0x70
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	e0a7      	b.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	f000 80a3 	beq.w	8006a00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fa ff7f 	bl	80017bc <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80068ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d13f      	bne.n	8006950 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e4:	667b      	str	r3, [r7, #100]	; 0x64
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e6      	bne.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	663b      	str	r3, [r7, #96]	; 0x60
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006922:	64ba      	str	r2, [r7, #72]	; 0x48
 8006924:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e5      	bne.n	8006902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e068      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d050      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696c:	d148      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006976:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800699c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069ca:	623a      	str	r2, [r7, #32]
 80069cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	69f9      	ldr	r1, [r7, #28]
 80069d0:	6a3a      	ldr	r2, [r7, #32]
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e010      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	f43f af48 	beq.w	80068b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3770      	adds	r7, #112	; 0x70
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 001c 	add.w	r0, r7, #28
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d120      	bne.n	8006a86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <USB_CoreInit+0xac>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fbee 	bl	800825c <USB_CoreReset>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e010      	b.n	8006aa8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fbe2 	bl	800825c <USB_CoreReset>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d10b      	bne.n	8006ac6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f043 0206 	orr.w	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad2:	b004      	add	sp, #16
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	ffbdffbf 	.word	0xffbdffbf

08006adc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d165      	bne.n	8006bbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a41      	ldr	r2, [pc, #260]	; (8006bf8 <USB_SetTurnaroundTime+0x11c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d906      	bls.n	8006b06 <USB_SetTurnaroundTime+0x2a>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4a40      	ldr	r2, [pc, #256]	; (8006bfc <USB_SetTurnaroundTime+0x120>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d202      	bcs.n	8006b06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b00:	230f      	movs	r3, #15
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e062      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4a3c      	ldr	r2, [pc, #240]	; (8006bfc <USB_SetTurnaroundTime+0x120>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d306      	bcc.n	8006b1c <USB_SetTurnaroundTime+0x40>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4a3b      	ldr	r2, [pc, #236]	; (8006c00 <USB_SetTurnaroundTime+0x124>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d202      	bcs.n	8006b1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b16:	230e      	movs	r3, #14
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	e057      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4a38      	ldr	r2, [pc, #224]	; (8006c00 <USB_SetTurnaroundTime+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d306      	bcc.n	8006b32 <USB_SetTurnaroundTime+0x56>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <USB_SetTurnaroundTime+0x128>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d202      	bcs.n	8006b32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b2c:	230d      	movs	r3, #13
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e04c      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4a33      	ldr	r2, [pc, #204]	; (8006c04 <USB_SetTurnaroundTime+0x128>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d306      	bcc.n	8006b48 <USB_SetTurnaroundTime+0x6c>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4a32      	ldr	r2, [pc, #200]	; (8006c08 <USB_SetTurnaroundTime+0x12c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d802      	bhi.n	8006b48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b42:	230c      	movs	r3, #12
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e041      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4a2f      	ldr	r2, [pc, #188]	; (8006c08 <USB_SetTurnaroundTime+0x12c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d906      	bls.n	8006b5e <USB_SetTurnaroundTime+0x82>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4a2e      	ldr	r2, [pc, #184]	; (8006c0c <USB_SetTurnaroundTime+0x130>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d802      	bhi.n	8006b5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b58:	230b      	movs	r3, #11
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e036      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <USB_SetTurnaroundTime+0x130>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d906      	bls.n	8006b74 <USB_SetTurnaroundTime+0x98>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4a29      	ldr	r2, [pc, #164]	; (8006c10 <USB_SetTurnaroundTime+0x134>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d802      	bhi.n	8006b74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b6e:	230a      	movs	r3, #10
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	e02b      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <USB_SetTurnaroundTime+0x134>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d906      	bls.n	8006b8a <USB_SetTurnaroundTime+0xae>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <USB_SetTurnaroundTime+0x138>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d202      	bcs.n	8006b8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b84:	2309      	movs	r3, #9
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e020      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a21      	ldr	r2, [pc, #132]	; (8006c14 <USB_SetTurnaroundTime+0x138>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d306      	bcc.n	8006ba0 <USB_SetTurnaroundTime+0xc4>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <USB_SetTurnaroundTime+0x13c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d802      	bhi.n	8006ba0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e015      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <USB_SetTurnaroundTime+0x13c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d906      	bls.n	8006bb6 <USB_SetTurnaroundTime+0xda>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <USB_SetTurnaroundTime+0x140>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d202      	bcs.n	8006bb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bb0:	2307      	movs	r3, #7
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e00a      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bb6:	2306      	movs	r3, #6
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e007      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bc2:	2309      	movs	r3, #9
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	e001      	b.n	8006bcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bc8:	2309      	movs	r3, #9
 8006bca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	00d8acbf 	.word	0x00d8acbf
 8006bfc:	00e4e1c0 	.word	0x00e4e1c0
 8006c00:	00f42400 	.word	0x00f42400
 8006c04:	01067380 	.word	0x01067380
 8006c08:	011a499f 	.word	0x011a499f
 8006c0c:	01312cff 	.word	0x01312cff
 8006c10:	014ca43f 	.word	0x014ca43f
 8006c14:	016e3600 	.word	0x016e3600
 8006c18:	01a6ab1f 	.word	0x01a6ab1f
 8006c1c:	01e84800 	.word	0x01e84800

08006c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f043 0201 	orr.w	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d115      	bne.n	8006cb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c92:	2001      	movs	r0, #1
 8006c94:	f7fa fd9e 	bl	80017d4 <HAL_Delay>
      ms++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fa4b 	bl	800813a <USB_GetMode>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d01e      	beq.n	8006ce8 <USB_SetCurrentMode+0x84>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b31      	cmp	r3, #49	; 0x31
 8006cae:	d9f0      	bls.n	8006c92 <USB_SetCurrentMode+0x2e>
 8006cb0:	e01a      	b.n	8006ce8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d115      	bne.n	8006ce4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	f7fa fd85 	bl	80017d4 <HAL_Delay>
      ms++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fa32 	bl	800813a <USB_GetMode>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <USB_SetCurrentMode+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b31      	cmp	r3, #49	; 0x31
 8006ce0:	d9f0      	bls.n	8006cc4 <USB_SetCurrentMode+0x60>
 8006ce2:	e001      	b.n	8006ce8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e005      	b.n	8006cf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b32      	cmp	r3, #50	; 0x32
 8006cec:	d101      	bne.n	8006cf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e009      	b.n	8006d30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	3340      	adds	r3, #64	; 0x40
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b0e      	cmp	r3, #14
 8006d34:	d9f2      	bls.n	8006d1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d11c      	bne.n	8006d76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e005      	b.n	8006d82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d94:	4619      	mov	r1, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	680b      	ldr	r3, [r1, #0]
 8006da0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d10c      	bne.n	8006dc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dae:	2100      	movs	r1, #0
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f965 	bl	8007080 <USB_SetDevSpeed>
 8006db6:	e008      	b.n	8006dca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006db8:	2101      	movs	r1, #1
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f960 	bl	8007080 <USB_SetDevSpeed>
 8006dc0:	e003      	b.n	8006dca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dc2:	2103      	movs	r1, #3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f95b 	bl	8007080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dca:	2110      	movs	r1, #16
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f8f3 	bl	8006fb8 <USB_FlushTxFifo>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f91f 	bl	8007020 <USB_FlushRxFifo>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df2:	461a      	mov	r2, r3
 8006df4:	2300      	movs	r3, #0
 8006df6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e043      	b.n	8006e9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e2c:	d118      	bne.n	8006e60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	461a      	mov	r2, r3
 8006e42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	e013      	b.n	8006e72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	461a      	mov	r2, r3
 8006e58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e008      	b.n	8006e72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2300      	movs	r3, #0
 8006e82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d3b7      	bcc.n	8006e16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e043      	b.n	8006f34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec2:	d118      	bne.n	8006ef6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	e013      	b.n	8006f08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eec:	461a      	mov	r2, r3
 8006eee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e008      	b.n	8006f08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	461a      	mov	r2, r3
 8006f16:	2300      	movs	r3, #0
 8006f18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	461a      	mov	r2, r3
 8006f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3301      	adds	r3, #1
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d3b7      	bcc.n	8006eac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f043 0210 	orr.w	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <USB_DevInit+0x2b4>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f043 0208 	orr.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d105      	bne.n	8006fa0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <USB_DevInit+0x2b8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fac:	b004      	add	sp, #16
 8006fae:	4770      	bx	lr
 8006fb0:	803c3800 	.word	0x803c3800
 8006fb4:	40000004 	.word	0x40000004

08006fb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a13      	ldr	r2, [pc, #76]	; (800701c <USB_FlushTxFifo+0x64>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d901      	bls.n	8006fd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e01b      	b.n	8007010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	daf2      	bge.n	8006fc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	019b      	lsls	r3, r3, #6
 8006fe8:	f043 0220 	orr.w	r2, r3, #32
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a08      	ldr	r2, [pc, #32]	; (800701c <USB_FlushTxFifo+0x64>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e006      	b.n	8007010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b20      	cmp	r3, #32
 800700c:	d0f0      	beq.n	8006ff0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	00030d40 	.word	0x00030d40

08007020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a11      	ldr	r2, [pc, #68]	; (800707c <USB_FlushRxFifo+0x5c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d901      	bls.n	800703e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e018      	b.n	8007070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	daf2      	bge.n	800702c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2210      	movs	r2, #16
 800704e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a08      	ldr	r2, [pc, #32]	; (800707c <USB_FlushRxFifo+0x5c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e006      	b.n	8007070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b10      	cmp	r3, #16
 800706c:	d0f0      	beq.n	8007050 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	00030d40 	.word	0x00030d40

08007080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a0:	4313      	orrs	r3, r2
 80070a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
 80070d6:	e00a      	b.n	80070ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d002      	beq.n	80070e4 <USB_GetDevSpeed+0x32>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	d102      	bne.n	80070ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070e4:	2302      	movs	r3, #2
 80070e6:	75fb      	strb	r3, [r7, #23]
 80070e8:	e001      	b.n	80070ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070ea:	230f      	movs	r3, #15
 80070ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d139      	bne.n	800718c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	2101      	movs	r1, #1
 800712a:	fa01 f303 	lsl.w	r3, r1, r3
 800712e:	b29b      	uxth	r3, r3
 8007130:	68f9      	ldr	r1, [r7, #12]
 8007132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007136:	4313      	orrs	r3, r2
 8007138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d153      	bne.n	80071f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800716c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	059b      	lsls	r3, r3, #22
 8007172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007174:	431a      	orrs	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0159      	lsls	r1, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	440b      	add	r3, r1
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	4619      	mov	r1, r3
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <USB_ActivateEndpoint+0x10c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	600b      	str	r3, [r1, #0]
 800718a:	e035      	b.n	80071f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f303 	lsl.w	r3, r1, r3
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d119      	bne.n	80071f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	791b      	ldrb	r3, [r3, #4]
 80071de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071e0:	430b      	orrs	r3, r1
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	0159      	lsls	r1, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	440b      	add	r3, r1
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	4619      	mov	r1, r3
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <USB_ActivateEndpoint+0x10c>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	10008000 	.word	0x10008000

0800720c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d161      	bne.n	80072ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800723e:	d11f      	bne.n	8007280 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800725e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800727e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	2101      	movs	r1, #1
 8007292:	fa01 f303 	lsl.w	r3, r1, r3
 8007296:	b29b      	uxth	r3, r3
 8007298:	43db      	mvns	r3, r3
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a0:	4013      	ands	r3, r2
 80072a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	2101      	movs	r1, #1
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	43db      	mvns	r3, r3
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c4:	4013      	ands	r3, r2
 80072c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0159      	lsls	r1, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	440b      	add	r3, r1
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	4619      	mov	r1, r3
 80072e4:	4b35      	ldr	r3, [pc, #212]	; (80073bc <USB_DeactivateEndpoint+0x1b0>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]
 80072ea:	e060      	b.n	80073ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007302:	d11f      	bne.n	8007344 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800731e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007322:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	2101      	movs	r1, #1
 8007356:	fa01 f303 	lsl.w	r3, r1, r3
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	43db      	mvns	r3, r3
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007364:	4013      	ands	r3, r2
 8007366:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	2101      	movs	r1, #1
 800737a:	fa01 f303 	lsl.w	r3, r1, r3
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	43db      	mvns	r3, r3
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007388:	4013      	ands	r3, r2
 800738a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	0159      	lsls	r1, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	4619      	mov	r1, r3
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <USB_DeactivateEndpoint+0x1b4>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	ec337800 	.word	0xec337800
 80073c0:	eff37800 	.word	0xeff37800

080073c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	; 0x28
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f040 8163 	bne.w	80076ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d132      	bne.n	8007454 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	0159      	lsls	r1, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	440b      	add	r3, r1
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	4619      	mov	r1, r3
 800740a:	4ba5      	ldr	r3, [pc, #660]	; (80076a0 <USB_EPStartXfer+0x2dc>)
 800740c:	4013      	ands	r3, r2
 800740e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	0159      	lsls	r1, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	440b      	add	r3, r1
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	4619      	mov	r1, r3
 800744c:	4b95      	ldr	r3, [pc, #596]	; (80076a4 <USB_EPStartXfer+0x2e0>)
 800744e:	4013      	ands	r3, r2
 8007450:	610b      	str	r3, [r1, #16]
 8007452:	e074      	b.n	800753e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	0159      	lsls	r1, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	440b      	add	r3, r1
 800746a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746e:	4619      	mov	r1, r3
 8007470:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <USB_EPStartXfer+0x2e0>)
 8007472:	4013      	ands	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	0159      	lsls	r1, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	440b      	add	r3, r1
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	4619      	mov	r1, r3
 8007492:	4b83      	ldr	r3, [pc, #524]	; (80076a0 <USB_EPStartXfer+0x2dc>)
 8007494:	4013      	ands	r3, r2
 8007496:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6999      	ldr	r1, [r3, #24]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	440b      	add	r3, r1
 80074b0:	1e59      	subs	r1, r3, #1
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074bc:	4b7a      	ldr	r3, [pc, #488]	; (80076a8 <USB_EPStartXfer+0x2e4>)
 80074be:	400b      	ands	r3, r1
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074cc:	4313      	orrs	r3, r2
 80074ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e6:	69b9      	ldr	r1, [r7, #24]
 80074e8:	0148      	lsls	r0, r1, #5
 80074ea:	69f9      	ldr	r1, [r7, #28]
 80074ec:	4401      	add	r1, r0
 80074ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074f2:	4313      	orrs	r3, r2
 80074f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d11f      	bne.n	800753e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007518:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800751c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800753c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d14b      	bne.n	80075dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	461a      	mov	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d128      	bne.n	80075ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d110      	bne.n	800759a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e00f      	b.n	80075ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e137      	b.n	800784c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	791b      	ldrb	r3, [r3, #4]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d015      	beq.n	8007630 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 811f 	beq.w	800784c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	2101      	movs	r1, #1
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	69f9      	ldr	r1, [r7, #28]
 8007626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800762a:	4313      	orrs	r3, r2
 800762c:	634b      	str	r3, [r1, #52]	; 0x34
 800762e:	e10d      	b.n	800784c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	e00f      	b.n	8007682 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007680:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6919      	ldr	r1, [r3, #16]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	b298      	uxth	r0, r3
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	4603      	mov	r3, r0
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 faea 	bl	8007c70 <USB_WritePacket>
 800769c:	e0d6      	b.n	800784c <USB_EPStartXfer+0x488>
 800769e:	bf00      	nop
 80076a0:	e007ffff 	.word	0xe007ffff
 80076a4:	fff80000 	.word	0xfff80000
 80076a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	0159      	lsls	r1, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	440b      	add	r3, r1
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	4619      	mov	r1, r3
 80076c8:	4b63      	ldr	r3, [pc, #396]	; (8007858 <USB_EPStartXfer+0x494>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	0159      	lsls	r1, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	440b      	add	r3, r1
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	4619      	mov	r1, r3
 80076ea:	4b5c      	ldr	r3, [pc, #368]	; (800785c <USB_EPStartXfer+0x498>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d123      	bne.n	8007740 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770e:	69b9      	ldr	r1, [r7, #24]
 8007710:	0148      	lsls	r0, r1, #5
 8007712:	69f9      	ldr	r1, [r7, #28]
 8007714:	4401      	add	r1, r0
 8007716:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800771a:	4313      	orrs	r3, r2
 800771c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800773c:	6113      	str	r3, [r2, #16]
 800773e:	e037      	b.n	80077b0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4413      	add	r3, r2
 800774a:	1e5a      	subs	r2, r3, #1
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	8afa      	ldrh	r2, [r7, #22]
 800775c:	fb03 f202 	mul.w	r2, r3, r2
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	04d9      	lsls	r1, r3, #19
 8007776:	4b3a      	ldr	r3, [pc, #232]	; (8007860 <USB_EPStartXfer+0x49c>)
 8007778:	400b      	ands	r3, r1
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	0148      	lsls	r0, r1, #5
 800777e:	69f9      	ldr	r1, [r7, #28]
 8007780:	4401      	add	r1, r0
 8007782:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007786:	4313      	orrs	r3, r2
 8007788:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	0148      	lsls	r0, r1, #5
 80077a4:	69f9      	ldr	r1, [r7, #28]
 80077a6:	4401      	add	r1, r0
 80077a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077ac:	4313      	orrs	r3, r2
 80077ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d10d      	bne.n	80077d2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6919      	ldr	r1, [r3, #16]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	460a      	mov	r2, r1
 80077d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	791b      	ldrb	r3, [r3, #4]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d128      	bne.n	800782c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d110      	bne.n	800780c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e00f      	b.n	800782c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	0151      	lsls	r1, r2, #5
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	440a      	add	r2, r1
 8007822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800782a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	440a      	add	r2, r1
 8007842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800784a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	fff80000 	.word	0xfff80000
 800785c:	e007ffff 	.word	0xe007ffff
 8007860:	1ff80000 	.word	0x1ff80000

08007864 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b01      	cmp	r3, #1
 8007882:	f040 80ce 	bne.w	8007a22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d132      	bne.n	80078f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	0159      	lsls	r1, r3, #5
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	440b      	add	r3, r1
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	4619      	mov	r1, r3
 80078aa:	4b9a      	ldr	r3, [pc, #616]	; (8007b14 <USB_EP0StartXfer+0x2b0>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	0159      	lsls	r1, r3, #5
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ea:	4619      	mov	r1, r3
 80078ec:	4b8a      	ldr	r3, [pc, #552]	; (8007b18 <USB_EP0StartXfer+0x2b4>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	610b      	str	r3, [r1, #16]
 80078f2:	e04e      	b.n	8007992 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	0159      	lsls	r1, r3, #5
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	440b      	add	r3, r1
 800790a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790e:	4619      	mov	r1, r3
 8007910:	4b81      	ldr	r3, [pc, #516]	; (8007b18 <USB_EP0StartXfer+0x2b4>)
 8007912:	4013      	ands	r3, r2
 8007914:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	0159      	lsls	r1, r3, #5
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	440b      	add	r3, r1
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	4619      	mov	r1, r3
 8007932:	4b78      	ldr	r3, [pc, #480]	; (8007b14 <USB_EP0StartXfer+0x2b0>)
 8007934:	4013      	ands	r3, r2
 8007936:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800796a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	691a      	ldr	r2, [r3, #16]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007982:	6939      	ldr	r1, [r7, #16]
 8007984:	0148      	lsls	r0, r1, #5
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	4401      	add	r1, r0
 800798a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800798e:	4313      	orrs	r3, r2
 8007990:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d11e      	bne.n	80079d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	461a      	mov	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e097      	b.n	8007b06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8083 	beq.w	8007b06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	2101      	movs	r1, #1
 8007a12:	fa01 f303 	lsl.w	r3, r1, r3
 8007a16:	6979      	ldr	r1, [r7, #20]
 8007a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	634b      	str	r3, [r1, #52]	; 0x34
 8007a20:	e071      	b.n	8007b06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	0159      	lsls	r1, r3, #5
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	440b      	add	r3, r1
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <USB_EP0StartXfer+0x2b4>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	0159      	lsls	r1, r3, #5
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <USB_EP0StartXfer+0x2b0>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab4:	6939      	ldr	r1, [r7, #16]
 8007ab6:	0148      	lsls	r0, r1, #5
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	4401      	add	r1, r0
 8007abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d10d      	bne.n	8007ae6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6919      	ldr	r1, [r3, #16]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	e007ffff 	.word	0xe007ffff
 8007b18:	fff80000 	.word	0xfff80000

08007b1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d14a      	bne.n	8007bd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b52:	f040 8086 	bne.w	8007c62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d902      	bls.n	8007bb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb2:	e056      	b.n	8007c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bcc:	d0e7      	beq.n	8007b9e <USB_EPStopXfer+0x82>
 8007bce:	e048      	b.n	8007c62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be8:	d13b      	bne.n	8007c62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d902      	bls.n	8007c48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	e00c      	b.n	8007c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c60:	d0e7      	beq.n	8007c32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	460b      	mov	r3, r1
 8007c80:	71fb      	strb	r3, [r7, #7]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d123      	bne.n	8007cde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c96:	88bb      	ldrh	r3, [r7, #4]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e018      	b.n	8007cd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	031a      	lsls	r2, r3, #12
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d3e2      	bcc.n	8007ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3724      	adds	r7, #36	; 0x24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b08b      	sub	sp, #44	; 0x2c
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	089b      	lsrs	r3, r3, #2
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	e014      	b.n	8007d42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	3301      	adds	r3, #1
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	3301      	adds	r3, #1
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	3301      	adds	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	6a3a      	ldr	r2, [r7, #32]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3e6      	bcc.n	8007d18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d4a:	8bfb      	ldrh	r3, [r7, #30]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01e      	beq.n	8007d8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f107 0310 	add.w	r3, r7, #16
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	701a      	strb	r2, [r3, #0]
      i++;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	3301      	adds	r3, #1
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d82:	8bfb      	ldrh	r3, [r7, #30]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d88:	8bfb      	ldrh	r3, [r7, #30]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1ea      	bne.n	8007d64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	372c      	adds	r7, #44	; 0x2c
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d12c      	bne.n	8007e12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	db12      	blt.n	8007df0 <USB_EPSetStall+0x54>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00f      	beq.n	8007df0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e02b      	b.n	8007e6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db12      	blt.n	8007e4a <USB_EPSetStall+0xae>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d128      	bne.n	8007ee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d003      	beq.n	8007ec4 <USB_EPClearStall+0x4c>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d138      	bne.n	8007f36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e027      	b.n	8007f36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d003      	beq.n	8007f16 <USB_EPClearStall+0x9e>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d10f      	bne.n	8007f36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f78:	68f9      	ldr	r1, [r7, #12]
 8007f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fbe:	f023 0302 	bic.w	r3, r3, #2
 8007fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4013      	ands	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4013      	ands	r3, r2
 800805c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	0c1b      	lsrs	r3, r3, #16
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	4013      	ands	r3, r2
 8008090:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	b29b      	uxth	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d0:	68bb      	ldr	r3, [r7, #8]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008100:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	fa22 f303 	lsr.w	r3, r2, r3
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	b2db      	uxtb	r3, r3
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4013      	ands	r3, r2
 800812a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800812c:	68bb      	ldr	r3, [r7, #8]
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0301 	and.w	r3, r3, #1
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008172:	4619      	mov	r1, r3
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <USB_ActivateSetup+0x44>)
 8008176:	4013      	ands	r3, r2
 8008178:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	fffff800 	.word	0xfffff800

080081a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	333c      	adds	r3, #60	; 0x3c
 80081b6:	3304      	adds	r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4a26      	ldr	r2, [pc, #152]	; (8008258 <USB_EP0_OutStart+0xb8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d90a      	bls.n	80081da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d4:	d101      	bne.n	80081da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e037      	b.n	800824a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008208:	f043 0318 	orr.w	r3, r3, #24
 800820c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008242:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	4f54300a 	.word	0x4f54300a

0800825c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <USB_CoreReset+0x64>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e01b      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	daf2      	bge.n	8008268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <USB_CoreReset+0x64>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d901      	bls.n	80082a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d0f0      	beq.n	8008292 <USB_CoreReset+0x36>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	00030d40 	.word	0x00030d40

080082c4 <HiL_Init_MSGQ>:
#include "HiL_Init_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
extern osMessageQueueId_t USB_MSGQ_Tx;

int HiL_Init_MSGQ (void) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 80082c8:	2200      	movs	r2, #0
 80082ca:	2104      	movs	r1, #4
 80082cc:	200a      	movs	r0, #10
 80082ce:	f002 f913 	bl	800a4f8 <osMessageQueueNew>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <HiL_Init_MSGQ+0x48>)
 80082d6:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <HiL_Init_MSGQ+0x48>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <HiL_Init_MSGQ+0x22>
	  return -1;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	e00f      	b.n	8008306 <HiL_Init_MSGQ+0x42>
  }
  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
 80082e6:	2200      	movs	r2, #0
 80082e8:	2104      	movs	r1, #4
 80082ea:	200a      	movs	r0, #10
 80082ec:	f002 f904 	bl	800a4f8 <osMessageQueueNew>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4a07      	ldr	r2, [pc, #28]	; (8008310 <HiL_Init_MSGQ+0x4c>)
 80082f4:	6013      	str	r3, [r2, #0]
    if (USB_MSGQ_Tx == NULL) {
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <HiL_Init_MSGQ+0x4c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <HiL_Init_MSGQ+0x40>
  	  return -1;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	e000      	b.n	8008306 <HiL_Init_MSGQ+0x42>
    }
  return 0;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200005f8 	.word	0x200005f8
 8008310:	200005fc 	.word	0x200005fc

08008314 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008320:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008324:	f005 fc84 	bl	800dc30 <malloc>
 8008328:	4603      	mov	r3, r0
 800832a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	32b0      	adds	r2, #176	; 0xb0
 800833c:	2100      	movs	r1, #0
 800833e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008342:	2302      	movs	r3, #2
 8008344:	e0d4      	b.n	80084f0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008346:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800834a:	2100      	movs	r1, #0
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f005 fc8d 	bl	800dc6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32b0      	adds	r2, #176	; 0xb0
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32b0      	adds	r2, #176	; 0xb0
 800836c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c1b      	ldrb	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d138      	bne.n	80083f0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800837e:	4b5e      	ldr	r3, [pc, #376]	; (80084f8 <USBD_CDC_Init+0x1e4>)
 8008380:	7819      	ldrb	r1, [r3, #0]
 8008382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008386:	2202      	movs	r2, #2
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f005 fa82 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800838e:	4b5a      	ldr	r3, [pc, #360]	; (80084f8 <USBD_CDC_Init+0x1e4>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	3324      	adds	r3, #36	; 0x24
 80083a4:	2201      	movs	r2, #1
 80083a6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083a8:	4b54      	ldr	r3, [pc, #336]	; (80084fc <USBD_CDC_Init+0x1e8>)
 80083aa:	7819      	ldrb	r1, [r3, #0]
 80083ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b0:	2202      	movs	r2, #2
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f005 fa6d 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083b8:	4b50      	ldr	r3, [pc, #320]	; (80084fc <USBD_CDC_Init+0x1e8>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083d0:	2201      	movs	r2, #1
 80083d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083d4:	4b4a      	ldr	r3, [pc, #296]	; (8008500 <USBD_CDC_Init+0x1ec>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	3326      	adds	r3, #38	; 0x26
 80083ea:	2210      	movs	r2, #16
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e035      	b.n	800845c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083f0:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <USBD_CDC_Init+0x1e4>)
 80083f2:	7819      	ldrb	r1, [r3, #0]
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	2202      	movs	r2, #2
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f005 fa4a 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083fe:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <USBD_CDC_Init+0x1e4>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f003 020f 	and.w	r2, r3, #15
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	2201      	movs	r2, #1
 8008416:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008418:	4b38      	ldr	r3, [pc, #224]	; (80084fc <USBD_CDC_Init+0x1e8>)
 800841a:	7819      	ldrb	r1, [r3, #0]
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	2202      	movs	r2, #2
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f005 fa36 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008426:	4b35      	ldr	r3, [pc, #212]	; (80084fc <USBD_CDC_Init+0x1e8>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800843e:	2201      	movs	r2, #1
 8008440:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008442:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <USBD_CDC_Init+0x1ec>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 020f 	and.w	r2, r3, #15
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	3326      	adds	r3, #38	; 0x26
 8008458:	2210      	movs	r2, #16
 800845a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800845c:	4b28      	ldr	r3, [pc, #160]	; (8008500 <USBD_CDC_Init+0x1ec>)
 800845e:	7819      	ldrb	r1, [r3, #0]
 8008460:	2308      	movs	r3, #8
 8008462:	2203      	movs	r2, #3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f005 fa14 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800846a:	4b25      	ldr	r3, [pc, #148]	; (8008500 <USBD_CDC_Init+0x1ec>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 020f 	and.w	r2, r3, #15
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3324      	adds	r3, #36	; 0x24
 8008480:	2201      	movs	r2, #1
 8008482:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	33b0      	adds	r3, #176	; 0xb0
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80084ba:	2302      	movs	r3, #2
 80084bc:	e018      	b.n	80084f0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7c1b      	ldrb	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084c6:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <USBD_CDC_Init+0x1e8>)
 80084c8:	7819      	ldrb	r1, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f005 facb 	bl	800da70 <USBD_LL_PrepareReceive>
 80084da:	e008      	b.n	80084ee <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084dc:	4b07      	ldr	r3, [pc, #28]	; (80084fc <USBD_CDC_Init+0x1e8>)
 80084de:	7819      	ldrb	r1, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f005 fac1 	bl	800da70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000093 	.word	0x20000093
 80084fc:	20000094 	.word	0x20000094
 8008500:	20000095 	.word	0x20000095

08008504 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008510:	4b3a      	ldr	r3, [pc, #232]	; (80085fc <USBD_CDC_DeInit+0xf8>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f005 f9e1 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800851c:	4b37      	ldr	r3, [pc, #220]	; (80085fc <USBD_CDC_DeInit+0xf8>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3324      	adds	r3, #36	; 0x24
 8008532:	2200      	movs	r2, #0
 8008534:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008536:	4b32      	ldr	r3, [pc, #200]	; (8008600 <USBD_CDC_DeInit+0xfc>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f005 f9ce 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <USBD_CDC_DeInit+0xfc>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800855a:	2200      	movs	r2, #0
 800855c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800855e:	4b29      	ldr	r3, [pc, #164]	; (8008604 <USBD_CDC_DeInit+0x100>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f005 f9ba 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800856a:	4b26      	ldr	r3, [pc, #152]	; (8008604 <USBD_CDC_DeInit+0x100>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	2200      	movs	r2, #0
 8008582:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008584:	4b1f      	ldr	r3, [pc, #124]	; (8008604 <USBD_CDC_DeInit+0x100>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 020f 	and.w	r2, r3, #15
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	3326      	adds	r3, #38	; 0x26
 800859a:	2200      	movs	r2, #0
 800859c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	32b0      	adds	r2, #176	; 0xb0
 80085a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01f      	beq.n	80085f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	33b0      	adds	r3, #176	; 0xb0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	32b0      	adds	r2, #176	; 0xb0
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f005 fb34 	bl	800dc40 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	32b0      	adds	r2, #176	; 0xb0
 80085e2:	2100      	movs	r1, #0
 80085e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000093 	.word	0x20000093
 8008600:	20000094 	.word	0x20000094
 8008604:	20000095 	.word	0x20000095

08008608 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	32b0      	adds	r2, #176	; 0xb0
 800861c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008620:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008634:	2303      	movs	r3, #3
 8008636:	e0bf      	b.n	80087b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008640:	2b00      	cmp	r3, #0
 8008642:	d050      	beq.n	80086e6 <USBD_CDC_Setup+0xde>
 8008644:	2b20      	cmp	r3, #32
 8008646:	f040 80af 	bne.w	80087a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d03a      	beq.n	80086c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b25b      	sxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	da1b      	bge.n	8008694 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	; 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008672:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	88d2      	ldrh	r2, [r2, #6]
 8008678:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b07      	cmp	r3, #7
 8008680:	bf28      	it	cs
 8008682:	2307      	movcs	r3, #7
 8008684:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	89fa      	ldrh	r2, [r7, #14]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fd6d 	bl	800a16c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008692:	e090      	b.n	80087b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	785a      	ldrb	r2, [r3, #1]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b3f      	cmp	r3, #63	; 0x3f
 80086a4:	d803      	bhi.n	80086ae <USBD_CDC_Setup+0xa6>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88db      	ldrh	r3, [r3, #6]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	e000      	b.n	80086b0 <USBD_CDC_Setup+0xa8>
 80086ae:	2240      	movs	r2, #64	; 0x40
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80086be:	461a      	mov	r2, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fd7f 	bl	800a1c4 <USBD_CtlPrepareRx>
      break;
 80086c6:	e076      	b.n	80087b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	33b0      	adds	r3, #176	; 0xb0
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	7850      	ldrb	r0, [r2, #1]
 80086de:	2200      	movs	r2, #0
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	4798      	blx	r3
      break;
 80086e4:	e067      	b.n	80087b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	d851      	bhi.n	8008792 <USBD_CDC_Setup+0x18a>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <USBD_CDC_Setup+0xec>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008725 	.word	0x08008725
 80086f8:	080087a1 	.word	0x080087a1
 80086fc:	08008793 	.word	0x08008793
 8008700:	08008793 	.word	0x08008793
 8008704:	08008793 	.word	0x08008793
 8008708:	08008793 	.word	0x08008793
 800870c:	08008793 	.word	0x08008793
 8008710:	08008793 	.word	0x08008793
 8008714:	08008793 	.word	0x08008793
 8008718:	08008793 	.word	0x08008793
 800871c:	0800874f 	.word	0x0800874f
 8008720:	08008779 	.word	0x08008779
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b03      	cmp	r3, #3
 800872e:	d107      	bne.n	8008740 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008730:	f107 030a 	add.w	r3, r7, #10
 8008734:	2202      	movs	r2, #2
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fd17 	bl	800a16c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800873e:	e032      	b.n	80087a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 fca1 	bl	800a08a <USBD_CtlError>
            ret = USBD_FAIL;
 8008748:	2303      	movs	r3, #3
 800874a:	75fb      	strb	r3, [r7, #23]
          break;
 800874c:	e02b      	b.n	80087a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d107      	bne.n	800876a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800875a:	f107 030d 	add.w	r3, r7, #13
 800875e:	2201      	movs	r2, #1
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fd02 	bl	800a16c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008768:	e01d      	b.n	80087a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 fc8c 	bl	800a08a <USBD_CtlError>
            ret = USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	75fb      	strb	r3, [r7, #23]
          break;
 8008776:	e016      	b.n	80087a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b03      	cmp	r3, #3
 8008782:	d00f      	beq.n	80087a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 fc7f 	bl	800a08a <USBD_CtlError>
            ret = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008790:	e008      	b.n	80087a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fc78 	bl	800a08a <USBD_CtlError>
          ret = USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	75fb      	strb	r3, [r7, #23]
          break;
 800879e:	e002      	b.n	80087a6 <USBD_CDC_Setup+0x19e>
          break;
 80087a0:	bf00      	nop
 80087a2:	e008      	b.n	80087b6 <USBD_CDC_Setup+0x1ae>
          break;
 80087a4:	bf00      	nop
      }
      break;
 80087a6:	e006      	b.n	80087b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fc6d 	bl	800a08a <USBD_CtlError>
      ret = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
      break;
 80087b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32b0      	adds	r2, #176	; 0xb0
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e065      	b.n	80088b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	32b0      	adds	r2, #176	; 0xb0
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3318      	adds	r3, #24
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d02f      	beq.n	8008874 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	f003 020f 	and.w	r2, r3, #15
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	3318      	adds	r3, #24
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	f003 010f 	and.w	r1, r3, #15
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	460b      	mov	r3, r1
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	440b      	add	r3, r1
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4403      	add	r3, r0
 800883c:	3348      	adds	r3, #72	; 0x48
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	fbb2 f1f3 	udiv	r1, r2, r3
 8008844:	fb01 f303 	mul.w	r3, r1, r3
 8008848:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800884a:	2b00      	cmp	r3, #0
 800884c:	d112      	bne.n	8008874 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	3318      	adds	r3, #24
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008866:	78f9      	ldrb	r1, [r7, #3]
 8008868:	2300      	movs	r3, #0
 800886a:	2200      	movs	r2, #0
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f005 f8de 	bl	800da2e <USBD_LL_Transmit>
 8008872:	e01f      	b.n	80088b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	33b0      	adds	r3, #176	; 0xb0
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d010      	beq.n	80088b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	33b0      	adds	r3, #176	; 0xb0
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	32b0      	adds	r2, #176	; 0xb0
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	32b0      	adds	r2, #176	; 0xb0
 80088e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e01a      	b.n	8008926 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f005 f8dc 	bl	800dab2 <USBD_LL_GetRxDataSize>
 80088fa:	4602      	mov	r2, r0
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	33b0      	adds	r3, #176	; 0xb0
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008920:	4611      	mov	r1, r2
 8008922:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	32b0      	adds	r2, #176	; 0xb0
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800894c:	2303      	movs	r3, #3
 800894e:	e025      	b.n	800899c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	33b0      	adds	r3, #176	; 0xb0
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01a      	beq.n	800899a <USBD_CDC_EP0_RxReady+0x6c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800896a:	2bff      	cmp	r3, #255	; 0xff
 800896c:	d015      	beq.n	800899a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	33b0      	adds	r3, #176	; 0xb0
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008986:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800898e:	b292      	uxth	r2, r2
 8008990:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089ac:	2182      	movs	r1, #130	; 0x82
 80089ae:	4818      	ldr	r0, [pc, #96]	; (8008a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089b0:	f000 fd09 	bl	80093c6 <USBD_GetEpDesc>
 80089b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089b6:	2101      	movs	r1, #1
 80089b8:	4815      	ldr	r0, [pc, #84]	; (8008a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089ba:	f000 fd04 	bl	80093c6 <USBD_GetEpDesc>
 80089be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089c0:	2181      	movs	r1, #129	; 0x81
 80089c2:	4813      	ldr	r0, [pc, #76]	; (8008a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089c4:	f000 fcff 	bl	80093c6 <USBD_GetEpDesc>
 80089c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2210      	movs	r2, #16
 80089d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d006      	beq.n	80089ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2200      	movs	r2, #0
 80089e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e4:	711a      	strb	r2, [r3, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f8:	711a      	strb	r2, [r3, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2243      	movs	r2, #67	; 0x43
 8008a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000050 	.word	0x20000050

08008a14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a1c:	2182      	movs	r1, #130	; 0x82
 8008a1e:	4818      	ldr	r0, [pc, #96]	; (8008a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a20:	f000 fcd1 	bl	80093c6 <USBD_GetEpDesc>
 8008a24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a26:	2101      	movs	r1, #1
 8008a28:	4815      	ldr	r0, [pc, #84]	; (8008a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a2a:	f000 fccc 	bl	80093c6 <USBD_GetEpDesc>
 8008a2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a30:	2181      	movs	r1, #129	; 0x81
 8008a32:	4813      	ldr	r0, [pc, #76]	; (8008a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a34:	f000 fcc7 	bl	80093c6 <USBD_GetEpDesc>
 8008a38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2210      	movs	r2, #16
 8008a44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d006      	beq.n	8008a5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	711a      	strb	r2, [r3, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f042 0202 	orr.w	r2, r2, #2
 8008a58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d006      	beq.n	8008a6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	711a      	strb	r2, [r3, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f042 0202 	orr.w	r2, r2, #2
 8008a6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2243      	movs	r2, #67	; 0x43
 8008a72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000050 	.word	0x20000050

08008a84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a8c:	2182      	movs	r1, #130	; 0x82
 8008a8e:	4818      	ldr	r0, [pc, #96]	; (8008af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a90:	f000 fc99 	bl	80093c6 <USBD_GetEpDesc>
 8008a94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a96:	2101      	movs	r1, #1
 8008a98:	4815      	ldr	r0, [pc, #84]	; (8008af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a9a:	f000 fc94 	bl	80093c6 <USBD_GetEpDesc>
 8008a9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008aa0:	2181      	movs	r1, #129	; 0x81
 8008aa2:	4813      	ldr	r0, [pc, #76]	; (8008af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008aa4:	f000 fc8f 	bl	80093c6 <USBD_GetEpDesc>
 8008aa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2210      	movs	r2, #16
 8008ab4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac4:	711a      	strb	r2, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ad8:	711a      	strb	r2, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2243      	movs	r2, #67	; 0x43
 8008ae2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000050 	.word	0x20000050

08008af4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	220a      	movs	r2, #10
 8008b00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b02:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	2000000c 	.word	0x2000000c

08008b14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e009      	b.n	8008b3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	33b0      	adds	r3, #176	; 0xb0
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	32b0      	adds	r2, #176	; 0xb0
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e008      	b.n	8008b80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	32b0      	adds	r2, #176	; 0xb0
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e004      	b.n	8008bba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32b0      	adds	r2, #176	; 0xb0
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	; 0xb0
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e018      	b.n	8008c28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7c1b      	ldrb	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <USBD_CDC_ReceivePacket+0x68>)
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f004 ff2f 	bl	800da70 <USBD_LL_PrepareReceive>
 8008c12:	e008      	b.n	8008c26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <USBD_CDC_ReceivePacket+0x68>)
 8008c16:	7819      	ldrb	r1, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c1e:	2340      	movs	r3, #64	; 0x40
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f004 ff25 	bl	800da70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000094 	.word	0x20000094

08008c34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e01f      	b.n	8008c8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	79fa      	ldrb	r2, [r7, #7]
 8008c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f004 fd9f 	bl	800d7c4 <USBD_LL_Init>
 8008c86:	4603      	mov	r3, r0
 8008c88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e025      	b.n	8008cf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32ae      	adds	r2, #174	; 0xae
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00f      	beq.n	8008ce8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32ae      	adds	r2, #174	; 0xae
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	f107 020e 	add.w	r2, r7, #14
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f004 fda7 	bl	800d85c <USBD_LL_Start>
 8008d0e:	4603      	mov	r3, r0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d009      	beq.n	8008d5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	78fa      	ldrb	r2, [r7, #3]
 8008d52:	4611      	mov	r1, r2
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	4611      	mov	r1, r2
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	4798      	blx	r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 f932 	bl	800a016 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dce:	f003 031f 	and.w	r3, r3, #31
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d01a      	beq.n	8008e0c <USBD_LL_SetupStage+0x72>
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d822      	bhi.n	8008e20 <USBD_LL_SetupStage+0x86>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <USBD_LL_SetupStage+0x4a>
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d00a      	beq.n	8008df8 <USBD_LL_SetupStage+0x5e>
 8008de2:	e01d      	b.n	8008e20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb5f 	bl	80094b0 <USBD_StdDevReq>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]
      break;
 8008df6:	e020      	b.n	8008e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fbc7 	bl	8009594 <USBD_StdItfReq>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0a:	e016      	b.n	8008e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fc29 	bl	800966c <USBD_StdEPReq>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1e:	e00c      	b.n	8008e3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f004 fd74 	bl	800d91c <USBD_LL_StallEP>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
      break;
 8008e38:	bf00      	nop
  }

  return ret;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d16e      	bne.n	8008f3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	f040 8098 	bne.w	8008fa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d913      	bls.n	8008ea4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	1ad2      	subs	r2, r2, r3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	bf28      	it	cs
 8008e96:	4613      	movcs	r3, r2
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f001 f9ae 	bl	800a1fe <USBD_CtlContinueRx>
 8008ea2:	e07d      	b.n	8008fa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d014      	beq.n	8008edc <USBD_LL_DataOutStage+0x98>
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d81d      	bhi.n	8008ef2 <USBD_LL_DataOutStage+0xae>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <USBD_LL_DataOutStage+0x7c>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d003      	beq.n	8008ec6 <USBD_LL_DataOutStage+0x82>
 8008ebe:	e018      	b.n	8008ef2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ec4:	e018      	b.n	8008ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4619      	mov	r1, r3
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fa5e 	bl	8009392 <USBD_CoreFindIF>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eda:	e00d      	b.n	8008ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fa60 	bl	80093ac <USBD_CoreFindEP>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75bb      	strb	r3, [r7, #22]
            break;
 8008ef0:	e002      	b.n	8008ef8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75bb      	strb	r3, [r7, #22]
            break;
 8008ef6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ef8:	7dbb      	ldrb	r3, [r7, #22]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d119      	bne.n	8008f32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d113      	bne.n	8008f32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f0a:	7dba      	ldrb	r2, [r7, #22]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	32ae      	adds	r2, #174	; 0xae
 8008f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f1a:	7dba      	ldrb	r2, [r7, #22]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f22:	7dba      	ldrb	r2, [r7, #22]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 f974 	bl	800a220 <USBD_CtlSendStatus>
 8008f38:	e032      	b.n	8008fa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fa31 	bl	80093ac <USBD_CoreFindEP>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
 8008f50:	2bff      	cmp	r3, #255	; 0xff
 8008f52:	d025      	beq.n	8008fa0 <USBD_LL_DataOutStage+0x15c>
 8008f54:	7dbb      	ldrb	r3, [r7, #22]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d122      	bne.n	8008fa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d117      	bne.n	8008f96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f66:	7dba      	ldrb	r2, [r7, #22]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	32ae      	adds	r2, #174	; 0xae
 8008f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00f      	beq.n	8008f96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f76:	7dba      	ldrb	r2, [r7, #22]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f7e:	7dba      	ldrb	r2, [r7, #22]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	32ae      	adds	r2, #174	; 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	7afa      	ldrb	r2, [r7, #11]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	4798      	blx	r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	e000      	b.n	8008fa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b086      	sub	sp, #24
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d16f      	bne.n	800909e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3314      	adds	r3, #20
 8008fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d15a      	bne.n	8009084 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d914      	bls.n	8009004 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f001 f8d6 	bl	800a1a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f004 fd37 	bl	800da70 <USBD_LL_PrepareReceive>
 8009002:	e03f      	b.n	8009084 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	429a      	cmp	r2, r3
 800900e:	d11c      	bne.n	800904a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009018:	429a      	cmp	r2, r3
 800901a:	d316      	bcc.n	800904a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009026:	429a      	cmp	r2, r3
 8009028:	d20f      	bcs.n	800904a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f001 f8b7 	bl	800a1a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800903c:	2300      	movs	r3, #0
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f004 fd14 	bl	800da70 <USBD_LL_PrepareReceive>
 8009048:	e01c      	b.n	8009084 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b03      	cmp	r3, #3
 8009054:	d10f      	bne.n	8009076 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009076:	2180      	movs	r1, #128	; 0x80
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f004 fc4f 	bl	800d91c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f001 f8e1 	bl	800a246 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d03a      	beq.n	8009104 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff fe42 	bl	8008d18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800909c:	e032      	b.n	8009104 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	4619      	mov	r1, r3
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f97f 	bl	80093ac <USBD_CoreFindEP>
 80090ae:	4603      	mov	r3, r0
 80090b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2bff      	cmp	r3, #255	; 0xff
 80090b6:	d025      	beq.n	8009104 <USBD_LL_DataInStage+0x15a>
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d122      	bne.n	8009104 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d11c      	bne.n	8009104 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ca:	7dfa      	ldrb	r2, [r7, #23]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	32ae      	adds	r2, #174	; 0xae
 80090d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d014      	beq.n	8009104 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090da:	7dfa      	ldrb	r2, [r7, #23]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090e2:	7dfa      	ldrb	r2, [r7, #23]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	32ae      	adds	r2, #174	; 0xae
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	7afa      	ldrb	r2, [r7, #11]
 80090f0:	4611      	mov	r1, r2
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090fa:	7dbb      	ldrb	r3, [r7, #22]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009100:	7dbb      	ldrb	r3, [r7, #22]
 8009102:	e000      	b.n	8009106 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d014      	beq.n	8009174 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	6852      	ldr	r2, [r2, #4]
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	4611      	mov	r1, r2
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f004 fb89 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2240      	movs	r2, #64	; 0x40
 800918c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	2200      	movs	r2, #0
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f004 fb7b 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2240      	movs	r2, #64	; 0x40
 80091a6:	621a      	str	r2, [r3, #32]

  return ret;
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2204      	movs	r2, #4
 80091ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b04      	cmp	r3, #4
 8009210:	d106      	bne.n	8009220 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009218:	b2da      	uxtb	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b03      	cmp	r3, #3
 8009240:	d110      	bne.n	8009264 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	32ae      	adds	r2, #174	; 0xae
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e01c      	b.n	80092ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b03      	cmp	r3, #3
 800929a:	d115      	bne.n	80092c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32ae      	adds	r2, #174	; 0xae
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	32ae      	adds	r2, #174	; 0xae
 80092ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	4611      	mov	r1, r2
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	32ae      	adds	r2, #174	; 0xae
 80092e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e01c      	b.n	800932e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d115      	bne.n	800932c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	32ae      	adds	r2, #174	; 0xae
 800930a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32ae      	adds	r2, #174	; 0xae
 800931e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	4611      	mov	r1, r2
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00e      	beq.n	8009388 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6852      	ldr	r2, [r2, #4]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	4611      	mov	r1, r2
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800939e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	885b      	ldrh	r3, [r3, #2]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d920      	bls.n	8009430 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093f6:	e013      	b.n	8009420 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093f8:	f107 030a 	add.w	r3, r7, #10
 80093fc:	4619      	mov	r1, r3
 80093fe:	6978      	ldr	r0, [r7, #20]
 8009400:	f000 f81b 	bl	800943a <USBD_GetNextDesc>
 8009404:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	2b05      	cmp	r3, #5
 800940c:	d108      	bne.n	8009420 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	789b      	ldrb	r3, [r3, #2]
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	429a      	cmp	r2, r3
 800941a:	d008      	beq.n	800942e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	b29a      	uxth	r2, r3
 8009426:	897b      	ldrh	r3, [r7, #10]
 8009428:	429a      	cmp	r2, r3
 800942a:	d8e5      	bhi.n	80093f8 <USBD_GetEpDesc+0x32>
 800942c:	e000      	b.n	8009430 <USBD_GetEpDesc+0x6a>
          break;
 800942e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009430:	693b      	ldr	r3, [r7, #16]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	881a      	ldrh	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b29b      	uxth	r3, r3
 8009452:	4413      	add	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4413      	add	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	3301      	adds	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009492:	8a3b      	ldrh	r3, [r7, #16]
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	b21a      	sxth	r2, r3
 8009498:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800949c:	4313      	orrs	r3, r2
 800949e:	b21b      	sxth	r3, r3
 80094a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094a2:	89fb      	ldrh	r3, [r7, #14]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094c6:	2b40      	cmp	r3, #64	; 0x40
 80094c8:	d005      	beq.n	80094d6 <USBD_StdDevReq+0x26>
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d857      	bhi.n	800957e <USBD_StdDevReq+0xce>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00f      	beq.n	80094f2 <USBD_StdDevReq+0x42>
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d153      	bne.n	800957e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	32ae      	adds	r2, #174	; 0xae
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
      break;
 80094f0:	e04a      	b.n	8009588 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	785b      	ldrb	r3, [r3, #1]
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d83b      	bhi.n	8009572 <USBD_StdDevReq+0xc2>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <USBD_StdDevReq+0x50>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009555 	.word	0x08009555
 8009504:	08009569 	.word	0x08009569
 8009508:	08009573 	.word	0x08009573
 800950c:	0800955f 	.word	0x0800955f
 8009510:	08009573 	.word	0x08009573
 8009514:	08009533 	.word	0x08009533
 8009518:	08009529 	.word	0x08009529
 800951c:	08009573 	.word	0x08009573
 8009520:	0800954b 	.word	0x0800954b
 8009524:	0800953d 	.word	0x0800953d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa3c 	bl	80099a8 <USBD_GetDescriptor>
          break;
 8009530:	e024      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fbcb 	bl	8009cd0 <USBD_SetAddress>
          break;
 800953a:	e01f      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fc0a 	bl	8009d58 <USBD_SetConfig>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
          break;
 8009548:	e018      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fcad 	bl	8009eac <USBD_GetConfig>
          break;
 8009552:	e013      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fcde 	bl	8009f18 <USBD_GetStatus>
          break;
 800955c:	e00e      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fd0d 	bl	8009f80 <USBD_SetFeature>
          break;
 8009566:	e009      	b.n	800957c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fd31 	bl	8009fd2 <USBD_ClrFeature>
          break;
 8009570:	e004      	b.n	800957c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fd88 	bl	800a08a <USBD_CtlError>
          break;
 800957a:	bf00      	nop
      }
      break;
 800957c:	e004      	b.n	8009588 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fd82 	bl	800a08a <USBD_CtlError>
      break;
 8009586:	bf00      	nop
  }

  return ret;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop

08009594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	d005      	beq.n	80095ba <USBD_StdItfReq+0x26>
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d852      	bhi.n	8009658 <USBD_StdItfReq+0xc4>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <USBD_StdItfReq+0x26>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d14e      	bne.n	8009658 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d840      	bhi.n	800964a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	889b      	ldrh	r3, [r3, #4]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d836      	bhi.n	8009640 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	889b      	ldrh	r3, [r3, #4]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fed9 	bl	8009392 <USBD_CoreFindIF>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2bff      	cmp	r3, #255	; 0xff
 80095e8:	d01d      	beq.n	8009626 <USBD_StdItfReq+0x92>
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d11a      	bne.n	8009626 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095f0:	7bba      	ldrb	r2, [r7, #14]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	32ae      	adds	r2, #174	; 0xae
 80095f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00f      	beq.n	8009620 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009600:	7bba      	ldrb	r2, [r7, #14]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009608:	7bba      	ldrb	r2, [r7, #14]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	32ae      	adds	r2, #174	; 0xae
 800960e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800961e:	e004      	b.n	800962a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009624:	e001      	b.n	800962a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009626:	2303      	movs	r3, #3
 8009628:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d110      	bne.n	8009654 <USBD_StdItfReq+0xc0>
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10d      	bne.n	8009654 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fdf1 	bl	800a220 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800963e:	e009      	b.n	8009654 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fd21 	bl	800a08a <USBD_CtlError>
          break;
 8009648:	e004      	b.n	8009654 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fd1c 	bl	800a08a <USBD_CtlError>
          break;
 8009652:	e000      	b.n	8009656 <USBD_StdItfReq+0xc2>
          break;
 8009654:	bf00      	nop
      }
      break;
 8009656:	e004      	b.n	8009662 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fd15 	bl	800a08a <USBD_CtlError>
      break;
 8009660:	bf00      	nop
  }

  return ret;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	889b      	ldrh	r3, [r3, #4]
 800967e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d007      	beq.n	800969c <USBD_StdEPReq+0x30>
 800968c:	2b40      	cmp	r3, #64	; 0x40
 800968e:	f200 817f 	bhi.w	8009990 <USBD_StdEPReq+0x324>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d02a      	beq.n	80096ec <USBD_StdEPReq+0x80>
 8009696:	2b20      	cmp	r3, #32
 8009698:	f040 817a 	bne.w	8009990 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fe83 	bl	80093ac <USBD_CoreFindEP>
 80096a6:	4603      	mov	r3, r0
 80096a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096aa:	7b7b      	ldrb	r3, [r7, #13]
 80096ac:	2bff      	cmp	r3, #255	; 0xff
 80096ae:	f000 8174 	beq.w	800999a <USBD_StdEPReq+0x32e>
 80096b2:	7b7b      	ldrb	r3, [r7, #13]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f040 8170 	bne.w	800999a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096ba:	7b7a      	ldrb	r2, [r7, #13]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096c2:	7b7a      	ldrb	r2, [r7, #13]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	32ae      	adds	r2, #174	; 0xae
 80096c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 8163 	beq.w	800999a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096d4:	7b7a      	ldrb	r2, [r7, #13]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	32ae      	adds	r2, #174	; 0xae
 80096da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	4798      	blx	r3
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ea:	e156      	b.n	800999a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d008      	beq.n	8009706 <USBD_StdEPReq+0x9a>
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	f300 8145 	bgt.w	8009984 <USBD_StdEPReq+0x318>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 809b 	beq.w	8009836 <USBD_StdEPReq+0x1ca>
 8009700:	2b01      	cmp	r3, #1
 8009702:	d03c      	beq.n	800977e <USBD_StdEPReq+0x112>
 8009704:	e13e      	b.n	8009984 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	d002      	beq.n	8009718 <USBD_StdEPReq+0xac>
 8009712:	2b03      	cmp	r3, #3
 8009714:	d016      	beq.n	8009744 <USBD_StdEPReq+0xd8>
 8009716:	e02c      	b.n	8009772 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00d      	beq.n	800973a <USBD_StdEPReq+0xce>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b80      	cmp	r3, #128	; 0x80
 8009722:	d00a      	beq.n	800973a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f004 f8f7 	bl	800d91c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800972e:	2180      	movs	r1, #128	; 0x80
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f004 f8f3 	bl	800d91c <USBD_LL_StallEP>
 8009736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009738:	e020      	b.n	800977c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fca4 	bl	800a08a <USBD_CtlError>
              break;
 8009742:	e01b      	b.n	800977c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	885b      	ldrh	r3, [r3, #2]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10e      	bne.n	800976a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <USBD_StdEPReq+0xfe>
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b80      	cmp	r3, #128	; 0x80
 8009756:	d008      	beq.n	800976a <USBD_StdEPReq+0xfe>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	88db      	ldrh	r3, [r3, #6]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f004 f8d9 	bl	800d91c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fd58 	bl	800a220 <USBD_CtlSendStatus>

              break;
 8009770:	e004      	b.n	800977c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc88 	bl	800a08a <USBD_CtlError>
              break;
 800977a:	bf00      	nop
          }
          break;
 800977c:	e107      	b.n	800998e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d002      	beq.n	8009790 <USBD_StdEPReq+0x124>
 800978a:	2b03      	cmp	r3, #3
 800978c:	d016      	beq.n	80097bc <USBD_StdEPReq+0x150>
 800978e:	e04b      	b.n	8009828 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00d      	beq.n	80097b2 <USBD_StdEPReq+0x146>
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	2b80      	cmp	r3, #128	; 0x80
 800979a:	d00a      	beq.n	80097b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f004 f8bb 	bl	800d91c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097a6:	2180      	movs	r1, #128	; 0x80
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f004 f8b7 	bl	800d91c <USBD_LL_StallEP>
 80097ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097b0:	e040      	b.n	8009834 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fc68 	bl	800a08a <USBD_CtlError>
              break;
 80097ba:	e03b      	b.n	8009834 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	885b      	ldrh	r3, [r3, #2]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d136      	bne.n	8009832 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f004 f8c1 	bl	800d95a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fd21 	bl	800a220 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fde2 	bl	80093ac <USBD_CoreFindEP>
 80097e8:	4603      	mov	r3, r0
 80097ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097ec:	7b7b      	ldrb	r3, [r7, #13]
 80097ee:	2bff      	cmp	r3, #255	; 0xff
 80097f0:	d01f      	beq.n	8009832 <USBD_StdEPReq+0x1c6>
 80097f2:	7b7b      	ldrb	r3, [r7, #13]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d11c      	bne.n	8009832 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097f8:	7b7a      	ldrb	r2, [r7, #13]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009800:	7b7a      	ldrb	r2, [r7, #13]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	32ae      	adds	r2, #174	; 0xae
 8009806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d010      	beq.n	8009832 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009810:	7b7a      	ldrb	r2, [r7, #13]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	32ae      	adds	r2, #174	; 0xae
 8009816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009826:	e004      	b.n	8009832 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fc2d 	bl	800a08a <USBD_CtlError>
              break;
 8009830:	e000      	b.n	8009834 <USBD_StdEPReq+0x1c8>
              break;
 8009832:	bf00      	nop
          }
          break;
 8009834:	e0ab      	b.n	800998e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d002      	beq.n	8009848 <USBD_StdEPReq+0x1dc>
 8009842:	2b03      	cmp	r3, #3
 8009844:	d032      	beq.n	80098ac <USBD_StdEPReq+0x240>
 8009846:	e097      	b.n	8009978 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <USBD_StdEPReq+0x1f2>
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b80      	cmp	r3, #128	; 0x80
 8009852:	d004      	beq.n	800985e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fc17 	bl	800a08a <USBD_CtlError>
                break;
 800985c:	e091      	b.n	8009982 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009862:	2b00      	cmp	r3, #0
 8009864:	da0b      	bge.n	800987e <USBD_StdEPReq+0x212>
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	3310      	adds	r3, #16
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	3304      	adds	r3, #4
 800987c:	e00b      	b.n	8009896 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	4413      	add	r3, r2
 8009894:	3304      	adds	r3, #4
 8009896:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2202      	movs	r2, #2
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fc61 	bl	800a16c <USBD_CtlSendData>
              break;
 80098aa:	e06a      	b.n	8009982 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	da11      	bge.n	80098d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	3324      	adds	r3, #36	; 0x24
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d117      	bne.n	80098fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fbda 	bl	800a08a <USBD_CtlError>
                  break;
 80098d6:	e054      	b.n	8009982 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	f003 020f 	and.w	r2, r3, #15
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fbc7 	bl	800a08a <USBD_CtlError>
                  break;
 80098fc:	e041      	b.n	8009982 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009902:	2b00      	cmp	r3, #0
 8009904:	da0b      	bge.n	800991e <USBD_StdEPReq+0x2b2>
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	3310      	adds	r3, #16
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	4413      	add	r3, r2
 800991a:	3304      	adds	r3, #4
 800991c:	e00b      	b.n	8009936 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4413      	add	r3, r2
 8009934:	3304      	adds	r3, #4
 8009936:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <USBD_StdEPReq+0x2d8>
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d103      	bne.n	800994c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2200      	movs	r2, #0
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	e00e      	b.n	800996a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f004 f821 	bl	800d998 <USBD_LL_IsStallEP>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2201      	movs	r2, #1
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	e002      	b.n	800996a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2202      	movs	r2, #2
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fbfb 	bl	800a16c <USBD_CtlSendData>
              break;
 8009976:	e004      	b.n	8009982 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fb85 	bl	800a08a <USBD_CtlError>
              break;
 8009980:	bf00      	nop
          }
          break;
 8009982:	e004      	b.n	800998e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fb7f 	bl	800a08a <USBD_CtlError>
          break;
 800998c:	bf00      	nop
      }
      break;
 800998e:	e005      	b.n	800999c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fb79 	bl	800a08a <USBD_CtlError>
      break;
 8009998:	e000      	b.n	800999c <USBD_StdEPReq+0x330>
      break;
 800999a:	bf00      	nop
  }

  return ret;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b0e      	cmp	r3, #14
 80099ca:	f200 8152 	bhi.w	8009c72 <USBD_GetDescriptor+0x2ca>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <USBD_GetDescriptor+0x2c>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	08009a45 	.word	0x08009a45
 80099d8:	08009a5d 	.word	0x08009a5d
 80099dc:	08009a9d 	.word	0x08009a9d
 80099e0:	08009c73 	.word	0x08009c73
 80099e4:	08009c73 	.word	0x08009c73
 80099e8:	08009c13 	.word	0x08009c13
 80099ec:	08009c3f 	.word	0x08009c3f
 80099f0:	08009c73 	.word	0x08009c73
 80099f4:	08009c73 	.word	0x08009c73
 80099f8:	08009c73 	.word	0x08009c73
 80099fc:	08009c73 	.word	0x08009c73
 8009a00:	08009c73 	.word	0x08009c73
 8009a04:	08009c73 	.word	0x08009c73
 8009a08:	08009c73 	.word	0x08009c73
 8009a0c:	08009a11 	.word	0x08009a11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00b      	beq.n	8009a34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	7c12      	ldrb	r2, [r2, #16]
 8009a28:	f107 0108 	add.w	r1, r7, #8
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
 8009a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a32:	e126      	b.n	8009c82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fb27 	bl	800a08a <USBD_CtlError>
        err++;
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	72fb      	strb	r3, [r7, #11]
      break;
 8009a42:	e11e      	b.n	8009c82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
      break;
 8009a5a:	e112      	b.n	8009c82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7c1b      	ldrb	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10d      	bne.n	8009a80 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	f107 0208 	add.w	r2, r7, #8
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
 8009a74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a7e:	e100      	b.n	8009c82 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f107 0208 	add.w	r2, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	2202      	movs	r2, #2
 8009a98:	701a      	strb	r2, [r3, #0]
      break;
 8009a9a:	e0f2      	b.n	8009c82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	885b      	ldrh	r3, [r3, #2]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	f200 80ac 	bhi.w	8009c00 <USBD_GetDescriptor+0x258>
 8009aa8:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USBD_GetDescriptor+0x108>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009afd 	.word	0x08009afd
 8009ab8:	08009b31 	.word	0x08009b31
 8009abc:	08009b65 	.word	0x08009b65
 8009ac0:	08009b99 	.word	0x08009b99
 8009ac4:	08009bcd 	.word	0x08009bcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7c12      	ldrb	r2, [r2, #16]
 8009ae0:	f107 0108 	add.w	r1, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
 8009ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aea:	e091      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 facb 	bl	800a08a <USBD_CtlError>
            err++;
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	3301      	adds	r3, #1
 8009af8:	72fb      	strb	r3, [r7, #11]
          break;
 8009afa:	e089      	b.n	8009c10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e077      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fab1 	bl	800a08a <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e06f      	b.n	8009c10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e05d      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa97 	bl	800a08a <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e055      	b.n	8009c10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e043      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa7d 	bl	800a08a <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e03b      	b.n	8009c10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e029      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa63 	bl	800a08a <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e021      	b.n	8009c10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e00f      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa49 	bl	800a08a <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e007      	b.n	8009c10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa41 	bl	800a08a <USBD_CtlError>
          err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c0e:	bf00      	nop
      }
      break;
 8009c10:	e037      	b.n	8009c82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7c1b      	ldrb	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c22:	f107 0208 	add.w	r2, r7, #8
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
 8009c2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c2c:	e029      	b.n	8009c82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa2a 	bl	800a08a <USBD_CtlError>
        err++;
 8009c36:	7afb      	ldrb	r3, [r7, #11]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c3c:	e021      	b.n	8009c82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	7c1b      	ldrb	r3, [r3, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10d      	bne.n	8009c62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	f107 0208 	add.w	r2, r7, #8
 8009c52:	4610      	mov	r0, r2
 8009c54:	4798      	blx	r3
 8009c56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	2207      	movs	r2, #7
 8009c5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e00f      	b.n	8009c82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa10 	bl	800a08a <USBD_CtlError>
        err++;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c70:	e007      	b.n	8009c82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa08 	bl	800a08a <USBD_CtlError>
      err++;
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c80:	bf00      	nop
  }

  if (err != 0U)
 8009c82:	7afb      	ldrb	r3, [r7, #11]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d11e      	bne.n	8009cc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	88db      	ldrh	r3, [r3, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d016      	beq.n	8009cbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c90:	893b      	ldrh	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	88da      	ldrh	r2, [r3, #6]
 8009c9a:	893b      	ldrh	r3, [r7, #8]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	bf28      	it	cs
 8009ca0:	4613      	movcs	r3, r2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ca6:	893b      	ldrh	r3, [r7, #8]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68f9      	ldr	r1, [r7, #12]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa5d 	bl	800a16c <USBD_CtlSendData>
 8009cb2:	e009      	b.n	8009cc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9e7 	bl	800a08a <USBD_CtlError>
 8009cbc:	e004      	b.n	8009cc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 faae 	bl	800a220 <USBD_CtlSendStatus>
 8009cc4:	e000      	b.n	8009cc8 <USBD_GetDescriptor+0x320>
    return;
 8009cc6:	bf00      	nop
  }
}
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	889b      	ldrh	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d131      	bne.n	8009d46 <USBD_SetAddress+0x76>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d12d      	bne.n	8009d46 <USBD_SetAddress+0x76>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	885b      	ldrh	r3, [r3, #2]
 8009cee:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf0:	d829      	bhi.n	8009d46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d104      	bne.n	8009d14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f9bc 	bl	800a08a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d12:	e01d      	b.n	8009d50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7bfa      	ldrb	r2, [r7, #15]
 8009d18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f003 fe65 	bl	800d9f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa7a 	bl	800a220 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3a:	e009      	b.n	8009d50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d44:	e004      	b.n	8009d50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f99e 	bl	800a08a <USBD_CtlError>
  }
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	885b      	ldrh	r3, [r3, #2]
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	4b4e      	ldr	r3, [pc, #312]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009d6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d70:	4b4d      	ldr	r3, [pc, #308]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d905      	bls.n	8009d84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f985 	bl	800a08a <USBD_CtlError>
    return USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e08c      	b.n	8009e9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d002      	beq.n	8009d96 <USBD_SetConfig+0x3e>
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d029      	beq.n	8009de8 <USBD_SetConfig+0x90>
 8009d94:	e075      	b.n	8009e82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d96:	4b44      	ldr	r3, [pc, #272]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d020      	beq.n	8009de0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d9e:	4b42      	ldr	r3, [pc, #264]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009da8:	4b3f      	ldr	r3, [pc, #252]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fe ffbd 	bl	8008d2e <USBD_SetClassConfig>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d008      	beq.n	8009dd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f962 	bl	800a08a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dce:	e065      	b.n	8009e9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa25 	bl	800a220 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2203      	movs	r2, #3
 8009dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dde:	e05d      	b.n	8009e9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fa1d 	bl	800a220 <USBD_CtlSendStatus>
      break;
 8009de6:	e059      	b.n	8009e9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009de8:	4b2f      	ldr	r3, [pc, #188]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d112      	bne.n	8009e16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2202      	movs	r2, #2
 8009df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009df8:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e02:	4b29      	ldr	r3, [pc, #164]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7fe ffac 	bl	8008d66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa06 	bl	800a220 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e14:	e042      	b.n	8009e9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e16:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d02a      	beq.n	8009e7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe ff9a 	bl	8008d66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e32:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fe ff73 	bl	8008d2e <USBD_SetClassConfig>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00f      	beq.n	8009e72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f918 	bl	800a08a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fe ff7f 	bl	8008d66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e70:	e014      	b.n	8009e9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f9d4 	bl	800a220 <USBD_CtlSendStatus>
      break;
 8009e78:	e010      	b.n	8009e9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9d0 	bl	800a220 <USBD_CtlSendStatus>
      break;
 8009e80:	e00c      	b.n	8009e9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f900 	bl	800a08a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e8a:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <USBD_SetConfig+0x150>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7fe ff68 	bl	8008d66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9a:	bf00      	nop
  }

  return ret;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000065c 	.word	0x2000065c

08009eac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	88db      	ldrh	r3, [r3, #6]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d004      	beq.n	8009ec8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f8e2 	bl	800a08a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ec6:	e023      	b.n	8009f10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	dc02      	bgt.n	8009eda <USBD_GetConfig+0x2e>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dc03      	bgt.n	8009ee0 <USBD_GetConfig+0x34>
 8009ed8:	e015      	b.n	8009f06 <USBD_GetConfig+0x5a>
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d00b      	beq.n	8009ef6 <USBD_GetConfig+0x4a>
 8009ede:	e012      	b.n	8009f06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	2201      	movs	r2, #1
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f93c 	bl	800a16c <USBD_CtlSendData>
        break;
 8009ef4:	e00c      	b.n	8009f10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	2201      	movs	r2, #1
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f934 	bl	800a16c <USBD_CtlSendData>
        break;
 8009f04:	e004      	b.n	8009f10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f8be 	bl	800a08a <USBD_CtlError>
        break;
 8009f0e:	bf00      	nop
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d81e      	bhi.n	8009f6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d004      	beq.n	8009f42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8a5 	bl	800a08a <USBD_CtlError>
        break;
 8009f40:	e01a      	b.n	8009f78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f043 0202 	orr.w	r2, r3, #2
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	330c      	adds	r3, #12
 8009f62:	2202      	movs	r2, #2
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f900 	bl	800a16c <USBD_CtlSendData>
      break;
 8009f6c:	e004      	b.n	8009f78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f88a 	bl	800a08a <USBD_CtlError>
      break;
 8009f76:	bf00      	nop
  }
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	885b      	ldrh	r3, [r3, #2]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d107      	bne.n	8009fa2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f940 	bl	800a220 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fa0:	e013      	b.n	8009fca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d10b      	bne.n	8009fc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	889b      	ldrh	r3, [r3, #4]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f930 	bl	800a220 <USBD_CtlSendStatus>
}
 8009fc0:	e003      	b.n	8009fca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f860 	bl	800a08a <USBD_CtlError>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d80b      	bhi.n	800a002 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d10c      	bne.n	800a00c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f910 	bl	800a220 <USBD_CtlSendStatus>
      }
      break;
 800a000:	e004      	b.n	800a00c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f840 	bl	800a08a <USBD_CtlError>
      break;
 800a00a:	e000      	b.n	800a00e <USBD_ClrFeature+0x3c>
      break;
 800a00c:	bf00      	nop
  }
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781a      	ldrb	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fa17 	bl	8009474 <SWAPBYTE>
 800a046:	4603      	mov	r3, r0
 800a048:	461a      	mov	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3301      	adds	r3, #1
 800a058:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7ff fa0a 	bl	8009474 <SWAPBYTE>
 800a060:	4603      	mov	r3, r0
 800a062:	461a      	mov	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff f9fd 	bl	8009474 <SWAPBYTE>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	80da      	strh	r2, [r3, #6]
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a094:	2180      	movs	r1, #128	; 0x80
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f003 fc40 	bl	800d91c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f003 fc3c 	bl	800d91c <USBD_LL_StallEP>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d036      	beq.n	800a130 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f000 f836 	bl	800a138 <USBD_GetLen>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	4413      	add	r3, r2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7812      	ldrb	r2, [r2, #0]
 800a0e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0fc:	e013      	b.n	800a126 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4413      	add	r3, r2
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	613b      	str	r3, [r7, #16]
    idx++;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	3301      	adds	r3, #1
 800a114:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	4413      	add	r3, r2
 800a11c:	2200      	movs	r2, #0
 800a11e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	3301      	adds	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e7      	bne.n	800a0fe <USBD_GetString+0x52>
 800a12e:	e000      	b.n	800a132 <USBD_GetString+0x86>
    return;
 800a130:	bf00      	nop
  }
}
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a148:	e005      	b.n	800a156 <USBD_GetLen+0x1e>
  {
    len++;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	3301      	adds	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3301      	adds	r3, #1
 800a154:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f5      	bne.n	800a14a <USBD_GetLen+0x12>
  }

  return len;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f003 fc4b 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f003 fc3a 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f003 fc3e 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f003 fc2d 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2204      	movs	r2, #4
 800a22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2100      	movs	r1, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f003 fbf9 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2205      	movs	r2, #5
 800a252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	2100      	movs	r1, #0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f003 fc07 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a270:	bf00      	nop
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
	...

0800a27c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a282:	f3ef 8305 	mrs	r3, IPSR
 800a286:	60bb      	str	r3, [r7, #8]
  return(result);
 800a288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10f      	bne.n	800a2ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a28e:	f3ef 8310 	mrs	r3, PRIMASK
 800a292:	607b      	str	r3, [r7, #4]
  return(result);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d105      	bne.n	800a2a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a29a:	f3ef 8311 	mrs	r3, BASEPRI
 800a29e:	603b      	str	r3, [r7, #0]
  return(result);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <osKernelInitialize+0x3a>
 800a2a6:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <osKernelInitialize+0x64>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d103      	bne.n	800a2b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a2ae:	f06f 0305 	mvn.w	r3, #5
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e00c      	b.n	800a2d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <osKernelInitialize+0x64>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d105      	bne.n	800a2ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2be:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <osKernelInitialize+0x64>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e002      	b.n	800a2d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20000660 	.word	0x20000660

0800a2e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ea:	f3ef 8305 	mrs	r3, IPSR
 800a2ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10f      	bne.n	800a316 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fa:	607b      	str	r3, [r7, #4]
  return(result);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d105      	bne.n	800a30e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a302:	f3ef 8311 	mrs	r3, BASEPRI
 800a306:	603b      	str	r3, [r7, #0]
  return(result);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <osKernelStart+0x3a>
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <osKernelStart+0x68>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d103      	bne.n	800a31e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a316:	f06f 0305 	mvn.w	r3, #5
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e010      	b.n	800a340 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a31e:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <osKernelStart+0x68>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d109      	bne.n	800a33a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a326:	f7ff ffa1 	bl	800a26c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a32a:	4b08      	ldr	r3, [pc, #32]	; (800a34c <osKernelStart+0x68>)
 800a32c:	2202      	movs	r2, #2
 800a32e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a330:	f001 fa06 	bl	800b740 <vTaskStartScheduler>
      stat = osOK;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e002      	b.n	800a340 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a33a:	f04f 33ff 	mov.w	r3, #4294967295
 800a33e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a340:	68fb      	ldr	r3, [r7, #12]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000660 	.word	0x20000660

0800a350 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b090      	sub	sp, #64	; 0x40
 800a354:	af04      	add	r7, sp, #16
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a360:	f3ef 8305 	mrs	r3, IPSR
 800a364:	61fb      	str	r3, [r7, #28]
  return(result);
 800a366:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f040 8090 	bne.w	800a48e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36e:	f3ef 8310 	mrs	r3, PRIMASK
 800a372:	61bb      	str	r3, [r7, #24]
  return(result);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a37a:	f3ef 8311 	mrs	r3, BASEPRI
 800a37e:	617b      	str	r3, [r7, #20]
  return(result);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osThreadNew+0x3e>
 800a386:	4b44      	ldr	r3, [pc, #272]	; (800a498 <osThreadNew+0x148>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d07f      	beq.n	800a48e <osThreadNew+0x13e>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d07c      	beq.n	800a48e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a394:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a39a:	2318      	movs	r3, #24
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d045      	beq.n	800a43a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <osThreadNew+0x6c>
        name = attr->name;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d008      	beq.n	800a3e2 <osThreadNew+0x92>
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	2b38      	cmp	r3, #56	; 0x38
 800a3d4:	d805      	bhi.n	800a3e2 <osThreadNew+0x92>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <osThreadNew+0x96>
        return (NULL);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	e054      	b.n	800a490 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	089b      	lsrs	r3, r3, #2
 800a3f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00e      	beq.n	800a41c <osThreadNew+0xcc>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	2bbb      	cmp	r3, #187	; 0xbb
 800a404:	d90a      	bls.n	800a41c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d006      	beq.n	800a41c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <osThreadNew+0xcc>
        mem = 1;
 800a416:	2301      	movs	r3, #1
 800a418:	623b      	str	r3, [r7, #32]
 800a41a:	e010      	b.n	800a43e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10c      	bne.n	800a43e <osThreadNew+0xee>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d108      	bne.n	800a43e <osThreadNew+0xee>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <osThreadNew+0xee>
          mem = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	623b      	str	r3, [r7, #32]
 800a438:	e001      	b.n	800a43e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d110      	bne.n	800a466 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a44c:	9202      	str	r2, [sp, #8]
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 ff7a 	bl	800b354 <xTaskCreateStatic>
 800a460:	4603      	mov	r3, r0
 800a462:	613b      	str	r3, [r7, #16]
 800a464:	e013      	b.n	800a48e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d110      	bne.n	800a48e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	b29a      	uxth	r2, r3
 800a470:	f107 0310 	add.w	r3, r7, #16
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 ffcb 	bl	800b41a <xTaskCreate>
 800a484:	4603      	mov	r3, r0
 800a486:	2b01      	cmp	r3, #1
 800a488:	d001      	beq.n	800a48e <osThreadNew+0x13e>
          hTask = NULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a48e:	693b      	ldr	r3, [r7, #16]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3730      	adds	r7, #48	; 0x30
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20000660 	.word	0x20000660

0800a49c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a4:	f3ef 8305 	mrs	r3, IPSR
 800a4a8:	613b      	str	r3, [r7, #16]
  return(result);
 800a4aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10f      	bne.n	800a4d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d105      	bne.n	800a4c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a4c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <osDelay+0x3c>
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <osDelay+0x58>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d103      	bne.n	800a4d8 <osDelay+0x3c>
    stat = osErrorISR;
 800a4d0:	f06f 0305 	mvn.w	r3, #5
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	e007      	b.n	800a4e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 f8f6 	bl	800b6d4 <vTaskDelay>
    }
  }

  return (stat);
 800a4e8:	697b      	ldr	r3, [r7, #20]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20000660 	.word	0x20000660

0800a4f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08c      	sub	sp, #48	; 0x30
 800a4fc:	af02      	add	r7, sp, #8
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a508:	f3ef 8305 	mrs	r3, IPSR
 800a50c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a50e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a510:	2b00      	cmp	r3, #0
 800a512:	d16f      	bne.n	800a5f4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a514:	f3ef 8310 	mrs	r3, PRIMASK
 800a518:	617b      	str	r3, [r7, #20]
  return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a520:	f3ef 8311 	mrs	r3, BASEPRI
 800a524:	613b      	str	r3, [r7, #16]
  return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <osMessageQueueNew+0x3c>
 800a52c:	4b34      	ldr	r3, [pc, #208]	; (800a600 <osMessageQueueNew+0x108>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d05f      	beq.n	800a5f4 <osMessageQueueNew+0xfc>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d05c      	beq.n	800a5f4 <osMessageQueueNew+0xfc>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d059      	beq.n	800a5f4 <osMessageQueueNew+0xfc>
    mem = -1;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d029      	beq.n	800a5a0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d012      	beq.n	800a57a <osMessageQueueNew+0x82>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b4f      	cmp	r3, #79	; 0x4f
 800a55a:	d90e      	bls.n	800a57a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695a      	ldr	r2, [r3, #20]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <osMessageQueueNew+0x82>
        mem = 1;
 800a574:	2301      	movs	r3, #1
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	e014      	b.n	800a5a4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d110      	bne.n	800a5a4 <osMessageQueueNew+0xac>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10c      	bne.n	800a5a4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d108      	bne.n	800a5a4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d104      	bne.n	800a5a4 <osMessageQueueNew+0xac>
          mem = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	e001      	b.n	800a5a4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d10b      	bne.n	800a5c2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	9100      	str	r1, [sp, #0]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f9e9 	bl	800a990 <xQueueGenericCreateStatic>
 800a5be:	6278      	str	r0, [r7, #36]	; 0x24
 800a5c0:	e008      	b.n	800a5d4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fa61 	bl	800aa94 <xQueueGenericCreate>
 800a5d2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00c      	beq.n	800a5f4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	e001      	b.n	800a5ec <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a5ec:	69f9      	ldr	r1, [r7, #28]
 800a5ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5f0:	f000 fe52 	bl	800b298 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3728      	adds	r7, #40	; 0x28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000660 	.word	0x20000660

0800a604 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b08a      	sub	sp, #40	; 0x28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a618:	2300      	movs	r3, #0
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a61c:	f3ef 8305 	mrs	r3, IPSR
 800a620:	61fb      	str	r3, [r7, #28]
  return(result);
 800a622:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10f      	bne.n	800a648 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a628:	f3ef 8310 	mrs	r3, PRIMASK
 800a62c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d105      	bne.n	800a640 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a634:	f3ef 8311 	mrs	r3, BASEPRI
 800a638:	617b      	str	r3, [r7, #20]
  return(result);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d02c      	beq.n	800a69a <osMessageQueuePut+0x96>
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <osMessageQueuePut+0xe0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b02      	cmp	r3, #2
 800a646:	d128      	bne.n	800a69a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <osMessageQueuePut+0x56>
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <osMessageQueuePut+0x56>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a65a:	f06f 0303 	mvn.w	r3, #3
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a660:	e039      	b.n	800a6d6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a662:	2300      	movs	r3, #0
 800a664:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a666:	f107 0210 	add.w	r2, r7, #16
 800a66a:	2300      	movs	r3, #0
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	6a38      	ldr	r0, [r7, #32]
 800a670:	f000 fb7c 	bl	800ad6c <xQueueGenericSendFromISR>
 800a674:	4603      	mov	r3, r0
 800a676:	2b01      	cmp	r3, #1
 800a678:	d003      	beq.n	800a682 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a67a:	f06f 0302 	mvn.w	r3, #2
 800a67e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a680:	e029      	b.n	800a6d6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d026      	beq.n	800a6d6 <osMessageQueuePut+0xd2>
 800a688:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <osMessageQueuePut+0xe4>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a698:	e01d      	b.n	800a6d6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <osMessageQueuePut+0xa2>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d103      	bne.n	800a6ae <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a6a6:	f06f 0303 	mvn.w	r3, #3
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ac:	e014      	b.n	800a6d8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	68b9      	ldr	r1, [r7, #8]
 800a6b4:	6a38      	ldr	r0, [r7, #32]
 800a6b6:	f000 fa53 	bl	800ab60 <xQueueGenericSend>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d00b      	beq.n	800a6d8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a6c6:	f06f 0301 	mvn.w	r3, #1
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a6cc:	e004      	b.n	800a6d8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a6ce:	f06f 0302 	mvn.w	r3, #2
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d4:	e000      	b.n	800a6d8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3728      	adds	r7, #40	; 0x28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000660 	.word	0x20000660
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a07      	ldr	r2, [pc, #28]	; (800a718 <vApplicationGetIdleTaskMemory+0x2c>)
 800a6fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4a06      	ldr	r2, [pc, #24]	; (800a71c <vApplicationGetIdleTaskMemory+0x30>)
 800a702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a70a:	601a      	str	r2, [r3, #0]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	20000664 	.word	0x20000664
 800a71c:	20000720 	.word	0x20000720

0800a720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4a07      	ldr	r2, [pc, #28]	; (800a74c <vApplicationGetTimerTaskMemory+0x2c>)
 800a730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	4a06      	ldr	r2, [pc, #24]	; (800a750 <vApplicationGetTimerTaskMemory+0x30>)
 800a736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a73e:	601a      	str	r2, [r3, #0]
}
 800a740:	bf00      	nop
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000b20 	.word	0x20000b20
 800a750:	20000bdc 	.word	0x20000bdc

0800a754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f103 0208 	add.w	r2, r3, #8
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f04f 32ff 	mov.w	r2, #4294967295
 800a76c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f103 0208 	add.w	r2, r3, #8
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f103 0208 	add.w	r2, r3, #8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7a2:	bf00      	nop
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	601a      	str	r2, [r3, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80c:	d103      	bne.n	800a816 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	e00c      	b.n	800a830 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3308      	adds	r3, #8
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e002      	b.n	800a824 <vListInsert+0x2e>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d2f6      	bcs.n	800a81e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	601a      	str	r2, [r3, #0]
}
 800a85c:	bf00      	nop
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6892      	ldr	r2, [r2, #8]
 800a87e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6852      	ldr	r2, [r2, #4]
 800a888:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	429a      	cmp	r2, r3
 800a892:	d103      	bne.n	800a89c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	689a      	ldr	r2, [r3, #8]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	1e5a      	subs	r2, r3, #1
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10c      	bne.n	800a8ea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	b672      	cpsid	i
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	b662      	cpsie	i
 800a8e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a8ea:	f002 f8e7 	bl	800cabc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8fa:	fb01 f303 	mul.w	r3, r1, r3
 800a8fe:	441a      	add	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91a:	3b01      	subs	r3, #1
 800a91c:	68f9      	ldr	r1, [r7, #12]
 800a91e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	22ff      	movs	r2, #255	; 0xff
 800a92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	22ff      	movs	r2, #255	; 0xff
 800a936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d114      	bne.n	800a96a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01a      	beq.n	800a97e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3310      	adds	r3, #16
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 f99f 	bl	800bc90 <xTaskRemoveFromEventList>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d012      	beq.n	800a97e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <xQueueGenericReset+0xd0>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	e009      	b.n	800a97e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3310      	adds	r3, #16
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff fef0 	bl	800a754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3324      	adds	r3, #36	; 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff feeb 	bl	800a754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a97e:	f002 f8d1 	bl	800cb24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a982:	2301      	movs	r3, #1
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	e000ed04 	.word	0xe000ed04

0800a990 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08e      	sub	sp, #56	; 0x38
 800a994:	af02      	add	r7, sp, #8
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10c      	bne.n	800a9be <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	b672      	cpsid	i
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	b662      	cpsie	i
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	b672      	cpsid	i
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	b662      	cpsie	i
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <xQueueGenericCreateStatic+0x5a>
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <xQueueGenericCreateStatic+0x5e>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueGenericCreateStatic+0x60>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10c      	bne.n	800aa0e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	b672      	cpsid	i
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	b662      	cpsie	i
 800aa08:	623b      	str	r3, [r7, #32]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <xQueueGenericCreateStatic+0x8a>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <xQueueGenericCreateStatic+0x8e>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e000      	b.n	800aa20 <xQueueGenericCreateStatic+0x90>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10c      	bne.n	800aa3e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	b672      	cpsid	i
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	b662      	cpsie	i
 800aa38:	61fb      	str	r3, [r7, #28]
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa3e:	2350      	movs	r3, #80	; 0x50
 800aa40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b50      	cmp	r3, #80	; 0x50
 800aa46:	d00c      	beq.n	800aa62 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	b672      	cpsid	i
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	b662      	cpsie	i
 800aa5c:	61bb      	str	r3, [r7, #24]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00d      	beq.n	800aa8a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	68b9      	ldr	r1, [r7, #8]
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f847 	bl	800ab18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3730      	adds	r7, #48	; 0x30
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08a      	sub	sp, #40	; 0x28
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10c      	bne.n	800aac2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	b672      	cpsid	i
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	b662      	cpsie	i
 800aabc:	613b      	str	r3, [r7, #16]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	e004      	b.n	800aad8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	3350      	adds	r3, #80	; 0x50
 800aadc:	4618      	mov	r0, r3
 800aade:	f002 f919 	bl	800cd14 <pvPortMalloc>
 800aae2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d011      	beq.n	800ab0e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3350      	adds	r3, #80	; 0x50
 800aaf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aafc:	79fa      	ldrb	r2, [r7, #7]
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	68b9      	ldr	r1, [r7, #8]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f805 	bl	800ab18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	e002      	b.n	800ab3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab46:	2101      	movs	r1, #1
 800ab48:	69b8      	ldr	r0, [r7, #24]
 800ab4a:	f7ff feb7 	bl	800a8bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	; 0x38
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <xQueueGenericSend+0x36>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	b672      	cpsid	i
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	b662      	cpsie	i
 800ab90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <xQueueGenericSend+0x44>
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <xQueueGenericSend+0x48>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <xQueueGenericSend+0x4a>
 800aba8:	2300      	movs	r3, #0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10c      	bne.n	800abc8 <xQueueGenericSend+0x68>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	b672      	cpsid	i
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	b662      	cpsie	i
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d103      	bne.n	800abd6 <xQueueGenericSend+0x76>
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d101      	bne.n	800abda <xQueueGenericSend+0x7a>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <xQueueGenericSend+0x7c>
 800abda:	2300      	movs	r3, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10c      	bne.n	800abfa <xQueueGenericSend+0x9a>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	b672      	cpsid	i
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	b662      	cpsie	i
 800abf4:	623b      	str	r3, [r7, #32]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abfa:	f001 fa13 	bl	800c024 <xTaskGetSchedulerState>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d102      	bne.n	800ac0a <xQueueGenericSend+0xaa>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <xQueueGenericSend+0xae>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericSend+0xb0>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10c      	bne.n	800ac2e <xQueueGenericSend+0xce>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	b672      	cpsid	i
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	b662      	cpsie	i
 800ac28:	61fb      	str	r3, [r7, #28]
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac2e:	f001 ff45 	bl	800cabc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d302      	bcc.n	800ac44 <xQueueGenericSend+0xe4>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d129      	bne.n	800ac98 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4a:	f000 fa15 	bl	800b078 <prvCopyDataToQueue>
 800ac4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d010      	beq.n	800ac7a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	3324      	adds	r3, #36	; 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 f817 	bl	800bc90 <xTaskRemoveFromEventList>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d013      	beq.n	800ac90 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac68:	4b3f      	ldr	r3, [pc, #252]	; (800ad68 <xQueueGenericSend+0x208>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	e00a      	b.n	800ac90 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d007      	beq.n	800ac90 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac80:	4b39      	ldr	r3, [pc, #228]	; (800ad68 <xQueueGenericSend+0x208>)
 800ac82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac90:	f001 ff48 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e063      	b.n	800ad60 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac9e:	f001 ff41 	bl	800cb24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	e05c      	b.n	800ad60 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 f853 	bl	800bd5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acb6:	2301      	movs	r3, #1
 800acb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acba:	f001 ff33 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acbe:	f000 fdb3 	bl	800b828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acc2:	f001 fefb 	bl	800cabc <vPortEnterCritical>
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800accc:	b25b      	sxtb	r3, r3
 800acce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd2:	d103      	bne.n	800acdc <xQueueGenericSend+0x17c>
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d103      	bne.n	800acf2 <xQueueGenericSend+0x192>
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acf2:	f001 ff17 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acf6:	1d3a      	adds	r2, r7, #4
 800acf8:	f107 0314 	add.w	r3, r7, #20
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 f842 	bl	800bd88 <xTaskCheckForTimeOut>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d124      	bne.n	800ad54 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad0c:	f000 faac 	bl	800b268 <prvIsQueueFull>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d018      	beq.n	800ad48 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	3310      	adds	r3, #16
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 ff62 	bl	800bbe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad26:	f000 fa37 	bl	800b198 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad2a:	f000 fd8b 	bl	800b844 <xTaskResumeAll>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f47f af7c 	bne.w	800ac2e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <xQueueGenericSend+0x208>)
 800ad38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	e772      	b.n	800ac2e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad4a:	f000 fa25 	bl	800b198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad4e:	f000 fd79 	bl	800b844 <xTaskResumeAll>
 800ad52:	e76c      	b.n	800ac2e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad56:	f000 fa1f 	bl	800b198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad5a:	f000 fd73 	bl	800b844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3738      	adds	r7, #56	; 0x38
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	e000ed04 	.word	0xe000ed04

0800ad6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10c      	bne.n	800ad9e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	b672      	cpsid	i
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	b662      	cpsie	i
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d103      	bne.n	800adac <xQueueGenericSendFromISR+0x40>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <xQueueGenericSendFromISR+0x44>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <xQueueGenericSendFromISR+0x46>
 800adb0:	2300      	movs	r3, #0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10c      	bne.n	800add0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	b672      	cpsid	i
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	b662      	cpsie	i
 800adca:	623b      	str	r3, [r7, #32]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d103      	bne.n	800adde <xQueueGenericSendFromISR+0x72>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adda:	2b01      	cmp	r3, #1
 800addc:	d101      	bne.n	800ade2 <xQueueGenericSendFromISR+0x76>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <xQueueGenericSendFromISR+0x78>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10c      	bne.n	800ae02 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	b672      	cpsid	i
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	b662      	cpsie	i
 800adfc:	61fb      	str	r3, [r7, #28]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae02:	f001 ff43 	bl	800cc8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae06:	f3ef 8211 	mrs	r2, BASEPRI
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	b672      	cpsid	i
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	b662      	cpsie	i
 800ae1e:	61ba      	str	r2, [r7, #24]
 800ae20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d302      	bcc.n	800ae38 <xQueueGenericSendFromISR+0xcc>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d12c      	bne.n	800ae92 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae48:	f000 f916 	bl	800b078 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ae50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae54:	d112      	bne.n	800ae7c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d016      	beq.n	800ae8c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	3324      	adds	r3, #36	; 0x24
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 ff14 	bl	800bc90 <xTaskRemoveFromEventList>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00e      	beq.n	800ae8c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e007      	b.n	800ae8c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae80:	3301      	adds	r3, #1
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	b25a      	sxtb	r2, r3
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ae90:	e001      	b.n	800ae96 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	637b      	str	r3, [r7, #52]	; 0x34
 800ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aea0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3738      	adds	r7, #56	; 0x38
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08c      	sub	sp, #48	; 0x30
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10c      	bne.n	800aee0 <xQueueReceive+0x34>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	b672      	cpsid	i
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	b662      	cpsie	i
 800aeda:	623b      	str	r3, [r7, #32]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d103      	bne.n	800aeee <xQueueReceive+0x42>
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <xQueueReceive+0x46>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <xQueueReceive+0x48>
 800aef2:	2300      	movs	r3, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10c      	bne.n	800af12 <xQueueReceive+0x66>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	b672      	cpsid	i
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	b662      	cpsie	i
 800af0c:	61fb      	str	r3, [r7, #28]
}
 800af0e:	bf00      	nop
 800af10:	e7fe      	b.n	800af10 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af12:	f001 f887 	bl	800c024 <xTaskGetSchedulerState>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <xQueueReceive+0x76>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <xQueueReceive+0x7a>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <xQueueReceive+0x7c>
 800af26:	2300      	movs	r3, #0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10c      	bne.n	800af46 <xQueueReceive+0x9a>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	b672      	cpsid	i
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	b662      	cpsie	i
 800af40:	61bb      	str	r3, [r7, #24]
}
 800af42:	bf00      	nop
 800af44:	e7fe      	b.n	800af44 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af46:	f001 fdb9 	bl	800cabc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01f      	beq.n	800af96 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af56:	68b9      	ldr	r1, [r7, #8]
 800af58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af5a:	f000 f8f7 	bl	800b14c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00f      	beq.n	800af8e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	3310      	adds	r3, #16
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fe8c 	bl	800bc90 <xTaskRemoveFromEventList>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af7e:	4b3d      	ldr	r3, [pc, #244]	; (800b074 <xQueueReceive+0x1c8>)
 800af80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af8e:	f001 fdc9 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800af92:	2301      	movs	r3, #1
 800af94:	e069      	b.n	800b06a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af9c:	f001 fdc2 	bl	800cb24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e062      	b.n	800b06a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afaa:	f107 0310 	add.w	r3, r7, #16
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fed4 	bl	800bd5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afb4:	2301      	movs	r3, #1
 800afb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afb8:	f001 fdb4 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afbc:	f000 fc34 	bl	800b828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afc0:	f001 fd7c 	bl	800cabc <vPortEnterCritical>
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afca:	b25b      	sxtb	r3, r3
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d103      	bne.n	800afda <xQueueReceive+0x12e>
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe0:	b25b      	sxtb	r3, r3
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d103      	bne.n	800aff0 <xQueueReceive+0x144>
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2200      	movs	r2, #0
 800afec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aff0:	f001 fd98 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aff4:	1d3a      	adds	r2, r7, #4
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	4611      	mov	r1, r2
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fec3 	bl	800bd88 <xTaskCheckForTimeOut>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d123      	bne.n	800b050 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b00a:	f000 f917 	bl	800b23c <prvIsQueueEmpty>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d017      	beq.n	800b044 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	3324      	adds	r3, #36	; 0x24
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	4611      	mov	r1, r2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fde3 	bl	800bbe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b024:	f000 f8b8 	bl	800b198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b028:	f000 fc0c 	bl	800b844 <xTaskResumeAll>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d189      	bne.n	800af46 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <xQueueReceive+0x1c8>)
 800b034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	e780      	b.n	800af46 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b046:	f000 f8a7 	bl	800b198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b04a:	f000 fbfb 	bl	800b844 <xTaskResumeAll>
 800b04e:	e77a      	b.n	800af46 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b052:	f000 f8a1 	bl	800b198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b056:	f000 fbf5 	bl	800b844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b05c:	f000 f8ee 	bl	800b23c <prvIsQueueEmpty>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	f43f af6f 	beq.w	800af46 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3730      	adds	r7, #48	; 0x30
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10d      	bne.n	800b0b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d14d      	bne.n	800b13a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 ffdc 	bl	800c060 <xTaskPriorityDisinherit>
 800b0a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	609a      	str	r2, [r3, #8]
 800b0b0:	e043      	b.n	800b13a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d119      	bne.n	800b0ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6858      	ldr	r0, [r3, #4]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	f002 fdc4 	bl	800dc50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	441a      	add	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685a      	ldr	r2, [r3, #4]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d32b      	bcc.n	800b13a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	605a      	str	r2, [r3, #4]
 800b0ea:	e026      	b.n	800b13a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	68d8      	ldr	r0, [r3, #12]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	f002 fdaa 	bl	800dc50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68da      	ldr	r2, [r3, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	425b      	negs	r3, r3
 800b106:	441a      	add	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d207      	bcs.n	800b128 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689a      	ldr	r2, [r3, #8]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	425b      	negs	r3, r3
 800b122:	441a      	add	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d105      	bne.n	800b13a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	3b01      	subs	r3, #1
 800b138:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b142:	697b      	ldr	r3, [r7, #20]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d018      	beq.n	800b190 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	441a      	add	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	429a      	cmp	r2, r3
 800b176:	d303      	bcc.n	800b180 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68d9      	ldr	r1, [r3, #12]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b188:	461a      	mov	r2, r3
 800b18a:	6838      	ldr	r0, [r7, #0]
 800b18c:	f002 fd60 	bl	800dc50 <memcpy>
	}
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1a0:	f001 fc8c 	bl	800cabc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1ac:	e011      	b.n	800b1d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d012      	beq.n	800b1dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3324      	adds	r3, #36	; 0x24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fd68 	bl	800bc90 <xTaskRemoveFromEventList>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1c6:	f000 fe45 	bl	800be54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dce9      	bgt.n	800b1ae <prvUnlockQueue+0x16>
 800b1da:	e000      	b.n	800b1de <prvUnlockQueue+0x46>
					break;
 800b1dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	22ff      	movs	r2, #255	; 0xff
 800b1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1e6:	f001 fc9d 	bl	800cb24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1ea:	f001 fc67 	bl	800cabc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1f6:	e011      	b.n	800b21c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d012      	beq.n	800b226 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3310      	adds	r3, #16
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fd43 	bl	800bc90 <xTaskRemoveFromEventList>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b210:	f000 fe20 	bl	800be54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	3b01      	subs	r3, #1
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b21c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b220:	2b00      	cmp	r3, #0
 800b222:	dce9      	bgt.n	800b1f8 <prvUnlockQueue+0x60>
 800b224:	e000      	b.n	800b228 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b226:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	22ff      	movs	r2, #255	; 0xff
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b230:	f001 fc78 	bl	800cb24 <vPortExitCritical>
}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b244:	f001 fc3a 	bl	800cabc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e001      	b.n	800b25a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b25a:	f001 fc63 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b25e:	68fb      	ldr	r3, [r7, #12]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b270:	f001 fc24 	bl	800cabc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d102      	bne.n	800b286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b280:	2301      	movs	r3, #1
 800b282:	60fb      	str	r3, [r7, #12]
 800b284:	e001      	b.n	800b28a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b28a:	f001 fc4b 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b28e:	68fb      	ldr	r3, [r7, #12]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e014      	b.n	800b2d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2a8:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <vQueueAddToRegistry+0x50>)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b2b4:	490c      	ldr	r1, [pc, #48]	; (800b2e8 <vQueueAddToRegistry+0x50>)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b2be:	4a0a      	ldr	r2, [pc, #40]	; (800b2e8 <vQueueAddToRegistry+0x50>)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b2ca:	e006      	b.n	800b2da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b07      	cmp	r3, #7
 800b2d6:	d9e7      	bls.n	800b2a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	200013dc 	.word	0x200013dc

0800b2ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2fc:	f001 fbde 	bl	800cabc <vPortEnterCritical>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b306:	b25b      	sxtb	r3, r3
 800b308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30c:	d103      	bne.n	800b316 <vQueueWaitForMessageRestricted+0x2a>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b31c:	b25b      	sxtb	r3, r3
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b322:	d103      	bne.n	800b32c <vQueueWaitForMessageRestricted+0x40>
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b32c:	f001 fbfa 	bl	800cb24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b334:	2b00      	cmp	r3, #0
 800b336:	d106      	bne.n	800b346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	3324      	adds	r3, #36	; 0x24
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fc77 	bl	800bc34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b346:	6978      	ldr	r0, [r7, #20]
 800b348:	f7ff ff26 	bl	800b198 <prvUnlockQueue>
	}
 800b34c:	bf00      	nop
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	; 0x38
 800b358:	af04      	add	r7, sp, #16
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10c      	bne.n	800b382 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	b672      	cpsid	i
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	b662      	cpsie	i
 800b37c:	623b      	str	r3, [r7, #32]
}
 800b37e:	bf00      	nop
 800b380:	e7fe      	b.n	800b380 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10c      	bne.n	800b3a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	b672      	cpsid	i
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	b662      	cpsie	i
 800b39c:	61fb      	str	r3, [r7, #28]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b3a2:	23bc      	movs	r3, #188	; 0xbc
 800b3a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2bbc      	cmp	r3, #188	; 0xbc
 800b3aa:	d00c      	beq.n	800b3c6 <xTaskCreateStatic+0x72>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	b672      	cpsid	i
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	b662      	cpsie	i
 800b3c0:	61bb      	str	r3, [r7, #24]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01e      	beq.n	800b40c <xTaskCreateStatic+0xb8>
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d01b      	beq.n	800b40c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	f107 0314 	add.w	r3, r7, #20
 800b3f2:	9301      	str	r3, [sp, #4]
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 f850 	bl	800b4a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b406:	f000 f8f5 	bl	800b5f4 <prvAddNewTaskToReadyList>
 800b40a:	e001      	b.n	800b410 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b410:	697b      	ldr	r3, [r7, #20]
	}
 800b412:	4618      	mov	r0, r3
 800b414:	3728      	adds	r7, #40	; 0x28
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b08c      	sub	sp, #48	; 0x30
 800b41e:	af04      	add	r7, sp, #16
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	603b      	str	r3, [r7, #0]
 800b426:	4613      	mov	r3, r2
 800b428:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 fc70 	bl	800cd14 <pvPortMalloc>
 800b434:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00e      	beq.n	800b45a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b43c:	20bc      	movs	r0, #188	; 0xbc
 800b43e:	f001 fc69 	bl	800cd14 <pvPortMalloc>
 800b442:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	631a      	str	r2, [r3, #48]	; 0x30
 800b450:	e005      	b.n	800b45e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b452:	6978      	ldr	r0, [r7, #20]
 800b454:	f001 fd28 	bl	800cea8 <vPortFree>
 800b458:	e001      	b.n	800b45e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d017      	beq.n	800b494 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b46c:	88fa      	ldrh	r2, [r7, #6]
 800b46e:	2300      	movs	r3, #0
 800b470:	9303      	str	r3, [sp, #12]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68b9      	ldr	r1, [r7, #8]
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 f80e 	bl	800b4a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b488:	69f8      	ldr	r0, [r7, #28]
 800b48a:	f000 f8b3 	bl	800b5f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b48e:	2301      	movs	r3, #1
 800b490:	61bb      	str	r3, [r7, #24]
 800b492:	e002      	b.n	800b49a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b494:	f04f 33ff 	mov.w	r3, #4294967295
 800b498:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b49a:	69bb      	ldr	r3, [r7, #24]
	}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	21a5      	movs	r1, #165	; 0xa5
 800b4be:	f002 fbd5 	bl	800dc6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b4cc:	440b      	add	r3, r1
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	f023 0307 	bic.w	r3, r3, #7
 800b4da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00c      	beq.n	800b500 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	b672      	cpsid	i
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	b662      	cpsie	i
 800b4fa:	617b      	str	r3, [r7, #20]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01f      	beq.n	800b546 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b506:	2300      	movs	r3, #0
 800b508:	61fb      	str	r3, [r7, #28]
 800b50a:	e012      	b.n	800b532 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	4413      	add	r3, r2
 800b512:	7819      	ldrb	r1, [r3, #0]
 800b514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	4413      	add	r3, r2
 800b51a:	3334      	adds	r3, #52	; 0x34
 800b51c:	460a      	mov	r2, r1
 800b51e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	3301      	adds	r3, #1
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	2b0f      	cmp	r3, #15
 800b536:	d9e9      	bls.n	800b50c <prvInitialiseNewTask+0x68>
 800b538:	e000      	b.n	800b53c <prvInitialiseNewTask+0x98>
			{
				break;
 800b53a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b544:	e003      	b.n	800b54e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	2b37      	cmp	r3, #55	; 0x37
 800b552:	d901      	bls.n	800b558 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b554:	2337      	movs	r3, #55	; 0x37
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	2200      	movs	r2, #0
 800b568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	3304      	adds	r3, #4
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff f910 	bl	800a794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	3318      	adds	r3, #24
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff f90b 	bl	800a794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	3354      	adds	r3, #84	; 0x54
 800b5a8:	2260      	movs	r2, #96	; 0x60
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 fb5d 	bl	800dc6c <memset>
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	4a0c      	ldr	r2, [pc, #48]	; (800b5e8 <prvInitialiseNewTask+0x144>)
 800b5b6:	659a      	str	r2, [r3, #88]	; 0x58
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	4a0c      	ldr	r2, [pc, #48]	; (800b5ec <prvInitialiseNewTask+0x148>)
 800b5bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	4a0b      	ldr	r2, [pc, #44]	; (800b5f0 <prvInitialiseNewTask+0x14c>)
 800b5c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	69b8      	ldr	r0, [r7, #24]
 800b5ca:	f001 f96b 	bl	800c8a4 <pxPortInitialiseStack>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5e0:	bf00      	nop
 800b5e2:	3720      	adds	r7, #32
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	0800e0f0 	.word	0x0800e0f0
 800b5ec:	0800e110 	.word	0x0800e110
 800b5f0:	0800e0d0 	.word	0x0800e0d0

0800b5f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5fc:	f001 fa5e 	bl	800cabc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b600:	4b2d      	ldr	r3, [pc, #180]	; (800b6b8 <prvAddNewTaskToReadyList+0xc4>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	4a2c      	ldr	r2, [pc, #176]	; (800b6b8 <prvAddNewTaskToReadyList+0xc4>)
 800b608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b60a:	4b2c      	ldr	r3, [pc, #176]	; (800b6bc <prvAddNewTaskToReadyList+0xc8>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d109      	bne.n	800b626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b612:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <prvAddNewTaskToReadyList+0xc8>)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b618:	4b27      	ldr	r3, [pc, #156]	; (800b6b8 <prvAddNewTaskToReadyList+0xc4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d110      	bne.n	800b642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b620:	f000 fc3c 	bl	800be9c <prvInitialiseTaskLists>
 800b624:	e00d      	b.n	800b642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b626:	4b26      	ldr	r3, [pc, #152]	; (800b6c0 <prvAddNewTaskToReadyList+0xcc>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b62e:	4b23      	ldr	r3, [pc, #140]	; (800b6bc <prvAddNewTaskToReadyList+0xc8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d802      	bhi.n	800b642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b63c:	4a1f      	ldr	r2, [pc, #124]	; (800b6bc <prvAddNewTaskToReadyList+0xc8>)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b642:	4b20      	ldr	r3, [pc, #128]	; (800b6c4 <prvAddNewTaskToReadyList+0xd0>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3301      	adds	r3, #1
 800b648:	4a1e      	ldr	r2, [pc, #120]	; (800b6c4 <prvAddNewTaskToReadyList+0xd0>)
 800b64a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b64c:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <prvAddNewTaskToReadyList+0xd0>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b658:	4b1b      	ldr	r3, [pc, #108]	; (800b6c8 <prvAddNewTaskToReadyList+0xd4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d903      	bls.n	800b668 <prvAddNewTaskToReadyList+0x74>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <prvAddNewTaskToReadyList+0xd4>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4a15      	ldr	r2, [pc, #84]	; (800b6cc <prvAddNewTaskToReadyList+0xd8>)
 800b676:	441a      	add	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7ff f895 	bl	800a7ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b684:	f001 fa4e 	bl	800cb24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b688:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <prvAddNewTaskToReadyList+0xcc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00e      	beq.n	800b6ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <prvAddNewTaskToReadyList+0xc8>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d207      	bcs.n	800b6ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <prvAddNewTaskToReadyList+0xdc>)
 800b6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200018f0 	.word	0x200018f0
 800b6bc:	2000141c 	.word	0x2000141c
 800b6c0:	200018fc 	.word	0x200018fc
 800b6c4:	2000190c 	.word	0x2000190c
 800b6c8:	200018f8 	.word	0x200018f8
 800b6cc:	20001420 	.word	0x20001420
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d019      	beq.n	800b71a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6e6:	4b14      	ldr	r3, [pc, #80]	; (800b738 <vTaskDelay+0x64>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <vTaskDelay+0x34>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	b672      	cpsid	i
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	b662      	cpsie	i
 800b702:	60bb      	str	r3, [r7, #8]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b708:	f000 f88e 	bl	800b828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b70c:	2100      	movs	r1, #0
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fd18 	bl	800c144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b714:	f000 f896 	bl	800b844 <xTaskResumeAll>
 800b718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d107      	bne.n	800b730 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b720:	4b06      	ldr	r3, [pc, #24]	; (800b73c <vTaskDelay+0x68>)
 800b722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b730:	bf00      	nop
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20001918 	.word	0x20001918
 800b73c:	e000ed04 	.word	0xe000ed04

0800b740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b74e:	463a      	mov	r2, r7
 800b750:	1d39      	adds	r1, r7, #4
 800b752:	f107 0308 	add.w	r3, r7, #8
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe ffc8 	bl	800a6ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	9202      	str	r2, [sp, #8]
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	2300      	movs	r3, #0
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	2300      	movs	r3, #0
 800b76c:	460a      	mov	r2, r1
 800b76e:	4926      	ldr	r1, [pc, #152]	; (800b808 <vTaskStartScheduler+0xc8>)
 800b770:	4826      	ldr	r0, [pc, #152]	; (800b80c <vTaskStartScheduler+0xcc>)
 800b772:	f7ff fdef 	bl	800b354 <xTaskCreateStatic>
 800b776:	4603      	mov	r3, r0
 800b778:	4a25      	ldr	r2, [pc, #148]	; (800b810 <vTaskStartScheduler+0xd0>)
 800b77a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b77c:	4b24      	ldr	r3, [pc, #144]	; (800b810 <vTaskStartScheduler+0xd0>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	e001      	b.n	800b78e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d102      	bne.n	800b79a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b794:	f000 fd2a 	bl	800c1ec <xTimerCreateTimerTask>
 800b798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d11d      	bne.n	800b7dc <vTaskStartScheduler+0x9c>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	b672      	cpsid	i
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	b662      	cpsie	i
 800b7b4:	613b      	str	r3, [r7, #16]
}
 800b7b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7b8:	4b16      	ldr	r3, [pc, #88]	; (800b814 <vTaskStartScheduler+0xd4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3354      	adds	r3, #84	; 0x54
 800b7be:	4a16      	ldr	r2, [pc, #88]	; (800b818 <vTaskStartScheduler+0xd8>)
 800b7c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7c2:	4b16      	ldr	r3, [pc, #88]	; (800b81c <vTaskStartScheduler+0xdc>)
 800b7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7ca:	4b15      	ldr	r3, [pc, #84]	; (800b820 <vTaskStartScheduler+0xe0>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7d0:	4b14      	ldr	r3, [pc, #80]	; (800b824 <vTaskStartScheduler+0xe4>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7d6:	f001 f8f3 	bl	800c9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7da:	e010      	b.n	800b7fe <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e2:	d10c      	bne.n	800b7fe <vTaskStartScheduler+0xbe>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	b672      	cpsid	i
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	b662      	cpsie	i
 800b7f8:	60fb      	str	r3, [r7, #12]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <vTaskStartScheduler+0xbc>
}
 800b7fe:	bf00      	nop
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	0800dfa8 	.word	0x0800dfa8
 800b80c:	0800be6d 	.word	0x0800be6d
 800b810:	20001914 	.word	0x20001914
 800b814:	2000141c 	.word	0x2000141c
 800b818:	20000110 	.word	0x20000110
 800b81c:	20001910 	.word	0x20001910
 800b820:	200018fc 	.word	0x200018fc
 800b824:	200018f4 	.word	0x200018f4

0800b828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <vTaskSuspendAll+0x18>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3301      	adds	r3, #1
 800b832:	4a03      	ldr	r2, [pc, #12]	; (800b840 <vTaskSuspendAll+0x18>)
 800b834:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b836:	bf00      	nop
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20001918 	.word	0x20001918

0800b844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b84e:	2300      	movs	r3, #0
 800b850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b852:	4b43      	ldr	r3, [pc, #268]	; (800b960 <xTaskResumeAll+0x11c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10c      	bne.n	800b874 <xTaskResumeAll+0x30>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	b672      	cpsid	i
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	b662      	cpsie	i
 800b86e:	603b      	str	r3, [r7, #0]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b874:	f001 f922 	bl	800cabc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b878:	4b39      	ldr	r3, [pc, #228]	; (800b960 <xTaskResumeAll+0x11c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	4a38      	ldr	r2, [pc, #224]	; (800b960 <xTaskResumeAll+0x11c>)
 800b880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b882:	4b37      	ldr	r3, [pc, #220]	; (800b960 <xTaskResumeAll+0x11c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d162      	bne.n	800b950 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b88a:	4b36      	ldr	r3, [pc, #216]	; (800b964 <xTaskResumeAll+0x120>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d05e      	beq.n	800b950 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b892:	e02f      	b.n	800b8f4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b894:	4b34      	ldr	r3, [pc, #208]	; (800b968 <xTaskResumeAll+0x124>)
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3318      	adds	r3, #24
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe ffe1 	bl	800a868 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe ffdc 	bl	800a868 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	4b2d      	ldr	r3, [pc, #180]	; (800b96c <xTaskResumeAll+0x128>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d903      	bls.n	800b8c4 <xTaskResumeAll+0x80>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c0:	4a2a      	ldr	r2, [pc, #168]	; (800b96c <xTaskResumeAll+0x128>)
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a27      	ldr	r2, [pc, #156]	; (800b970 <xTaskResumeAll+0x12c>)
 800b8d2:	441a      	add	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f7fe ff67 	bl	800a7ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e4:	4b23      	ldr	r3, [pc, #140]	; (800b974 <xTaskResumeAll+0x130>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d302      	bcc.n	800b8f4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b8ee:	4b22      	ldr	r3, [pc, #136]	; (800b978 <xTaskResumeAll+0x134>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f4:	4b1c      	ldr	r3, [pc, #112]	; (800b968 <xTaskResumeAll+0x124>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1cb      	bne.n	800b894 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b902:	f000 fb6f 	bl	800bfe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <xTaskResumeAll+0x138>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d010      	beq.n	800b934 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b912:	f000 f847 	bl	800b9a4 <xTaskIncrementTick>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b91c:	4b16      	ldr	r3, [pc, #88]	; (800b978 <xTaskResumeAll+0x134>)
 800b91e:	2201      	movs	r2, #1
 800b920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3b01      	subs	r3, #1
 800b926:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f1      	bne.n	800b912 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b92e:	4b13      	ldr	r3, [pc, #76]	; (800b97c <xTaskResumeAll+0x138>)
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b934:	4b10      	ldr	r3, [pc, #64]	; (800b978 <xTaskResumeAll+0x134>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b940:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <xTaskResumeAll+0x13c>)
 800b942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b950:	f001 f8e8 	bl	800cb24 <vPortExitCritical>

	return xAlreadyYielded;
 800b954:	68bb      	ldr	r3, [r7, #8]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20001918 	.word	0x20001918
 800b964:	200018f0 	.word	0x200018f0
 800b968:	200018b0 	.word	0x200018b0
 800b96c:	200018f8 	.word	0x200018f8
 800b970:	20001420 	.word	0x20001420
 800b974:	2000141c 	.word	0x2000141c
 800b978:	20001904 	.word	0x20001904
 800b97c:	20001900 	.word	0x20001900
 800b980:	e000ed04 	.word	0xe000ed04

0800b984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b98a:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <xTaskGetTickCount+0x1c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b990:	687b      	ldr	r3, [r7, #4]
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	200018f4 	.word	0x200018f4

0800b9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ae:	4b50      	ldr	r3, [pc, #320]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 808b 	bne.w	800bace <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9b8:	4b4e      	ldr	r3, [pc, #312]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9c0:	4a4c      	ldr	r2, [pc, #304]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d122      	bne.n	800ba12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9cc:	4b4a      	ldr	r3, [pc, #296]	; (800baf8 <xTaskIncrementTick+0x154>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00c      	beq.n	800b9f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	b672      	cpsid	i
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	b662      	cpsie	i
 800b9ea:	603b      	str	r3, [r7, #0]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xTaskIncrementTick+0x4a>
 800b9f0:	4b41      	ldr	r3, [pc, #260]	; (800baf8 <xTaskIncrementTick+0x154>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	4b41      	ldr	r3, [pc, #260]	; (800bafc <xTaskIncrementTick+0x158>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a3f      	ldr	r2, [pc, #252]	; (800baf8 <xTaskIncrementTick+0x154>)
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	4a3f      	ldr	r2, [pc, #252]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	4b3e      	ldr	r3, [pc, #248]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4a3d      	ldr	r2, [pc, #244]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	f000 fae9 	bl	800bfe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba12:	4b3c      	ldr	r3, [pc, #240]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d349      	bcc.n	800bab0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba1c:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <xTaskIncrementTick+0x154>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d104      	bne.n	800ba30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba26:	4b37      	ldr	r3, [pc, #220]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba28:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2c:	601a      	str	r2, [r3, #0]
					break;
 800ba2e:	e03f      	b.n	800bab0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba30:	4b31      	ldr	r3, [pc, #196]	; (800baf8 <xTaskIncrementTick+0x154>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d203      	bcs.n	800ba50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba48:	4a2e      	ldr	r2, [pc, #184]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba4e:	e02f      	b.n	800bab0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe ff07 	bl	800a868 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d004      	beq.n	800ba6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	3318      	adds	r3, #24
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fe fefe 	bl	800a868 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4b25      	ldr	r3, [pc, #148]	; (800bb08 <xTaskIncrementTick+0x164>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d903      	bls.n	800ba80 <xTaskIncrementTick+0xdc>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a22      	ldr	r2, [pc, #136]	; (800bb08 <xTaskIncrementTick+0x164>)
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <xTaskIncrementTick+0x168>)
 800ba8e:	441a      	add	r2, r3
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	f7fe fe89 	bl	800a7ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa0:	4b1b      	ldr	r3, [pc, #108]	; (800bb10 <xTaskIncrementTick+0x16c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d3b8      	bcc.n	800ba1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800baaa:	2301      	movs	r3, #1
 800baac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baae:	e7b5      	b.n	800ba1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bab0:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <xTaskIncrementTick+0x16c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4915      	ldr	r1, [pc, #84]	; (800bb0c <xTaskIncrementTick+0x168>)
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d907      	bls.n	800bad8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bac8:	2301      	movs	r3, #1
 800baca:	617b      	str	r3, [r7, #20]
 800bacc:	e004      	b.n	800bad8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bace:	4b11      	ldr	r3, [pc, #68]	; (800bb14 <xTaskIncrementTick+0x170>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	4a0f      	ldr	r2, [pc, #60]	; (800bb14 <xTaskIncrementTick+0x170>)
 800bad6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <xTaskIncrementTick+0x174>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bae0:	2301      	movs	r3, #1
 800bae2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bae4:	697b      	ldr	r3, [r7, #20]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20001918 	.word	0x20001918
 800baf4:	200018f4 	.word	0x200018f4
 800baf8:	200018a8 	.word	0x200018a8
 800bafc:	200018ac 	.word	0x200018ac
 800bb00:	20001908 	.word	0x20001908
 800bb04:	20001910 	.word	0x20001910
 800bb08:	200018f8 	.word	0x200018f8
 800bb0c:	20001420 	.word	0x20001420
 800bb10:	2000141c 	.word	0x2000141c
 800bb14:	20001900 	.word	0x20001900
 800bb18:	20001904 	.word	0x20001904

0800bb1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb22:	4b2b      	ldr	r3, [pc, #172]	; (800bbd0 <vTaskSwitchContext+0xb4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb2a:	4b2a      	ldr	r3, [pc, #168]	; (800bbd4 <vTaskSwitchContext+0xb8>)
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb30:	e048      	b.n	800bbc4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800bb32:	4b28      	ldr	r3, [pc, #160]	; (800bbd4 <vTaskSwitchContext+0xb8>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb38:	4b27      	ldr	r3, [pc, #156]	; (800bbd8 <vTaskSwitchContext+0xbc>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e012      	b.n	800bb66 <vTaskSwitchContext+0x4a>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10c      	bne.n	800bb60 <vTaskSwitchContext+0x44>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	b672      	cpsid	i
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	b662      	cpsie	i
 800bb5a:	607b      	str	r3, [r7, #4]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <vTaskSwitchContext+0x42>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	60fb      	str	r3, [r7, #12]
 800bb66:	491d      	ldr	r1, [pc, #116]	; (800bbdc <vTaskSwitchContext+0xc0>)
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	440b      	add	r3, r1
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0e2      	beq.n	800bb40 <vTaskSwitchContext+0x24>
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4a15      	ldr	r2, [pc, #84]	; (800bbdc <vTaskSwitchContext+0xc0>)
 800bb86:	4413      	add	r3, r2
 800bb88:	60bb      	str	r3, [r7, #8]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	605a      	str	r2, [r3, #4]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d104      	bne.n	800bbaa <vTaskSwitchContext+0x8e>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	4a0b      	ldr	r2, [pc, #44]	; (800bbe0 <vTaskSwitchContext+0xc4>)
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	4a08      	ldr	r2, [pc, #32]	; (800bbd8 <vTaskSwitchContext+0xbc>)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbba:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <vTaskSwitchContext+0xc4>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3354      	adds	r3, #84	; 0x54
 800bbc0:	4a08      	ldr	r2, [pc, #32]	; (800bbe4 <vTaskSwitchContext+0xc8>)
 800bbc2:	6013      	str	r3, [r2, #0]
}
 800bbc4:	bf00      	nop
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20001918 	.word	0x20001918
 800bbd4:	20001904 	.word	0x20001904
 800bbd8:	200018f8 	.word	0x200018f8
 800bbdc:	20001420 	.word	0x20001420
 800bbe0:	2000141c 	.word	0x2000141c
 800bbe4:	20000110 	.word	0x20000110

0800bbe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10c      	bne.n	800bc12 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	b672      	cpsid	i
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	b662      	cpsie	i
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <vTaskPlaceOnEventList+0x48>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3318      	adds	r3, #24
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7fe fdeb 	bl	800a7f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc20:	2101      	movs	r1, #1
 800bc22:	6838      	ldr	r0, [r7, #0]
 800bc24:	f000 fa8e 	bl	800c144 <prvAddCurrentTaskToDelayedList>
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000141c 	.word	0x2000141c

0800bc34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10c      	bne.n	800bc60 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	b672      	cpsid	i
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	b662      	cpsie	i
 800bc5a:	617b      	str	r3, [r7, #20]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <vTaskPlaceOnEventListRestricted+0x58>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3318      	adds	r3, #24
 800bc66:	4619      	mov	r1, r3
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7fe fda0 	bl	800a7ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295
 800bc78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	68b8      	ldr	r0, [r7, #8]
 800bc7e:	f000 fa61 	bl	800c144 <prvAddCurrentTaskToDelayedList>
	}
 800bc82:	bf00      	nop
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2000141c 	.word	0x2000141c

0800bc90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10c      	bne.n	800bcc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	b672      	cpsid	i
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	b662      	cpsie	i
 800bcba:	60fb      	str	r3, [r7, #12]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	3318      	adds	r3, #24
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fdcf 	bl	800a868 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcca:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <xTaskRemoveFromEventList+0xb4>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d11d      	bne.n	800bd0e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe fdc6 	bl	800a868 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce0:	4b19      	ldr	r3, [pc, #100]	; (800bd48 <xTaskRemoveFromEventList+0xb8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d903      	bls.n	800bcf0 <xTaskRemoveFromEventList+0x60>
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <xTaskRemoveFromEventList+0xb8>)
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4a13      	ldr	r2, [pc, #76]	; (800bd4c <xTaskRemoveFromEventList+0xbc>)
 800bcfe:	441a      	add	r2, r3
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f7fe fd51 	bl	800a7ae <vListInsertEnd>
 800bd0c:	e005      	b.n	800bd1a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	3318      	adds	r3, #24
 800bd12:	4619      	mov	r1, r3
 800bd14:	480e      	ldr	r0, [pc, #56]	; (800bd50 <xTaskRemoveFromEventList+0xc0>)
 800bd16:	f7fe fd4a 	bl	800a7ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <xTaskRemoveFromEventList+0xc4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d905      	bls.n	800bd34 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <xTaskRemoveFromEventList+0xc8>)
 800bd2e:	2201      	movs	r2, #1
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	e001      	b.n	800bd38 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd38:	697b      	ldr	r3, [r7, #20]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20001918 	.word	0x20001918
 800bd48:	200018f8 	.word	0x200018f8
 800bd4c:	20001420 	.word	0x20001420
 800bd50:	200018b0 	.word	0x200018b0
 800bd54:	2000141c 	.word	0x2000141c
 800bd58:	20001904 	.word	0x20001904

0800bd5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <vTaskInternalSetTimeOutState+0x24>)
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <vTaskInternalSetTimeOutState+0x28>)
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	605a      	str	r2, [r3, #4]
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20001908 	.word	0x20001908
 800bd84:	200018f4 	.word	0x200018f4

0800bd88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10c      	bne.n	800bdb2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	b672      	cpsid	i
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	b662      	cpsie	i
 800bdac:	613b      	str	r3, [r7, #16]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10c      	bne.n	800bdd2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	60fb      	str	r3, [r7, #12]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bdd2:	f000 fe73 	bl	800cabc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdd6:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <xTaskCheckForTimeOut+0xc4>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdee:	d102      	bne.n	800bdf6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	61fb      	str	r3, [r7, #28]
 800bdf4:	e023      	b.n	800be3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b15      	ldr	r3, [pc, #84]	; (800be50 <xTaskCheckForTimeOut+0xc8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d007      	beq.n	800be12 <xTaskCheckForTimeOut+0x8a>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d302      	bcc.n	800be12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be0c:	2301      	movs	r3, #1
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	e015      	b.n	800be3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d20b      	bcs.n	800be34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	1ad2      	subs	r2, r2, r3
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff ff97 	bl	800bd5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be2e:	2300      	movs	r3, #0
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	e004      	b.n	800be3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be3a:	2301      	movs	r3, #1
 800be3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be3e:	f000 fe71 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800be42:	69fb      	ldr	r3, [r7, #28]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3720      	adds	r7, #32
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	200018f4 	.word	0x200018f4
 800be50:	20001908 	.word	0x20001908

0800be54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be54:	b480      	push	{r7}
 800be56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be58:	4b03      	ldr	r3, [pc, #12]	; (800be68 <vTaskMissedYield+0x14>)
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
}
 800be5e:	bf00      	nop
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	20001904 	.word	0x20001904

0800be6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be74:	f000 f852 	bl	800bf1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be78:	4b06      	ldr	r3, [pc, #24]	; (800be94 <prvIdleTask+0x28>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d9f9      	bls.n	800be74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be80:	4b05      	ldr	r3, [pc, #20]	; (800be98 <prvIdleTask+0x2c>)
 800be82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be90:	e7f0      	b.n	800be74 <prvIdleTask+0x8>
 800be92:	bf00      	nop
 800be94:	20001420 	.word	0x20001420
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bea2:	2300      	movs	r3, #0
 800bea4:	607b      	str	r3, [r7, #4]
 800bea6:	e00c      	b.n	800bec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4a12      	ldr	r2, [pc, #72]	; (800befc <prvInitialiseTaskLists+0x60>)
 800beb4:	4413      	add	r3, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fc4c 	bl	800a754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3301      	adds	r3, #1
 800bec0:	607b      	str	r3, [r7, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b37      	cmp	r3, #55	; 0x37
 800bec6:	d9ef      	bls.n	800bea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bec8:	480d      	ldr	r0, [pc, #52]	; (800bf00 <prvInitialiseTaskLists+0x64>)
 800beca:	f7fe fc43 	bl	800a754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bece:	480d      	ldr	r0, [pc, #52]	; (800bf04 <prvInitialiseTaskLists+0x68>)
 800bed0:	f7fe fc40 	bl	800a754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bed4:	480c      	ldr	r0, [pc, #48]	; (800bf08 <prvInitialiseTaskLists+0x6c>)
 800bed6:	f7fe fc3d 	bl	800a754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800beda:	480c      	ldr	r0, [pc, #48]	; (800bf0c <prvInitialiseTaskLists+0x70>)
 800bedc:	f7fe fc3a 	bl	800a754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bee0:	480b      	ldr	r0, [pc, #44]	; (800bf10 <prvInitialiseTaskLists+0x74>)
 800bee2:	f7fe fc37 	bl	800a754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <prvInitialiseTaskLists+0x78>)
 800bee8:	4a05      	ldr	r2, [pc, #20]	; (800bf00 <prvInitialiseTaskLists+0x64>)
 800beea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <prvInitialiseTaskLists+0x7c>)
 800beee:	4a05      	ldr	r2, [pc, #20]	; (800bf04 <prvInitialiseTaskLists+0x68>)
 800bef0:	601a      	str	r2, [r3, #0]
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20001420 	.word	0x20001420
 800bf00:	20001880 	.word	0x20001880
 800bf04:	20001894 	.word	0x20001894
 800bf08:	200018b0 	.word	0x200018b0
 800bf0c:	200018c4 	.word	0x200018c4
 800bf10:	200018dc 	.word	0x200018dc
 800bf14:	200018a8 	.word	0x200018a8
 800bf18:	200018ac 	.word	0x200018ac

0800bf1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf22:	e019      	b.n	800bf58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf24:	f000 fdca 	bl	800cabc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf28:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <prvCheckTasksWaitingTermination+0x50>)
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe fc97 	bl	800a868 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	; (800bf70 <prvCheckTasksWaitingTermination+0x54>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	4a0b      	ldr	r2, [pc, #44]	; (800bf70 <prvCheckTasksWaitingTermination+0x54>)
 800bf42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf44:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <prvCheckTasksWaitingTermination+0x58>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	4a0a      	ldr	r2, [pc, #40]	; (800bf74 <prvCheckTasksWaitingTermination+0x58>)
 800bf4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf4e:	f000 fde9 	bl	800cb24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f810 	bl	800bf78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <prvCheckTasksWaitingTermination+0x58>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e1      	bne.n	800bf24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200018c4 	.word	0x200018c4
 800bf70:	200018f0 	.word	0x200018f0
 800bf74:	200018d8 	.word	0x200018d8

0800bf78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3354      	adds	r3, #84	; 0x54
 800bf84:	4618      	mov	r0, r3
 800bf86:	f001 ff67 	bl	800de58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d108      	bne.n	800bfa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 ff85 	bl	800cea8 <vPortFree>
				vPortFree( pxTCB );
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 ff82 	bl	800cea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfa4:	e01a      	b.n	800bfdc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d103      	bne.n	800bfb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 ff79 	bl	800cea8 <vPortFree>
	}
 800bfb6:	e011      	b.n	800bfdc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d00c      	beq.n	800bfdc <prvDeleteTCB+0x64>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	b672      	cpsid	i
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	b662      	cpsie	i
 800bfd6:	60fb      	str	r3, [r7, #12]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <prvDeleteTCB+0x62>
	}
 800bfdc:	bf00      	nop
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfea:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <prvResetNextTaskUnblockTime+0x38>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <prvResetNextTaskUnblockTime+0x3c>)
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295
 800bffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bffc:	e008      	b.n	800c010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffe:	4b07      	ldr	r3, [pc, #28]	; (800c01c <prvResetNextTaskUnblockTime+0x38>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	4a04      	ldr	r2, [pc, #16]	; (800c020 <prvResetNextTaskUnblockTime+0x3c>)
 800c00e:	6013      	str	r3, [r2, #0]
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200018a8 	.word	0x200018a8
 800c020:	20001910 	.word	0x20001910

0800c024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c02a:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <xTaskGetSchedulerState+0x34>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c032:	2301      	movs	r3, #1
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	e008      	b.n	800c04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c038:	4b08      	ldr	r3, [pc, #32]	; (800c05c <xTaskGetSchedulerState+0x38>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d102      	bne.n	800c046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c040:	2302      	movs	r3, #2
 800c042:	607b      	str	r3, [r7, #4]
 800c044:	e001      	b.n	800c04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c046:	2300      	movs	r3, #0
 800c048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c04a:	687b      	ldr	r3, [r7, #4]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	200018fc 	.word	0x200018fc
 800c05c:	20001918 	.word	0x20001918

0800c060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c06c:	2300      	movs	r3, #0
 800c06e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d05a      	beq.n	800c12c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c076:	4b30      	ldr	r3, [pc, #192]	; (800c138 <xTaskPriorityDisinherit+0xd8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d00c      	beq.n	800c09a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	b672      	cpsid	i
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	b662      	cpsie	i
 800c094:	60fb      	str	r3, [r7, #12]
}
 800c096:	bf00      	nop
 800c098:	e7fe      	b.n	800c098 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10c      	bne.n	800c0bc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	b672      	cpsid	i
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	b662      	cpsie	i
 800c0b6:	60bb      	str	r3, [r7, #8]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c0:	1e5a      	subs	r2, r3, #1
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d02c      	beq.n	800c12c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d128      	bne.n	800c12c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fbc2 	bl	800a868 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <xTaskPriorityDisinherit+0xdc>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	429a      	cmp	r2, r3
 800c102:	d903      	bls.n	800c10c <xTaskPriorityDisinherit+0xac>
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	4a0c      	ldr	r2, [pc, #48]	; (800c13c <xTaskPriorityDisinherit+0xdc>)
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <xTaskPriorityDisinherit+0xe0>)
 800c11a:	441a      	add	r2, r3
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f7fe fb43 	bl	800a7ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c128:	2301      	movs	r3, #1
 800c12a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c12c:	697b      	ldr	r3, [r7, #20]
	}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	2000141c 	.word	0x2000141c
 800c13c:	200018f8 	.word	0x200018f8
 800c140:	20001420 	.word	0x20001420

0800c144 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c14e:	4b21      	ldr	r3, [pc, #132]	; (800c1d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c154:	4b20      	ldr	r3, [pc, #128]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3304      	adds	r3, #4
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fb84 	bl	800a868 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d10a      	bne.n	800c17e <prvAddCurrentTaskToDelayedList+0x3a>
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d007      	beq.n	800c17e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c16e:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3304      	adds	r3, #4
 800c174:	4619      	mov	r1, r3
 800c176:	4819      	ldr	r0, [pc, #100]	; (800c1dc <prvAddCurrentTaskToDelayedList+0x98>)
 800c178:	f7fe fb19 	bl	800a7ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c17c:	e026      	b.n	800c1cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4413      	add	r3, r2
 800c184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c186:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	429a      	cmp	r2, r3
 800c194:	d209      	bcs.n	800c1aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c196:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f7fe fb27 	bl	800a7f6 <vListInsert>
}
 800c1a8:	e010      	b.n	800c1cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1aa:	4b0e      	ldr	r3, [pc, #56]	; (800c1e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f7fe fb1d 	bl	800a7f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d202      	bcs.n	800c1cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1c6:	4a08      	ldr	r2, [pc, #32]	; (800c1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	6013      	str	r3, [r2, #0]
}
 800c1cc:	bf00      	nop
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	200018f4 	.word	0x200018f4
 800c1d8:	2000141c 	.word	0x2000141c
 800c1dc:	200018dc 	.word	0x200018dc
 800c1e0:	200018ac 	.word	0x200018ac
 800c1e4:	200018a8 	.word	0x200018a8
 800c1e8:	20001910 	.word	0x20001910

0800c1ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08a      	sub	sp, #40	; 0x28
 800c1f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c1f6:	f000 fb15 	bl	800c824 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c1fa:	4b1d      	ldr	r3, [pc, #116]	; (800c270 <xTimerCreateTimerTask+0x84>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d021      	beq.n	800c246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c20a:	1d3a      	adds	r2, r7, #4
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	f107 030c 	add.w	r3, r7, #12
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe fa83 	bl	800a720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	9202      	str	r2, [sp, #8]
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	2302      	movs	r3, #2
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	460a      	mov	r2, r1
 800c22c:	4911      	ldr	r1, [pc, #68]	; (800c274 <xTimerCreateTimerTask+0x88>)
 800c22e:	4812      	ldr	r0, [pc, #72]	; (800c278 <xTimerCreateTimerTask+0x8c>)
 800c230:	f7ff f890 	bl	800b354 <xTaskCreateStatic>
 800c234:	4603      	mov	r3, r0
 800c236:	4a11      	ldr	r2, [pc, #68]	; (800c27c <xTimerCreateTimerTask+0x90>)
 800c238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c23a:	4b10      	ldr	r3, [pc, #64]	; (800c27c <xTimerCreateTimerTask+0x90>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c242:	2301      	movs	r3, #1
 800c244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	613b      	str	r3, [r7, #16]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c266:	697b      	ldr	r3, [r7, #20]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	2000194c 	.word	0x2000194c
 800c274:	0800dfb0 	.word	0x0800dfb0
 800c278:	0800c3bd 	.word	0x0800c3bd
 800c27c:	20001950 	.word	0x20001950

0800c280 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08a      	sub	sp, #40	; 0x28
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c28e:	2300      	movs	r3, #0
 800c290:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10c      	bne.n	800c2b2 <xTimerGenericCommand+0x32>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	b672      	cpsid	i
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	b662      	cpsie	i
 800c2ac:	623b      	str	r3, [r7, #32]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2b2:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <xTimerGenericCommand+0x9c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d02a      	beq.n	800c310 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b05      	cmp	r3, #5
 800c2ca:	dc18      	bgt.n	800c2fe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2cc:	f7ff feaa 	bl	800c024 <xTaskGetSchedulerState>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d109      	bne.n	800c2ea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <xTimerGenericCommand+0x9c>)
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	f107 0110 	add.w	r1, r7, #16
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2e2:	f7fe fc3d 	bl	800ab60 <xQueueGenericSend>
 800c2e6:	6278      	str	r0, [r7, #36]	; 0x24
 800c2e8:	e012      	b.n	800c310 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2ea:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <xTimerGenericCommand+0x9c>)
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	f107 0110 	add.w	r1, r7, #16
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f7fe fc33 	bl	800ab60 <xQueueGenericSend>
 800c2fa:	6278      	str	r0, [r7, #36]	; 0x24
 800c2fc:	e008      	b.n	800c310 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2fe:	4b07      	ldr	r3, [pc, #28]	; (800c31c <xTimerGenericCommand+0x9c>)
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	f107 0110 	add.w	r1, r7, #16
 800c306:	2300      	movs	r3, #0
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	f7fe fd2f 	bl	800ad6c <xQueueGenericSendFromISR>
 800c30e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c312:	4618      	mov	r0, r3
 800c314:	3728      	adds	r7, #40	; 0x28
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000194c 	.word	0x2000194c

0800c320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af02      	add	r7, sp, #8
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c32a:	4b23      	ldr	r3, [pc, #140]	; (800c3b8 <prvProcessExpiredTimer+0x98>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	3304      	adds	r3, #4
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fa95 	bl	800a868 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d024      	beq.n	800c396 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	699a      	ldr	r2, [r3, #24]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	18d1      	adds	r1, r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	6978      	ldr	r0, [r7, #20]
 800c35a:	f000 f8d3 	bl	800c504 <prvInsertTimerInActiveList>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d021      	beq.n	800c3a8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c364:	2300      	movs	r3, #0
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	2300      	movs	r3, #0
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	2100      	movs	r1, #0
 800c36e:	6978      	ldr	r0, [r7, #20]
 800c370:	f7ff ff86 	bl	800c280 <xTimerGenericCommand>
 800c374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d115      	bne.n	800c3a8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	b672      	cpsid	i
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	b662      	cpsie	i
 800c390:	60fb      	str	r3, [r7, #12]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c39c:	f023 0301 	bic.w	r3, r3, #1
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	6978      	ldr	r0, [r7, #20]
 800c3ae:	4798      	blx	r3
}
 800c3b0:	bf00      	nop
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	20001944 	.word	0x20001944

0800c3bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3c4:	f107 0308 	add.w	r3, r7, #8
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f857 	bl	800c47c <prvGetNextExpireTime>
 800c3ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 f803 	bl	800c3e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3da:	f000 f8d5 	bl	800c588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3de:	e7f1      	b.n	800c3c4 <prvTimerTask+0x8>

0800c3e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3ea:	f7ff fa1d 	bl	800b828 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3ee:	f107 0308 	add.w	r3, r7, #8
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 f866 	bl	800c4c4 <prvSampleTimeNow>
 800c3f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d130      	bne.n	800c462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10a      	bne.n	800c41c <prvProcessTimerOrBlockTask+0x3c>
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d806      	bhi.n	800c41c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c40e:	f7ff fa19 	bl	800b844 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c412:	68f9      	ldr	r1, [r7, #12]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff ff83 	bl	800c320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c41a:	e024      	b.n	800c466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d008      	beq.n	800c434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <prvProcessTimerOrBlockTask+0x90>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <prvProcessTimerOrBlockTask+0x50>
 800c42c:	2301      	movs	r3, #1
 800c42e:	e000      	b.n	800c432 <prvProcessTimerOrBlockTask+0x52>
 800c430:	2300      	movs	r3, #0
 800c432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c434:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <prvProcessTimerOrBlockTask+0x94>)
 800c436:	6818      	ldr	r0, [r3, #0]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	4619      	mov	r1, r3
 800c442:	f7fe ff53 	bl	800b2ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c446:	f7ff f9fd 	bl	800b844 <xTaskResumeAll>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c450:	4b09      	ldr	r3, [pc, #36]	; (800c478 <prvProcessTimerOrBlockTask+0x98>)
 800c452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
}
 800c460:	e001      	b.n	800c466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c462:	f7ff f9ef 	bl	800b844 <xTaskResumeAll>
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20001948 	.word	0x20001948
 800c474:	2000194c 	.word	0x2000194c
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <prvGetNextExpireTime+0x44>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <prvGetNextExpireTime+0x16>
 800c48e:	2201      	movs	r2, #1
 800c490:	e000      	b.n	800c494 <prvGetNextExpireTime+0x18>
 800c492:	2200      	movs	r2, #0
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d105      	bne.n	800c4ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <prvGetNextExpireTime+0x44>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e001      	b.n	800c4b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	20001944 	.word	0x20001944

0800c4c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4cc:	f7ff fa5a 	bl	800b984 <xTaskGetTickCount>
 800c4d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <prvSampleTimeNow+0x3c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d205      	bcs.n	800c4e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4dc:	f000 f93c 	bl	800c758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	e002      	b.n	800c4ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4ee:	4a04      	ldr	r2, [pc, #16]	; (800c500 <prvSampleTimeNow+0x3c>)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20001954 	.word	0x20001954

0800c504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	429a      	cmp	r2, r3
 800c528:	d812      	bhi.n	800c550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	1ad2      	subs	r2, r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	429a      	cmp	r2, r3
 800c536:	d302      	bcc.n	800c53e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c538:	2301      	movs	r3, #1
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	e01b      	b.n	800c576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c53e:	4b10      	ldr	r3, [pc, #64]	; (800c580 <prvInsertTimerInActiveList+0x7c>)
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3304      	adds	r3, #4
 800c546:	4619      	mov	r1, r3
 800c548:	4610      	mov	r0, r2
 800c54a:	f7fe f954 	bl	800a7f6 <vListInsert>
 800c54e:	e012      	b.n	800c576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	429a      	cmp	r2, r3
 800c556:	d206      	bcs.n	800c566 <prvInsertTimerInActiveList+0x62>
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d302      	bcc.n	800c566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c560:	2301      	movs	r3, #1
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	e007      	b.n	800c576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c566:	4b07      	ldr	r3, [pc, #28]	; (800c584 <prvInsertTimerInActiveList+0x80>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4619      	mov	r1, r3
 800c570:	4610      	mov	r0, r2
 800c572:	f7fe f940 	bl	800a7f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c576:	697b      	ldr	r3, [r7, #20]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20001948 	.word	0x20001948
 800c584:	20001944 	.word	0x20001944

0800c588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08e      	sub	sp, #56	; 0x38
 800c58c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c58e:	e0d0      	b.n	800c732 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	da1a      	bge.n	800c5cc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c596:	1d3b      	adds	r3, r7, #4
 800c598:	3304      	adds	r3, #4
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	b672      	cpsid	i
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	b662      	cpsie	i
 800c5b6:	61fb      	str	r3, [r7, #28]
}
 800c5b8:	bf00      	nop
 800c5ba:	e7fe      	b.n	800c5ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c2:	6850      	ldr	r0, [r2, #4]
 800c5c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c6:	6892      	ldr	r2, [r2, #8]
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f2c0 80ae 	blt.w	800c730 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe f93f 	bl	800a868 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ea:	463b      	mov	r3, r7
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff ff69 	bl	800c4c4 <prvSampleTimeNow>
 800c5f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	f200 809b 	bhi.w	800c732 <prvProcessReceivedCommands+0x1aa>
 800c5fc:	a201      	add	r2, pc, #4	; (adr r2, 800c604 <prvProcessReceivedCommands+0x7c>)
 800c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c602:	bf00      	nop
 800c604:	0800c62d 	.word	0x0800c62d
 800c608:	0800c62d 	.word	0x0800c62d
 800c60c:	0800c62d 	.word	0x0800c62d
 800c610:	0800c6a5 	.word	0x0800c6a5
 800c614:	0800c6b9 	.word	0x0800c6b9
 800c618:	0800c707 	.word	0x0800c707
 800c61c:	0800c62d 	.word	0x0800c62d
 800c620:	0800c62d 	.word	0x0800c62d
 800c624:	0800c6a5 	.word	0x0800c6a5
 800c628:	0800c6b9 	.word	0x0800c6b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	b2da      	uxtb	r2, r3
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	18d1      	adds	r1, r2, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64c:	f7ff ff5a 	bl	800c504 <prvInsertTimerInActiveList>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d06d      	beq.n	800c732 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d062      	beq.n	800c732 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	441a      	add	r2, r3
 800c674:	2300      	movs	r3, #0
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	2300      	movs	r3, #0
 800c67a:	2100      	movs	r1, #0
 800c67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c67e:	f7ff fdff 	bl	800c280 <xTimerGenericCommand>
 800c682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d153      	bne.n	800c732 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	b672      	cpsid	i
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	b662      	cpsie	i
 800c69e:	61bb      	str	r3, [r7, #24]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6aa:	f023 0301 	bic.w	r3, r3, #1
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c6b6:	e03c      	b.n	800c732 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6be:	f043 0301 	orr.w	r3, r3, #1
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10c      	bne.n	800c6f2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	b672      	cpsid	i
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	b662      	cpsie	i
 800c6ec:	617b      	str	r3, [r7, #20]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	699a      	ldr	r2, [r3, #24]
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	18d1      	adds	r1, r2, r3
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c700:	f7ff ff00 	bl	800c504 <prvInsertTimerInActiveList>
					break;
 800c704:	e015      	b.n	800c732 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d103      	bne.n	800c71c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c716:	f000 fbc7 	bl	800cea8 <vPortFree>
 800c71a:	e00a      	b.n	800c732 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c722:	f023 0301 	bic.w	r3, r3, #1
 800c726:	b2da      	uxtb	r2, r3
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c72e:	e000      	b.n	800c732 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c732:	4b08      	ldr	r3, [pc, #32]	; (800c754 <prvProcessReceivedCommands+0x1cc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	1d39      	adds	r1, r7, #4
 800c738:	2200      	movs	r2, #0
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fe fbb6 	bl	800aeac <xQueueReceive>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	f47f af24 	bne.w	800c590 <prvProcessReceivedCommands+0x8>
	}
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	3730      	adds	r7, #48	; 0x30
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	2000194c 	.word	0x2000194c

0800c758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b088      	sub	sp, #32
 800c75c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c75e:	e04a      	b.n	800c7f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c760:	4b2e      	ldr	r3, [pc, #184]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c76a:	4b2c      	ldr	r3, [pc, #176]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3304      	adds	r3, #4
 800c778:	4618      	mov	r0, r3
 800c77a:	f7fe f875 	bl	800a868 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d030      	beq.n	800c7f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	4413      	add	r3, r2
 800c79c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d90e      	bls.n	800c7c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7b2:	4b1a      	ldr	r3, [pc, #104]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7fe f81a 	bl	800a7f6 <vListInsert>
 800c7c2:	e018      	b.n	800c7f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f7ff fd56 	bl	800c280 <xTimerGenericCommand>
 800c7d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10c      	bne.n	800c7f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	b672      	cpsid	i
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	b662      	cpsie	i
 800c7f0:	603b      	str	r3, [r7, #0]
}
 800c7f2:	bf00      	nop
 800c7f4:	e7fe      	b.n	800c7f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7f6:	4b09      	ldr	r3, [pc, #36]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1af      	bne.n	800c760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c800:	4b06      	ldr	r3, [pc, #24]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c806:	4b06      	ldr	r3, [pc, #24]	; (800c820 <prvSwitchTimerLists+0xc8>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a04      	ldr	r2, [pc, #16]	; (800c81c <prvSwitchTimerLists+0xc4>)
 800c80c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c80e:	4a04      	ldr	r2, [pc, #16]	; (800c820 <prvSwitchTimerLists+0xc8>)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	6013      	str	r3, [r2, #0]
}
 800c814:	bf00      	nop
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20001944 	.word	0x20001944
 800c820:	20001948 	.word	0x20001948

0800c824 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c82a:	f000 f947 	bl	800cabc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c82e:	4b15      	ldr	r3, [pc, #84]	; (800c884 <prvCheckForValidListAndQueue+0x60>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d120      	bne.n	800c878 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c836:	4814      	ldr	r0, [pc, #80]	; (800c888 <prvCheckForValidListAndQueue+0x64>)
 800c838:	f7fd ff8c 	bl	800a754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c83c:	4813      	ldr	r0, [pc, #76]	; (800c88c <prvCheckForValidListAndQueue+0x68>)
 800c83e:	f7fd ff89 	bl	800a754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c842:	4b13      	ldr	r3, [pc, #76]	; (800c890 <prvCheckForValidListAndQueue+0x6c>)
 800c844:	4a10      	ldr	r2, [pc, #64]	; (800c888 <prvCheckForValidListAndQueue+0x64>)
 800c846:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c848:	4b12      	ldr	r3, [pc, #72]	; (800c894 <prvCheckForValidListAndQueue+0x70>)
 800c84a:	4a10      	ldr	r2, [pc, #64]	; (800c88c <prvCheckForValidListAndQueue+0x68>)
 800c84c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c84e:	2300      	movs	r3, #0
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	4b11      	ldr	r3, [pc, #68]	; (800c898 <prvCheckForValidListAndQueue+0x74>)
 800c854:	4a11      	ldr	r2, [pc, #68]	; (800c89c <prvCheckForValidListAndQueue+0x78>)
 800c856:	2110      	movs	r1, #16
 800c858:	200a      	movs	r0, #10
 800c85a:	f7fe f899 	bl	800a990 <xQueueGenericCreateStatic>
 800c85e:	4603      	mov	r3, r0
 800c860:	4a08      	ldr	r2, [pc, #32]	; (800c884 <prvCheckForValidListAndQueue+0x60>)
 800c862:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c864:	4b07      	ldr	r3, [pc, #28]	; (800c884 <prvCheckForValidListAndQueue+0x60>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d005      	beq.n	800c878 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c86c:	4b05      	ldr	r3, [pc, #20]	; (800c884 <prvCheckForValidListAndQueue+0x60>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	490b      	ldr	r1, [pc, #44]	; (800c8a0 <prvCheckForValidListAndQueue+0x7c>)
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe fd10 	bl	800b298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c878:	f000 f954 	bl	800cb24 <vPortExitCritical>
}
 800c87c:	bf00      	nop
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	2000194c 	.word	0x2000194c
 800c888:	2000191c 	.word	0x2000191c
 800c88c:	20001930 	.word	0x20001930
 800c890:	20001944 	.word	0x20001944
 800c894:	20001948 	.word	0x20001948
 800c898:	200019f8 	.word	0x200019f8
 800c89c:	20001958 	.word	0x20001958
 800c8a0:	0800dfb8 	.word	0x0800dfb8

0800c8a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3b04      	subs	r3, #4
 800c8b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3b04      	subs	r3, #4
 800c8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f023 0201 	bic.w	r2, r3, #1
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3b04      	subs	r3, #4
 800c8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <pxPortInitialiseStack+0x64>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3b14      	subs	r3, #20
 800c8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3b04      	subs	r3, #4
 800c8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f06f 0202 	mvn.w	r2, #2
 800c8f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3b20      	subs	r3, #32
 800c8f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	0800c90d 	.word	0x0800c90d

0800c90c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <prvTaskExitError+0x5c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91e:	d00c      	beq.n	800c93a <prvTaskExitError+0x2e>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	60fb      	str	r3, [r7, #12]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvTaskExitError+0x2c>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	b672      	cpsid	i
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	b662      	cpsie	i
 800c94e:	60bb      	str	r3, [r7, #8]
}
 800c950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c952:	bf00      	nop
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0fc      	beq.n	800c954 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c95a:	bf00      	nop
 800c95c:	bf00      	nop
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	20000098 	.word	0x20000098
 800c96c:	00000000 	.word	0x00000000

0800c970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c970:	4b07      	ldr	r3, [pc, #28]	; (800c990 <pxCurrentTCBConst2>)
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	6808      	ldr	r0, [r1, #0]
 800c976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97a:	f380 8809 	msr	PSP, r0
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8811 	msr	BASEPRI, r0
 800c98a:	4770      	bx	lr
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst2>:
 800c990:	2000141c 	.word	0x2000141c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c998:	4808      	ldr	r0, [pc, #32]	; (800c9bc <prvPortStartFirstTask+0x24>)
 800c99a:	6800      	ldr	r0, [r0, #0]
 800c99c:	6800      	ldr	r0, [r0, #0]
 800c99e:	f380 8808 	msr	MSP, r0
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8814 	msr	CONTROL, r0
 800c9aa:	b662      	cpsie	i
 800c9ac:	b661      	cpsie	f
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	df00      	svc	0
 800c9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9ba:	bf00      	nop
 800c9bc:	e000ed08 	.word	0xe000ed08

0800c9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9c6:	4b37      	ldr	r3, [pc, #220]	; (800caa4 <xPortStartScheduler+0xe4>)
 800c9c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	22ff      	movs	r2, #255	; 0xff
 800c9d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9e0:	78fb      	ldrb	r3, [r7, #3]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	4b2f      	ldr	r3, [pc, #188]	; (800caa8 <xPortStartScheduler+0xe8>)
 800c9ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ee:	4b2f      	ldr	r3, [pc, #188]	; (800caac <xPortStartScheduler+0xec>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9f4:	e009      	b.n	800ca0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c9f6:	4b2d      	ldr	r3, [pc, #180]	; (800caac <xPortStartScheduler+0xec>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	4a2b      	ldr	r2, [pc, #172]	; (800caac <xPortStartScheduler+0xec>)
 800c9fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca0a:	78fb      	ldrb	r3, [r7, #3]
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca12:	2b80      	cmp	r3, #128	; 0x80
 800ca14:	d0ef      	beq.n	800c9f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca16:	4b25      	ldr	r3, [pc, #148]	; (800caac <xPortStartScheduler+0xec>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f1c3 0307 	rsb	r3, r3, #7
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d00c      	beq.n	800ca3c <xPortStartScheduler+0x7c>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	b672      	cpsid	i
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	b662      	cpsie	i
 800ca36:	60bb      	str	r3, [r7, #8]
}
 800ca38:	bf00      	nop
 800ca3a:	e7fe      	b.n	800ca3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca3c:	4b1b      	ldr	r3, [pc, #108]	; (800caac <xPortStartScheduler+0xec>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	4a1a      	ldr	r2, [pc, #104]	; (800caac <xPortStartScheduler+0xec>)
 800ca44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca46:	4b19      	ldr	r3, [pc, #100]	; (800caac <xPortStartScheduler+0xec>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca4e:	4a17      	ldr	r2, [pc, #92]	; (800caac <xPortStartScheduler+0xec>)
 800ca50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca5a:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <xPortStartScheduler+0xf0>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a14      	ldr	r2, [pc, #80]	; (800cab0 <xPortStartScheduler+0xf0>)
 800ca60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca66:	4b12      	ldr	r3, [pc, #72]	; (800cab0 <xPortStartScheduler+0xf0>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a11      	ldr	r2, [pc, #68]	; (800cab0 <xPortStartScheduler+0xf0>)
 800ca6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca72:	f000 f8dd 	bl	800cc30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca76:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <xPortStartScheduler+0xf4>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca7c:	f000 f8fc 	bl	800cc78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca80:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <xPortStartScheduler+0xf8>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a0c      	ldr	r2, [pc, #48]	; (800cab8 <xPortStartScheduler+0xf8>)
 800ca86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca8c:	f7ff ff84 	bl	800c998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca90:	f7ff f844 	bl	800bb1c <vTaskSwitchContext>
	prvTaskExitError();
 800ca94:	f7ff ff3a 	bl	800c90c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	e000e400 	.word	0xe000e400
 800caa8:	20001a48 	.word	0x20001a48
 800caac:	20001a4c 	.word	0x20001a4c
 800cab0:	e000ed20 	.word	0xe000ed20
 800cab4:	20000098 	.word	0x20000098
 800cab8:	e000ef34 	.word	0xe000ef34

0800cabc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	b672      	cpsid	i
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	b662      	cpsie	i
 800cad6:	607b      	str	r3, [r7, #4]
}
 800cad8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cada:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <vPortEnterCritical+0x60>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3301      	adds	r3, #1
 800cae0:	4a0e      	ldr	r2, [pc, #56]	; (800cb1c <vPortEnterCritical+0x60>)
 800cae2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cae4:	4b0d      	ldr	r3, [pc, #52]	; (800cb1c <vPortEnterCritical+0x60>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d111      	bne.n	800cb10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800caec:	4b0c      	ldr	r3, [pc, #48]	; (800cb20 <vPortEnterCritical+0x64>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00c      	beq.n	800cb10 <vPortEnterCritical+0x54>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	b672      	cpsid	i
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	b662      	cpsie	i
 800cb0a:	603b      	str	r3, [r7, #0]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <vPortEnterCritical+0x52>
	}
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20000098 	.word	0x20000098
 800cb20:	e000ed04 	.word	0xe000ed04

0800cb24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb2a:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <vPortExitCritical+0x54>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10c      	bne.n	800cb4c <vPortExitCritical+0x28>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	b672      	cpsid	i
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	b662      	cpsie	i
 800cb46:	607b      	str	r3, [r7, #4]
}
 800cb48:	bf00      	nop
 800cb4a:	e7fe      	b.n	800cb4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <vPortExitCritical+0x54>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	4a09      	ldr	r2, [pc, #36]	; (800cb78 <vPortExitCritical+0x54>)
 800cb54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb56:	4b08      	ldr	r3, [pc, #32]	; (800cb78 <vPortExitCritical+0x54>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <vPortExitCritical+0x46>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f383 8811 	msr	BASEPRI, r3
}
 800cb68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	20000098 	.word	0x20000098
 800cb7c:	00000000 	.word	0x00000000

0800cb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb80:	f3ef 8009 	mrs	r0, PSP
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <pxCurrentTCBConst>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	f01e 0f10 	tst.w	lr, #16
 800cb90:	bf08      	it	eq
 800cb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	6010      	str	r0, [r2, #0]
 800cb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cba4:	b672      	cpsid	i
 800cba6:	f380 8811 	msr	BASEPRI, r0
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	b662      	cpsie	i
 800cbb4:	f7fe ffb2 	bl	800bb1c <vTaskSwitchContext>
 800cbb8:	f04f 0000 	mov.w	r0, #0
 800cbbc:	f380 8811 	msr	BASEPRI, r0
 800cbc0:	bc09      	pop	{r0, r3}
 800cbc2:	6819      	ldr	r1, [r3, #0]
 800cbc4:	6808      	ldr	r0, [r1, #0]
 800cbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbca:	f01e 0f10 	tst.w	lr, #16
 800cbce:	bf08      	it	eq
 800cbd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbd4:	f380 8809 	msr	PSP, r0
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <pxCurrentTCBConst>:
 800cbe0:	2000141c 	.word	0x2000141c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	b672      	cpsid	i
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	b662      	cpsie	i
 800cc02:	607b      	str	r3, [r7, #4]
}
 800cc04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc06:	f7fe fecd 	bl	800b9a4 <xTaskIncrementTick>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc10:	4b06      	ldr	r3, [pc, #24]	; (800cc2c <SysTick_Handler+0x44>)
 800cc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	f383 8811 	msr	BASEPRI, r3
}
 800cc22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	e000ed04 	.word	0xe000ed04

0800cc30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc34:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <vPortSetupTimerInterrupt+0x34>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc3a:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <vPortSetupTimerInterrupt+0x38>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc40:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <vPortSetupTimerInterrupt+0x3c>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a0a      	ldr	r2, [pc, #40]	; (800cc70 <vPortSetupTimerInterrupt+0x40>)
 800cc46:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4a:	099b      	lsrs	r3, r3, #6
 800cc4c:	4a09      	ldr	r2, [pc, #36]	; (800cc74 <vPortSetupTimerInterrupt+0x44>)
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc52:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <vPortSetupTimerInterrupt+0x34>)
 800cc54:	2207      	movs	r2, #7
 800cc56:	601a      	str	r2, [r3, #0]
}
 800cc58:	bf00      	nop
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	e000e010 	.word	0xe000e010
 800cc68:	e000e018 	.word	0xe000e018
 800cc6c:	20000000 	.word	0x20000000
 800cc70:	10624dd3 	.word	0x10624dd3
 800cc74:	e000e014 	.word	0xe000e014

0800cc78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc88 <vPortEnableVFP+0x10>
 800cc7c:	6801      	ldr	r1, [r0, #0]
 800cc7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc82:	6001      	str	r1, [r0, #0]
 800cc84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc86:	bf00      	nop
 800cc88:	e000ed88 	.word	0xe000ed88

0800cc8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc92:	f3ef 8305 	mrs	r3, IPSR
 800cc96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b0f      	cmp	r3, #15
 800cc9c:	d916      	bls.n	800cccc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc9e:	4a19      	ldr	r2, [pc, #100]	; (800cd04 <vPortValidateInterruptPriority+0x78>)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4413      	add	r3, r2
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cca8:	4b17      	ldr	r3, [pc, #92]	; (800cd08 <vPortValidateInterruptPriority+0x7c>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	7afa      	ldrb	r2, [r7, #11]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d20c      	bcs.n	800cccc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	b672      	cpsid	i
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	b662      	cpsie	i
 800ccc6:	607b      	str	r3, [r7, #4]
}
 800ccc8:	bf00      	nop
 800ccca:	e7fe      	b.n	800ccca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cccc:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <vPortValidateInterruptPriority+0x80>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ccd4:	4b0e      	ldr	r3, [pc, #56]	; (800cd10 <vPortValidateInterruptPriority+0x84>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d90c      	bls.n	800ccf6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	b672      	cpsid	i
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	b662      	cpsie	i
 800ccf0:	603b      	str	r3, [r7, #0]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <vPortValidateInterruptPriority+0x68>
	}
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	e000e3f0 	.word	0xe000e3f0
 800cd08:	20001a48 	.word	0x20001a48
 800cd0c:	e000ed0c 	.word	0xe000ed0c
 800cd10:	20001a4c 	.word	0x20001a4c

0800cd14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	; 0x28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd20:	f7fe fd82 	bl	800b828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd24:	4b5b      	ldr	r3, [pc, #364]	; (800ce94 <pvPortMalloc+0x180>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd2c:	f000 f91a 	bl	800cf64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd30:	4b59      	ldr	r3, [pc, #356]	; (800ce98 <pvPortMalloc+0x184>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4013      	ands	r3, r2
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f040 8092 	bne.w	800ce62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01f      	beq.n	800cd84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800cd44:	2208      	movs	r2, #8
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4413      	add	r3, r2
 800cd4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f023 0307 	bic.w	r3, r3, #7
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f003 0307 	and.w	r3, r3, #7
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00c      	beq.n	800cd84 <pvPortMalloc+0x70>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	b672      	cpsid	i
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	b662      	cpsie	i
 800cd7e:	617b      	str	r3, [r7, #20]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d06b      	beq.n	800ce62 <pvPortMalloc+0x14e>
 800cd8a:	4b44      	ldr	r3, [pc, #272]	; (800ce9c <pvPortMalloc+0x188>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d866      	bhi.n	800ce62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd94:	4b42      	ldr	r3, [pc, #264]	; (800cea0 <pvPortMalloc+0x18c>)
 800cd96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd98:	4b41      	ldr	r3, [pc, #260]	; (800cea0 <pvPortMalloc+0x18c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd9e:	e004      	b.n	800cdaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d903      	bls.n	800cdbc <pvPortMalloc+0xa8>
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f1      	bne.n	800cda0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdbc:	4b35      	ldr	r3, [pc, #212]	; (800ce94 <pvPortMalloc+0x180>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d04d      	beq.n	800ce62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2208      	movs	r2, #8
 800cdcc:	4413      	add	r3, r2
 800cdce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	2308      	movs	r3, #8
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d921      	bls.n	800ce2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4413      	add	r3, r2
 800cdee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00c      	beq.n	800ce14 <pvPortMalloc+0x100>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	b672      	cpsid	i
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	b662      	cpsie	i
 800ce0e:	613b      	str	r3, [r7, #16]
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	1ad2      	subs	r2, r2, r3
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce26:	69b8      	ldr	r0, [r7, #24]
 800ce28:	f000 f8fe 	bl	800d028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce2c:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <pvPortMalloc+0x188>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	4a19      	ldr	r2, [pc, #100]	; (800ce9c <pvPortMalloc+0x188>)
 800ce38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce3a:	4b18      	ldr	r3, [pc, #96]	; (800ce9c <pvPortMalloc+0x188>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	4b19      	ldr	r3, [pc, #100]	; (800cea4 <pvPortMalloc+0x190>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d203      	bcs.n	800ce4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce46:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <pvPortMalloc+0x188>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a16      	ldr	r2, [pc, #88]	; (800cea4 <pvPortMalloc+0x190>)
 800ce4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <pvPortMalloc+0x184>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	431a      	orrs	r2, r3
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2200      	movs	r2, #0
 800ce60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce62:	f7fe fcef 	bl	800b844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00c      	beq.n	800ce8a <pvPortMalloc+0x176>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	60fb      	str	r3, [r7, #12]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <pvPortMalloc+0x174>
	return pvReturn;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3728      	adds	r7, #40	; 0x28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20005658 	.word	0x20005658
 800ce98:	20005664 	.word	0x20005664
 800ce9c:	2000565c 	.word	0x2000565c
 800cea0:	20005650 	.word	0x20005650
 800cea4:	20005660 	.word	0x20005660

0800cea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d04c      	beq.n	800cf54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ceba:	2308      	movs	r3, #8
 800cebc:	425b      	negs	r3, r3
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	4413      	add	r3, r2
 800cec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b23      	ldr	r3, [pc, #140]	; (800cf5c <vPortFree+0xb4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4013      	ands	r3, r2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10c      	bne.n	800cef0 <vPortFree+0x48>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	b672      	cpsid	i
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	b662      	cpsie	i
 800ceea:	60fb      	str	r3, [r7, #12]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00c      	beq.n	800cf12 <vPortFree+0x6a>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	b672      	cpsid	i
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	b662      	cpsie	i
 800cf0c:	60bb      	str	r3, [r7, #8]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	4b11      	ldr	r3, [pc, #68]	; (800cf5c <vPortFree+0xb4>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d019      	beq.n	800cf54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d115      	bne.n	800cf54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	4b0b      	ldr	r3, [pc, #44]	; (800cf5c <vPortFree+0xb4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	43db      	mvns	r3, r3
 800cf32:	401a      	ands	r2, r3
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf38:	f7fe fc76 	bl	800b828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <vPortFree+0xb8>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4413      	add	r3, r2
 800cf46:	4a06      	ldr	r2, [pc, #24]	; (800cf60 <vPortFree+0xb8>)
 800cf48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf4a:	6938      	ldr	r0, [r7, #16]
 800cf4c:	f000 f86c 	bl	800d028 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf50:	f7fe fc78 	bl	800b844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf54:	bf00      	nop
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20005664 	.word	0x20005664
 800cf60:	2000565c 	.word	0x2000565c

0800cf64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf70:	4b27      	ldr	r3, [pc, #156]	; (800d010 <prvHeapInit+0xac>)
 800cf72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f003 0307 	and.w	r3, r3, #7
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00c      	beq.n	800cf98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3307      	adds	r3, #7
 800cf82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0307 	bic.w	r3, r3, #7
 800cf8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	4a1f      	ldr	r2, [pc, #124]	; (800d010 <prvHeapInit+0xac>)
 800cf94:	4413      	add	r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf9c:	4a1d      	ldr	r2, [pc, #116]	; (800d014 <prvHeapInit+0xb0>)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfa2:	4b1c      	ldr	r3, [pc, #112]	; (800d014 <prvHeapInit+0xb0>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	4413      	add	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f023 0307 	bic.w	r3, r3, #7
 800cfbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4a15      	ldr	r2, [pc, #84]	; (800d018 <prvHeapInit+0xb4>)
 800cfc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <prvHeapInit+0xb4>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfce:	4b12      	ldr	r3, [pc, #72]	; (800d018 <prvHeapInit+0xb4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	1ad2      	subs	r2, r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <prvHeapInit+0xb4>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <prvHeapInit+0xb8>)
 800cff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <prvHeapInit+0xbc>)
 800cffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <prvHeapInit+0xc0>)
 800cffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d002:	601a      	str	r2, [r3, #0]
}
 800d004:	bf00      	nop
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	20001a50 	.word	0x20001a50
 800d014:	20005650 	.word	0x20005650
 800d018:	20005658 	.word	0x20005658
 800d01c:	20005660 	.word	0x20005660
 800d020:	2000565c 	.word	0x2000565c
 800d024:	20005664 	.word	0x20005664

0800d028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d030:	4b28      	ldr	r3, [pc, #160]	; (800d0d4 <prvInsertBlockIntoFreeList+0xac>)
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	e002      	b.n	800d03c <prvInsertBlockIntoFreeList+0x14>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	429a      	cmp	r2, r3
 800d044:	d8f7      	bhi.n	800d036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4413      	add	r3, r2
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	429a      	cmp	r2, r3
 800d056:	d108      	bne.n	800d06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	441a      	add	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	441a      	add	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d118      	bne.n	800d0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d00d      	beq.n	800d0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	441a      	add	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e008      	b.n	800d0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e003      	b.n	800d0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d002      	beq.n	800d0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0c6:	bf00      	nop
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20005650 	.word	0x20005650
 800d0d8:	20005658 	.word	0x20005658

0800d0dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4912      	ldr	r1, [pc, #72]	; (800d12c <MX_USB_DEVICE_Init+0x50>)
 800d0e4:	4812      	ldr	r0, [pc, #72]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d0e6:	f7fb fda5 	bl	8008c34 <USBD_Init>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d0f0:	f7f3 fef4 	bl	8000edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d0f4:	490f      	ldr	r1, [pc, #60]	; (800d134 <MX_USB_DEVICE_Init+0x58>)
 800d0f6:	480e      	ldr	r0, [pc, #56]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d0f8:	f7fb fdcc 	bl	8008c94 <USBD_RegisterClass>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d102:	f7f3 feeb 	bl	8000edc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d106:	490c      	ldr	r1, [pc, #48]	; (800d138 <MX_USB_DEVICE_Init+0x5c>)
 800d108:	4809      	ldr	r0, [pc, #36]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d10a:	f7fb fd03 	bl	8008b14 <USBD_CDC_RegisterInterface>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d114:	f7f3 fee2 	bl	8000edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d118:	4805      	ldr	r0, [pc, #20]	; (800d130 <MX_USB_DEVICE_Init+0x54>)
 800d11a:	f7fb fdf1 	bl	8008d00 <USBD_Start>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d124:	f7f3 feda 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d128:	bf00      	nop
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	200000b0 	.word	0x200000b0
 800d130:	20005668 	.word	0x20005668
 800d134:	20000018 	.word	0x20000018
 800d138:	2000009c 	.word	0x2000009c

0800d13c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d140:	2200      	movs	r2, #0
 800d142:	4905      	ldr	r1, [pc, #20]	; (800d158 <CDC_Init_FS+0x1c>)
 800d144:	4805      	ldr	r0, [pc, #20]	; (800d15c <CDC_Init_FS+0x20>)
 800d146:	f7fb fcff 	bl	8008b48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d14a:	4905      	ldr	r1, [pc, #20]	; (800d160 <CDC_Init_FS+0x24>)
 800d14c:	4803      	ldr	r0, [pc, #12]	; (800d15c <CDC_Init_FS+0x20>)
 800d14e:	f7fb fd1d 	bl	8008b8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d152:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d154:	4618      	mov	r0, r3
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20006144 	.word	0x20006144
 800d15c:	20005668 	.word	0x20005668
 800d160:	20005944 	.word	0x20005944

0800d164 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d164:	b480      	push	{r7}
 800d166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d168:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	6039      	str	r1, [r7, #0]
 800d17e:	71fb      	strb	r3, [r7, #7]
 800d180:	4613      	mov	r3, r2
 800d182:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b23      	cmp	r3, #35	; 0x23
 800d188:	d84a      	bhi.n	800d220 <CDC_Control_FS+0xac>
 800d18a:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <CDC_Control_FS+0x1c>)
 800d18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d190:	0800d221 	.word	0x0800d221
 800d194:	0800d221 	.word	0x0800d221
 800d198:	0800d221 	.word	0x0800d221
 800d19c:	0800d221 	.word	0x0800d221
 800d1a0:	0800d221 	.word	0x0800d221
 800d1a4:	0800d221 	.word	0x0800d221
 800d1a8:	0800d221 	.word	0x0800d221
 800d1ac:	0800d221 	.word	0x0800d221
 800d1b0:	0800d221 	.word	0x0800d221
 800d1b4:	0800d221 	.word	0x0800d221
 800d1b8:	0800d221 	.word	0x0800d221
 800d1bc:	0800d221 	.word	0x0800d221
 800d1c0:	0800d221 	.word	0x0800d221
 800d1c4:	0800d221 	.word	0x0800d221
 800d1c8:	0800d221 	.word	0x0800d221
 800d1cc:	0800d221 	.word	0x0800d221
 800d1d0:	0800d221 	.word	0x0800d221
 800d1d4:	0800d221 	.word	0x0800d221
 800d1d8:	0800d221 	.word	0x0800d221
 800d1dc:	0800d221 	.word	0x0800d221
 800d1e0:	0800d221 	.word	0x0800d221
 800d1e4:	0800d221 	.word	0x0800d221
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d221 	.word	0x0800d221
 800d1f0:	0800d221 	.word	0x0800d221
 800d1f4:	0800d221 	.word	0x0800d221
 800d1f8:	0800d221 	.word	0x0800d221
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d221 	.word	0x0800d221
 800d204:	0800d221 	.word	0x0800d221
 800d208:	0800d221 	.word	0x0800d221
 800d20c:	0800d221 	.word	0x0800d221
 800d210:	0800d221 	.word	0x0800d221
 800d214:	0800d221 	.word	0x0800d221
 800d218:	0800d221 	.word	0x0800d221
 800d21c:	0800d221 	.word	0x0800d221
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d220:	bf00      	nop
  }

  return (USBD_OK);
 800d222:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	4813      	ldr	r0, [pc, #76]	; (800d28c <CDC_Receive_FS+0x5c>)
 800d23e:	f7fb fca5 	bl	8008b8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d242:	4812      	ldr	r0, [pc, #72]	; (800d28c <CDC_Receive_FS+0x5c>)
 800d244:	f7fb fcc0 	bl	8008bc8 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 800d24e:	4b10      	ldr	r3, [pc, #64]	; (800d290 <CDC_Receive_FS+0x60>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d015      	beq.n	800d282 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', 32);						//Clear msg-obj
 800d256:	f107 0308 	add.w	r3, r7, #8
 800d25a:	2220      	movs	r2, #32
 800d25c:	2100      	movs	r1, #0
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fd04 	bl	800dc6c <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 800d264:	7bfa      	ldrb	r2, [r7, #15]
 800d266:	f107 0308 	add.w	r3, r7, #8
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 fcef 	bl	800dc50 <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 800d272:	4b07      	ldr	r3, [pc, #28]	; (800d290 <CDC_Receive_FS+0x60>)
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f107 0108 	add.w	r1, r7, #8
 800d27a:	2300      	movs	r3, #0
 800d27c:	2200      	movs	r2, #0
 800d27e:	f7fd f9c1 	bl	800a604 <osMessageQueuePut>

  	}

  return (USBD_OK);
 800d282:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	20005668 	.word	0x20005668
 800d290:	200005f8 	.word	0x200005f8

0800d294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	6039      	str	r1, [r7, #0]
 800d2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2212      	movs	r2, #18
 800d2c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ca:	4b03      	ldr	r3, [pc, #12]	; (800d2d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	200000d0 	.word	0x200000d0

0800d2dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	6039      	str	r1, [r7, #0]
 800d2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2ee:	4b03      	ldr	r3, [pc, #12]	; (800d2fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	200000f0 	.word	0x200000f0

0800d300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4907      	ldr	r1, [pc, #28]	; (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
 800d316:	4808      	ldr	r0, [pc, #32]	; (800d338 <USBD_FS_ProductStrDescriptor+0x38>)
 800d318:	f7fc fec8 	bl	800a0ac <USBD_GetString>
 800d31c:	e004      	b.n	800d328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4904      	ldr	r1, [pc, #16]	; (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
 800d322:	4805      	ldr	r0, [pc, #20]	; (800d338 <USBD_FS_ProductStrDescriptor+0x38>)
 800d324:	f7fc fec2 	bl	800a0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d328:	4b02      	ldr	r3, [pc, #8]	; (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20006944 	.word	0x20006944
 800d338:	0800dfc0 	.word	0x0800dfc0

0800d33c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	4904      	ldr	r1, [pc, #16]	; (800d35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d34c:	4804      	ldr	r0, [pc, #16]	; (800d360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d34e:	f7fc fead 	bl	800a0ac <USBD_GetString>
  return USBD_StrDesc;
 800d352:	4b02      	ldr	r3, [pc, #8]	; (800d35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	20006944 	.word	0x20006944
 800d360:	0800dfd4 	.word	0x0800dfd4

0800d364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	221a      	movs	r2, #26
 800d374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d376:	f000 f855 	bl	800d424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d37a:	4b02      	ldr	r3, [pc, #8]	; (800d384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200000f4 	.word	0x200000f4

0800d388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	6039      	str	r1, [r7, #0]
 800d392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d105      	bne.n	800d3a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	4907      	ldr	r1, [pc, #28]	; (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d39e:	4808      	ldr	r0, [pc, #32]	; (800d3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3a0:	f7fc fe84 	bl	800a0ac <USBD_GetString>
 800d3a4:	e004      	b.n	800d3b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	4904      	ldr	r1, [pc, #16]	; (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3aa:	4805      	ldr	r0, [pc, #20]	; (800d3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3ac:	f7fc fe7e 	bl	800a0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3b0:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20006944 	.word	0x20006944
 800d3c0:	0800dfe8 	.word	0x0800dfe8

0800d3c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	6039      	str	r1, [r7, #0]
 800d3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d105      	bne.n	800d3e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	4907      	ldr	r1, [pc, #28]	; (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3da:	4808      	ldr	r0, [pc, #32]	; (800d3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3dc:	f7fc fe66 	bl	800a0ac <USBD_GetString>
 800d3e0:	e004      	b.n	800d3ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	4904      	ldr	r1, [pc, #16]	; (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3e6:	4805      	ldr	r0, [pc, #20]	; (800d3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3e8:	f7fc fe60 	bl	800a0ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	; (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20006944 	.word	0x20006944
 800d3fc:	0800dff4 	.word	0x0800dff4

0800d400 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	6039      	str	r1, [r7, #0]
 800d40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	220c      	movs	r2, #12
 800d410:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d412:	4b03      	ldr	r3, [pc, #12]	; (800d420 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	200000e4 	.word	0x200000e4

0800d424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d42a:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <Get_SerialNum+0x44>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d430:	4b0e      	ldr	r3, [pc, #56]	; (800d46c <Get_SerialNum+0x48>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d436:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <Get_SerialNum+0x4c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4413      	add	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d009      	beq.n	800d45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d44a:	2208      	movs	r2, #8
 800d44c:	4909      	ldr	r1, [pc, #36]	; (800d474 <Get_SerialNum+0x50>)
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 f814 	bl	800d47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d454:	2204      	movs	r2, #4
 800d456:	4908      	ldr	r1, [pc, #32]	; (800d478 <Get_SerialNum+0x54>)
 800d458:	68b8      	ldr	r0, [r7, #8]
 800d45a:	f000 f80f 	bl	800d47c <IntToUnicode>
  }
}
 800d45e:	bf00      	nop
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	1ff0f420 	.word	0x1ff0f420
 800d46c:	1ff0f424 	.word	0x1ff0f424
 800d470:	1ff0f428 	.word	0x1ff0f428
 800d474:	200000f6 	.word	0x200000f6
 800d478:	20000106 	.word	0x20000106

0800d47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e027      	b.n	800d4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	0f1b      	lsrs	r3, r3, #28
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d80b      	bhi.n	800d4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	0f1b      	lsrs	r3, r3, #28
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	440b      	add	r3, r1
 800d4ac:	3230      	adds	r2, #48	; 0x30
 800d4ae:	b2d2      	uxtb	r2, r2
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e00a      	b.n	800d4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	0f1b      	lsrs	r3, r3, #28
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3237      	adds	r2, #55	; 0x37
 800d4c6:	b2d2      	uxtb	r2, r2
 800d4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	011b      	lsls	r3, r3, #4
 800d4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4d0:	7dfb      	ldrb	r3, [r7, #23]
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	4413      	add	r3, r2
 800d4da:	2200      	movs	r2, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	75fb      	strb	r3, [r7, #23]
 800d4e4:	7dfa      	ldrb	r2, [r7, #23]
 800d4e6:	79fb      	ldrb	r3, [r7, #7]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d3d3      	bcc.n	800d494 <IntToUnicode+0x18>
  }
}
 800d4ec:	bf00      	nop
 800d4ee:	bf00      	nop
 800d4f0:	371c      	adds	r7, #28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
	...

0800d4fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b0ae      	sub	sp, #184	; 0xb8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d504:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	605a      	str	r2, [r3, #4]
 800d50e:	609a      	str	r2, [r3, #8]
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	2290      	movs	r2, #144	; 0x90
 800d51a:	2100      	movs	r1, #0
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 fba5 	bl	800dc6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d52a:	d151      	bne.n	800d5d0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d52c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d530:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d532:	2300      	movs	r3, #0
 800d534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d538:	f107 0314 	add.w	r3, r7, #20
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7f7 fa4d 	bl	80049dc <HAL_RCCEx_PeriphCLKConfig>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d001      	beq.n	800d54c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d548:	f7f3 fcc8 	bl	8000edc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d54c:	4b22      	ldr	r3, [pc, #136]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d550:	4a21      	ldr	r2, [pc, #132]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d552:	f043 0301 	orr.w	r3, r3, #1
 800d556:	6313      	str	r3, [r2, #48]	; 0x30
 800d558:	4b1f      	ldr	r3, [pc, #124]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	613b      	str	r3, [r7, #16]
 800d562:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d564:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d56c:	2302      	movs	r3, #2
 800d56e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d572:	2300      	movs	r3, #0
 800d574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d578:	2303      	movs	r3, #3
 800d57a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d57e:	230a      	movs	r3, #10
 800d580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d588:	4619      	mov	r1, r3
 800d58a:	4814      	ldr	r0, [pc, #80]	; (800d5dc <HAL_PCD_MspInit+0xe0>)
 800d58c:	f7f4 ff2a 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d590:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d594:	4a10      	ldr	r2, [pc, #64]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d59a:	6353      	str	r3, [r2, #52]	; 0x34
 800d59c:	4b0e      	ldr	r3, [pc, #56]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d5ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5b2:	6453      	str	r3, [r2, #68]	; 0x44
 800d5b4:	4b08      	ldr	r3, [pc, #32]	; (800d5d8 <HAL_PCD_MspInit+0xdc>)
 800d5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5bc:	60bb      	str	r3, [r7, #8]
 800d5be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2105      	movs	r1, #5
 800d5c4:	2043      	movs	r0, #67	; 0x43
 800d5c6:	f7f4 fadd 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5ca:	2043      	movs	r0, #67	; 0x43
 800d5cc:	f7f4 faf6 	bl	8001bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5d0:	bf00      	nop
 800d5d2:	37b8      	adds	r7, #184	; 0xb8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	40023800 	.word	0x40023800
 800d5dc:	40020000 	.word	0x40020000

0800d5e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7fb fbcf 	bl	8008d9a <USBD_LL_SetupStage>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d616:	78fa      	ldrb	r2, [r7, #3]
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	4613      	mov	r3, r2
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	440b      	add	r3, r1
 800d624:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	78fb      	ldrb	r3, [r7, #3]
 800d62c:	4619      	mov	r1, r3
 800d62e:	f7fb fc09 	bl	8008e44 <USBD_LL_DataOutStage>
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	460b      	mov	r3, r1
 800d644:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d64c:	78fa      	ldrb	r2, [r7, #3]
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	4613      	mov	r3, r2
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	4413      	add	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	440b      	add	r3, r1
 800d65a:	334c      	adds	r3, #76	; 0x4c
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	78fb      	ldrb	r3, [r7, #3]
 800d660:	4619      	mov	r1, r3
 800d662:	f7fb fca2 	bl	8008faa <USBD_LL_DataInStage>
}
 800d666:	bf00      	nop
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fb fdd6 	bl	800922e <USBD_LL_SOF>
}
 800d682:	bf00      	nop
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d692:	2301      	movs	r3, #1
 800d694:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	73fb      	strb	r3, [r7, #15]
 800d6a2:	e008      	b.n	800d6b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d102      	bne.n	800d6b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	73fb      	strb	r3, [r7, #15]
 800d6b0:	e001      	b.n	800d6b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6b2:	f7f3 fc13 	bl	8000edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6bc:	7bfa      	ldrb	r2, [r7, #15]
 800d6be:	4611      	mov	r1, r2
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fb fd76 	bl	80091b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fb fd1e 	bl	800910e <USBD_LL_Reset>
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fb fd71 	bl	80091d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6812      	ldr	r2, [r2, #0]
 800d6fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d702:	f043 0301 	orr.w	r3, r3, #1
 800d706:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d005      	beq.n	800d71c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d710:	4b04      	ldr	r3, [pc, #16]	; (800d724 <HAL_PCD_SuspendCallback+0x48>)
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	4a03      	ldr	r2, [pc, #12]	; (800d724 <HAL_PCD_SuspendCallback+0x48>)
 800d716:	f043 0306 	orr.w	r3, r3, #6
 800d71a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	e000ed00 	.word	0xe000ed00

0800d728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d736:	4618      	mov	r0, r3
 800d738:	f7fb fd61 	bl	80091fe <USBD_LL_Resume>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fb fdb9 	bl	80092d2 <USBD_LL_IsoOUTIncomplete>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	4611      	mov	r1, r2
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fb fd75 	bl	800926e <USBD_LL_IsoINIncomplete>
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fb fdcb 	bl	8009336 <USBD_LL_DevConnected>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fb fdc8 	bl	800934c <USBD_LL_DevDisconnected>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d13c      	bne.n	800d84e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7d4:	4a20      	ldr	r2, [pc, #128]	; (800d858 <USBD_LL_Init+0x94>)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a1e      	ldr	r2, [pc, #120]	; (800d858 <USBD_LL_Init+0x94>)
 800d7e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7e4:	4b1c      	ldr	r3, [pc, #112]	; (800d858 <USBD_LL_Init+0x94>)
 800d7e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d7ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <USBD_LL_Init+0x94>)
 800d7ee:	2206      	movs	r2, #6
 800d7f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7f2:	4b19      	ldr	r3, [pc, #100]	; (800d858 <USBD_LL_Init+0x94>)
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7f8:	4b17      	ldr	r3, [pc, #92]	; (800d858 <USBD_LL_Init+0x94>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7fe:	4b16      	ldr	r3, [pc, #88]	; (800d858 <USBD_LL_Init+0x94>)
 800d800:	2202      	movs	r2, #2
 800d802:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d804:	4b14      	ldr	r3, [pc, #80]	; (800d858 <USBD_LL_Init+0x94>)
 800d806:	2200      	movs	r2, #0
 800d808:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d80a:	4b13      	ldr	r3, [pc, #76]	; (800d858 <USBD_LL_Init+0x94>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d810:	4b11      	ldr	r3, [pc, #68]	; (800d858 <USBD_LL_Init+0x94>)
 800d812:	2200      	movs	r2, #0
 800d814:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d816:	4b10      	ldr	r3, [pc, #64]	; (800d858 <USBD_LL_Init+0x94>)
 800d818:	2200      	movs	r2, #0
 800d81a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d81c:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <USBD_LL_Init+0x94>)
 800d81e:	2200      	movs	r2, #0
 800d820:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d822:	480d      	ldr	r0, [pc, #52]	; (800d858 <USBD_LL_Init+0x94>)
 800d824:	f7f5 f8cb 	bl	80029be <HAL_PCD_Init>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d82e:	f7f3 fb55 	bl	8000edc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d832:	2180      	movs	r1, #128	; 0x80
 800d834:	4808      	ldr	r0, [pc, #32]	; (800d858 <USBD_LL_Init+0x94>)
 800d836:	f7f6 fb46 	bl	8003ec6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d83a:	2240      	movs	r2, #64	; 0x40
 800d83c:	2100      	movs	r1, #0
 800d83e:	4806      	ldr	r0, [pc, #24]	; (800d858 <USBD_LL_Init+0x94>)
 800d840:	f7f6 fafa 	bl	8003e38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d844:	2280      	movs	r2, #128	; 0x80
 800d846:	2101      	movs	r1, #1
 800d848:	4803      	ldr	r0, [pc, #12]	; (800d858 <USBD_LL_Init+0x94>)
 800d84a:	f7f6 faf5 	bl	8003e38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20006b44 	.word	0x20006b44

0800d85c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d872:	4618      	mov	r0, r3
 800d874:	f7f5 f9c7 	bl	8002c06 <HAL_PCD_Start>
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 f97e 	bl	800db80 <USBD_Get_USB_Status>
 800d884:	4603      	mov	r3, r0
 800d886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d888:	7bbb      	ldrb	r3, [r7, #14]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	4608      	mov	r0, r1
 800d89c:	4611      	mov	r1, r2
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	70fb      	strb	r3, [r7, #3]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	70bb      	strb	r3, [r7, #2]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d8ba:	78bb      	ldrb	r3, [r7, #2]
 800d8bc:	883a      	ldrh	r2, [r7, #0]
 800d8be:	78f9      	ldrb	r1, [r7, #3]
 800d8c0:	f7f5 feb4 	bl	800362c <HAL_PCD_EP_Open>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f958 	bl	800db80 <USBD_Get_USB_Status>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7f5 fefd 	bl	80036fc <HAL_PCD_EP_Close>
 800d902:	4603      	mov	r3, r0
 800d904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 f939 	bl	800db80 <USBD_Get_USB_Status>
 800d90e:	4603      	mov	r3, r0
 800d910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d912:	7bbb      	ldrb	r3, [r7, #14]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d936:	78fa      	ldrb	r2, [r7, #3]
 800d938:	4611      	mov	r1, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f5 ffd5 	bl	80038ea <HAL_PCD_EP_SetStall>
 800d940:	4603      	mov	r3, r0
 800d942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f91a 	bl	800db80 <USBD_Get_USB_Status>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d950:	7bbb      	ldrb	r3, [r7, #14]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d974:	78fa      	ldrb	r2, [r7, #3]
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f6 f81a 	bl	80039b2 <HAL_PCD_EP_ClrStall>
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f8fb 	bl	800db80 <USBD_Get_USB_Status>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da0b      	bge.n	800d9cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	440b      	add	r3, r1
 800d9c6:	333e      	adds	r3, #62	; 0x3e
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	e00b      	b.n	800d9e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9d2:	68f9      	ldr	r1, [r7, #12]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	4413      	add	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	440b      	add	r3, r1
 800d9de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d9e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da0a:	78fa      	ldrb	r2, [r7, #3]
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f7f5 fde7 	bl	80035e2 <HAL_PCD_SetAddress>
 800da14:	4603      	mov	r3, r0
 800da16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 f8b0 	bl	800db80 <USBD_Get_USB_Status>
 800da20:	4603      	mov	r3, r0
 800da22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da24:	7bbb      	ldrb	r3, [r7, #14]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b086      	sub	sp, #24
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
 800da3a:	460b      	mov	r3, r1
 800da3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da4c:	7af9      	ldrb	r1, [r7, #11]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	f7f5 ff00 	bl	8003856 <HAL_PCD_EP_Transmit>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 f88f 	bl	800db80 <USBD_Get_USB_Status>
 800da62:	4603      	mov	r3, r0
 800da64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da66:	7dbb      	ldrb	r3, [r7, #22]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	607a      	str	r2, [r7, #4]
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	460b      	mov	r3, r1
 800da7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da8e:	7af9      	ldrb	r1, [r7, #11]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	f7f5 fe7c 	bl	8003790 <HAL_PCD_EP_Receive>
 800da98:	4603      	mov	r3, r0
 800da9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f86e 	bl	800db80 <USBD_Get_USB_Status>
 800daa4:	4603      	mov	r3, r0
 800daa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	460b      	mov	r3, r1
 800dabc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	4611      	mov	r1, r2
 800dac8:	4618      	mov	r0, r3
 800daca:	f7f5 feac 	bl	8003826 <HAL_PCD_EP_GetRxCount>
 800dace:	4603      	mov	r3, r0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	460b      	mov	r3, r1
 800dae2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <HAL_PCDEx_LPM_Callback+0x18>
 800daea:	2b01      	cmp	r3, #1
 800daec:	d01f      	beq.n	800db2e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800daee:	e03b      	b.n	800db68 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a1b      	ldr	r3, [r3, #32]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800daf8:	f000 f83c 	bl	800db74 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dafc:	4b1c      	ldr	r3, [pc, #112]	; (800db70 <HAL_PCDEx_LPM_Callback+0x98>)
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	4a1b      	ldr	r2, [pc, #108]	; (800db70 <HAL_PCDEx_LPM_Callback+0x98>)
 800db02:	f023 0306 	bic.w	r3, r3, #6
 800db06:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	6812      	ldr	r2, [r2, #0]
 800db16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db1a:	f023 0301 	bic.w	r3, r3, #1
 800db1e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db26:	4618      	mov	r0, r3
 800db28:	f7fb fb69 	bl	80091fe <USBD_LL_Resume>
    break;
 800db2c:	e01c      	b.n	800db68 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	6812      	ldr	r2, [r2, #0]
 800db3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db40:	f043 0301 	orr.w	r3, r3, #1
 800db44:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fb fb40 	bl	80091d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d005      	beq.n	800db66 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db5a:	4b05      	ldr	r3, [pc, #20]	; (800db70 <HAL_PCDEx_LPM_Callback+0x98>)
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	4a04      	ldr	r2, [pc, #16]	; (800db70 <HAL_PCDEx_LPM_Callback+0x98>)
 800db60:	f043 0306 	orr.w	r3, r3, #6
 800db64:	6113      	str	r3, [r2, #16]
    break;
 800db66:	bf00      	nop
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	e000ed00 	.word	0xe000ed00

0800db74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db78:	f7f2 fdb8 	bl	80006ec <SystemClock_Config>
}
 800db7c:	bf00      	nop
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	2b03      	cmp	r3, #3
 800db92:	d817      	bhi.n	800dbc4 <USBD_Get_USB_Status+0x44>
 800db94:	a201      	add	r2, pc, #4	; (adr r2, 800db9c <USBD_Get_USB_Status+0x1c>)
 800db96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9a:	bf00      	nop
 800db9c:	0800dbad 	.word	0x0800dbad
 800dba0:	0800dbb3 	.word	0x0800dbb3
 800dba4:	0800dbb9 	.word	0x0800dbb9
 800dba8:	0800dbbf 	.word	0x0800dbbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb0:	e00b      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb6:	e008      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
    break;
 800dbbc:	e005      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc2:	e002      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc8:	bf00      	nop
  }
  return usb_status;
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <__errno>:
 800dbd8:	4b01      	ldr	r3, [pc, #4]	; (800dbe0 <__errno+0x8>)
 800dbda:	6818      	ldr	r0, [r3, #0]
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	20000110 	.word	0x20000110

0800dbe4 <__libc_init_array>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	4d0d      	ldr	r5, [pc, #52]	; (800dc1c <__libc_init_array+0x38>)
 800dbe8:	4c0d      	ldr	r4, [pc, #52]	; (800dc20 <__libc_init_array+0x3c>)
 800dbea:	1b64      	subs	r4, r4, r5
 800dbec:	10a4      	asrs	r4, r4, #2
 800dbee:	2600      	movs	r6, #0
 800dbf0:	42a6      	cmp	r6, r4
 800dbf2:	d109      	bne.n	800dc08 <__libc_init_array+0x24>
 800dbf4:	4d0b      	ldr	r5, [pc, #44]	; (800dc24 <__libc_init_array+0x40>)
 800dbf6:	4c0c      	ldr	r4, [pc, #48]	; (800dc28 <__libc_init_array+0x44>)
 800dbf8:	f000 f9a6 	bl	800df48 <_init>
 800dbfc:	1b64      	subs	r4, r4, r5
 800dbfe:	10a4      	asrs	r4, r4, #2
 800dc00:	2600      	movs	r6, #0
 800dc02:	42a6      	cmp	r6, r4
 800dc04:	d105      	bne.n	800dc12 <__libc_init_array+0x2e>
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0c:	4798      	blx	r3
 800dc0e:	3601      	adds	r6, #1
 800dc10:	e7ee      	b.n	800dbf0 <__libc_init_array+0xc>
 800dc12:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc16:	4798      	blx	r3
 800dc18:	3601      	adds	r6, #1
 800dc1a:	e7f2      	b.n	800dc02 <__libc_init_array+0x1e>
 800dc1c:	0800e138 	.word	0x0800e138
 800dc20:	0800e138 	.word	0x0800e138
 800dc24:	0800e138 	.word	0x0800e138
 800dc28:	0800e13c 	.word	0x0800e13c

0800dc2c <__retarget_lock_acquire_recursive>:
 800dc2c:	4770      	bx	lr

0800dc2e <__retarget_lock_release_recursive>:
 800dc2e:	4770      	bx	lr

0800dc30 <malloc>:
 800dc30:	4b02      	ldr	r3, [pc, #8]	; (800dc3c <malloc+0xc>)
 800dc32:	4601      	mov	r1, r0
 800dc34:	6818      	ldr	r0, [r3, #0]
 800dc36:	f000 b88d 	b.w	800dd54 <_malloc_r>
 800dc3a:	bf00      	nop
 800dc3c:	20000110 	.word	0x20000110

0800dc40 <free>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <free+0xc>)
 800dc42:	4601      	mov	r1, r0
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	f000 b819 	b.w	800dc7c <_free_r>
 800dc4a:	bf00      	nop
 800dc4c:	20000110 	.word	0x20000110

0800dc50 <memcpy>:
 800dc50:	440a      	add	r2, r1
 800dc52:	4291      	cmp	r1, r2
 800dc54:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc58:	d100      	bne.n	800dc5c <memcpy+0xc>
 800dc5a:	4770      	bx	lr
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc66:	4291      	cmp	r1, r2
 800dc68:	d1f9      	bne.n	800dc5e <memcpy+0xe>
 800dc6a:	bd10      	pop	{r4, pc}

0800dc6c <memset>:
 800dc6c:	4402      	add	r2, r0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d100      	bne.n	800dc76 <memset+0xa>
 800dc74:	4770      	bx	lr
 800dc76:	f803 1b01 	strb.w	r1, [r3], #1
 800dc7a:	e7f9      	b.n	800dc70 <memset+0x4>

0800dc7c <_free_r>:
 800dc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	d044      	beq.n	800dd0c <_free_r+0x90>
 800dc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc86:	9001      	str	r0, [sp, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc8e:	bfb8      	it	lt
 800dc90:	18e4      	addlt	r4, r4, r3
 800dc92:	f000 f94d 	bl	800df30 <__malloc_lock>
 800dc96:	4a1e      	ldr	r2, [pc, #120]	; (800dd10 <_free_r+0x94>)
 800dc98:	9801      	ldr	r0, [sp, #4]
 800dc9a:	6813      	ldr	r3, [r2, #0]
 800dc9c:	b933      	cbnz	r3, 800dcac <_free_r+0x30>
 800dc9e:	6063      	str	r3, [r4, #4]
 800dca0:	6014      	str	r4, [r2, #0]
 800dca2:	b003      	add	sp, #12
 800dca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dca8:	f000 b948 	b.w	800df3c <__malloc_unlock>
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	d908      	bls.n	800dcc2 <_free_r+0x46>
 800dcb0:	6825      	ldr	r5, [r4, #0]
 800dcb2:	1961      	adds	r1, r4, r5
 800dcb4:	428b      	cmp	r3, r1
 800dcb6:	bf01      	itttt	eq
 800dcb8:	6819      	ldreq	r1, [r3, #0]
 800dcba:	685b      	ldreq	r3, [r3, #4]
 800dcbc:	1949      	addeq	r1, r1, r5
 800dcbe:	6021      	streq	r1, [r4, #0]
 800dcc0:	e7ed      	b.n	800dc9e <_free_r+0x22>
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	b10b      	cbz	r3, 800dccc <_free_r+0x50>
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	d9fa      	bls.n	800dcc2 <_free_r+0x46>
 800dccc:	6811      	ldr	r1, [r2, #0]
 800dcce:	1855      	adds	r5, r2, r1
 800dcd0:	42a5      	cmp	r5, r4
 800dcd2:	d10b      	bne.n	800dcec <_free_r+0x70>
 800dcd4:	6824      	ldr	r4, [r4, #0]
 800dcd6:	4421      	add	r1, r4
 800dcd8:	1854      	adds	r4, r2, r1
 800dcda:	42a3      	cmp	r3, r4
 800dcdc:	6011      	str	r1, [r2, #0]
 800dcde:	d1e0      	bne.n	800dca2 <_free_r+0x26>
 800dce0:	681c      	ldr	r4, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	6053      	str	r3, [r2, #4]
 800dce6:	4421      	add	r1, r4
 800dce8:	6011      	str	r1, [r2, #0]
 800dcea:	e7da      	b.n	800dca2 <_free_r+0x26>
 800dcec:	d902      	bls.n	800dcf4 <_free_r+0x78>
 800dcee:	230c      	movs	r3, #12
 800dcf0:	6003      	str	r3, [r0, #0]
 800dcf2:	e7d6      	b.n	800dca2 <_free_r+0x26>
 800dcf4:	6825      	ldr	r5, [r4, #0]
 800dcf6:	1961      	adds	r1, r4, r5
 800dcf8:	428b      	cmp	r3, r1
 800dcfa:	bf04      	itt	eq
 800dcfc:	6819      	ldreq	r1, [r3, #0]
 800dcfe:	685b      	ldreq	r3, [r3, #4]
 800dd00:	6063      	str	r3, [r4, #4]
 800dd02:	bf04      	itt	eq
 800dd04:	1949      	addeq	r1, r1, r5
 800dd06:	6021      	streq	r1, [r4, #0]
 800dd08:	6054      	str	r4, [r2, #4]
 800dd0a:	e7ca      	b.n	800dca2 <_free_r+0x26>
 800dd0c:	b003      	add	sp, #12
 800dd0e:	bd30      	pop	{r4, r5, pc}
 800dd10:	20007050 	.word	0x20007050

0800dd14 <sbrk_aligned>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	4e0e      	ldr	r6, [pc, #56]	; (800dd50 <sbrk_aligned+0x3c>)
 800dd18:	460c      	mov	r4, r1
 800dd1a:	6831      	ldr	r1, [r6, #0]
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	b911      	cbnz	r1, 800dd26 <sbrk_aligned+0x12>
 800dd20:	f000 f8f6 	bl	800df10 <_sbrk_r>
 800dd24:	6030      	str	r0, [r6, #0]
 800dd26:	4621      	mov	r1, r4
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f000 f8f1 	bl	800df10 <_sbrk_r>
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	d00a      	beq.n	800dd48 <sbrk_aligned+0x34>
 800dd32:	1cc4      	adds	r4, r0, #3
 800dd34:	f024 0403 	bic.w	r4, r4, #3
 800dd38:	42a0      	cmp	r0, r4
 800dd3a:	d007      	beq.n	800dd4c <sbrk_aligned+0x38>
 800dd3c:	1a21      	subs	r1, r4, r0
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 f8e6 	bl	800df10 <_sbrk_r>
 800dd44:	3001      	adds	r0, #1
 800dd46:	d101      	bne.n	800dd4c <sbrk_aligned+0x38>
 800dd48:	f04f 34ff 	mov.w	r4, #4294967295
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	20007054 	.word	0x20007054

0800dd54 <_malloc_r>:
 800dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd58:	1ccd      	adds	r5, r1, #3
 800dd5a:	f025 0503 	bic.w	r5, r5, #3
 800dd5e:	3508      	adds	r5, #8
 800dd60:	2d0c      	cmp	r5, #12
 800dd62:	bf38      	it	cc
 800dd64:	250c      	movcc	r5, #12
 800dd66:	2d00      	cmp	r5, #0
 800dd68:	4607      	mov	r7, r0
 800dd6a:	db01      	blt.n	800dd70 <_malloc_r+0x1c>
 800dd6c:	42a9      	cmp	r1, r5
 800dd6e:	d905      	bls.n	800dd7c <_malloc_r+0x28>
 800dd70:	230c      	movs	r3, #12
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	2600      	movs	r6, #0
 800dd76:	4630      	mov	r0, r6
 800dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7c:	4e2e      	ldr	r6, [pc, #184]	; (800de38 <_malloc_r+0xe4>)
 800dd7e:	f000 f8d7 	bl	800df30 <__malloc_lock>
 800dd82:	6833      	ldr	r3, [r6, #0]
 800dd84:	461c      	mov	r4, r3
 800dd86:	bb34      	cbnz	r4, 800ddd6 <_malloc_r+0x82>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	f7ff ffc2 	bl	800dd14 <sbrk_aligned>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	4604      	mov	r4, r0
 800dd94:	d14d      	bne.n	800de32 <_malloc_r+0xde>
 800dd96:	6834      	ldr	r4, [r6, #0]
 800dd98:	4626      	mov	r6, r4
 800dd9a:	2e00      	cmp	r6, #0
 800dd9c:	d140      	bne.n	800de20 <_malloc_r+0xcc>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	4631      	mov	r1, r6
 800dda2:	4638      	mov	r0, r7
 800dda4:	eb04 0803 	add.w	r8, r4, r3
 800dda8:	f000 f8b2 	bl	800df10 <_sbrk_r>
 800ddac:	4580      	cmp	r8, r0
 800ddae:	d13a      	bne.n	800de26 <_malloc_r+0xd2>
 800ddb0:	6821      	ldr	r1, [r4, #0]
 800ddb2:	3503      	adds	r5, #3
 800ddb4:	1a6d      	subs	r5, r5, r1
 800ddb6:	f025 0503 	bic.w	r5, r5, #3
 800ddba:	3508      	adds	r5, #8
 800ddbc:	2d0c      	cmp	r5, #12
 800ddbe:	bf38      	it	cc
 800ddc0:	250c      	movcc	r5, #12
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	f7ff ffa5 	bl	800dd14 <sbrk_aligned>
 800ddca:	3001      	adds	r0, #1
 800ddcc:	d02b      	beq.n	800de26 <_malloc_r+0xd2>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	442b      	add	r3, r5
 800ddd2:	6023      	str	r3, [r4, #0]
 800ddd4:	e00e      	b.n	800ddf4 <_malloc_r+0xa0>
 800ddd6:	6822      	ldr	r2, [r4, #0]
 800ddd8:	1b52      	subs	r2, r2, r5
 800ddda:	d41e      	bmi.n	800de1a <_malloc_r+0xc6>
 800dddc:	2a0b      	cmp	r2, #11
 800ddde:	d916      	bls.n	800de0e <_malloc_r+0xba>
 800dde0:	1961      	adds	r1, r4, r5
 800dde2:	42a3      	cmp	r3, r4
 800dde4:	6025      	str	r5, [r4, #0]
 800dde6:	bf18      	it	ne
 800dde8:	6059      	strne	r1, [r3, #4]
 800ddea:	6863      	ldr	r3, [r4, #4]
 800ddec:	bf08      	it	eq
 800ddee:	6031      	streq	r1, [r6, #0]
 800ddf0:	5162      	str	r2, [r4, r5]
 800ddf2:	604b      	str	r3, [r1, #4]
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f104 060b 	add.w	r6, r4, #11
 800ddfa:	f000 f89f 	bl	800df3c <__malloc_unlock>
 800ddfe:	f026 0607 	bic.w	r6, r6, #7
 800de02:	1d23      	adds	r3, r4, #4
 800de04:	1af2      	subs	r2, r6, r3
 800de06:	d0b6      	beq.n	800dd76 <_malloc_r+0x22>
 800de08:	1b9b      	subs	r3, r3, r6
 800de0a:	50a3      	str	r3, [r4, r2]
 800de0c:	e7b3      	b.n	800dd76 <_malloc_r+0x22>
 800de0e:	6862      	ldr	r2, [r4, #4]
 800de10:	42a3      	cmp	r3, r4
 800de12:	bf0c      	ite	eq
 800de14:	6032      	streq	r2, [r6, #0]
 800de16:	605a      	strne	r2, [r3, #4]
 800de18:	e7ec      	b.n	800ddf4 <_malloc_r+0xa0>
 800de1a:	4623      	mov	r3, r4
 800de1c:	6864      	ldr	r4, [r4, #4]
 800de1e:	e7b2      	b.n	800dd86 <_malloc_r+0x32>
 800de20:	4634      	mov	r4, r6
 800de22:	6876      	ldr	r6, [r6, #4]
 800de24:	e7b9      	b.n	800dd9a <_malloc_r+0x46>
 800de26:	230c      	movs	r3, #12
 800de28:	603b      	str	r3, [r7, #0]
 800de2a:	4638      	mov	r0, r7
 800de2c:	f000 f886 	bl	800df3c <__malloc_unlock>
 800de30:	e7a1      	b.n	800dd76 <_malloc_r+0x22>
 800de32:	6025      	str	r5, [r4, #0]
 800de34:	e7de      	b.n	800ddf4 <_malloc_r+0xa0>
 800de36:	bf00      	nop
 800de38:	20007050 	.word	0x20007050

0800de3c <cleanup_glue>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	460c      	mov	r4, r1
 800de40:	6809      	ldr	r1, [r1, #0]
 800de42:	4605      	mov	r5, r0
 800de44:	b109      	cbz	r1, 800de4a <cleanup_glue+0xe>
 800de46:	f7ff fff9 	bl	800de3c <cleanup_glue>
 800de4a:	4621      	mov	r1, r4
 800de4c:	4628      	mov	r0, r5
 800de4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de52:	f7ff bf13 	b.w	800dc7c <_free_r>
	...

0800de58 <_reclaim_reent>:
 800de58:	4b2c      	ldr	r3, [pc, #176]	; (800df0c <_reclaim_reent+0xb4>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4283      	cmp	r3, r0
 800de5e:	b570      	push	{r4, r5, r6, lr}
 800de60:	4604      	mov	r4, r0
 800de62:	d051      	beq.n	800df08 <_reclaim_reent+0xb0>
 800de64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de66:	b143      	cbz	r3, 800de7a <_reclaim_reent+0x22>
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d14a      	bne.n	800df04 <_reclaim_reent+0xac>
 800de6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de70:	6819      	ldr	r1, [r3, #0]
 800de72:	b111      	cbz	r1, 800de7a <_reclaim_reent+0x22>
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff ff01 	bl	800dc7c <_free_r>
 800de7a:	6961      	ldr	r1, [r4, #20]
 800de7c:	b111      	cbz	r1, 800de84 <_reclaim_reent+0x2c>
 800de7e:	4620      	mov	r0, r4
 800de80:	f7ff fefc 	bl	800dc7c <_free_r>
 800de84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de86:	b111      	cbz	r1, 800de8e <_reclaim_reent+0x36>
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff fef7 	bl	800dc7c <_free_r>
 800de8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de90:	b111      	cbz	r1, 800de98 <_reclaim_reent+0x40>
 800de92:	4620      	mov	r0, r4
 800de94:	f7ff fef2 	bl	800dc7c <_free_r>
 800de98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de9a:	b111      	cbz	r1, 800dea2 <_reclaim_reent+0x4a>
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7ff feed 	bl	800dc7c <_free_r>
 800dea2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dea4:	b111      	cbz	r1, 800deac <_reclaim_reent+0x54>
 800dea6:	4620      	mov	r0, r4
 800dea8:	f7ff fee8 	bl	800dc7c <_free_r>
 800deac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800deae:	b111      	cbz	r1, 800deb6 <_reclaim_reent+0x5e>
 800deb0:	4620      	mov	r0, r4
 800deb2:	f7ff fee3 	bl	800dc7c <_free_r>
 800deb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800deb8:	b111      	cbz	r1, 800dec0 <_reclaim_reent+0x68>
 800deba:	4620      	mov	r0, r4
 800debc:	f7ff fede 	bl	800dc7c <_free_r>
 800dec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dec2:	b111      	cbz	r1, 800deca <_reclaim_reent+0x72>
 800dec4:	4620      	mov	r0, r4
 800dec6:	f7ff fed9 	bl	800dc7c <_free_r>
 800deca:	69a3      	ldr	r3, [r4, #24]
 800decc:	b1e3      	cbz	r3, 800df08 <_reclaim_reent+0xb0>
 800dece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ded0:	4620      	mov	r0, r4
 800ded2:	4798      	blx	r3
 800ded4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ded6:	b1b9      	cbz	r1, 800df08 <_reclaim_reent+0xb0>
 800ded8:	4620      	mov	r0, r4
 800deda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dede:	f7ff bfad 	b.w	800de3c <cleanup_glue>
 800dee2:	5949      	ldr	r1, [r1, r5]
 800dee4:	b941      	cbnz	r1, 800def8 <_reclaim_reent+0xa0>
 800dee6:	3504      	adds	r5, #4
 800dee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deea:	2d80      	cmp	r5, #128	; 0x80
 800deec:	68d9      	ldr	r1, [r3, #12]
 800deee:	d1f8      	bne.n	800dee2 <_reclaim_reent+0x8a>
 800def0:	4620      	mov	r0, r4
 800def2:	f7ff fec3 	bl	800dc7c <_free_r>
 800def6:	e7ba      	b.n	800de6e <_reclaim_reent+0x16>
 800def8:	680e      	ldr	r6, [r1, #0]
 800defa:	4620      	mov	r0, r4
 800defc:	f7ff febe 	bl	800dc7c <_free_r>
 800df00:	4631      	mov	r1, r6
 800df02:	e7ef      	b.n	800dee4 <_reclaim_reent+0x8c>
 800df04:	2500      	movs	r5, #0
 800df06:	e7ef      	b.n	800dee8 <_reclaim_reent+0x90>
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	bf00      	nop
 800df0c:	20000110 	.word	0x20000110

0800df10 <_sbrk_r>:
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4d06      	ldr	r5, [pc, #24]	; (800df2c <_sbrk_r+0x1c>)
 800df14:	2300      	movs	r3, #0
 800df16:	4604      	mov	r4, r0
 800df18:	4608      	mov	r0, r1
 800df1a:	602b      	str	r3, [r5, #0]
 800df1c:	f7f3 fbb2 	bl	8001684 <_sbrk>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d102      	bne.n	800df2a <_sbrk_r+0x1a>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	b103      	cbz	r3, 800df2a <_sbrk_r+0x1a>
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	20007058 	.word	0x20007058

0800df30 <__malloc_lock>:
 800df30:	4801      	ldr	r0, [pc, #4]	; (800df38 <__malloc_lock+0x8>)
 800df32:	f7ff be7b 	b.w	800dc2c <__retarget_lock_acquire_recursive>
 800df36:	bf00      	nop
 800df38:	2000704c 	.word	0x2000704c

0800df3c <__malloc_unlock>:
 800df3c:	4801      	ldr	r0, [pc, #4]	; (800df44 <__malloc_unlock+0x8>)
 800df3e:	f7ff be76 	b.w	800dc2e <__retarget_lock_release_recursive>
 800df42:	bf00      	nop
 800df44:	2000704c 	.word	0x2000704c

0800df48 <_init>:
 800df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4a:	bf00      	nop
 800df4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df4e:	bc08      	pop	{r3}
 800df50:	469e      	mov	lr, r3
 800df52:	4770      	bx	lr

0800df54 <_fini>:
 800df54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df56:	bf00      	nop
 800df58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df5a:	bc08      	pop	{r3}
 800df5c:	469e      	mov	lr, r3
 800df5e:	4770      	bx	lr
